var mrbc = function(Module) {
  Module['preRun'].push(function () {
    Module['FS'] = FS;
  });

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 77520;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([64,209,0,0,74,209,0,0,105,209,0,0,150,209,0,0,211,209,0,0,254,209,0,0,55,210,0,0,101,210,0,0,144,210,0,0,177,210,0,0,208,210,0,0,0,0,0,0,0,0,0,0,70,227,0,0,2,0,0,0,94,227,0,0,3,0,0,0,89,215,0,0,4,0,0,0,120,219,0,0,10,0,0,0,22,255,0,0,8,0,0,0,15,255,0,0,9,0,0,0,29,255,0,0,11,0,0,0,96,215,0,0,12,0,0,0,103,215,0,0,13,0,0,0,35,255,0,0,6,0,0,0,110,215,0,0,14,0,0,0,136,253,0,0,15,0,0,0,149,253,0,0,16,0,0,0,110,253,0,0,17,0,0,0,25,13,1,0,19,0,0,0,116,215,0,0,21,0,0,0,121,215,0,0,255,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,33,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,34,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,39,227,0,0,20,1,0,0,20,1,0,0,6,0,0,0,45,227,0,0,17,1,0,0,17,1,0,0,0,0,0,0,50,227,0,0,33,1,0,0,33,1,0,0,1,0,0,0,54,227,0,0,13,1,0,0,13,1,0,0,0,0,0,0,57,13,1,0,14,1,0,0,14,1,0,0,1,0,0,0,61,227,0,0,15,1,0,0,15,1,0,0,0,0,0,0,66,227,0,0,38,1,0,0,38,1,0,0,4,0,0,0,70,227,0,0,35,1,0,0,35,1,0,0,1,0,0,0,76,227,0,0,32,1,0,0,32,1,0,0,1,0,0,0,81,227,0,0,16,1,0,0,16,1,0,0,10,0,0,0,87,227,0,0,12,1,0,0,43,1,0,0,6,0,0,0,94,227,0,0,34,1,0,0,34,1,0,0,1,0,0,0,99,227,0,0,9,1,0,0,42,1,0,0,10,0,0,0,105,227,0,0,7,1,0,0,40,1,0,0,10,0,0,0,112,227,0,0,29,1,0,0,29,1,0,0,6,0,0,0,119,227,0,0,4,1,0,0,4,1,0,0,7,0,0,0,123,227,0,0,36,1,0,0,36,1,0,0,10,0,0,0,127,227,0,0,25,1,0,0,25,1,0,0,0,0,0,0,130,227,0,0,30,1,0,0,30,1,0,0,4,0,0,0,136,227,0,0,10,1,0,0,10,1,0,0,10,0,0,0,140,227,0,0,11,1,0,0,11,1,0,0,7,0,0,0,146,227,0,0,37,1,0,0,37,1,0,0,10,0,0,0,149,227,0,0,24,1,0,0,24,1,0,0,10,0,0,0,152,227,0,0,19,1,0,0,19,1,0,0,10,0,0,0,157,227,0,0,23,1,0,0,23,1,0,0,1,0,0,0,163,227,0,0,6,1,0,0,39,1,0,0,10,0,0,0,166,227,0,0,18,1,0,0,18,1,0,0,10,0,0,0,171,227,0,0,22,1,0,0,22,1,0,0,1,0,0,0,176,227,0,0,21,1,0,0,21,1,0,0,6,0,0,0,181,227,0,0,31,1,0,0,31,1,0,0,4,0,0,0,187,227,0,0,3,1,0,0,3,1,0,0,10,0,0,0,51,13,1,0,5,1,0,0,5,1,0,0,0,0,0,0,194,227,0,0,47,1,0,0,47,1,0,0,1,0,0,0,203,227,0,0,48,1,0,0,48,1,0,0,1,0,0,0,212,227,0,0,49,1,0,0,49,1,0,0,1,0,0,0,225,227,0,0,46,1,0,0,46,1,0,0,1,0,0,0,229,227,0,0,44,1,0,0,44,1,0,0,7,0,0,0,235,227,0,0,45,1,0,0,45,1,0,0,1,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,244,9,1,0,2,1,0,0,2,1,0,0,9,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,241,227,0,0,8,1,0,0,41,1,0,0,10,0,0,0,77,234,0,0,82,234,0,0,88,234,0,0,99,234,0,0,113,234,0,0,128,234,0,0,140,234,0,0,154,234,0,0,165,234,0,0,180,234,0,0,194,234,0,0,208,234,0,0,220,234,0,0,234,234,0,0,249,234,0,0,8,235,0,0,20,235,0,0,33,235,0,0,47,235,0,0,60,235,0,0,73,235,0,0,86,235,0,0,100,235,0,0,113,235,0,0,126,235,0,0,140,235,0,0,151,235,0,0,162,235,0,0,178,235,0,0,195,235,0,0,213,235,0,0,228,235,0,0,242,235,0,0,0,236,0,0,13,236,0,0,25,236,0,0,38,236,0,0,52,236,0,0,64,236,0,0,75,236,0,0,87,236,0,0,99,236,0,0,115,236,0,0,130,236,0,0,145,236,0,0,161,236,0,0,175,236,0,0,189,236,0,0,201,236,0,0,217,236,0,0,233,236,0,0,253,236,0,0,9,237,0,0,14,237,0,0,20,237,0,0,26,237,0,0,36,237,0,0,42,237,0,0,49,237,0,0,58,237,0,0,65,237,0,0,71,237,0,0,80,237,0,0,88,237,0,0,96,237,0,0,109,237,0,0,121,237,0,0,130,237,0,0,140,237,0,0,152,237,0,0,159,237,0,0,167,237,0,0,172,237,0,0,177,237,0,0,181,237,0,0,186,237,0,0,191,237,0,0,196,237,0,0,201,237,0,0,208,237,0,0,214,237,0,0,221,237,0,0,229,237,0,0,235,237,0,0,241,237,0,0,247,237,0,0,253,237,0,0,4,238,0,0,11,238,0,0,19,238,0,0,27,238,0,0,36,238,0,0,43,238,0,0,51,238,0,0,63,238,0,0,71,238,0,0,79,238,0,0,87,238,0,0,99,238,0,0,105,238,0,0,112,238,0,0,120,238,0,0,128,238,0,0,140,238,0,0,151,238,0,0,164,238,0,0,176,238,0,0,189,238,0,0,202,238,0,0,210,238,0,0,223,238,0,0,236,238,0,0,251,238,0,0,13,239,0,0,29,239,0,0,44,239,0,0,52,239,0,0,56,239,0,0,60,239,0,0,64,239,0,0,68,239,0,0,72,239,0,0,76,239,0,0,80,239,0,0,84,239,0,0,88,239,0,0,92,239,0,0,96,239,0,0,100,239,0,0,104,239,0,0,116,239,0,0,120,239,0,0,124,239,0,0,136,239,0,0,140,239,0,0,144,239,0,0,148,239,0,0,152,239,0,0,156,239,0,0,160,239,0,0,164,239,0,0,168,239,0,0,172,239,0,0,176,239,0,0,181,239,0,0,189,239,0,0,197,239,0,0,201,239,0,0,214,239,0,0,224,239,0,0,233,239,0,0,236,239,0,0,245,239,0,0,254,239,0,0,4,240,0,0,9,240,0,0,13,240,0,0,26,240,0,0,31,240,0,0,42,240,0,0,55,240,0,0,69,240,0,0,85,240,0,0,89,240,0,0,97,240,0,0,102,240,0,0,113,240,0,0,124,240,0,0,134,240,0,0,144,240,0,0,154,240,0,0,164,240,0,0,168,240,0,0,174,240,0,0,180,240,0,0,186,240,0,0,191,240,0,0,202,240,0,0,206,240,0,0,209,240,0,0,218,240,0,0,222,240,0,0,232,240,0,0,242,240,0,0,253,240,0,0,12,241,0,0,26,241,0,0,36,241,0,0,49,241,0,0,52,241,0,0,62,241,0,0,76,241,0,0,81,241,0,0,86,241,0,0,94,241,0,0,97,241,0,0,100,241,0,0,104,241,0,0,109,241,0,0,113,241,0,0,117,241,0,0,122,241,0,0,127,241,0,0,132,241,0,0,137,241,0,0,142,241,0,0,147,241,0,0,151,241,0,0,155,241,0,0,159,241,0,0,163,241,0,0,167,241,0,0,171,241,0,0,175,241,0,0,179,241,0,0,61,227,0,0,127,227,0,0,193,241,0,0,201,241,0,0,210,241,0,0,218,241,0,0,225,241,0,0,237,241,0,0,245,241,0,0,1,242,0,0,17,242,0,0,33,242,0,0,45,242,0,0,54,242,0,0,59,242,0,0,70,242,0,0,82,242,0,0,91,242,0,0,96,242,0,0,107,242,0,0,119,242,0,0,131,242,0,0,135,242,0,0,139,242,0,0,149,242,0,0,155,242,0,0,166,242,0,0,175,242,0,0,183,242,0,0,194,242,0,0,202,242,0,0,209,242,0,0,220,242,0,0,234,242,0,0,238,242,0,0,246,242,0,0,253,242,0,0,5,243,0,0,24,243,0,0,39,243,0,0,52,243,0,0,71,243,0,0,93,243,0,0,97,243,0,0,103,243,0,0,110,243,0,0,123,243,0,0,127,243,0,0,135,243,0,0,143,243,0,0,152,243,0,0,160,243,0,0,168,243,0,0,64,255,0,0,176,243,0,0,181,243,0,0,191,243,0,0,198,243,0,0,208,243,0,0,219,243,0,0,230,243,0,0,236,243,0,0,247,243,0,0,253,243,0,0,9,244,0,0,24,244,0,0,33,244,0,0,46,244,0,0,57,244,0,0,69,244,0,0,81,244,0,0,97,244,0,0,107,244,0,0,112,244,0,0,123,244,0,0,130,244,0,0,136,244,0,0,146,244,0,0,157,244,0,0,168,244,0,0,181,244,0,0,191,244,0,0,198,244,0,0,205,244,0,0,214,244,0,0,222,244,0,0,227,244,0,0,230,244,0,0,235,244,0,0,241,244,0,0,0,0,0,0,35,0,0,0,248,9,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,181,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,189,38,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,10,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,197,42,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,253,252,126,0,160,9,253,252,84,27,100,34,171,35,250,20,253,252,17,33,17,33,253,252,253,252,209,34,249,24,25,19,250,29,250,29,253,252,253,252,250,29,13,12,132,10,253,252,253,252,253,252,253,252,181,0,249,24,253,252,230,255,253,252,253,252,131,21,7,11,253,252,253,252,12,22,253,252,253,252,253,252,253,252,253,252,253,252,253,252,130,33,130,33,90,0,194,16,215,255,107,30,77,31,9,26,253,252,233,23,115,2,98,3,105,3,115,3,193,1,253,252,235,0,243,33,130,33,253,252,246,0,253,252,185,4,253,252,123,1,253,252,253,252,101,0,37,0,253,252,36,0,62,35,253,252,117,0,117,11,7,0,87,0,13,0,66,0,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,14,0,92,0,253,252,49,0,51,0,253,252,253,252,253,252,253,252,253,252,31,0,53,0,141,0,133,1,144,1,17,33,75,1,52,17,115,1,253,252,175,0,253,252,213,0,253,252,253,252,51,0,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,45,0,74,0,83,0,100,0,253,252,253,252,253,252,253,252,253,252,253,252,129,0,187,0,253,252,204,0,253,252,214,0,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,13,0,162,13,26,1,123,1,109,0,20,1,139,1,25,0,48,1,50,0,109,0,17,33,17,33,86,1,253,252,253,252,167,1,121,1,54,0,95,0,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,113,24,253,252,253,252,19,1,253,252,253,252,253,252,246,0,151,1,253,252,253,252,43,1,130,33,130,33,130,33,130,33,253,252,117,11,110,1,253,252,253,252,68,1,70,1,253,252,253,252,253,252,167,18,253,252,250,29,250,29,253,252,253,252,139,19,17,33,253,252,253,252,79,1,166,17,253,252,26,2,146,1,106,1,54,28,194,16,83,1,246,0,185,4,72,1,103,1,253,252,17,33,72,1,89,1,94,0,106,0,253,252,110,1,100,1,106,0,253,252,186,1,24,36,99,1,39,2,133,2,137,2,246,2,253,252,253,252,253,252,253,252,169,3,253,252,253,252,253,252,253,252,253,252,253,252,125,1,44,3,253,252,253,252,179,3,253,252,187,3,253,252,201,3,253,252,78,2,174,1,178,1,253,252,253,252,253,252,253,252,253,19,17,33,17,33,17,33,17,33,54,28,17,33,17,33,253,252,253,252,190,31,253,252,194,16,118,26,113,1,190,31,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,130,33,235,8,250,29,47,37,253,252,253,252,251,40,253,252,253,252,253,252,243,33,243,33,253,252,156,1,253,252,123,1,253,252,9,3,253,252,253,252,253,252,253,252,253,252,128,37,250,29,209,37,162,13,17,33,253,252,253,252,245,1,250,1,67,0,253,252,49,14,249,1,130,33,34,38,250,29,115,38,130,33,130,33,79,15,55,0,55,0,103,0,196,38,250,29,21,39,253,252,204,1,253,252,125,1,151,1,47,32,2,2,253,252,253,252,253,252,253,252,130,33,227,26,253,252,253,252,220,30,253,252,72,1,136,1,253,252,253,252,72,1,253,252,162,1,163,1,253,252,71,0,253,252,253,252,249,24,193,15,184,1,34,38,115,38,130,33,185,4,72,1,253,252,253,252,110,20,171,1,123,1,253,252,253,252,197,27,253,252,253,252,77,31,253,252,253,252,253,252,9,3,36,0,24,36,253,252,24,36,102,39,250,29,183,39,194,1,253,252,253,252,253,252,253,252,132,4,253,252,253,252,253,252,253,252,50,4,253,252,253,252,253,252,253,252,253,252,182,1,130,33,253,252,190,1,23,2,195,1,28,2,253,252,253,252,14,2,166,17,253,252,253,252,253,252,125,1,253,252,181,1,253,252,253,252,253,252,253,252,253,252,253,252,253,252,130,33,130,33,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,33,0,130,33,253,252,199,1,202,1,253,252,72,1,24,36,203,1,253,252,253,252,253,252,226,1,111,10,253,252,253,252,146,1,240,36,240,36,240,36,240,36,40,4,40,4,15,41,249,12,240,36,240,36,248,11,248,11,85,2,85,2,119,12,40,4,40,4,224,2,224,2,158,2,52,0,52,0,146,1,146,1,146,1,144,12,239,22,19,13,96,23,253,252,53,0,253,252,72,1,208,1,253,252,44,2,253,252,253,252,138,11,253,252,253,252,160,8,33,0,33,0,253,252,236,9,253,252,117,11,253,252,253,252,246,0,17,33,162,13,176,1,229,0,253,252,53,0,72,1,53,0,77,2,71,0,148,3,129,25,253,252,160,32,104,2,253,252,150,0,253,252,242,10,125,22,1,10,72,1,244,0,13,1,104,2,253,252,253,252,253,252,253,252,139,0,152,0,72,1,107,0,123,0,17,33,249,24,253,252,125,1,122,2,69,0,253,252,253,252,130,33,110,1,253,252,167,28,70,1,253,252,253,252,253,252,253,252,227,26,220,30,253,252,253,252,4,2,253,252,117,11,18,1,185,4,72,1,106,0,113,1,253,252,176,1,229,0,72,1,66,1,71,1,253,252,253,252,132,4,231,1,253,252,8,2,72,1,253,252,72,1,61,0,50,4,253,252,253,252,253,252,50,4,253,252,253,252,142,2,253,252,253,252,253,252,13,2,166,17,253,252,253,252,253,252,146,1,146,1,253,252,68,3,53,18,253,252,253,252,21,2,24,29,253,252,253,252,24,36,243,33,130,33,49,2,243,33,243,33,253,252,156,1,32,2,50,2,243,33,243,33,253,252,253,252,156,1,253,252,66,0,101,0,53,18,166,17,130,33,33,0,253,252,246,0,149,2,253,252,253,252,253,252,50,4,162,13,246,0,253,252,199,1,253,252,93,2,253,252,80,16,155,2,253,252,17,33,161,2,253,252,130,33,130,33,21,1,130,33,130,33,179,2,53,18,53,18,130,0,55,0,253,252,253,252,137,29,192,14,253,252,130,33,253,252,253,252,62,2,253,252,253,252,253,252,200,0,72,1,182,2,65,2,146,4,253,252,63,2,66,2,53,18,166,17,253,252,253,252,67,2,68,2,253,252,81,2,253,252,82,2,81,2,253,252,86,2,72,1,103,2,102,2,133,36,253,252,110,2,112,2,253,252,200,2,130,33,117,2,253,252,117,11,130,33,253,252,117,11,253,252,117,11,253,252,253,252,243,33,253,252,117,11,253,252,117,11,253,252,253,252,253,252,237,2,121,2,117,11,166,17,162,13,253,252,253,252,72,1,243,2,253,252,148,3,242,36,109,0,253,252,253,252,53,18,253,252,253,252,109,0,253,252,130,33,253,252,248,2,249,2,253,252,253,252,138,0,253,252,220,30,253,252,129,2,182,2,46,2,253,252,253,252,236,2,4,3,145,2,50,4,253,252,142,2,253,252,142,2,253,252,142,2,253,252,253,252,253,252,167,2,253,252,50,4,253,252,238,2,22,3,50,4,253,252,142,2,253,252,253,252,159,2,117,11,253,252,117,11,253,252,253,252,164,2,32,3,253,252,253,252,162,13,250,2,253,252,40,3,133,2,137,2,162,13,253,252,49,14,253,252,253,252,53,18,253,252,253,252,253,252,182,2,129,2,182,2,171,2,253,252,237,0,253,252,253,252,253,252,253,252,81,2,175,2,81,2,81,2,253,252,177,2,178,2,253,252,8,40,81,2,253,252,181,2,81,2,253,252,253,252,33,3,9,3,89,40,250,29,170,40,250,1,150,0,49,3,129,2,182,2,236,2,253,252,253,252,142,2,253,252,253,252,253,252,50,4,253,252,142,2,253,252,183,2,185,2,253,252,142,2,253,252,253,252,253,252,82,0,229,0,72,1,119,0,121,0,253,252,253,252,253,252,129,2,253,252,81,2,81,2,188,2,81,2,81,2,128,0,253,252,253,252,142,2,253,252,253,252,253,252,81,2,253,252,2,0,170,1,27,0,16,0,17,0,62,0,83,0,20,0,132,1,248,0,15,0,7,0,36,1,28,0,14,0,5,0,6,0,80,1,76,0,150,1,36,1,16,0,17,0,13,0,4,0,20,0,208,0,48,0,28,0,82,2,108,1,159,1,65,0,202,1,22,0,24,1,52,0,31,1,110,0,28,1,107,1,90,2,109,1,80,1,97,2,112,1,16,0,17,0,50,0,51,0,20,0,100,2,130,1,159,2,107,2,50,0,51,0,210,1,54,0,2,0,65,0,4,0,52,0,15,0,131,1,155,2,144,1,65,0,244,1,248,2,167,1,67,2,68,2,170,1,250,2,153,1,143,1,26,0,145,1,25,0,50,0,174,2,27,0,174,2,219,1,16,0,76,0,154,1,74,3,142,2,29,0,93,3,26,0,16,0,17,0,88,0,13,1,20,0,16,0,140,0,22,0,88,0,143,0,48,1,90,0,9,0,10,0,133,0,37,0,38,0,98,0,15,0,79,0,65,0,107,1,90,0,109,1,105,0,15,2,112,1,25,0,188,1,10,0,71,0,48,0,16,0,0,0,15,0,25,0,28,0,116,0,119,0,25,0,88,0,212,1,16,0,129,1,16,0,131,1,90,0,90,0,116,0,135,0,136,0,16,0,55,0,213,1,70,3,25,0,136,0,143,1,137,0,145,1,116,0,121,0,25,0,18,0,90,0,20,0,152,1,77,1,154,1,88,0,165,3,25,0,116,0,116,0,17,0,18,0,108,0,139,0,88,0,158,3,137,0,11,3,88,0,98,0,25,0,126,0,127,0,128,0,136,0,90,0,116,0,133,0,155,2,137,0,111,0,88,0,159,2,139,0,137,0,139,0,113,2,187,1,188,1,179,1,142,0,143,0,133,0,224,1,121,2,125,3,123,3,174,2,109,0,137,0,203,2,224,1,77,2,136,0,142,0,143,0,158,1,143,0,128,2,210,1,88,0,211,1,136,0,213,1,139,0,135,0,136,0,142,0,143,0,26,0,77,3,233,0,31,1,226,0,137,0,137,0,116,0,157,3,233,0,136,0,143,0,15,1,252,0,137,0,254,0,255,0,137,0,137,0,247,0,248,0,81,3,13,1,143,0,202,0,142,0,143,0,255,0,89,3,89,3,208,0,252,0,93,3,254,0,137,0,142,0,143,0,142,0,143,0,136,0,15,1,137,0,147,2,148,2,142,0,143,0,65,3,15,1,75,1,88,0,137,0,15,2,139,0,80,1,139,0,233,0,252,0,189,2,254,0,182,2,127,2,128,2,88,0,137,0,196,2,139,0,88,0,58,0,59,0,120,0,2,0,31,1,4,0,5,0,6,0,88,0,88,0,9,0,10,0,209,0,210,0,13,0,89,2,15,0,16,0,17,0,77,1,129,1,20,0,116,1,117,1,88,0,78,1,15,1,139,0,209,0,210,0,136,0,143,0,12,1,86,2,23,1,24,1,252,0,165,3,254,0,28,1,133,0,90,0,135,0,136,0,55,0,2,1,7,1,136,0,65,1,48,0,211,2,78,1,13,1,52,0,25,0,135,0,136,0,136,0,108,1,25,0,17,1,2,1,3,1,62,0,21,1,233,2,90,0,116,0,75,1,108,1,77,3,135,0,136,0,80,1,90,0,139,0,248,2,76,0,250,2,20,1,130,1,137,0,89,3,183,2,109,1,65,1,93,3,143,0,178,3,51,0,70,1,130,1,116,0,55,0,144,1,142,0,143,0,116,0,137,1,116,0,116,0,90,0,122,2,153,1,55,0,144,1,131,1,149,1,150,1,25,0,109,0,137,2,111,0,208,1,153,1,210,1,77,1,67,3,137,0,137,0,145,1,174,2,26,0,37,0,38,0,66,1,67,1,68,1,69,1,154,1,71,1,72,1,184,1,26,0,20,0,167,1,58,0,59,0,43,3,178,1,179,1,66,1,67,1,68,1,69,1,116,0,185,1,184,1,142,0,210,2,116,0,182,2,115,2,160,1,70,3,71,3,65,3,210,2,165,3,90,0,149,1,150,1,212,1,188,1,91,0,26,0,137,0,199,1,137,0,140,0,137,0,137,0,143,0,212,1,140,0,133,0,15,2,143,0,143,0,140,1,71,0,208,1,116,0,210,1,88,0,116,0,140,0,148,1,213,1,67,3,88,0,230,1,133,1,141,0,233,1,88,0,235,1,134,0,110,0,137,0,199,0,113,0,114,0,108,3,55,0,185,1,137,0,123,3,71,0,125,3,209,0,210,0,71,0,137,0,194,1,172,1,97,0,61,0,88,0,176,1,64,0,65,0,242,2,15,0,181,1,8,2,13,0,88,0,16,0,133,0,63,0,135,0,136,0,39,2,191,1,139,0,15,0,135,0,136,0,140,0,133,0,157,3,135,0,136,0,15,2,51,0,139,0,53,0,54,0,55,0,56,0,57,2,49,3,252,0,110,0,254,0,255,0,113,0,114,0,2,1,3,1,90,0,137,0,137,0,7,1,135,0,136,0,111,0,112,0,12,1,13,1,137,0,133,0,116,0,135,0,136,0,82,2,20,1,139,0,240,1,63,2,134,0,137,0,66,2,67,2,68,2,55,2,116,0,31,1,75,2,137,0,97,2,151,3,51,0,63,2,137,0,63,0,66,2,51,0,137,0,83,2,107,2,137,0,137,0,152,3,116,0,89,2,90,2,137,0,92,2,87,2,15,0,81,2,14,2,83,2,111,2,51,0,100,2,53,0,54,0,55,0,56,0,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,111,2,137,0,75,1,88,0,77,1,78,1,142,2,80,1,89,2,122,2,198,2,18,0,75,2,182,2,51,3,183,2,88,0,153,2,186,2,187,2,57,3,127,2,55,2,90,0,192,2,193,2,15,0,134,0,61,0,90,0,63,2,64,0,65,0,66,2,137,0,108,1,134,0,141,3,174,2,56,0,57,0,58,0,59,0,116,1,117,1,71,0,150,3,137,0,152,3,116,0,135,0,136,0,115,2,15,0,85,2,116,0,118,0,130,1,14,0,132,1,133,1,76,2,141,0,135,0,136,0,15,0,62,0,140,1,64,0,65,0,137,0,144,1,137,0,91,0,137,2,148,1,137,0,76,2,111,0,112,0,153,1,182,2,51,0,15,0,53,0,54,0,55,0,56,0,137,0,205,2,203,2,137,0,140,0,137,0,137,0,110,2,212,2,142,0,124,0,125,0,126,0,127,0,128,0,216,2,15,0,136,2,219,2,137,0,137,0,134,0,88,0,110,2,185,1,121,0,88,0,111,0,112,0,233,2,71,0,31,3,151,2,194,1,51,0,92,0,53,0,54,0,55,0,56,0,137,0,242,2,99,0,11,3,167,2,86,0,87,0,208,1,137,0,210,1,137,0,212,1,175,2,15,0,205,2,137,0,134,0,2,3,3,3,15,0,5,3,212,2,7,3,8,3,15,0,15,0,123,0,137,0,13,3,135,0,136,0,16,3,17,3,135,0,136,0,92,0,15,0,200,2,201,2,240,1,134,0,14,3,233,2,124,0,125,0,126,0,127,0,128,0,51,0,121,0,53,0,54,0,55,0,56,0,55,0,218,2,71,0,137,0,51,0,134,0,53,0,54,0,55,0,56,0,15,0,15,0,55,0,230,2,231,2,137,0,15,2,86,0,87,0,137,0,237,2,137,0,137,0,50,3,221,2,137,0,65,3,15,0,2,0,139,0,4,0,139,0,137,0,185,1,247,2,9,0,10,0,254,2,255,2,6,0,221,2,15,0,16,0,17,0,66,2,92,0,20,0,233,1,13,0,235,1,159,2,98,0,99,0,162,2,123,0,124,0,125,0,126,0,127,0,128,0,88,0,154,3,51,3,147,2,199,2,174,2,128,3,158,3,57,3,62,0,153,3,64,0,65,0,88,0,48,0,246,1,123,0,76,2,77,2,126,0,7,0,42,3,51,0,155,2,53,0,54,0,55,0,56,0,62,0,46,3,89,3,88,0,139,0,54,3,133,3,134,3,135,3,136,3,49,3,138,3,139,3,151,3,198,0,142,3,255,255,144,3,145,3,135,0,136,0,255,255,255,255,110,2,151,3,255,255,153,3,154,3,178,3,255,255,111,0,112,0,135,0,136,0,255,255,92,0,63,0,64,0,65,0,152,3,255,255,98,0,99,0,63,0,64,0,65,0,255,255,109,0,255,255,111,0,135,0,136,0,255,255,63,0,64,0,65,0,255,255,255,255,255,255,186,3,187,3,188,3,189,3,190,3,255,255,114,3,123,0,116,3,255,255,126,0,119,3,198,3,255,255,255,255,51,0,255,255,53,0,54,0,55,0,56,0,167,2,255,255,255,255,255,255,111,0,112,0,143,0,255,255,175,2,255,255,255,255,111,0,112,0,255,255,255,255,182,2,183,2,255,255,255,255,186,2,187,2,111,0,112,0,255,255,255,255,192,2,193,2,63,0,64,0,65,0,255,255,255,255,255,255,200,2,201,2,92,0,255,255,63,0,64,0,65,0,255,255,98,0,99,0,255,255,211,2,63,0,64,0,65,0,255,255,16,0,17,0,218,2,255,255,20,0,221,2,255,255,77,3,199,0,79,3,63,0,64,0,65,0,83,3,230,2,231,2,255,255,123,0,209,0,210,0,126,0,237,2,255,255,93,3,255,255,95,3,111,0,112,0,255,255,45,0,46,0,255,255,255,255,139,0,50,0,51,0,111,0,112,0,254,2,255,2,41,1,255,255,255,255,255,255,111,0,112,0,62,0,63,0,49,1,255,255,255,255,52,1,255,255,54,1,14,3,56,1,255,255,58,1,111,0,112,0,255,255,252,0,255,255,254,0,255,0,255,255,255,255,2,1,3,1,255,255,255,255,31,3,7,1,255,255,255,255,255,255,255,255,12,1,13,1,255,255,255,255,255,255,42,3,43,3,255,255,20,1,255,255,255,255,255,255,255,255,50,3,161,3,255,255,255,255,54,3,165,3,255,255,167,3,255,255,255,255,255,255,255,255,172,3,51,0,255,255,53,0,54,0,55,0,56,0,255,255,255,255,2,3,3,3,71,0,5,3,255,255,7,3,8,3,255,255,255,255,255,255,255,255,13,3,255,255,194,3,16,3,17,3,255,255,86,0,87,0,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,255,255,255,255,75,1,255,255,77,1,255,255,92,0,80,1,255,255,255,255,108,3,255,255,98,0,99,0,255,255,255,255,114,3,255,255,116,3,255,255,255,255,119,3,255,255,255,255,255,255,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,108,1,255,255,123,0,255,255,255,255,126,0,255,255,255,255,116,1,117,1,255,255,255,255,51,0,255,255,53,0,54,0,55,0,56,0,151,3,255,255,255,255,255,255,130,1,255,255,132,1,133,1,51,0,255,255,53,0,54,0,55,0,56,0,140,1,255,255,255,255,255,255,144,1,255,255,255,255,255,255,148,1,255,255,255,255,255,255,255,255,153,1,255,255,255,255,255,255,238,0,239,0,240,0,241,0,92,0,40,0,41,0,42,0,43,0,44,0,98,0,255,255,255,255,255,255,252,0,255,255,254,0,255,0,92,0,255,255,133,3,134,3,135,3,136,3,98,0,138,3,139,3,255,255,185,1,142,3,255,255,144,3,145,3,255,255,255,255,255,255,255,255,194,1,255,255,255,255,255,255,2,0,255,255,4,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,13,0,255,255,255,255,212,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,186,3,187,3,188,3,189,3,190,3,255,255,255,255,255,255,255,255,255,255,240,1,255,255,198,3,255,255,48,0,255,255,255,255,255,255,255,255,255,255,75,1,255,255,255,255,255,255,255,255,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,255,255,108,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,1,117,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,130,1,255,255,111,0,255,255,255,255,2,0,255,255,4,0,255,255,255,255,255,255,255,255,142,1,255,255,144,1,255,255,146,1,147,1,255,255,255,255,255,255,255,255,255,255,153,1,255,255,255,255,255,255,76,2,77,2,255,255,160,1,255,255,255,255,255,255,255,255,255,255,166,1,167,1,255,255,255,255,170,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,189,1,255,255,110,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,1,255,255,255,255,202,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,1,255,255,255,255,255,255,255,255,255,255,255,255,51,0,199,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,0,231,1,4,0,5,0,6,0,7,0,255,255,255,255,255,255,255,255,255,255,13,0,255,255,255,255,111,0,255,255,255,255,255,255,167,2,255,255,255,255,255,255,255,255,255,255,254,1,255,1,175,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,183,2,9,2,255,255,186,2,187,2,255,255,255,255,255,255,255,255,192,2,193,2,255,255,48,0,255,255,255,255,255,255,52,0,200,2,201,2,255,255,7,1,255,255,255,255,255,255,255,255,12,1,13,1,255,255,211,2,255,255,255,255,255,255,255,255,255,255,255,255,218,2,255,255,255,255,221,2,255,255,76,0,255,255,255,255,255,255,255,255,255,255,255,255,230,2,231,2,255,255,255,255,255,255,255,255,255,255,237,2,2,0,255,255,4,0,5,0,6,0,255,255,255,255,255,255,255,255,255,255,255,255,13,0,255,255,199,0,255,255,255,255,254,2,255,2,255,255,255,255,111,0,255,255,255,255,65,1,255,255,255,255,89,2,255,255,70,1,255,255,255,255,255,255,255,255,255,255,255,255,77,1,255,255,255,255,80,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,255,255,255,255,31,3,52,0,255,255,255,255,255,255,255,255,118,2,255,255,255,255,121,2,255,255,42,3,43,3,255,255,255,255,127,2,128,2,255,255,255,255,255,255,255,255,255,255,255,255,54,3,255,255,76,0,255,255,255,255,7,1,255,255,255,255,255,255,255,255,12,1,13,1,255,255,255,255,255,255,238,0,239,0,240,0,132,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,148,1,255,255,199,0,111,0,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,255,255,183,2,184,2,255,255,186,2,187,2,255,255,108,3,255,255,255,255,192,2,193,2,255,255,114,3,255,255,116,3,65,1,255,255,119,3,255,255,202,2,70,1,255,255,255,255,185,1,255,255,255,255,255,255,77,1,255,255,255,255,255,255,255,255,194,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,224,2,225,2,255,255,227,2,228,2,255,255,255,255,255,255,151,3,255,255,255,255,7,1,236,2,255,255,255,255,239,2,12,1,13,1,255,255,75,1,255,255,255,255,255,255,255,255,80,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,199,0,240,1,255,255,255,255,255,255,132,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,1,255,255,255,255,20,3,255,255,255,255,255,255,24,3,148,1,255,255,255,255,255,255,255,255,255,255,31,3,255,255,255,255,255,255,255,255,255,255,65,1,255,255,255,255,255,255,255,255,70,1,255,255,255,255,255,255,255,255,255,255,255,255,77,1,78,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,59,3,255,255,255,255,185,1,255,255,255,255,255,255,255,255,67,3,7,1,255,255,255,255,194,1,160,1,12,1,13,1,255,255,255,255,255,255,166,1,167,1,255,255,255,255,170,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,255,255,255,255,255,255,255,255,255,255,77,2,255,255,255,255,255,255,255,255,255,255,132,1,255,255,255,255,255,255,255,255,255,255,255,255,199,1,140,1,255,255,202,1,255,255,255,255,240,1,255,255,255,255,148,1,255,255,255,255,255,255,255,255,255,255,65,1,255,255,255,255,255,255,255,255,70,1,255,255,255,255,255,255,255,255,255,255,255,255,77,1,78,1,255,255,255,255,255,255,231,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,3,255,255,255,255,255,255,255,255,255,255,185,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,194,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,9,2,255,255,255,255,208,1,255,255,210,1,255,255,255,255,255,255,255,255,255,255,167,2,255,255,255,255,255,255,255,255,132,1,255,255,255,255,175,2,255,255,255,255,255,255,255,255,140,1,255,255,255,255,183,2,255,255,255,255,255,255,255,255,148,1,77,2,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,200,2,201,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,211,2,255,255,255,255,255,255,255,255,255,255,255,255,218,2,255,255,255,255,255,255,15,2,255,255,255,255,185,1,255,255,255,255,255,255,255,255,230,2,231,2,255,255,255,255,194,1,255,255,89,2,237,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,208,1,255,255,210,1,255,255,255,255,255,255,254,2,255,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,118,2,255,255,255,255,121,2,255,255,255,255,255,255,255,255,255,255,127,2,128,2,255,255,255,255,255,255,167,2,240,1,255,255,255,255,255,255,77,2,255,255,255,255,175,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,42,3,43,3,255,255,255,255,255,255,255,255,255,255,255,255,50,3,255,255,255,255,255,255,54,3,15,2,200,2,201,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,211,2,255,255,255,255,179,2,255,255,255,255,255,255,218,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,2,231,2,255,255,255,255,255,255,255,255,255,255,237,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,108,3,255,255,254,2,255,2,255,255,255,255,114,3,255,255,116,3,77,2,167,2,119,3,255,255,255,255,255,255,255,255,255,255,255,255,175,2,236,2,255,255,255,255,239,2,255,255,255,255,182,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,200,2,201,2,255,255,42,3,43,3,255,255,0,0,255,255,255,255,255,255,255,255,211,2,255,255,255,255,255,255,54,3,20,3,255,255,218,2,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,255,255,230,2,231,2,26,0,27,0,255,255,255,255,255,255,237,2,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,254,2,255,2,167,2,255,255,255,255,255,255,255,255,255,255,255,255,67,3,175,2,255,255,255,255,255,255,255,255,108,3,14,3,182,2,255,255,255,255,255,255,114,3,255,255,116,3,255,255,255,255,119,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,200,2,201,2,255,255,255,255,255,255,88,0,255,255,255,255,255,255,42,3,43,3,211,2,255,255,255,255,255,255,255,255,255,255,50,3,218,2,255,255,255,255,54,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,2,231,2,255,255,255,255,255,255,255,255,255,255,237,2,255,255,255,255,255,255,255,255,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,133,0,134,0,255,255,136,0,254,2,255,2,139,0,140,0,255,255,142,0,143,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,14,3,255,255,80,0,81,0,255,255,108,3,84,0,85,0,86,0,87,0,255,255,114,3,255,255,116,3,255,255,255,255,119,3,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,42,3,43,3,255,255,255,255,255,255,255,255,255,255,255,255,50,3,255,255,255,255,255,255,54,3,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,108,3,255,255,255,255,255,255,255,255,255,255,114,3,255,255,116,3,0,0,1,0,119,3,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,255,255,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,0,0,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,44,0,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,129,0,130,0,131,0,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,142,0,143,0,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,71,0,72], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,91,0,255,255,255,255,255,255,255,255,117,0,97,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,108,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,255,255,134,0,135,0,136,0,137,0,255,255,255,255,140,0,141,0,142,0,143,0,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,44,0,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,117,0,97,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,137,0,117,0,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,133,0,134,0,135,0,136,0,137,0,255,255,139,0,140,0,141,0,142,0,143,0,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,44,0,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,117,0,97,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,108,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,255,255,134,0,135,0,136,0,137,0,255,255,255,255,140,0,141,0,142,0,143,0,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,117,0,97,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,117,0,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,133,0,134,0,135,0,136,0,137,0,255,255,139,0,140,0,141,0,142,0,143,0,13,0,14,0,15,0,16,0,17,0,18,0,255,255,20,0,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,117,0,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,255,255,134,0,135,0,136,0,137,0,255,255,139,0,140,0,141,0,142,0,143,0,13,0,14,0,15,0,255,255,17,0,18,0,255,255,20,0,255,255,255,255,255,255,255,255,255,255,26,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,117,0,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,143,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,0,0,255,255,133,0,134,0,135,0,136,0,137,0,255,255,255,255,140,0,255,255,142,0,143,0,13,0,14,0,15,0,255,255,17,0,18,0,255,255,20,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,255,255,80,0,81,0,255,255,255,255,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,134,0,135,0,136,0,137,0,255,255,255,255,140,0,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,255,255,255,255,18,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,255,255,17,0,18,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,255,255,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,255,255,255,255,18,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,134,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,14,0,15,0,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,140,0,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,140,0,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,134,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,142,0,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,143,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,142,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,139,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,133,0,255,255,255,255,255,255,255,255,255,255,139,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,133,0,21,0,22,0,23,0,24,0,255,255,139,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,90,0,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,116,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,129,0,130,0,131,0,255,255,19,0,255,255,21,0,22,0,23,0,24,0,139,0,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,139,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,129,0,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,137,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,137,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,110,0,255,255,255,255,113,0,114,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,110,0,255,255,255,255,113,0,114,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,110,0,255,255,255,255,113,0,114,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,110,0,255,255,255,255,113,0,114,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,110,0,255,255,255,255,113,0,114,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,129,0,130,0,131,0,19,0,255,255,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,0,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,19,0,129,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,255,255,255,255,86,0,87,0,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,51,0,52,0,255,255,255,255,55,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,255,255,129,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,51,0,52,0,255,255,255,255,55,0,255,255,138,0,139,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,98,0,255,255,80,0,81,0,255,255,255,255,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,255,255,130,0,131,0,255,255,255,255,255,255,255,255,255,255,255,255,138,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,99,0,123,2,3,1,242,0,242,0,61,1,115,1,242,0,84,2,171,1,235,0,194,0,226,1,5,1,230,0,115,0,115,0,18,2,79,1,104,2,237,1,248,0,248,0,115,0,100,0,248,0,148,1,18,1,230,0,207,2,57,2,114,2,65,1,123,2,0,1,203,1,32,1,208,1,124,1,205,1,55,2,219,2,63,2,23,2,226,2,66,2,247,0,247,0,25,1,29,1,247,0,229,2,82,2,6,3,232,2,24,1,28,1,139,2,42,1,67,0,235,0,67,0,115,0,236,0,83,2,1,3,97,2,64,1,168,2,69,3,120,2,200,2,201,2,120,2,72,3,107,2,55,2,113,1,63,2,162,255,23,1,12,3,101,2,14,3,152,2,139,1,115,0,83,2,130,3,246,2,254,2,143,3,113,1,245,0,250,0,188,254,191,1,251,0,159,255,237,254,1,1,110,1,237,254,244,1,49,254,201,0,201,0,7,1,71,1,72,1,118,1,201,0,173,2,236,0,53,2,49,254,61,2,0,1,181,2,61,2,155,255,83,2,208,0,81,1,14,1,139,1,3,0,233,0,156,255,73,1,162,255,118,1,160,255,46,254,142,2,160,255,53,2,158,255,61,2,117,1,147,1,162,255,188,254,188,254,161,255,11,1,83,2,124,3,158,255,111,1,53,2,170,255,61,2,75,1,174,2,161,255,218,2,189,1,160,1,53,2,14,2,61,2,47,254,143,3,159,255,155,255,155,255,221,2,218,2,255,2,252,0,45,254,130,3,76,1,87,3,107,1,119,1,157,255,104,1,105,1,106,1,46,254,116,1,156,255,114,1,3,3,163,255,14,1,44,254,7,3,255,0,170,255,255,0,168,2,53,2,61,2,171,1,231,0,232,0,114,1,153,2,168,2,156,3,72,3,17,3,121,1,236,2,42,3,237,1,206,2,47,254,231,0,232,0,113,2,232,0,123,2,208,1,42,254,53,2,45,254,61,2,237,253,108,1,109,1,159,255,159,255,119,254,6,3,235,0,207,1,42,1,199,1,163,255,80,1,184,3,159,1,44,254,232,0,194,1,242,0,164,255,242,0,242,0,202,1,168,255,169,1,169,1,1,3,18,1,232,0,236,0,231,0,232,0,180,1,14,3,1,3,236,0,248,0,14,3,248,0,166,255,160,255,160,255,158,255,158,255,42,254,235,0,169,255,152,2,249,2,161,255,161,255,120,3,193,1,10,2,43,254,167,255,208,1,237,253,19,2,2,1,236,0,247,0,29,3,247,0,22,3,120,2,120,2,119,254,165,255,36,3,236,253,54,254,59,1,60,1,127,1,81,0,115,0,81,0,116,0,116,0,129,1,50,254,204,0,204,0,201,0,201,0,214,0,215,2,204,0,204,0,204,0,18,1,80,2,204,0,69,2,71,2,234,254,16,2,236,0,2,1,149,1,150,1,43,254,232,0,190,1,237,1,201,1,201,1,172,1,14,3,175,1,201,1,119,254,227,2,119,254,119,254,138,1,182,1,186,1,54,254,0,2,81,0,47,3,115,0,14,1,33,1,168,255,130,1,131,1,50,254,242,0,166,255,195,1,181,1,183,1,204,0,197,1,63,3,228,2,160,255,12,2,180,1,134,3,234,254,234,254,12,2,59,3,236,253,152,2,33,1,152,2,196,1,242,0,158,3,139,3,18,2,62,2,67,0,144,3,232,0,191,3,122,1,5,2,180,1,158,255,123,1,242,0,231,0,232,0,189,255,91,2,142,1,161,255,146,1,241,2,242,0,151,1,180,1,62,2,103,2,103,2,155,1,204,0,245,2,81,0,138,2,180,1,207,1,14,1,123,2,175,255,157,1,62,2,18,3,240,253,71,1,72,1,201,0,201,0,201,0,201,0,62,2,6,2,7,2,130,2,239,253,160,1,122,2,125,1,126,1,105,3,169,1,169,1,1,2,2,2,3,2,4,2,168,255,99,0,230,0,162,1,46,3,166,255,208,1,237,2,115,2,152,2,126,3,121,3,237,1,188,3,189,1,236,0,236,0,242,0,62,2,166,1,233,253,168,255,137,2,167,1,168,255,170,1,166,255,168,255,180,1,166,255,185,1,207,1,166,255,232,0,92,2,81,1,115,0,190,255,115,0,54,254,156,255,192,1,100,2,62,2,120,2,143,1,157,2,85,2,198,1,157,2,50,254,157,2,204,1,241,1,210,1,81,0,242,1,243,1,148,3,206,1,67,0,164,255,152,2,254,1,152,2,204,0,204,0,255,1,17,2,135,2,124,2,73,2,57,1,152,1,126,2,45,1,46,1,241,2,88,2,129,2,177,2,89,2,233,253,93,2,240,253,238,1,54,254,54,254,185,2,134,2,240,253,116,2,144,1,145,1,125,2,239,253,152,2,50,254,50,254,115,0,146,2,239,253,215,1,216,1,217,1,218,1,190,2,237,1,204,0,169,2,204,0,204,0,242,1,243,1,204,0,204,0,192,2,127,2,128,2,81,0,153,1,154,1,47,1,48,1,81,0,81,0,175,255,233,253,145,2,233,253,233,253,190,2,204,0,237,253,166,2,197,2,132,2,155,2,197,2,177,2,177,2,188,2,160,255,33,1,204,2,159,2,190,2,178,3,161,2,194,2,162,2,165,2,194,2,164,2,3,255,197,2,190,2,179,2,182,2,83,2,183,2,217,2,220,2,168,255,220,2,213,2,208,2,188,2,180,2,194,2,234,2,146,2,220,2,215,1,216,1,217,1,218,1,81,0,204,0,204,0,204,0,204,0,81,0,204,0,204,0,230,0,248,2,204,0,187,1,81,0,33,1,190,2,204,0,12,2,169,1,37,3,218,2,236,0,207,1,114,3,19,2,211,1,253,2,25,3,27,3,116,3,242,2,189,2,193,2,32,3,34,3,235,2,243,2,253,1,31,3,196,2,45,1,46,1,199,2,250,2,204,0,9,3,53,2,253,2,52,1,54,1,56,1,58,1,204,0,204,0,81,1,53,2,2,255,61,2,158,255,144,1,188,1,236,0,45,3,209,2,161,255,24,3,204,0,54,3,81,0,204,0,201,0,30,3,212,1,213,1,58,3,44,1,81,0,45,1,46,1,166,255,204,0,125,3,50,3,201,1,81,0,169,255,205,2,47,1,48,1,204,0,115,0,146,2,60,3,215,1,216,1,217,1,218,1,67,3,44,3,177,2,70,3,73,3,77,3,79,3,201,0,48,3,74,3,102,1,103,1,104,1,105,1,106,1,52,3,97,3,244,2,56,3,81,3,83,3,86,3,48,254,233,2,81,0,88,3,244,254,47,1,48,1,103,2,81,1,100,3,251,2,81,0,146,2,219,1,215,1,216,1,217,1,218,1,89,3,169,1,221,1,253,2,10,3,94,1,95,1,33,1,93,3,33,1,95,3,204,0,19,3,102,3,236,0,1,255,103,3,157,2,157,2,107,3,157,2,236,0,157,2,157,2,117,3,118,3,222,1,123,3,157,2,48,254,48,254,157,2,157,2,244,254,244,254,147,2,131,3,39,3,40,3,81,0,132,3,115,0,236,0,102,1,103,1,104,1,105,1,106,1,127,3,137,3,215,1,216,1,217,1,218,1,140,3,53,3,81,1,0,255,214,1,146,3,215,1,216,1,217,1,218,1,147,3,175,3,149,3,61,3,62,3,157,3,33,1,94,1,95,1,161,3,65,3,165,3,167,3,115,0,201,0,172,3,220,2,183,3,98,0,237,253,98,0,236,253,194,3,131,2,68,3,98,0,98,0,75,3,76,3,120,0,57,3,98,0,98,0,98,0,198,2,219,1,98,0,160,2,212,0,163,2,5,3,220,1,221,1,8,3,101,1,102,1,103,1,104,1,105,1,106,1,233,254,182,3,236,0,247,2,38,3,13,3,159,3,185,3,236,0,248,1,181,3,45,1,46,1,141,3,98,0,170,2,222,1,204,0,81,0,223,1,197,0,104,3,214,1,2,3,215,1,216,1,217,1,218,1,98,0,106,3,138,3,150,3,224,1,115,3,157,2,157,2,157,2,157,2,108,3,157,2,157,2,242,0,135,1,157,2,0,0,157,2,157,2,233,254,233,254,0,0,0,0,204,0,180,1,0,0,91,2,220,2,190,2,0,0,47,1,48,1,130,1,131,1,0,0,219,1,51,1,45,1,46,1,62,2,0,0,220,1,221,1,53,1,45,1,46,1,0,0,98,0,0,0,98,0,151,3,152,3,0,0,55,1,45,1,46,1,0,0,0,0,0,0,157,2,157,2,157,2,157,2,157,2,0,0,153,3,222,1,154,3,0,0,223,1,155,3,157,2,0,0,0,0,214,1,0,0,215,1,216,1,217,1,218,1,81,0,0,0,0,0,0,0,47,1,48,1,232,0,0,0,81,0,0,0,0,0,47,1,48,1,0,0,0,0,33,1,204,0,0,0,0,0,204,0,204,0,47,1,48,1,0,0,0,0,204,0,204,0,238,1,45,1,46,1,0,0,0,0,0,0,81,0,81,0,219,1,0,0,250,1,45,1,46,1,0,0,220,1,221,1,0,0,81,0,251,1,45,1,46,1,0,0,243,0,243,0,81,0,0,0,243,0,204,0,0,0,133,3,98,0,135,3,252,1,45,1,46,1,136,3,81,0,81,0,0,0,222,1,98,0,98,0,223,1,81,0,0,0,142,3,0,0,145,3,47,1,48,1,0,0,8,1,10,1,0,0,0,0,210,2,243,0,243,0,47,1,48,1,81,0,81,0,239,1,0,0,0,0,0,0,47,1,48,1,62,1,63,1,249,1,0,0,0,0,249,1,0,0,249,1,92,3,249,1,0,0,249,1,47,1,48,1,0,0,98,0,0,0,98,0,98,0,0,0,0,0,98,0,98,0,0,0,0,0,204,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,81,0,81,0,0,0,98,0,0,0,0,0,0,0,0,0,111,3,186,3,0,0,0,0,81,0,187,3,0,0,189,3,0,0,0,0,0,0,0,0,190,3,214,1,0,0,215,1,216,1,217,1,218,1,0,0,0,0,78,3,80,3,81,1,82,3,0,0,84,3,85,3,0,0,0,0,0,0,0,0,90,3,0,0,198,3,94,3,96,3,0,0,94,1,95,1,98,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,0,0,0,0,98,0,0,0,98,0,0,0,219,1,98,0,0,0,0,0,81,0,0,0,220,1,221,1,0,0,0,0,81,0,0,0,81,0,0,0,0,0,81,0,0,0,0,0,0,0,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,98,0,0,0,222,1,0,0,0,0,223,1,0,0,0,0,98,0,98,0,0,0,0,0,146,2,0,0,215,1,216,1,217,1,218,1,204,0,0,0,0,0,0,0,98,0,0,0,98,0,98,0,146,2,0,0,215,1,216,1,217,1,218,1,98,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,243,0,243,0,243,0,62,1,147,2,66,1,67,1,68,1,69,1,70,1,148,2,0,0,0,0,0,0,243,0,0,0,243,0,243,0,147,2,0,0,160,3,162,3,163,3,164,3,71,3,166,3,168,3,0,0,98,0,171,3,0,0,173,3,174,3,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,78,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,3,193,3,195,3,196,3,197,3,0,0,0,0,0,0,0,0,0,0,98,0,0,0,199,3,0,0,78,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,21,2,24,2,25,2,26,2,27,2,28,2,29,2,30,2,31,2,32,2,33,2,34,2,35,2,36,2,37,2,38,2,39,2,40,2,41,2,42,2,43,2,44,2,45,2,46,2,47,2,48,2,49,2,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,2,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,78,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,94,2,0,0,243,0,0,0,70,2,72,2,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,98,0,98,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,2,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,243,0,94,0,117,0,117,0,117,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,0,0,95,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,171,2,172,2,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,243,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,94,0,0,0,0,0,0,0,34,1,98,0,98,0,0,0,78,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,98,0,97,0,0,0,97,0,118,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,217,0,0,0,95,0,0,0,0,0,98,0,98,0,0,0,0,0,94,0,0,0,0,0,78,0,0,0,0,0,243,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,20,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,98,0,35,1,0,0,0,0,0,0,0,0,243,0,0,0,0,0,243,0,0,0,98,0,98,0,0,0,0,0,243,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,35,1,0,0,0,0,95,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,163,1,164,1,165,1,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,94,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,94,2,23,3,0,0,26,3,28,3,0,0,98,0,0,0,0,0,33,3,35,3,0,0,98,0,0,0,98,0,95,0,0,0,98,0,0,0,41,3,95,0,0,0,0,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,3,28,3,0,0,33,3,35,3,0,0,0,0,0,0,98,0,0,0,0,0,94,0,243,0,0,0,0,0,243,0,94,0,94,0,0,0,11,2,0,0,0,0,0,0,0,0,22,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,97,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,243,0,0,0,0,0,0,0,99,3,95,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,95,0,0,0,0,0,0,0,0,0,243,0,97,0,0,0,0,0,95,0,22,2,97,0,97,0,0,0,0,0,0,0,117,2,119,2,0,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,119,2,94,0,0,0,26,1,0,0,0,0,95,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,35,1,0,0,0,0,0,0,158,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,2,0,0,0,0,34,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,20,2,0,0,0,0,0,0,0,0,97,0,95,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,34,1,0,0,0,0,97,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,97,0,0,0,214,2,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,35,1,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,2,0,0,0,0,240,2,0,0,0,0,0,0,0,0,0,0,119,2,26,1,0,0,0,0,0,0,95,0,97,0,0,0,0,0,0,0,94,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,110,3,0,0,0,0,0,0,78,0,35,1,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,21,3,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,95,0,95,0,0,0,0,0,78,0,0,0,78,0,97,0,94,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,64,3,0,0,0,0,66,3,0,0,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,94,0,0,0,95,0,95,0,0,0,213,253,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,95,0,98,3,0,0,94,0,213,253,213,253,213,253,213,253,213,253,213,253,0,0,213,253,0,0,0,0,0,0,94,0,94], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([213,253,213,253,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,0,0,213,253,213,253,213,253,213,253,213,253,0,0,0,0,0,0,94,0,94,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,97,0,0,0,0,0,0,0,0,0,95,0,117,0,35,1,0,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,213,253,0,0,0,0,0,0,94,0,94,0,97,0,0,0,0,0,0,0,0,0,0,0,112,3,97,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,50,2,51,2,0,0,0,0,52,2,0,0,0,0,213,253,213,253,0,0,213,253,97,0,97,0,255,0,213,253,0,0,213,253,213,253,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,118,0,0,0,173,0,174,0,0,0,94,0,175,0,176,0,177,0,178,0,0,0,94,0,0,0,94,0,0,0,0,0,94,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,113,3,0,0,0,0,0,0,97,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,213,253,4,0,97,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,234,254,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,234,254,234,254,234,254,234,254,234,254,234,254,0,0,234,254,0,0,0,0,202,2,0,0,0,0,0,0,234,254,234,254,234,254,0,0,0,0,61,0,62,0,63,0,0,0,0,0,234,254,234,254,0,0,234,254,234,254,234,254,234,254,234,254,213,253,213,253,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,0,0,0,0,234,254,234,254,234,254,0,0,225,2,234,254,0,0,0,0,0,0,0,0,96,1,234,254,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,234,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,0,0,0,0,120,254,0,0,0,0,234,254,234,254,234,254,234,254,0,0,0,0,234,254,234,254,234,254,234,254,120,254,120,254,120,254,120,254,120,254,120,254,0,0,120,254,0,0,0,0,184,2,0,0,0,0,120,254,120,254,120,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,254,120,254,0,0,120,254,120,254,120,254,120,254,120,254,0,0,0,0,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,0,0,0,0,120,254,120,254,120,254,0,0,0,0,120,254,0,0,0,0,0,0,0,0,96,1,120,254,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,255,120,254,0,0,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,120,254,0,0,0,0,243,254,0,0,120,254,120,254,120,254,120,254,120,254,0,0,255,0,120,254,120,254,120,254,120,254,243,254,243,254,243,254,243,254,243,254,243,254,0,0,243,254,0,0,0,0,184,2,0,0,0,0,0,0,243,254,243,254,243,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,254,243,254,0,0,243,254,243,254,243,254,243,254,243,254,0,0,0,0,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,0,0,0,0,243,254,243,254,243,254,0,0,0,0,243,254,0,0,0,0,0,0,0,0,96,1,243,254,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,243,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,243,254,0,0,0,0,213,253,0,0,0,0,243,254,243,254,243,254,243,254,0,0,0,0,243,254,243,254,243,254,243,254,213,253,213,253,213,253,213,253,213,253,213,253,0,0,213,253,0,0,0,0,0,0,0,0,0,0,213,253,213,253,213,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,0,0,213,253,213,253,213,253,213,253,213,253,0,0,0,0,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,0,0,0,0,213,253,213,253,213,253,0,0,0,0,213,253,0,0,0,0,0,0,0,0,96,1,213,253,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,0,0,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,213,253,0,0,0,0,227,254,0,0,213,253,213,253,213,253,213,253,213,253,0,0,255,0,213,253,213,253,213,253,213,253,227,254,227,254,227,254,227,254,227,254,227,254,0,0,227,254,0,0,0,0,0,0,0,0,0,0,0,0,227,254,227,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,254,227,254,0,0,227,254,227,254,227,254,227,254,227,254,0,0,0,0,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,212,253,212,253,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,0,0,0,0,227,254,227,254,227,254,0,0,0,0,227,254,0,0,0,0,0,0,0,0,0,0,227,254,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,254,0,0,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,227,254,0,0,0,0,233,253,0,0,0,0,227,254,227,254,227,254,227,254,0,0,252,0,227,254,227,254,227,254,227,254,233,253,233,253,233,253,0,0,233,253,233,253,0,0,233,253,0,0,0,0,0,0,0,0,0,0,233,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,253,233,253,0,0,233,253,233,253,233,253,233,253,233,253,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,0,0,0,0,233,253,233,253,233,253,0,0,186,2,0,0,96,1,0,0,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,233,253,232,0,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,233,253,0,0,0,0,234,254,0,0,233,253,233,253,233,253,233,253,167,255,0,0,0,0,233,253,0,0,233,253,233,253,234,254,234,254,234,254,0,0,234,254,234,254,0,0,234,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,254,234,254,0,0,234,254,234,254,234,254,234,254,234,254,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,0,0,90,1,91,1,0,0,0,0,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,0,0,0,0,234,254,234,254,234,254,0,0,187,2,0,0,0,0,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,234,254,0,0,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,234,254,0,0,0,0,0,0,0,0,0,0,234,254,234,254,234,254,165,255,0,0,0,0,234,254,0,0,234,254,234,254,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,213,253,213,253,213,253,0,0,0,0,213,253,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,213,253,0,0,213,253,213,253,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,213,253,0,0,0,0,213,253,15,0,213,253,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,213,253,0,0,0,0,213,253,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,213,253,213,253,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,213,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,213,253,213,253,0,0,0,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,213,253,213,253,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,13,1,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,213,253,0,0,213,253,213,253,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,213,253,0,0,213,253,213,253,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,213,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,253,213,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,213,253,0,0,0,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,213,253,213,253,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,61,0,241,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,232,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,231,0,232,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,61,0,62,0,63,0,0,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,232,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,0,0,61,0,62,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,162,1,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,1,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,35,0,36,0,163,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,193,0,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,253,0,0,240,253,240,253,240,253,240,253,0,0,240,253,0,0,0,0,0,0,240,253,240,253,240,253,240,253,240,253,240,253,240,253,0,0,0,0,240,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,253,240,253,0,0,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,0,0,0,0,240,253,0,0,0,0,240,253,240,253,0,0,240,253,240,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,253,0,0,0,0,240,253,240,253,0,0,240,253,240,253,0,0,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,240,253,0,0,0,0,240,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,253,240,253,240,253,0,0,240,253,0,0,0,0,0,0,0,0,0,0,240,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,253,0,0,239,253,239,253,239,253,239,253,0,0,239,253,0,0,0,0,0,0,239,253,239,253,239,253,239,253,239,253,239,253,239,253,0,0,0,0,239,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,253,239,253,0,0,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,0,0,0,0,239,253,0,0,0,0,239,253,239,253,0,0,239,253,239,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,253,0,0,0,0,239,253,239,253,0,0,239,253,239,253,0,0,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,239,253,0,0,0,0,239,253,0,0,0,0,0,0,0,0,0,0,0,0,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,0,0,0,0,0,0,0,0,239,253,239,253,239,253,237,253,239,253,237,253,237,253,237,253,237,253,0,0,239,253,0,0,0,0,0,0,237,253,237,253,237,253,237,253,237,253,237,253,237,253,0,0,0,0,237,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,253,237,253,0,0,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,0,0,0,0,237,253,0,0,0,0,237,253,237,253,0,0,237,253,237,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,253,224,2,0,0,237,253,237,253,0,0,237,253,237,253,0,0,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,237,253,0,0,0,0,237,253,0,0,0,0,0,0,0,0,0,0,0,0,159,255,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,0,0,0,0,0,0,237,253,237,253,237,253,0,0,235,253,0,0,235,253,235,253,235,253,235,253,237,253,0,0,0,0,0,0,0,0,235,253,235,253,235,253,235,253,235,253,235,253,235,253,0,0,0,0,235,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,253,235,253,0,0,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,0,0,0,0,235,253,0,0,0,0,235,253,235,253,0,0,235,253,235,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,253,0,0,0,0,235,253,235,253,0,0,235,253,235,253,0,0,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,235,253,0,0,0,0,235,253,0,0,0,0,0,0,0,0,0,0,0,0,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,0,0,0,0,0,0,0,0,235,253,235,253,235,253,234,253,0,0,234,253,234,253,234,253,234,253,0,0,235,253,0,0,0,0,0,0,234,253,234,253,234,253,234,253,234,253,234,253,234,253,0,0,0,0,234,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,253,234,253,0,0,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,0,0,0,0,234,253,0,0,0,0,234,253,234,253,0,0,234,253,234,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,253,0,0,0,0,234,253,234,253,0,0,234,253,234,253,0,0,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,234,253,0,0,0,0,234,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,253,234,253,234,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,253,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,218,0,219,0,220,0,221,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,222,0,223,0,160,0,224,0,162,0,37,1,38,1,225,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,218,0,219,0,220,0,221,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,222,0,223,0,160,0,224,0,162,0,37,1,38,1,225,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,218,0,219,0,220,0,221,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,222,0,223,0,160,0,224,0,162,0,0,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,218,0,219,0,220,0,221,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,222,0,223,0,160,0,224,0,162,0,0,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,31,1,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,15,2,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,241,1,0,0,0,0,242,1,243,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,241,1,0,0,0,0,242,1,243,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,62,0,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,241,1,0,0,0,0,242,1,243,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,20,3,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,241,1,0,0,0,0,242,1,243,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,241,1,0,0,0,0,242,1,243,1,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,9,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,9,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,61,0,241,0,63,0,15,0,0,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,77,1,49,0,0,0,50,0,51,0,0,0,78,1,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,77,1,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,112,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,81,1,212,253,212,253,212,253,212,253,86,1,87,1,0,0,0,0,212,253,212,253,0,0,0,0,0,0,0,0,94,1,95,1,0,0,0,0,0,0,109,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,58,2,59,2,0,0,0,0,60,2,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,0,0,0,0,112,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,78,2,51,2,0,0,0,0,79,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,64,2,59,2,0,0,0,0,65,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,95,2,51,2,0,0,0,0,96,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,98,2,59,2,0,0,0,0,99,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,105,2,51,2,0,0,0,0,106,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,108,2,59,2,0,0,0,0,109,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,140,2,51,2,0,0,0,0,141,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,143,2,59,2,0,0,0,0,144,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,169,3,51,2,0,0,0,0,170,3,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,176,3,51,2,0,0,0,0,177,3,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,179,3,59,2,0,0,0,0,180,3,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,64,2,59,2,0,0,0,0,65,2,0,0,192,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,81,1,82,1,83,1,84,1,85,1,86,1,87,1,179,0,0,0,90,1,91,1,0,0,0,0,0,0,0,0,94,1,95,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,14,1,0,0,0,0,40,1,43,1,0,0,0,0,28,2,64,1,65,1,66,1,67,1,26,1,248,0,248,0,210,1,209,1,211,1,212,1,30,2,0,0,10,0,0,0,214,1,213,1,202,1,18,2,204,1,203,1,206,1,205,1,198,1,199,1,158,1,159,1,215,1,216,1,0,0,0,0,0,0,0,0,16,1,43,2,43,2,78,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,173,1,0,0,0,0,0,0,3,0,28,2,6,0,9,0,27,0,39,0,42,0,50,0,49,0,0,0,66,0,0,0,70,0,80,0,0,0,47,0,229,0,0,0,51,0,33,1,6,1,7,1,8,1,9,1,10,1,156,1,155,1,187,1,157,1,154,1,208,1,0,0,11,1,12,1,248,0,5,0,8,0,64,1,65,1,26,1,29,1,136,1,0,0,102,0,103,0,0,0,0,0,0,0,0,0,105,0,217,1,68,1,0,0,208,1,12,1,0,0,56,1,156,0,166,0,157,0,153,0,182,0,183,0,184,0,185,0,164,0,179,0,172,0,162,0,161,0,177,0,160,0,159,0,155,0,180,0,154,0,167,0,171,0,173,0,165,0,158,0,174,0,181,0,176,0,175,0,168,0,178,0,163,0,152,0,170,0,169,0,151,0,149,0,150,0,146,0,147,0,148,0,107,0,109,0,108,0,141,0,142,0,138,0,120,0,121,0,122,0,129,0,126,0,128,0,123,0,124,0,143,0,144,0,130,0,131,0,135,0,125,0,127,0,117,0,118,0,119,0,132,0,133,0,134,0,136,0,137,0,139,0,140,0,145,0,8,2,58,1,110,0,111,0,7,2,0,0,0,0,0,0,48,0,0,0,0,0,0,0,208,1,0,0,12,1,0,0,0,0,0,0,0,0,79,1,78,1,0,0,0,0,208,1,12,1,175,0,168,0,178,0,163,0,146,0,147,0,107,0,108,0,0,0,112,0,114,0,20,0,113,0,37,2,39,2,28,2,0,0,41,2,38,2,29,2,0,0,0,0,0,0,0,0,243,0,230,0,253,0,64,0,247,0,43,2,43,2,12,2,65,0,63,0,30,2,62,0,0,0,43,2,135,1,61,0,30,2,0,0,31,2,18,0,0,0,0,0,207,0,0,0,208,0,23,1,0,0,0,0,0,0,28,2,15,0,30,2,68,0,14,0,0,0,30,2,0,0,34,2,34,2,231,0,0,0,0,0,34,2,10,2,0,0,0,0,76,0,0,0,86,0,93,0,236,1,192,1,191,1,193,1,194,1,0,0,190,1,189,1,171,1,165,1,164,1,167,1,0,0,0,0,162,1,185,1,0,0,196,1,0,0,160,1,0,0,169,1,0,0,200,1,201,1,46,0,222,0,223,0,4,0,29,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,1,125,1,0,0,82,0,0,0,74,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,2,0,0,27,2,26,2,0,0,140,1,138,1,34,1,0,0,0,0,129,1,55,0,32,1,53,1,102,0,103,0,104,0,200,1,201,1,218,1,51,1,0,0,43,2,0,0,0,0,0,0,59,1,61,1,0,0,43,2,23,1,70,1,0,0,69,1,0,0,0,0,43,2,0,0,0,0,0,0,0,0,0,0,0,0,23,1,0,0,43,2,0,0,48,1,0,0,115,0,174,1,0,0,0,0,0,0,42,2,15,2,254,0,250,0,0,0,0,0,244,0,252,0,0,0,245,0,30,2,0,0,28,1,249,0,30,2,239,0,43,2,43,2,238,0,30,2,31,1,45,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,30,2,21,1,13,0,29,2,67,0,17,1,20,1,24,1,36,2,232,0,35,2,36,2,234,0,25,1,11,2,92,0,84,0,0,0,79,0,0,0,0,0,43,2,0,0,242,1,239,1,238,1,237,1,240,1,0,0,255,1,3,2,2,2,254,1,236,1,36,1,120,1,241,1,243,1,245,1,43,2,0,0,252,1,43,2,1,2,43,2,0,0,235,1,195,1,0,0,0,0,178,1,183,1,182,1,168,1,176,1,0,0,180,1,172,1,163,1,186,1,197,1,161,1,170,1,0,0,0,0,7,0,21,0,22,0,23,0,24,0,25,0,43,0,44,0,43,2,0,0,28,0,37,0,0,0,38,0,30,2,0,0,72,0,83,0,41,0,40,0,0,0,186,0,253,0,36,0,204,0,212,0,217,0,218,0,219,0,214,0,216,0,226,0,227,0,220,0,221,0,197,0,198,0,224,0,225,0,30,2,213,0,215,0,209,0,210,0,211,0,199,0,200,0,201,0,202,0,203,0,19,2,24,2,20,2,25,2,134,1,248,0,132,1,30,2,19,2,21,2,20,2,22,2,133,1,248,0,19,2,20,2,248,0,43,2,43,2,29,0,188,0,35,0,196,0,53,0,56,0,0,0,0,0,0,0,102,0,103,0,106,0,0,0,30,2,43,2,0,0,30,2,236,1,0,0,15,1,43,2,43,2,146,1,43,2,71,1,186,0,23,2,20,2,30,2,19,2,20,2,43,2,73,1,41,1,72,1,44,1,23,2,22,1,30,2,19,2,20,2,0,0,0,0,40,2,175,1,0,0,0,0,47,1,14,2,0,0,255,0,251,0,0,0,43,2,13,2,27,1,32,2,235,0,240,0,242,0,30,1,19,0,0,0,26,0,195,0,69,0,16,0,30,2,34,2,85,0,77,0,89,0,91,0,30,2,19,2,20,2,247,1,242,1,0,0,91,1,82,1,84,1,30,2,80,1,30,2,0,0,0,0,228,1,6,2,248,1,0,0,231,1,0,2,0,0,233,1,4,2,188,1,0,0,0,0,177,1,179,1,181,1,205,0,206,0,111,1,30,2,0,0,109,1,108,1,5,1,0,0,81,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,131,1,59,0,0,0,137,1,0,0,0,0,237,0,130,1,57,0,236,0,126,1,52,0,0,0,0,0,0,0,43,2,54,1,0,0,0,0,137,1,57,1,9,2,236,1,0,0,0,0,62,1,147,1,148,1,43,2,149,1,0,0,43,2,76,1,0,0,0,0,74,1,0,0,0,0,137,1,0,0,0,0,0,0,0,0,0,0,137,1,0,0,116,0,46,1,0,0,0,0,0,1,0,0,1,1,246,0,43,2,11,0,18,1,233,0,87,0,30,2,0,0,89,1,0,0,244,1,0,0,113,1,0,0,0,0,37,1,246,1,43,2,43,2,5,2,43,2,253,1,43,2,43,2,166,1,0,0,30,2,0,0,43,2,0,0,250,1,43,2,43,2,107,1,0,0,0,0,3,1,73,0,187,0,0,0,34,0,193,0,33,0,194,0,60,0,33,2,0,0,31,0,191,0,32,0,192,0,58,0,127,1,128,1,0,0,0,0,189,0,0,0,0,0,219,1,52,1,30,2,0,0,221,1,236,1,0,0,0,0,151,1,77,1,0,0,12,0,153,1,0,0,38,1,0,0,39,1,0,0,0,0,49,1,255,0,43,2,2,1,241,0,81,1,92,1,0,0,87,1,83,1,119,1,0,0,0,0,0,0,0,0,224,1,0,0,226,1,0,0,232,1,0,0,229,1,234,1,184,1,0,0,110,1,98,1,100,1,0,0,249,1,0,0,103,1,0,0,105,1,124,1,4,1,228,0,30,0,190,0,141,1,139,1,0,0,0,0,220,1,60,1,0,0,0,0,150,1,0,0,94,0,101,0,0,0,152,1,0,0,42,1,45,1,0,0,143,1,144,1,142,1,0,0,90,1,0,0,85,1,117,1,30,2,115,1,118,1,122,1,121,1,43,2,43,2,43,2,43,2,112,1,43,2,43,2,23,1,0,0,43,2,251,1,43,2,43,2,54,0,55,1,0,0,100,0,0,0,43,2,0,0,43,2,43,2,0,0,88,1,0,0,0,0,114,1,225,1,0,0,222,1,227,1,230,1,0,0,95,1,0,0,97,1,23,2,22,1,104,1,0,0,101,1,106,1,63,1,23,2,99,0,30,2,19,2,20,2,145,1,75,1,50,1,86,1,116,1,43,2,43,2,43,2,43,2,43,2,137,1,223,1,96,1,0,0,93,1,99,1,102,1,43,2,94,1,0,0,144,0,146,0,145,0,147,0,148,0,148,0,148,0,148,0,149,0,150,0,149,0,151,0,152,0,153,0,153,0,153,0,153,0,155,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,156,0,156,0,157,0,157,0,157,0,157,0,157,0,157,0,158,0,159,0,159,0,160,0,160,0,162,0,161,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,164,0,164,0,165,0,165,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,167,0,167,0,168,0,168,0,169,0,169,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,174,0,174,0,174,0,174,0,174,0,175,0,175,0,176,0,177,0,176,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,181,0,182,0,182,0,182,0,182,0,183,0,184,0,184,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,188,0,187,0,189,0,190,0,190,0,191,0,191,0,191,0,191,0,191,0,191,0,192,0,192,0,192,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,194,0,193,0,195,0,196,0,193,0,197,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,198,0,199,0,193,0,193,0,193,0,200,0,201,0,193,0,202,0,203,0,193,0,193,0,193,0,204,0,205,0,193,0,206,0,193,0,207,0,208,0,193,0,209,0,193,0,210,0,211,0,193,0,212,0,213,0,193,0,193,0,193,0,193,0,193,0,214,0,215,0,215,0,215,0,216,0,216,0,217,0,217,0,218,0,218,0,219,0,219,0,220,0,220,0,221,0,221,0,222,0,222,0,222,0,222,0,222,0,222,0,222,0,222,0,222,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,223,0,224,0,224,0,225,0,225,0,225,0,226,0,226,0,227,0,227,0,228,0,228,0,229,0,229,0,230,0,230,0,232,0,231,0,233,0,233,0,233,0,233,0,234,0,234,0,234,0,234,0,234,0,234,0,234,0,234,0,234,0,236,0,235,0,237,0,235,0,238,0,239,0,239,0,240,0,240,0,241,0,241,0,241,0,242,0,242,0,243,0,243,0,244,0,244,0,244,0,244,0,245,0,245,0,245,0,245,0,246,0,246,0,247,0,248,0,247,0,247,0,247,0,249,0,249,0,250,0,250,0,251,0,252,0,252,0,253,0,253,0,254,0,254,0,255,0,255,0,0,1,1,1,0,1,2,1,2,1,3,1,3,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,13,1,12,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,21,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,29,1,29,1,30,1,31,1,30,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,42,1,43,1,43,1,43,1,44,1,44,1,46,1,45,1,47,1,47,1,48,1,253,252,253,252,253,252,141,1,253,252,20,0,253,252,132,254,76,0,253,252,57,0,253,252,193,254,96,0,112,0,199,255,253,252,94,254,253,252,243,255,72,3,83,255,235,255,198,255,6,255,103,254,240,255,3,5,184,255,70,3,4,0,241,255,253,252,253,252,7,255,253,252,238,3,150,5,253,252,12,0,15,1,178,254,77,0,78,0,253,252,159,254,17,255,30,0,219,254,10,0,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,253,252,38,1,74,255,125,254,200,255,207,253,253,252,80,253,77,253,209,0,253,252,4,254,253,252,163,253,253,252,202,255,253,252,253,252,158,0,253,252,253,252,253,252,179,255,253,252,253,252,128,254,253,252,210,255,253,252,253,252,253,252,253,252,253,252,94,2,253,2,253,252,253,252,253,252,253,252,253,252,55,255,80,254,253,252,122,1,253,252,253,252,253,252,0,0,253,252,253,252,253,252,210,5,115,5,110,3,43,6,253,252,253,252,86,0,232,254,14,253,121,254,166,253,184,0,165,253,150,253,254,252,38,0,221,0,253,252,30,254,253,252,240,254,107,1,253,252,253,252,253,252,5,0,87,254,63,3,189,254,253,252,197,2,2,0,231,255,80,0,203,253,11,255,251,255,48,0,253,252,223,255,254,255,255,255,1,0,2,0,64,0,65,0,66,0,6,1,136,1,137,1,15,1,16,1,184,1,68,0,69,0,202,0,70,0,71,0,74,2,203,2,72,0,73,0,17,1,74,0,75,0,76,0,209,1,77,0,203,0,113,0,114,0,227,0,228,0,229,0,111,2,195,0,196,0,79,0,244,0,22,1,54,2,195,2,176,1,177,1,253,0,254,0,246,0,168,1,178,1,13,2,80,0,199,0,20,1,136,2,21,1,36,1,154,2,209,0,230,2,210,0,231,2,110,2,119,3,77,2,75,2,43,3,132,1,134,1,86,2,87,2,49,3,9,1,140,1,102,2,222,2,223,2,215,0,149,2,150,2,151,2,11,3,175,2,176,2,252,2,128,3,129,3,225,1,0,3,74,1,8,2,82,0,83,0,120,1,68,2,67,2,161,1,122,3,90,2,216,2,51,3,55,3,84,0,85,0,49,1,50,1,240,1,86,0,87,0,88,0,112,2,121,2,245,1,246,1,247,1,167,2,89,0,90,0,91,0,43,1,92,0,93,0,205,0,206,0,96,0,207,0,128,1,76,2,211,2,212,2,227,1,228,1,229,1,230,1,231,1,232,1,15,3,16,3,233,1,234,1,235,1,236,1,4,3,156,2,198,0,133,1,27,1,179,1,249,0,119,0,81,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([56,2,112,1,234,0,173,1,174,1,191,2,200,1,141,1,4,1,158,1,237,0,19,1,0,0,145,0,146,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,19,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,63,0,66,0,67,0,69,0,70,0,89,0,92,0,93,0,95,0,96,0,98,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,109,0,129,0,130,0,131,0,147,0,148,0,149,0,154,0,156,0,157,0,159,0,160,0,163,0,164,0,166,0,167,0,168,0,170,0,171,0,180,0,193,0,214,0,233,0,234,0,244,0,245,0,249,0,250,0,251,0,2,1,3,1,4,1,6,1,7,1,8,1,9,1,10,1,11,1,35,1,48,1,149,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,86,0,89,0,92,0,129,0,172,0,173,0,193,0,214,0,8,1,11,1,35,1,173,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,80,0,81,0,84,0,85,0,86,0,87,0,98,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,130,0,131,0,138,0,139,0,174,0,178,0,179,0,10,1,30,1,194,0,89,0,157,0,158,0,171,0,214,0,8,1,9,1,11,1,158,0,200,0,202,0,89,0,164,0,171,0,214,0,219,0,8,1,11,1,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,101,0,174,0,175,0,176,0,4,1,142,0,143,0,158,0,39,1,44,1,45,1,47,1,57,0,98,0,99,0,130,0,163,0,180,0,181,0,186,0,189,0,191,0,33,1,34,1,186,0,186,0,139,0,187,0,188,0,139,0,183,0,187,0,139,0,40,1,45,1,175,0,150,0,133,0,180,0,214,0,180,0,55,0,1,0,92,0,152,0,153,0,154,0,165,0,166,0,48,1,195,0,197,0,182,0,191,0,33,1,48,1,181,0,32,1,33,1,48,1,89,0,137,0,170,0,214,0,8,1,11,1,198,0,53,0,54,0,56,0,63,0,105,0,174,0,5,1,62,0,64,0,65,0,111,0,112,0,246,0,247,0,63,0,246,0,63,0,246,0,63,0,246,0,61,0,246,0,58,0,59,0,159,0,180,0,180,0,39,1,47,1,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,231,0,116,0,137,0,92,0,98,0,167,0,116,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,86,0,87,0,117,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,88,0,135,0,136,0,88,0,136,0,38,1,26,0,133,0,235,0,90,0,90,0,183,0,187,0,235,0,157,0,51,0,55,0,172,0,58,0,59,0,120,0,12,1,88,0,135,0,136,0,209,0,31,1,210,0,38,1,151,0,152,0,55,0,16,0,215,0,44,1,116,0,88,0,135,0,136,0,90,0,90,0,215,0,158,0,158,0,55,0,88,0,135,0,136,0,25,0,105,0,137,0,46,1,39,1,20,0,238,0,142,0,181,0,181,0,181,0,91,0,137,0,190,0,48,1,137,0,190,0,186,0,40,1,41,1,186,0,185,0,186,0,191,0,33,1,48,1,157,0,41,1,157,0,155,0,133,0,152,0,88,0,136,0,90,0,154,0,165,0,140,0,39,1,47,1,41,1,157,0,41,1,141,0,137,0,43,1,45,1,137,0,43,1,134,0,43,1,55,0,167,0,168,0,169,0,137,0,88,0,135,0,136,0,51,0,53,0,54,0,55,0,56,0,92,0,98,0,99,0,123,0,126,0,139,0,229,0,15,1,16,1,17,1,18,1,19,1,20,1,21,1,24,1,25,1,26,1,27,1,28,1,63,0,247,0,248,0,110,0,113,0,114,0,253,0,254,0,255,0,0,1,62,0,247,0,63,0,63,0,63,0,61,0,71,0,71,0,149,0,158,0,158,0,158,0,158,0,154,0,157,0,157,0,232,0,98,0,159,0,181,0,191,0,192,0,165,0,137,0,170,0,137,0,156,0,159,0,171,0,180,0,181,0,192,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,51,0,52,0,55,0,178,0,183,0,36,1,37,1,185,0,51,0,52,0,55,0,178,0,183,0,36,1,51,0,55,0,36,1,237,0,236,0,159,0,180,0,159,0,180,0,97,0,161,0,207,0,13,1,206,0,51,0,55,0,172,0,36,1,185,0,36,1,151,0,157,0,211,0,212,0,15,0,13,0,240,0,48,1,152,0,16,0,180,0,51,0,55,0,185,0,51,0,55,0,152,0,27,0,216,0,44,1,216,0,51,0,55,0,185,0,51,0,55,0,204,0,177,0,252,0,253,0,238,0,191,0,15,0,181,0,98,0,181,0,189,0,253,0,33,1,34,1,41,1,140,0,41,1,137,0,137,0,41,1,175,0,147,0,134,0,180,0,41,1,154,0,196,0,33,1,167,0,169,0,51,0,55,0,185,0,51,0,55,0,116,0,51,0,92,0,98,0,220,0,221,0,222,0,17,1,15,1,199,0,137,0,29,1,48,1,181,0,137,0,29,1,51,0,137,0,29,1,51,0,63,0,152,0,1,1,254,0,110,0,0,1,180,0,180,0,79,0,121,0,224,0,225,0,48,1,181,0,137,0,41,1,169,0,137,0,116,0,44,0,40,1,90,0,90,0,183,0,187,0,40,1,42,1,90,0,90,0,183,0,184,0,187,0,48,1,184,0,187,0,224,0,224,0,44,0,162,0,44,1,158,0,151,0,42,1,15,0,41,1,139,0,14,1,15,1,174,0,181,0,192,0,241,0,48,1,18,0,218,0,48,1,17,0,217,0,218,0,90,0,90,0,42,1,90,0,90,0,218,0,201,0,203,0,42,1,158,0,175,0,15,0,137,0,215,0,181,0,98,0,181,0,190,0,33,1,134,0,41,1,43,1,42,1,222,0,137,0,17,1,137,0,41,1,226,0,40,1,29,0,108,0,230,0,18,1,24,1,26,1,28,1,19,1,21,1,26,1,19,1,134,0,152,0,223,0,226,0,19,1,20,1,22,1,23,1,26,1,28,1,152,0,98,0,181,0,169,0,180,0,118,0,159,0,180,0,159,0,180,0,161,0,141,0,90,0,159,0,180,0,159,0,180,0,161,0,235,0,231,0,152,0,152,0,180,0,224,0,208,0,44,1,15,0,15,1,151,0,44,1,213,0,91,0,242,0,48,1,152,0,14,0,243,0,48,1,158,0,15,0,90,0,15,0,152,0,152,0,216,0,181,0,152,0,181,0,137,0,41,1,221,0,137,0,98,0,220,0,140,0,142,0,152,0,152,0,137,0,29,1,137,0,29,1,137,0,29,1,137,0,29,1,29,1,134,0,226,0,121,0,137,0,29,1,89,0,214,0,137,0,29,1,137,0,29,1,15,0,181,0,180,0,159,0,180,0,15,0,134,0,152,0,151,0,41,1,15,0,14,1,89,0,171,0,214,0,8,1,11,1,215,0,152,0,215,0,15,0,15,0,205,0,218,0,238,0,239,0,137,0,221,0,137,0,17,1,51,0,227,0,228,0,16,1,15,0,134,0,19,1,26,1,19,1,19,1,121,0,23,1,26,1,55,0,88,0,19,1,22,1,26,1,19,1,134,0,15,0,151,0,55,0,88,0,135,0,136,0,152,0,152,0,152,0,221,0,137,0,137,0,40,1,29,1,137,0,29,1,29,1,29,1,137,0,29,1,137,0,29,1,51,0,55,0,29,1,137,0,29,1,29,1,15,0,51,0,55,0,185,0,51,0,55,0,240,0,217,0,15,0,221,0,228,0,19,1,19,1,26,1,19,1,19,1,42,1,29,1,29,1,137,0,29,1,29,1,29,1,19,1,29,1,73,110,118,97,108,105,100,32,109,114,98,95,115,116,97,116,101,44,32,101,120,105,116,105,110,103,32,109,114,98,99,10,0,37,115,58,32,110,111,32,112,114,111,103,114,97,109,32,102,105,108,101,32,103,105,118,101,110,10,0,46,99,0,46,109,114,98,0,37,115,58,32,111,117,116,112,117,116,32,102,105,108,101,32,115,104,111,117,108,100,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,99,111,109,112,105,108,101,32,109,117,108,116,105,112,108,101,32,102,105,108,101,115,10,0,37,115,58,37,115,58,83,121,110,116,97,120,32,79,75,10,0,119,98,0,37,115,58,32,99,97,110,110,111,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,58,40,37,115,41,10,0,79,117,116,112,117,116,32,102,105,108,101,32,105,115,32,114,101,113,117,105,114,101,100,10,0,37,115,58,32,97,110,32,111,117,116,112,117,116,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,115,112,101,99,105,102,105,101,100,46,32,40,37,115,41,10,0,37,115,58,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,10,0,118,101,114,115,105,111,110,0,118,101,114,98,111,115,101,0,99,111,112,121,114,105,103,104,116,0,37,115,58,32,103,101,110,101,114,97,116,105,110,103,32,37,115,32,101,110,100,105,97,110,32,67,32,102,105,108,101,46,32,115,112,101,99,105,102,121,32,45,101,47,45,69,32,102,111,114,32,99,114,111,115,115,32,99,111,109,112,105,108,105,110,103,46,10,0,98,105,103,0,108,105,116,116,108,101,0,115,119,105,116,99,104,101,115,58,0,45,99,32,32,32,32,32,32,32,32,32,32,32,99,104,101,99,107,32,115,121,110,116,97,120,32,111,110,108,121,0,45,111,60,111,117,116,102,105,108,101,62,32,32,112,108,97,99,101,32,116,104,101,32,111,117,116,112,117,116,32,105,110,116,111,32,60,111,117,116,102,105,108,101,62,0,45,118,32,32,32,32,32,32,32,32,32,32,32,112,114,105,110,116,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,44,32,116,104,101,110,32,116,117,114,110,32,111,110,32,118,101,114,98,111,115,101,32,109,111,100,101,0,45,103,32,32,32,32,32,32,32,32,32,32,32,112,114,111,100,117,99,101,32,100,101,98,117,103,103,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,0,45,66,60,115,121,109,98,111,108,62,32,32,32,98,105,110,97,114,121,32,60,115,121,109,98,111,108,62,32,111,117,116,112,117,116,32,105,110,32,67,32,108,97,110,103,117,97,103,101,32,102,111,114,109,97,116,0,45,101,32,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,116,101,32,108,105,116,116,108,101,32,101,110,100,105,97,110,32,105,115,101,113,32,100,97,116,97,0,45,69,32,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,116,101,32,98,105,103,32,101,110,100,105,97,110,32,105,115,101,113,32,100,97,116,97,0,45,45,118,101,114,98,111,115,101,32,32,32,32,114,117,110,32,97,116,32,118,101,114,98,111,115,101,32,109,111,100,101,0,45,45,118,101,114,115,105,111,110,32,32,32,32,112,114,105,110,116,32,116,104,101,32,118,101,114,115,105,111,110,0,45,45,99,111,112,121,114,105,103,104,116,32,32,112,114,105,110,116,32,116,104,101,32,99,111,112,121,114,105,103,104,116,0,85,115,97,103,101,58,32,37,115,32,91,115,119,105,116,99,104,101,115,93,32,112,114,111,103,114,97,109,102,105,108,101,10,0,32,32,37,115,10,0,114,0,37,115,58,32,99,97,110,110,111,116,32,111,112,101,110,32,112,114,111,103,114,97,109,32,102,105,108,101,46,32,40,37,115,41,10,0,37,115,58,32,105,110,118,97,108,105,100,32,67,32,108,97,110,103,117,97,103,101,32,115,121,109,98,111,108,32,110,97,109,101,10,0,37,115,58,32,101,114,114,111,114,32,105,110,32,109,114,98,32,100,117,109,112,32,40,37,115,41,32,37,100,10,0,37,46,56,101,0,73,82,69,80,0,48,48,48,48,0,68,66,71,0,0,76,73,78,69,0,76,86,65,82,0,69,78,68,0,0,82,73,84,69,0,69,84,73,82,0,48,48,48,51,0,77,65,84,90,0,47,42,32,100,117,109,112,101,100,32,105,110,32,108,105,116,116,108,101,32,101,110,100,105,97,110,32,111,114,100,101,114,46,10,32,32,32,117,115,101,32,96,109,114,98,99,32,45,69,96,32,111,112,116,105,111,110,32,102,111,114,32,98,105,103,32,101,110,100,105,97,110,32,67,80,85,46,32,42,47,10,0,47,42,32,100,117,109,112,101,100,32,105,110,32,98,105,103,32,101,110,100,105,97,110,32,111,114,100,101,114,46,10,32,32,32,117,115,101,32,96,109,114,98,99,32,45,101,96,32,111,112,116,105,111,110,32,102,111,114,32,98,101,116,116,101,114,32,112,101,114,102,111,114,109,97,110,99,101,32,111,110,32,108,105,116,116,108,101,32,101,110,100,105,97,110,32,67,80,85,46,32,42,47,10,0,35,105,110,99,108,117,100,101,32,60,115,116,100,105,110,116,46,104,62,10,0,99,111,110,115,116,32,117,105,110,116,56,95,116,10,35,105,102,32,100,101,102,105,110,101,100,32,95,95,71,78,85,67,95,95,10,95,95,97,116,116,114,105,98,117,116,101,95,95,40,40,97,108,105,103,110,101,100,40,37,117,41,41,41,10,35,101,108,105,102,32,100,101,102,105,110,101,100,32,95,77,83,67,95,86,69,82,10,95,95,100,101,99,108,115,112,101,99,40,97,108,105,103,110,40,37,117,41,41,10,35,101,110,100,105,102,10,37,115,91,93,32,61,32,123,0,48,120,37,48,50,120,44,0,10,125,59,10,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,0,97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,71,67,0,115,116,97,114,116,0,101,110,97,98,108,101,0,100,105,115,97,98,108,101,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0,115,116,101,112,95,114,97,116,105,111,0,115,116,101,112,95,114,97,116,105,111,61,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0,2,8,32,128,1,4,16,64,3,12,48,192,105,102,110,111,110,101,0,111,111,0,100,101,102,97,117,108,116,0,124,111,63,0,100,101,102,97,117,108,116,61,0,100,101,102,97,117,108,116,95,112,114,111,99,0,100,101,102,97,117,108,116,95,112,114,111,99,61,0,95,95,100,101,108,101,116,101,0,104,97,115,95,107,101,121,63,0,104,97,115,95,118,97,108,117,101,63,0,38,124,111,63,0,107,101,121,63,0,107,101,121,115,0,115,116,111,114,101,0,118,97,108,117,101,63,0,118,97,108,117,101,115,0,110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,45,73,110,102,105,110,105,116,121,0,73,110,102,105,110,105,116,121,0,78,97,78,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,78,117,109,101,114,105,99,0,102,0,113,117,111,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0,100,105,118,109,111,100,0,99,101,105,108,0,102,105,110,105,116,101,63,0,102,108,111,111,114,0,105,110,102,105,110,105,116,101,63,0,114,111,117,110,100,0,116,114,117,110,99,97,116,101,0,37,46,55,103,0,110,97,110,63,0,73,78,70,73,78,73,84,89,0,78,105,108,67,108,97,115,115,0,98,0,84,114,117,101,67,108,97,115,115,0,70,97,108,115,101,67,108,97,115,115,0,73,110,116,101,103,101,114,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,105,110,116,111,32,37,83,0,37,83,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,83,32,98,121,32,35,37,83,0,70,105,120,110,117,109,0,105,67,108,97,115,115,0,83,67,108,97,115,115,0,70,108,111,97,116,0,70,105,108,101,0,68,97,116,97,0,117,110,107,110,111,119,110,32,116,121,112,101,32,37,83,32,40,37,83,32,103,105,118,101,110,41,0,35,60,0,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0,116,111,95,105,110,116,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,116,111,32,73,110,116,101,103,101,114,32,40,37,83,35,37,83,32,103,105,118,101,115,32,37,83,41,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,110,111,110,32,115,116,114,105,110,103,32,118,97,108,117,101,0,109,97,105,110,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,115,116,114,105,110,103,32,99,97,112,97,99,105,116,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,115,116,114,105,110,103,32,115,105,122,101,32,116,111,111,32,98,105,103,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,99,97,110,39,116,32,109,111,100,105,102,121,32,102,114,111,122,101,110,32,115,116,114,105,110,103,0,82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,83,0,115,116,114,105,110,103,32,40,37,83,41,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,101,103,101,114,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,83,41,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,83,41,0,115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,34,0,98,121,116,101,115,105,122,101,0,83,0,97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0,111,124,111,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,49,41,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,116,111,32,70,105,120,110,117,109,0,99,97,112,105,116,97,108,105,122,101,0,99,97,112,105,116,97,108,105,122,101,33,0,99,104,111,109,112,0,124,83,0,99,104,111,109,112,33,0,99,104,111,112,0,99,104,111,112,33,0,100,111,119,110,99,97,115,101,0,100,111,119,110,99,97,115,101,33,0,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,83,32,103,105,118,101,110,0,115,112,108,105,116,0,124,111,105,0,116,111,95,102,0,116,111,95,105,0,117,112,99,97,115,101,0,117,112,99,97,115,101,33,0,98,121,116,101,115,0,102,114,101,101,122,101,0,2,8,32,128,1,4,16,64,3,12,48,192,115,121,109,98,111,108,32,108,101,110,103,116,104,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,0,105,100,50,110,97,109,101,0,116,111,95,115,121,109,0,99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,39,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,45,60,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,105,110,32,37,83,0,99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0,84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,56,41,0,110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,83,41,0,115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,40,48,120,52,48,48,48,48,32,45,32,49,50,56,41,41,0,115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0,116,111,95,112,114,111,99,0,39,37,83,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,114,101,116,117,114,110,0,98,114,101,97,107,0,0,121,105,101,108,100,0,0,6,5,5,117,110,101,120,112,101,99,116,101,100,32,0,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,70,105,98,101,114,69,114,114,111,114,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0,79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0,110,42,38,0,124,83,38,0,109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0,37,115,40,37,100,44,37,100,41,58,32,37,115,10,0,108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0,99,97,110,39,116,32,102,105,110,100,32,104,101,114,101,100,111,99,32,100,101,108,105,109,105,116,101,114,32,34,37,115,34,32,97,110,121,119,104,101,114,101,32,98,101,102,111,114,101,32,69,79,70,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,73,110,118,97,108,105,100,32,85,110,105,99,111,100,101,32,99,111,100,101,32,112,111,105,110,116,0,115,0,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,111,112,116,105,111,110,37,115,32,45,32,37,115,0,42,42,0,39,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,10,61,101,110,100,0,101,109,98,101,100,100,101,100,32,100,111,99,117,109,101,110,116,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,117,110,116,101,114,109,105,110,97,116,101,100,32,104,101,114,101,32,100,111,99,117,109,101,110,116,32,105,100,101,110,116,105,102,105,101,114,0,62,62,0,105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0,38,38,0,39,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,124,124,0,97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0,110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0,110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0,73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0,48,0,116,114,97,105,108,105,110,103,32,39,37,99,39,32,105,110,32,110,117,109,98,101,114,0,99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0,102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,105,110,99,111,109,112,108,101,116,101,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,99,97,112,116,117,114,101,32,103,114,111,117,112,32,105,110,100,101,120,32,109,117,115,116,32,98,101,32,60,61,32,37,100,0,105,110,99,111,109,112,108,101,116,101,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,105,110,99,111,109,112,108,101,116,101,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,39,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,39,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,73,110,118,97,108,105,100,32,99,104,97,114,32,39,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,95,95,69,78,68,95,95,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,98,114,101,97,107,0,101,108,115,101,0,110,105,108,0,101,110,115,117,114,101,0,116,104,101,110,0,110,111,116,0,102,97,108,115,101,0,115,101,108,102,0,101,108,115,105,102,0,114,101,115,99,117,101,0,116,114,117,101,0,117,110,116,105,108,0,117,110,108,101,115,115,0,114,101,116,117,114,110,0,100,101,102,0,97,110,100,0,100,111,0,121,105,101,108,100,0,102,111,114,0,117,110,100,101,102,0,111,114,0,105,110,0,119,104,101,110,0,114,101,116,114,121,0,105,102,0,99,97,115,101,0,114,101,100,111,0,110,101,120,116,0,115,117,112,101,114,0,109,111,100,117,108,101,0,95,95,76,73,78,69,95,95,0,95,95,70,73,76,69,95,95,0,95,95,69,78,67,79,68,73,78,71,95,95,0,69,78,68,0,97,108,105,97,115,0,66,69,71,73,78,0,119,104,105,108,101,0,0,2,2,2,2,2,2,2,2,2,143,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,130,2,2,2,128,123,2,139,140,126,124,137,125,136,127,2,2,2,2,2,2,2,2,2,2,118,142,120,116,119,117,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,135,2,141,122,2,138,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,133,121,134,131,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,129,132,0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,4,5,3,4,2,1,1,1,1,1,1,1,1,0,4,0,0,5,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,0,5,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,0,7,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,3,1,2,1,0,4,1,2,2,3,2,3,1,0,1,1,2,1,2,1,2,1,0,4,2,3,1,4,2,1,1,1,1,1,2,2,3,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,4,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,2,2,2,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,0,3,1,2,0,66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0,69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0,99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,83,0,98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0,98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0,100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0,61,126,0,33,126,0,62,61,0,60,61,0,43,64,0,45,64,0,47,0,37,0,124,0,94,0,60,0,126,0,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0,37,100,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0,36,101,110,100,0,101,114,114,111,114,0,36,117,110,100,101,102,105,110,101,100,0,107,101,121,119,111,114,100,95,99,108,97,115,115,0,107,101,121,119,111,114,100,95,109,111,100,117,108,101,0,107,101,121,119,111,114,100,95,100,101,102,0,107,101,121,119,111,114,100,95,98,101,103,105,110,0,107,101,121,119,111,114,100,95,105,102,0,107,101,121,119,111,114,100,95,117,110,108,101,115,115,0,107,101,121,119,111,114,100,95,119,104,105,108,101,0,107,101,121,119,111,114,100,95,117,110,116,105,108,0,107,101,121,119,111,114,100,95,102,111,114,0,107,101,121,119,111,114,100,95,117,110,100,101,102,0,107,101,121,119,111,114,100,95,114,101,115,99,117,101,0,107,101,121,119,111,114,100,95,101,110,115,117,114,101,0,107,101,121,119,111,114,100,95,101,110,100,0,107,101,121,119,111,114,100,95,116,104,101,110,0,107,101,121,119,111,114,100,95,101,108,115,105,102,0,107,101,121,119,111,114,100,95,101,108,115,101,0,107,101,121,119,111,114,100,95,99,97,115,101,0,107,101,121,119,111,114,100,95,119,104,101,110,0,107,101,121,119,111,114,100,95,98,114,101,97,107,0,107,101,121,119,111,114,100,95,110,101,120,116,0,107,101,121,119,111,114,100,95,114,101,100,111,0,107,101,121,119,111,114,100,95,114,101,116,114,121,0,107,101,121,119,111,114,100,95,105,110,0,107,101,121,119,111,114,100,95,100,111,0,107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0,107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0,107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0,107,101,121,119,111,114,100,95,114,101,116,117,114,110,0,107,101,121,119,111,114,100,95,121,105,101,108,100,0,107,101,121,119,111,114,100,95,115,117,112,101,114,0,107,101,121,119,111,114,100,95,115,101,108,102,0,107,101,121,119,111,114,100,95,110,105,108,0,107,101,121,119,111,114,100,95,116,114,117,101,0,107,101,121,119,111,114,100,95,102,97,108,115,101,0,107,101,121,119,111,114,100,95,97,110,100,0,107,101,121,119,111,114,100,95,111,114,0,107,101,121,119,111,114,100,95,110,111,116,0,109,111,100,105,102,105,101,114,95,105,102,0,109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0,109,111,100,105,102,105,101,114,95,119,104,105,108,101,0,109,111,100,105,102,105,101,114,95,117,110,116,105,108,0,109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0,107,101,121,119,111,114,100,95,97,108,105,97,115,0,107,101,121,119,111,114,100,95,66,69,71,73,78,0,107,101,121,119,111,114,100,95,69,78,68,0,107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0,107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0,107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0,116,73,68,69,78,84,73,70,73,69,82,0,116,70,73,68,0,116,71,86,65,82,0,116,73,86,65,82,0,116,67,79,78,83,84,65,78,84,0,116,67,86,65,82,0,116,76,65,66,69,76,0,116,73,78,84,69,71,69,82,0,116,70,76,79,65,84,0,116,67,72,65,82,0,116,88,83,84,82,73,78,71,0,116,82,69,71,69,88,80,0,116,83,84,82,73,78,71,0,116,83,84,82,73,78,71,95,80,65,82,84,0,116,83,84,82,73,78,71,95,77,73,68,0,116,78,84,72,95,82,69,70,0,116,66,65,67,75,95,82,69,70,0,116,82,69,71,69,88,80,95,69,78,68,0,116,85,80,76,85,83,0,116,85,77,73,78,85,83,0,116,80,79,87,0,116,67,77,80,0,116,69,81,0,116,69,81,81,0,116,78,69,81,0,116,71,69,81,0,116,76,69,81,0,116,65,78,68,79,80,0,116,79,82,79,80,0,116,77,65,84,67,72,0,116,78,77,65,84,67,72,0,116,68,79,84,50,0,116,68,79,84,51,0,116,65,82,69,70,0,116,65,83,69,84,0,116,76,83,72,70,84,0,116,82,83,72,70,84,0,116,67,79,76,79,78,50,0,116,67,79,76,79,78,51,0,116,79,80,95,65,83,71,78,0,116,65,83,83,79,67,0,116,76,80,65,82,69,78,0,116,76,80,65,82,69,78,95,65,82,71,0,116,82,80,65,82,69,78,0,116,76,66,82,65,67,75,0,116,76,66,82,65,67,69,0,116,76,66,82,65,67,69,95,65,82,71,0,116,83,84,65,82,0,116,65,77,80,69,82,0,116,76,65,77,66,68,65,0,116,83,89,77,66,69,71,0,116,82,69,71,69,88,80,95,66,69,71,0,116,87,79,82,68,83,95,66,69,71,0,116,83,89,77,66,79,76,83,95,66,69,71,0,116,83,84,82,73,78,71,95,66,69,71,0,116,88,83,84,82,73,78,71,95,66,69,71,0,116,83,84,82,73,78,71,95,68,86,65,82,0,116,76,65,77,66,69,71,0,116,72,69,82,69,68,79,67,95,66,69,71,0,116,72,69,82,69,68,79,67,95,69,78,68,0,116,76,73,84,69,82,65,76,95,68,69,76,73,77,0,116,72,68,95,76,73,84,69,82,65,76,95,68,69,76,73,77,0,116,72,68,95,83,84,82,73,78,71,95,80,65,82,84,0,116,72,68,95,83,84,82,73,78,71,95,77,73,68,0,116,76,79,87,69,83,84,0,39,61,39,0,39,63,39,0,39,58,39,0,39,62,39,0,39,60,39,0,39,124,39,0,39,94,39,0,39,38,39,0,39,43,39,0,39,45,39,0,39,42,39,0,39,47,39,0,39,37,39,0,116,85,77,73,78,85,83,95,78,85,77,0,39,33,39,0,39,126,39,0,116,76,65,83,84,95,84,79,75,69,78,0,39,123,39,0,39,125,39,0,39,91,39,0,39,46,39,0,39,44,39,0,39,96,39,0,39,40,39,0,39,41,39,0,39,93,39,0,39,59,39,0,39,92,110,39,0,36,97,99,99,101,112,116,0,112,114,111,103,114,97,109,0,36,64,49,0,116,111,112,95,99,111,109,112,115,116,109,116,0,116,111,112,95,115,116,109,116,115,0,116,111,112,95,115,116,109,116,0,64,50,0,98,111,100,121,115,116,109,116,0,99,111,109,112,115,116,109,116,0,115,116,109,116,115,0,115,116,109,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([0,36,64,51,0,99,111,109,109,97,110,100,95,97,115,103,110,0,101,120,112,114,0,101,120,112,114,95,118,97,108,117,101,0,99,111,109,109,97,110,100,95,99,97,108,108,0,98,108,111,99,107,95,99,111,109,109,97,110,100,0,99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0,36,64,52,0,99,111,109,109,97,110,100,0,109,108,104,115,0,109,108,104,115,95,105,110,110,101,114,0,109,108,104,115,95,98,97,115,105,99,0,109,108,104,115,95,105,116,101,109,0,109,108,104,115,95,108,105,115,116,0,109,108,104,115,95,112,111,115,116,0,109,108,104,115,95,110,111,100,101,0,108,104,115,0,99,110,97,109,101,0,99,112,97,116,104,0,102,110,97,109,101,0,102,115,121,109,0,117,110,100,101,102,95,108,105,115,116,0,36,64,53,0,111,112,0,114,101,115,119,111,114,100,115,0,97,114,103,0,97,114,103,95,118,97,108,117,101,0,97,114,101,102,95,97,114,103,115,0,112,97,114,101,110,95,97,114,103,115,0,111,112,116,95,112,97,114,101,110,95,97,114,103,115,0,111,112,116,95,99,97,108,108,95,97,114,103,115,0,99,97,108,108,95,97,114,103,115,0,99,111,109,109,97,110,100,95,97,114,103,115,0,64,54,0,98,108,111,99,107,95,97,114,103,0,111,112,116,95,98,108,111,99,107,95,97,114,103,0,97,114,103,115,0,109,114,104,115,0,112,114,105,109,97,114,121,0,64,55,0,64,56,0,36,64,57,0,36,64,49,48,0,64,49,49,0,64,49,50,0,36,64,49,51,0,36,64,49,52,0,36,64,49,53,0,36,64,49,54,0,36,64,49,55,0,36,64,49,56,0,64,49,57,0,64,50,48,0,64,50,49,0,64,50,50,0,64,50,51,0,64,50,52,0,64,50,53,0,64,50,54,0,112,114,105,109,97,114,121,95,118,97,108,117,101,0,105,102,95,116,97,105,108,0,111,112,116,95,101,108,115,101,0,102,111,114,95,118,97,114,0,102,95,109,97,114,103,0,102,95,109,97,114,103,95,108,105,115,116,0,102,95,109,97,114,103,115,0,98,108,111,99,107,95,112,97,114,97,109,0,111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0,98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0,111,112,116,95,98,118,95,100,101,99,108,0,98,118,95,100,101,99,108,115,0,98,118,97,114,0,102,95,108,97,114,103,108,105,115,116,0,108,97,109,98,100,97,95,98,111,100,121,0,100,111,95,98,108,111,99,107,0,36,64,50,55,0,98,108,111,99,107,95,99,97,108,108,0,109,101,116,104,111,100,95,99,97,108,108,0,98,114,97,99,101,95,98,108,111,99,107,0,64,50,56,0,64,50,57,0,99,97,115,101,95,98,111,100,121,0,99,97,115,101,115,0,111,112,116,95,114,101,115,99,117,101,0,101,120,99,95,108,105,115,116,0,101,120,99,95,118,97,114,0,111,112,116,95,101,110,115,117,114,101,0,108,105,116,101,114,97,108,0,115,116,114,105,110,103,0,115,116,114,105,110,103,95,114,101,112,0,115,116,114,105,110,103,95,105,110,116,101,114,112,0,64,51,48,0,120,115,116,114,105,110,103,0,114,101,103,101,120,112,0,104,101,114,101,100,111,99,0,111,112,116,95,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,104,101,114,101,100,111,99,95,98,111,100,121,0,104,101,114,101,100,111,99,95,115,116,114,105,110,103,95,114,101,112,0,104,101,114,101,100,111,99,95,115,116,114,105,110,103,95,105,110,116,101,114,112,0,64,51,49,0,119,111,114,100,115,0,115,121,109,98,111,108,0,98,97,115,105,99,95,115,121,109,98,111,108,0,115,121,109,0,115,121,109,98,111,108,115,0,110,117,109,101,114,105,99,0,118,97,114,105,97,98,108,101,0,118,97,114,95,108,104,115,0,118,97,114,95,114,101,102,0,98,97,99,107,114,101,102,0,36,64,51,50,0,102,95,97,114,103,108,105,115,116,0,102,95,97,114,103,115,0,102,95,98,97,100,95,97,114,103,0,102,95,110,111,114,109,95,97,114,103,0,102,95,97,114,103,95,105,116,101,109,0,102,95,97,114,103,0,102,95,111,112,116,95,97,115,103,110,0,102,95,111,112,116,0,102,95,98,108,111,99,107,95,111,112,116,0,102,95,98,108,111,99,107,95,111,112,116,97,114,103,0,102,95,111,112,116,97,114,103,0,114,101,115,116,97,114,103,95,109,97,114,107,0,102,95,114,101,115,116,95,97,114,103,0,98,108,107,97,114,103,95,109,97,114,107,0,102,95,98,108,111,99,107,95,97,114,103,0,111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0,115,105,110,103,108,101,116,111,110,0,36,64,51,51,0,97,115,115,111,99,95,108,105,115,116,0,97,115,115,111,99,115,0,97,115,115,111,99,0,111,112,101,114,97,116,105,111,110,0,111,112,101,114,97,116,105,111,110,50,0,111,112,101,114,97,116,105,111,110,51,0,100,111,116,95,111,114,95,99,111,108,111,110,0,111,112,116,95,116,101,114,109,115,0,111,112,116,95,110,108,0,114,112,97,114,101,110,0,114,98,114,97,99,107,101,116,0,116,114,97,105,108,101,114,0,116,101,114,109,0,110,108,0,36,64,51,52,0,116,101,114,109,115,0,110,111,110,101,0,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,32,111,114,32,37,115,0,115,121,110,116,97,120,32,101,114,114,111,114,0,69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0,68,101,108,101,116,105,110,103,0,69,114,114,111,114,58,32,112,111,112,112,105,110,103,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0,67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0,37,48,53,100,32,0,78,79,68,69,95,66,69,71,73,78,58,10,0,78,79,68,69,95,82,69,83,67,85,69,58,10,0,98,111,100,121,58,10,0,114,101,115,99,117,101,58,10,0,104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,10,0,101,120,99,95,118,97,114,58,10,0,114,101,115,99,117,101,32,98,111,100,121,58,10,0,101,108,115,101,58,10,0,78,79,68,69,95,69,78,83,85,82,69,58,10,0,101,110,115,117,114,101,58,10,0,78,79,68,69,95,66,76,79,67,75,58,10,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,10,0,37,115,61,0,114,101,115,116,61,42,37,115,10,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,98,108,107,61,38,37,115,10,0,78,79,68,69,95,73,70,58,10,0,99,111,110,100,58,10,0,116,104,101,110,58,10,0,78,79,68,69,95,65,78,68,58,10,0,78,79,68,69,95,79,82,58,10,0,78,79,68,69,95,67,65,83,69,58,10,0,99,97,115,101,58,10,0,78,79,68,69,95,87,72,73,76,69,58,10,0,78,79,68,69,95,85,78,84,73,76,58,10,0,78,79,68,69,95,70,79,82,58,10,0,118,97,114,58,10,0,112,114,101,58,10,0,114,101,115,116,58,10,0,112,111,115,116,58,10,0,105,110,58,10,0,100,111,58,10,0,78,79,68,69,95,83,67,79,80,69,58,10,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,10,0,44,32,0,37,115,0,78,79,68,69,95,67,65,76,76,58,10,0,109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0,97,114,103,115,58,10,0,98,108,111,99,107,58,10,0,78,79,68,69,95,68,79,84,50,58,10,0,78,79,68,69,95,68,79,84,51,58,10,0,78,79,68,69,95,67,79,76,79,78,50,58,10,0,58,58,37,115,10,0,78,79,68,69,95,67,79,76,79,78,51,58,32,58,58,37,115,10,0,78,79,68,69,95,65,82,82,65,89,58,10,0,78,79,68,69,95,72,65,83,72,58,10,0,107,101,121,58,10,0,118,97,108,117,101,58,10,0,78,79,68,69,95,83,80,76,65,84,58,10,0,78,79,68,69,95,65,83,71,78,58,10,0,108,104,115,58,10,0,114,104,115,58,10,0,78,79,68,69,95,77,65,83,71,78,58,10,0,109,108,104,115,58,10,0,40,101,109,112,116,121,41,10,0,78,79,68,69,95,79,80,95,65,83,71,78,58,10,0,111,112,61,39,37,115,39,32,40,37,100,41,10,0,78,79,68,69,95,83,85,80,69,82,58,10,0,78,79,68,69,95,90,83,85,80,69,82,10,0,78,79,68,69,95,82,69,84,85,82,78,58,10,0,78,79,68,69,95,89,73,69,76,68,58,10,0,78,79,68,69,95,66,82,69,65,75,58,10,0,78,79,68,69,95,78,69,88,84,58,10,0,78,79,68,69,95,82,69,68,79,10,0,78,79,68,69,95,82,69,84,82,89,10,0,78,79,68,69,95,76,86,65,82,32,37,115,10,0,78,79,68,69,95,71,86,65,82,32,37,115,10,0,78,79,68,69,95,73,86,65,82,32,37,115,10,0,78,79,68,69,95,67,86,65,82,32,37,115,10,0,78,79,68,69,95,67,79,78,83,84,32,37,115,10,0,78,79,68,69,95,77,65,84,67,72,58,10,0,78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0,78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0,78,79,68,69,95,65,82,71,32,37,115,10,0,78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,10,0,78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0,78,79,68,69,95,70,76,79,65,84,32,37,115,10,0,78,79,68,69,95,78,69,71,65,84,69,10,0,78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,78,79,68,69,95,68,83,84,82,10,0,78,79,68,69,95,88,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,78,79,68,69,95,68,88,83,84,82,10,0,78,79,68,69,95,82,69,71,88,32,47,37,115,47,37,115,10,0,78,79,68,69,95,68,82,69,71,88,10,0,116,97,105,108,58,32,37,115,10,0,111,112,116,58,32,37,115,10,0,78,79,68,69,95,83,89,77,32,58,37,115,10,0,78,79,68,69,95,83,69,76,70,10,0,78,79,68,69,95,78,73,76,10,0,78,79,68,69,95,84,82,85,69,10,0,78,79,68,69,95,70,65,76,83,69,10,0,78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0,78,79,68,69,95,85,78,68,69,70,0,32,37,115,0,58,10,0,78,79,68,69,95,67,76,65,83,83,58,10,0,58,37,115,10,0,115,117,112,101,114,58,10,0,78,79,68,69,95,77,79,68,85,76,69,58,10,0,78,79,68,69,95,83,67,76,65,83,83,58,10,0,78,79,68,69,95,68,69,70,58,10,0,37,115,10,0,78,79,68,69,95,83,68,69,70,58,10,0,78,79,68,69,95,80,79,83,84,69,88,69,58,10,0,78,79,68,69,95,72,69,82,69,68,79,67,58,10,0,110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,108,105,110,101,32,37,100,58,32,37,115,10,0,99,111,100,101,103,101,110,32,101,114,114,111,114,0,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,105,110,100,101,120,32,37,83,32,111,117,116,32,111,102,32,97,114,114,97,121,0,110,101,103,97,116,105,118,101,32,108,101,110,103,116,104,32,40,37,83,41,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0,116,111,95,97,0,114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0,43,0,97,0,105,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,60,60,0,111,124,105,0,105,42,0,91,93,61,0,111,111,124,111,0,99,108,101,97,114,0,99,111,110,99,97,116,0,100,101,108,101,116,101,95,97,116,0,101,109,112,116,121,63,0,124,105,0,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,105,110,100,101,120,0,65,0,106,111,105,110,0,124,83,33,0,108,101,110,103,116,104,0,112,111,112,0,112,117,115,104,0,114,101,112,108,97,99,101,0,114,101,118,101,114,115,101,0,114,101,118,101,114,115,101,33,0,114,105,110,100,101,120,0,115,104,105,102,116,0,115,105,122,101,0,115,108,105,99,101,0,117,110,115,104,105,102,116,0,95,95,97,114,121,95,101,113,0,95,95,97,114,121,95,99,109,112,0,95,95,97,114,121,95,105,110,100,101,120,0,35,0,40,117,110,107,110,111,119,110,41,0,58,105,110,32,0,2,8,32,128,1,4,16,64,3,12,48,192,95,95,111,117,116,101,114,95,95,0,95,95,99,108,97,115,115,105,100,95,95,0,37,83,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0,110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,39,37,83,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0,115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,67,108,97,115,115,32,37,83,32,40,37,83,32,110,111,116,32,37,83,41,0,115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,83,32,103,105,118,101,110,41,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0,105,110,104,101,114,105,116,101,100,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,37,83,32,105,115,32,110,111,116,32,99,108,97,115,115,47,109,111,100,117,108,101,0,83,116,114,105,110,103,0,116,111,95,115,116,114,0,101,120,112,101,99,116,101,100,32,37,83,0,65,114,114,97,121,0,116,111,95,97,114,121,0,72,97,115,104,0,116,111,95,104,97,115,104,0,82,97,110,103,101,69,114,114,111,114,0,102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0,110,111,32,105,109,112,108,105,99,105,116,32,99,111,110,118,101,114,115,105,111,110,32,111,102,32,83,116,114,105,110,103,32,105,110,116,111,32,73,110,116,101,103,101,114,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,83,0,99,121,99,108,105,99,32,105,110,99,108,117,100,101,32,100,101,116,101,99,116,101,100,0,99,121,99,108,105,99,32,112,114,101,112,101,110,100,32,100,101,116,101,99,116,101,100,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,37,83,0,42,38,0,99,97,110,39,116,32,99,114,101,97,116,101,32,105,110,115,116,97,110,99,101,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,37,83,0,95,95,99,108,97,115,115,112,97,116,104,95,95,0,35,60,67,108,97,115,115,58,0,62,0,58,58,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,39,37,83,39,0,66,97,115,105,99,79,98,106,101,99,116,0,79,98,106,101,99,116,0,77,111,100,117,108,101,0,67,108,97,115,115,0,80,114,111,99,0,33,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,110,42,0,124,67,38,0,115,117,112,101,114,99,108,97,115,115,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,39,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0,112,114,101,112,101,110,100,0,112,114,101,112,101,110,100,95,102,101,97,116,117,114,101,115,0,112,114,101,112,101,110,100,101,100,0,105,110,99,108,117,100,101,0,97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0,105,110,99,108,117,100,101,100,0,99,108,97,115,115,95,101,118,97,108,0,105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0,124,38,0,105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0,109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0,109,111,100,117,108,101,95,101,118,97,108,0,109,111,100,117,108,101,95,102,117,110,99,116,105,111,110,0,112,114,105,118,97,116,101,0,112,114,111,116,101,99,116,101,100,0,112,117,98,108,105,99,0,114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0,99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,83,32,102,111,114,32,37,83,0,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,83,0,114,101,109,111,118,101,95,109,101,116,104,111,100,0,109,101,116,104,111,100,95,114,101,109,111,118,101,100,0,109,101,116,104,111,100,32,39,37,83,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,83,0,97,116,116,114,95,114,101,97,100,101,114,0,64,0,97,116,116,114,95,119,114,105,116,101,114,0,61,0,35,60,77,111,100,117,108,101,58,0,35,60,63,63,63,63,63,63,58,0,110,110,0,97,110,99,101,115,116,111,114,115,0,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,110,124,98,0,119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,83,0,99,111,110,115,116,95,103,101,116,0,99,111,110,115,116,95,115,101,116,0,99,111,110,115,116,97,110,116,115,0,114,101,109,111,118,101,95,99,111,110,115,116,0,99,111,110,115,116,97,110,116,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,99,111,110,115,116,95,109,105,115,115,105,110,103,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,58,58,37,83,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,0,100,101,102,105,110,101,95,109,101,116,104,111,100,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0,77,111,100,117,108,101,46,99,111,110,115,116,97,110,116,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,105,114,101,112,32,37,112,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,32,114,101,112,115,61,37,100,10,0,102,105,108,101,58,32,37,115,10,0,32,32,32,32,32,32,0,37,53,100,32,0,37,48,51,100,32,0,79,80,95,78,79,80,10,0,79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,9,0,10,0,9,59,32,0,32,0,82,37,100,58,37,115,0,79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,9,59,32,37,115,0,79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,9,0,79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,0,79,80,95,76,79,65,68,78,73,76,9,82,37,100,9,9,0,79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,9,9,0,79,80,95,76,79,65,68,84,9,82,37,100,9,9,0,79,80,95,76,79,65,68,70,9,82,37,100,9,9,0,79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,0,79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,9,0,79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,0,79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,9,0,79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,0,79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,0,79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,0,79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,0,79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,0,79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,0,79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,0,79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,0,79,80,95,74,77,80,9,37,48,51,100,10,0,79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0,79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0,79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0,79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,0,79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0,79,80,95,82,69,84,85,82,78,9,82,37,100,0,9,114,101,116,117,114,110,9,0,9,98,114,101,97,107,9,0,9,98,114,111,107,101,110,9,0,79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,0,79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,43,100,41,9,37,100,0,79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,0,79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,0,79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0,79,80,95,83,84,79,80,10,0,79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,0,79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,9,0,79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,9,0,79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,0,79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,0,79,80,95,83,84,82,73,78,71,9,82,37,100,9,76,40,37,100,41,9,59,32,37,115,0,79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,9,0,79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,0,79,80,95,79,67,76,65,83,83,9,82,37,100,9,9,0,79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,0,79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,0,79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,43,100,41,0,79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,9,0,79,80,95,84,67,76,65,83,83,9,82,37,100,9,9,0,79,80,95,69,82,82,9,37,115,10,0,79,80,95,69,80,85,83,72,9,58,73,40,37,43,100,41,10,0,79,80,95,79,78,69,82,82,9,37,48,51,100,10,0,79,80,95,82,69,83,67,85,69,9,82,37,100,9,9,0,79,80,95,82,65,73,83,69,9,82,37,100,9,9,0,79,80,95,80,79,80,69,82,82,9,37,100,9,9,0,79,80,95,69,80,79,80,9,37,100,10,0,79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0,99,105,105,100,120,0,102,105,108,101,0,108,105,110,101,0,78,97,109,101,69,114,114,111,114,0,119,97,114,110,105,110,103,58,32,0,98,117,103,58,32,0,101,120,99,101,112,116,105,111,110,0,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,48,46,46,51,41,0,101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,115,101,116,95,98,97,99,107,116,114,97,99,101,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,110,101,119,0,69,120,99,101,112,116,105,111,110,0,124,111,0,109,101,115,103,0,109,101,115,115,97,103,101,0,58,0,58,32,0,32,40,0,41,0,98,97,99,107,116,114,97,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,83,99,114,105,112,116,69,114,114,111,114,0,83,121,110,116,97,120,69,114,114,111,114,0,83,121,115,116,101,109,83,116,97,99,107,69,114,114,111,114,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,99,97,110,39,116,32,99,108,111,110,101,32,37,83,0,99,97,110,39,116,32,99,108,111,110,101,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,95,95,97,116,116,97,99,104,101,100,95,95,0,99,97,110,39,116,32,100,117,112,32,37,83,0,99,97,110,39,116,32,100,117,112,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,2,8,32,128,1,4,16,64,3,12,48,192,124,111,111,0,82,117,110,116,105,109,101,69,114,114,111,114,0,108,97,115,116,112,99,0,98,108,111,99,107,95,103,105,118,101,110,63,0,103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0,105,116,101,114,97,116,111,114,63,0,108,111,99,97,108,95,118,97,114,105,97,98,108,101,115,0,114,97,105,115,101,0,115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0,33,61,0,95,95,105,100,95,95,0,95,95,115,101,110,100,95,95,0,99,108,97,115,115,0,99,108,111,110,101,0,100,117,112,0,101,113,117,97,108,63,0,101,120,116,101,110,100,0,42,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,101,120,116,101,110,100,101,100,0,104,97,115,104,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0,105,110,115,116,97,110,99,101,95,101,118,97,108,0,105,110,115,116,97,110,99,101,95,111,102,63,0,67,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,110,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,110,111,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0,105,115,95,97,63,0,107,105,110,100,95,111,102,63,0,109,101,116,104,111,100,115,0,124,98,0,110,105,108,63,0,111,98,106,101,99,116,95,105,100,0,112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0,112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0,112,117,98,108,105,99,95,109,101,116,104,111,100,115,0,114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,114,101,115,112,111,110,100,95,116,111,63,0,111,124,98,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,114,101,115,112,111,110,100,95,116,111,95,109,105,115,115,105,110,103,63,0,115,101,110,100,0,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0,110,38,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,67,97,110,39,116,32,103,101,116,32,99,102,117,110,99,32,101,110,118,32,102,114,111,109,32,110,111,110,45,99,102,117,110,99,32,112,114,111,99,46,0,67,97,110,39,116,32,103,101,116,32,99,102,117,110,99,32,101,110,118,32,102,114,111,109,32,99,102,117,110,99,32,80,114,111,99,32,119,105,116,104,111,117,116,32,82,69,110,118,46,0,73,110,100,101,120,69,114,114,111,114,0,69,110,118,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,58,32,37,83,32,40,101,120,112,101,99,116,101,100,58,32,48,32,60,61,32,105,110,100,101,120,32,60,32,37,83,41,0,38,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,110,111,116,32,97,32,112,114,111,99,0,97,114,105,116,121,0,91,93,0,108,97,109,98,100,97,0,60,61,62,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0,82,97,110,103,101,0,111,111,124,98,0,111,0,61,61,0,84,121,112,101,69,114,114,111,114,0,98,101,103,105,110,0,101,110,100,0,101,120,99,108,117,100,101,95,101,110,100,63,0,102,105,114,115,116,0,105,110,99,108,117,100,101,63,0,105,110,105,116,105,97,108,105,122,101,0,108,97,115,116,0,109,101,109,98,101,114,63,0,116,111,95,115,0,46,46,46,0,105,110,115,112,101,99,116,0,101,113,108,63,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,49,46,50,46,48,0,49,46,57,0,82,85,66,89,95,86,69,82,83,73,79,78,0,109,114,117,98,121,0,82,85,66,89,95,69,78,71,73,78,69,0,82,85,66,89,95,69,78,71,73,78,69,95,86,69,82,83,73,79,78,0,77,82,85,66,89,95,86,69,82,83,73,79,78,0,77,82,85,66,89,95,82,69,76,69,65,83,69,95,78,79,0,50,48,49,53,45,49,49,45,49,55,0,77,82,85,66,89,95,82,69,76,69,65,83,69,95,68,65,84,69,0,109,114,117,98,121,32,49,46,50,46,48,32,40,50,48,49,53,45,49,49,45,49,55,41,32,0,77,82,85,66,89,95,68,69,83,67,82,73,80,84,73,79,78,0,109,114,117,98,121,32,45,32,67,111,112,121,114,105,103,104,116,32,40,99,41,32,50,48,49,48,45,50,48,49,53,32,109,114,117,98,121,32,100,101,118,101,108,111,112,101,114,115,0,77,82,85,66,89,95,67,79,80,89,82,73,71,72,84,0,109,114,98,95,114,101,97,108,108,111,99,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0,116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0,112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0,98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0,95,95,99,97,115,101,95,101,113,113,0,61,61,61,0,117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0,117,110,101,120,112,101,99,116,101,100,32,115,99,111,112,101,0,109,114,98,95,109,97,108,108,111,99,0,101,97,99,104,0,95,95,117,112,100,97,116,101,0,99,97,108,108,0,117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0,117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0,117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0,117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0,36,0,109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0,45,0,105,110,116,101,114,110,0,75,101,114,110,101,108,0,96,0,82,101,103,101,120,112,0,99,111,109,112,105,108,101,0,97,108,105,97,115,95,109,101,116,104,111,100,0,117,110,100,101,102,95,109,101,116,104,111,100,0,67,111,109,112,97,114,97,98,108,101,0,69,110,117,109,101,114,97,98,108,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  var _llvm_fabs_f64=Math_abs;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

  var _llvm_fabs_f32=Math_abs;

   
  Module["_pthread_self"] = _pthread_self;

  function _OutputDebugStringA() {
  Module['printErr']('missing function: OutputDebugStringA'); abort(-1);
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_llvm_pow_f64": _llvm_pow_f64, "_OutputDebugStringA": _OutputDebugStringA, "_abort": _abort, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "_longjmp": _longjmp, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "___setErrNo": ___setErrNo, "_llvm_fabs_f32": _llvm_fabs_f32, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_emscripten_longjmp": _emscripten_longjmp, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _OutputDebugStringA=env._OutputDebugStringA;
  var _abort=env._abort;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _longjmp=env._longjmp;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __exit=env.__exit;
  var ___setErrNo=env.___setErrNo;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $args = 0, $load = 0, $mrb = 0, $n = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, $wfp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $args = sp + 60|0;
 $load = sp + 48|0;
 $3 = sp + 40|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 $4 = (_mrb_open()|0);
 $mrb = $4;
 $5 = $mrb;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[637]|0;
  (_fputs(53168,$7)|0);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $8 = $mrb;
 $9 = $1;
 $10 = $2;
 $11 = (_parse_args($8,$9,$10,$args)|0);
 $n = $11;
 $12 = $n;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $mrb;
  _cleanup($14,$args);
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  _usage($16);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $17 = $n;
 $18 = $1;
 $19 = ($17|0)==($18|0);
 if ($19) {
  $20 = HEAP32[637]|0;
  $21 = ((($args)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  (_fprintf($20,53201,$vararg_buffer)|0);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $23 = ((($args)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 do {
  if ($25) {
   $26 = ((($args)) + 24|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 & 1;
   $29 = ($28<<24>>24)!=(0);
   if (!($29)) {
    $30 = $n;
    $31 = (($30) + 1)|0;
    $32 = $1;
    $33 = ($31|0)==($32|0);
    if ($33) {
     $34 = $mrb;
     $35 = $n;
     $36 = $2;
     $37 = (($36) + ($35<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($args)) + 20|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)!=(0|0);
     $42 = $41 ? 53228 : 53231;
     $43 = (_get_outfilename($34,$38,$42)|0);
     $44 = ((($args)) + 16|0);
     HEAP32[$44>>2] = $43;
     break;
    }
    $45 = HEAP32[637]|0;
    $46 = ((($args)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $47;
    (_fprintf($45,53236,$vararg_buffer1)|0);
    $0 = 1;
    $100 = $0;
    STACKTOP = sp;return ($100|0);
   }
  }
 } while(0);
 $48 = $n;
 $49 = ((($args)) + 8|0);
 HEAP32[$49>>2] = $48;
 $50 = $mrb;
 _load_file($3,$50,$args);
 ;HEAP32[$load>>2]=HEAP32[$3>>2]|0;HEAP32[$load+4>>2]=HEAP32[$3+4>>2]|0;
 $51 = ((($load)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if ($53) {
  $54 = HEAP32[$load>>2]|0;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = $mrb;
   _cleanup($56,$args);
   $0 = 1;
   $100 = $0;
   STACKTOP = sp;return ($100|0);
  }
 }
 $57 = ((($args)) + 24|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 & 1;
 $60 = ($59<<24>>24)!=(0);
 if ($60) {
  $61 = ((($args)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $n;
  $64 = $2;
  $65 = (($64) + ($63<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $62;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $66;
  (_printf(53299,$vararg_buffer4)|0);
 }
 $67 = ((($args)) + 24|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68 & 1;
 $70 = ($69<<24>>24)!=(0);
 if ($70) {
  $71 = $mrb;
  _cleanup($71,$args);
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $72 = ((($args)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if (!($74)) {
  $89 = HEAP32[637]|0;
  (_fprintf($89,53353,$vararg_buffer12)|0);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $75 = ((($args)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (_strcmp(69609,$76)|0);
 $78 = ($77|0)==(0);
 if ($78) {
  $79 = HEAP32[695]|0;
  $wfp = $79;
 } else {
  $80 = ((($args)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (_fopen($81,53316)|0);
  $wfp = $82;
  $83 = ($82|0)==(0|0);
  if ($83) {
   $84 = HEAP32[637]|0;
   $85 = ((($args)) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($args)) + 16|0);
   $88 = HEAP32[$87>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $86;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $88;
   (_fprintf($84,53319,$vararg_buffer8)|0);
   $0 = 1;
   $100 = $0;
   STACKTOP = sp;return ($100|0);
  }
 }
 $90 = $mrb;
 $91 = $wfp;
 $92 = ((($args)) + 16|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$load>>2]|0;
 $95 = (_dump_file($90,$91,$93,$94,$args)|0);
 $result = $95;
 $96 = $wfp;
 (_fclose($96)|0);
 $97 = $mrb;
 _cleanup($97,$args);
 $98 = $result;
 $99 = ($98|0)!=(0);
 if ($99) {
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 } else {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _parse_args($mrb,$argc,$argv,$args) {
 $mrb = $mrb|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $outfile = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $mrb;
 $2 = $argc;
 $3 = $argv;
 $4 = $args;
 $outfile = 0;
 $5 = $4;
 ;HEAP32[$5>>2]=HEAP32[72396>>2]|0;HEAP32[$5+4>>2]=HEAP32[72396+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[72396+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[72396+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[72396+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[72396+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[72396+24>>2]|0;
 $6 = $2;
 $7 = $4;
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 $i = 1;
 L1: while(1) {
  $15 = $i;
  $16 = $2;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   label = 36;
   break;
  }
  $18 = $i;
  $19 = $3;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)==(45);
  if (!($24)) {
   label = 36;
   break;
  }
  $25 = $i;
  $26 = $3;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  L5: do {
   switch ($31|0) {
   case 104:  {
    label = 24;
    break L1;
    break;
   }
   case 111:  {
    $32 = $4;
    $33 = ((($32)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)!=(0|0);
    if ($35) {
     label = 6;
     break L1;
    }
    $41 = $i;
    $42 = $3;
    $43 = (($42) + ($41<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = $i;
     $50 = (($49) + 1)|0;
     $51 = $3;
     $52 = (($51) + ($50<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)!=(0|0);
     if ($54) {
      $55 = $i;
      $56 = (($55) + 1)|0;
      $i = $56;
      $57 = $1;
      $58 = $i;
      $59 = $3;
      $60 = (($59) + ($58<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (_get_outfilename($57,$61,75436)|0);
      $63 = $4;
      $64 = ((($63)) + 16|0);
      HEAP32[$64>>2] = $62;
      break L5;
     }
    }
    $65 = $1;
    $66 = $i;
    $67 = $3;
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 2|0);
    $71 = (_get_outfilename($65,$70,75436)|0);
    $72 = $4;
    $73 = ((($72)) + 16|0);
    HEAP32[$73>>2] = $71;
    break;
   }
   case 66:  {
    $74 = $i;
    $75 = $3;
    $76 = (($75) + ($74<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)==(0);
    if ($81) {
     $82 = $i;
     $83 = (($82) + 1)|0;
     $84 = $3;
     $85 = (($84) + ($83<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)!=(0|0);
     if ($87) {
      $88 = $i;
      $89 = (($88) + 1)|0;
      $i = $89;
      $90 = $i;
      $91 = $3;
      $92 = (($91) + ($90<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $4;
      $95 = ((($94)) + 20|0);
      HEAP32[$95>>2] = $93;
     } else {
      label = 14;
     }
    } else {
     label = 14;
    }
    if ((label|0) == 14) {
     label = 0;
     $96 = $i;
     $97 = $3;
     $98 = (($97) + ($96<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ((($99)) + 2|0);
     $101 = $4;
     $102 = ((($101)) + 20|0);
     HEAP32[$102>>2] = $100;
    }
    $103 = $4;
    $104 = ((($103)) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $108 = ($107|0)==(0);
    if ($108) {
     label = 16;
     break L1;
    }
    break;
   }
   case 99:  {
    $113 = $4;
    $114 = ((($113)) + 24|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 & -2;
    $117 = $116 | 1;
    HEAP8[$114>>0] = $117;
    break;
   }
   case 118:  {
    $118 = $4;
    $119 = ((($118)) + 24|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120&255) >>> 1;
    $122 = $121 & 1;
    $123 = ($122<<24>>24)!=(0);
    if (!($123)) {
     $124 = $1;
     _mrb_show_version($124);
    }
    $125 = $4;
    $126 = ((($125)) + 24|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 & -3;
    $129 = $128 | 2;
    HEAP8[$126>>0] = $129;
    break;
   }
   case 103:  {
    $130 = $4;
    $131 = ((($130)) + 24|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = ($132&255) >>> 2;
    $134 = $133 & 15;
    $135 = $134&255;
    $136 = $135 | 1;
    $137 = $136&255;
    $138 = HEAP8[$131>>0]|0;
    $139 = $137 & 15;
    $140 = ($139 << 2)&255;
    $141 = $138 & -61;
    $142 = $141 | $140;
    HEAP8[$131>>0] = $142;
    break;
   }
   case 69:  {
    $143 = $4;
    $144 = ((($143)) + 24|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = ($145&255) >>> 2;
    $147 = $146 & 15;
    $148 = $147&255;
    $149 = $148 & -7;
    $150 = 2 | $149;
    $151 = $4;
    $152 = ((($151)) + 24|0);
    $153 = $150&255;
    $154 = HEAP8[$152>>0]|0;
    $155 = $153 & 15;
    $156 = ($155 << 2)&255;
    $157 = $154 & -61;
    $158 = $157 | $156;
    HEAP8[$152>>0] = $158;
    break;
   }
   case 101:  {
    $159 = $4;
    $160 = ((($159)) + 24|0);
    $161 = HEAP8[$160>>0]|0;
    $162 = ($161&255) >>> 2;
    $163 = $162 & 15;
    $164 = $163&255;
    $165 = $164 & -7;
    $166 = 4 | $165;
    $167 = $4;
    $168 = ((($167)) + 24|0);
    $169 = $166&255;
    $170 = HEAP8[$168>>0]|0;
    $171 = $169 & 15;
    $172 = ($171 << 2)&255;
    $173 = $170 & -61;
    $174 = $173 | $172;
    HEAP8[$168>>0] = $174;
    break;
   }
   case 45:  {
    $175 = $i;
    $176 = $3;
    $177 = (($176) + ($175<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + 1|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180 << 24 >> 24;
    $182 = ($181|0)==(10);
    $183 = $i;
    if ($182) {
     label = 26;
     break L1;
    }
    $184 = $3;
    $185 = (($184) + ($183<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ((($186)) + 2|0);
    $188 = (_strcmp($187,53462)|0);
    $189 = ($188|0)==(0);
    if ($189) {
     label = 28;
     break L1;
    }
    $191 = $i;
    $192 = $3;
    $193 = (($192) + ($191<<2)|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ((($194)) + 2|0);
    $196 = (_strcmp($195,53470)|0);
    $197 = ($196|0)==(0);
    if (!($197)) {
     label = 31;
     break L1;
    }
    $198 = $4;
    $199 = ((($198)) + 24|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200 & -3;
    $202 = $201 | 2;
    HEAP8[$199>>0] = $202;
    break;
   }
   default: {
    label = 34;
    break L1;
   }
   }
  } while(0);
  $212 = $i;
  $213 = (($212) + 1)|0;
  $i = $213;
 }
 if ((label|0) == 6) {
  $36 = HEAP32[637]|0;
  $37 = $4;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $outfile;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $40;
  (_fprintf($36,53378,$vararg_buffer)|0);
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 16) {
  $109 = HEAP32[637]|0;
  $110 = $4;
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $112;
  (_fprintf($109,53425,$vararg_buffer2)|0);
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 24) {
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 26) {
  $0 = $183;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 28) {
  $190 = $1;
  _mrb_show_version($190);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 31) {
  $203 = $i;
  $204 = $3;
  $205 = (($204) + ($203<<2)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($206)) + 2|0);
  $208 = (_strcmp($207,53478)|0);
  $209 = ($208|0)==(0);
  if ($209) {
   $210 = $1;
   _mrb_show_copyright($210);
   _exit(0);
   // unreachable;
  }
  $0 = -1;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 34) {
  $211 = $i;
  $0 = $211;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 else if ((label|0) == 36) {
  $214 = $4;
  $215 = ((($214)) + 24|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = ($216&255) >>> 1;
  $218 = $217 & 1;
  $219 = $218&255;
  $220 = ($219|0)!=(0);
  if ($220) {
   $221 = $4;
   $222 = ((($221)) + 20|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ($223|0)!=(0|0);
   if ($224) {
    $225 = $4;
    $226 = ((($225)) + 24|0);
    $227 = HEAP8[$226>>0]|0;
    $228 = ($227&255) >>> 2;
    $229 = $228 & 15;
    $230 = $229&255;
    $231 = $230 & 6;
    $232 = ($231|0)==(0);
    if ($232) {
     $233 = HEAP32[637]|0;
     $234 = $4;
     $235 = ((($234)) + 12|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = (_bigendian_p()|0);
     $238 = ($237|0)!=(0);
     $239 = $238 ? 53557 : 53561;
     HEAP32[$vararg_buffer5>>2] = $236;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $239;
     (_fprintf($233,53488,$vararg_buffer5)|0);
    }
   }
  }
  $240 = $i;
  $0 = $240;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 return (0)|0;
}
function _cleanup($mrb,$args) {
 $mrb = $mrb|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $args;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _mrb_free($2,$5);
 $6 = $0;
 _mrb_close($6);
 STACKTOP = sp;return;
}
function _usage($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $name;
 $p = 8;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_printf(54001,$vararg_buffer)|0);
 while(1) {
  $2 = $p;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $p;
  $6 = ((($5)) + 4|0);
  $p = $6;
  $7 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $7;
  (_printf(54035,$vararg_buffer1)|0);
 }
 STACKTOP = sp;return;
}
function _get_outfilename($mrb,$infile,$ext) {
 $mrb = $mrb|0;
 $infile = $infile|0;
 $ext = $ext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extlen = 0, $infilelen = 0, $outfile = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $infile;
 $2 = $ext;
 $3 = $1;
 $4 = (_strlen($3)|0);
 $infilelen = $4;
 $5 = $2;
 $6 = (_strlen($5)|0);
 $extlen = $6;
 $7 = $0;
 $8 = $infilelen;
 $9 = $extlen;
 $10 = (($8) + ($9))|0;
 $11 = (($10) + 1)|0;
 $12 = (_mrb_malloc($7,$11)|0);
 $outfile = $12;
 $13 = $outfile;
 $14 = $1;
 $15 = $infilelen;
 $16 = (($15) + 1)|0;
 _memcpy(($13|0),($14|0),($16|0))|0;
 $17 = $2;
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if (!($19)) {
  $30 = $outfile;
  STACKTOP = sp;return ($30|0);
 }
 $20 = $outfile;
 $21 = (_strrchr($20,46)|0);
 $p = $21;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $outfile;
  $24 = $infilelen;
  $25 = (($23) + ($24)|0);
  $p = $25;
 }
 $26 = $p;
 $27 = $2;
 $28 = $extlen;
 $29 = (($28) + 1)|0;
 _memcpy(($26|0),($27|0),($29|0))|0;
 $30 = $outfile;
 STACKTOP = sp;return ($30|0);
}
function _load_file($agg$result,$mrb,$args) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $c = 0, $infile = 0, $input = 0, $need_close = 0, $result = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $result = sp + 24|0;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $args;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($5<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $input = $10;
 $need_close = 0;
 $11 = $0;
 $12 = (_mrbc_context_new($11)|0);
 $c = $12;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15&255) >>> 1;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $c;
  $20 = ((($19)) + 28|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 & -3;
  $23 = $22 | 2;
  HEAP8[$20>>0] = $23;
 }
 $24 = $c;
 $25 = ((($24)) + 28|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 & -5;
 $28 = $27 | 4;
 HEAP8[$25>>0] = $28;
 $29 = $input;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = ($31|0)==(45);
 if ($32) {
  $33 = $input;
  $34 = ((($33)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = HEAP32[666]|0;
   $infile = $38;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $need_close = 1;
  $39 = $input;
  $40 = (_fopen($39,54041)|0);
  $infile = $40;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $42 = HEAP32[637]|0;
   $43 = $1;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $input;
   HEAP32[$vararg_buffer>>2] = $45;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $46;
   (_fprintf($42,54043,$vararg_buffer)|0);
   _mrb_nil_value($agg$result);
   STACKTOP = sp;return;
  }
 }
 $47 = $0;
 $48 = $c;
 $49 = $input;
 (_mrbc_filename($47,$48,$49)|0);
 $50 = $1;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$51>>2] = $53;
 $54 = $1;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = ($56|0)<($58|0);
 if ($59) {
  $need_close = 0;
  $60 = $0;
  $61 = $c;
  $62 = $1;
  _mrbc_partial_hook($60,$61,7,$62);
 }
 $63 = $0;
 $64 = $infile;
 $65 = $c;
 _mrb_load_file_cxt($2,$63,$64,$65);
 ;HEAP32[$result>>2]=HEAP32[$2>>2]|0;HEAP32[$result+4>>2]=HEAP32[$2+4>>2]|0;
 $66 = $need_close;
 $67 = ($66<<24>>24)!=(0);
 if ($67) {
  $68 = $infile;
  (_fclose($68)|0);
 }
 $69 = $0;
 $70 = $c;
 _mrbc_context_free($69,$70);
 $71 = ((($result)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(5);
 if ($73) {
  _mrb_nil_value($agg$result);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _dump_file($mrb,$wfp,$outfile,$proc,$args) {
 $mrb = $mrb|0;
 $wfp = $wfp|0;
 $outfile = $outfile|0;
 $proc = $proc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $irep = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = $wfp;
 $2 = $outfile;
 $3 = $proc;
 $4 = $args;
 $n = 0;
 $5 = $3;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $irep = $7;
 $8 = $4;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $0;
 $13 = $irep;
 $14 = $4;
 $15 = ((($14)) + 24|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16&255) >>> 2;
 $18 = $17 & 15;
 $19 = $18&255;
 $20 = $19&255;
 $21 = $1;
 if ($11) {
  $22 = $4;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_mrb_dump_irep_cfunc($12,$13,$20,$21,$24)|0);
  $n = $25;
  $26 = $n;
  $27 = ($26|0)==(-7);
  if ($27) {
   $28 = HEAP32[637]|0;
   $29 = $4;
   $30 = ((($29)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer>>2] = $31;
   (_fprintf($28,54079,$vararg_buffer)|0);
  }
 } else {
  $32 = (_mrb_dump_irep_binary($12,$13,$20,$21)|0);
  $n = $32;
 }
 $33 = $n;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $41 = $n;
  STACKTOP = sp;return ($41|0);
 }
 $35 = HEAP32[637]|0;
 $36 = $4;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $2;
 $40 = $n;
 HEAP32[$vararg_buffer1>>2] = $38;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $39;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $40;
 (_fprintf($35,54115,$vararg_buffer1)|0);
 $41 = $n;
 STACKTOP = sp;return ($41|0);
}
function _mrb_init_mrblib($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 STACKTOP = sp;return;
}
function _mrb_init_mrbgems($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 STACKTOP = sp;return;
}
function _bigendian_p() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 HEAP32[$i>>2] = 1;
 $p = $i;
 $0 = $p;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 0 : 1;
 STACKTOP = sp;return ($4|0);
}
function _mrb_nil_value($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _partial_hook($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $c = 0, $fn = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $c = $4;
 $5 = $c;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $args = $7;
 $8 = $1;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  (_fclose($14)|0);
 }
 $15 = $args;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $args;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)>=($19|0);
 if ($20) {
  $21 = $1;
  $22 = ((($21)) + 20|0);
  HEAP32[$22>>2] = 0;
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $23 = $args;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 $27 = $args;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($25<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $fn = $31;
 $32 = $fn;
 $33 = (_fopen($32,54041)|0);
 $34 = $1;
 $35 = ((($34)) + 20|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = HEAP32[637]|0;
  $41 = $args;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $fn;
  HEAP32[$vararg_buffer>>2] = $43;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $44;
  (_fprintf($40,54043,$vararg_buffer)|0);
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 } else {
  $45 = $1;
  $46 = $fn;
  _mrb_parser_set_filename($45,$46);
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _dump_flags($flags,$native) {
 $flags = $flags|0;
 $native = $native|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $flags;
 $2 = $native;
 $3 = $2;
 $4 = $3&255;
 $5 = ($4|0)==(2);
 $6 = $1;
 $7 = $6&255;
 $8 = $7 & 6;
 $9 = ($8|0)==(0);
 $10 = $1;
 do {
  if ($5) {
   if ($9) {
    $11 = $10&255;
    $12 = $11 & 1;
    $13 = $12 | 6;
    $14 = $13&255;
    $0 = $14;
    break;
   } else {
    $0 = $10;
    break;
   }
  } else {
   if ($9) {
    $15 = $10&255;
    $16 = $15 & 1;
    $17 = $16 | 2;
    $18 = $17&255;
    $0 = $18;
    break;
   } else {
    $0 = $10;
    break;
   }
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _dump_irep($mrb,$irep,$flags,$bin,$bin_size) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $flags = $flags|0;
 $bin = $bin|0;
 $bin_size = $bin_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur = 0;
 var $debug_info_defined = 0, $filenames = 0, $filenames_len = 0, $lv_defined = 0, $lv_syms = 0, $lv_syms_len = 0, $malloc_size = 0, $result = 0, $section_irep_size = 0, $section_lineno_size = 0, $section_lv_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $section_irep_size = sp + 24|0;
 $lv_syms = sp + 8|0;
 $lv_syms_len = sp + 4|0;
 $filenames = sp;
 $filenames_len = sp + 56|0;
 $1 = $mrb;
 $2 = $irep;
 $3 = $flags;
 $4 = $bin;
 $5 = $bin_size;
 $result = -1;
 $section_lineno_size = 0;
 $section_lv_size = 0;
 $cur = 0;
 $6 = $2;
 $7 = (_is_debug_info_defined($6)|0);
 $debug_info_defined = $7;
 $8 = $2;
 $9 = (_is_lv_defined($8)|0);
 $lv_defined = $9;
 HEAP32[$lv_syms>>2] = 0;
 HEAP32[$lv_syms_len>>2] = 0;
 HEAP32[$filenames>>2] = 0;
 HEAP16[$filenames_len>>1] = 0;
 $10 = $1;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $4;
  HEAP32[$12>>2] = 0;
  $0 = -1;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 HEAP32[$section_irep_size>>2] = 12;
 $13 = $1;
 $14 = $2;
 $15 = (_get_irep_record_size($13,$14)|0);
 $16 = HEAP32[$section_irep_size>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[$section_irep_size>>2] = $17;
 $18 = $3;
 $19 = $18&255;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 do {
  if ($21) {
   $22 = $debug_info_defined;
   $23 = ($22<<24>>24)!=(0);
   $24 = $section_lineno_size;
   $25 = (($24) + 8)|0;
   $section_lineno_size = $25;
   $26 = $1;
   if ($23) {
    $27 = (_mrb_malloc($26,5)|0);
    HEAP32[$filenames>>2] = $27;
    $28 = $section_lineno_size;
    $29 = (($28) + 2)|0;
    $section_lineno_size = $29;
    $30 = $1;
    $31 = $2;
    $32 = (_get_filename_table_size($30,$31,$filenames,$filenames_len)|0);
    $33 = $section_lineno_size;
    $34 = (($33) + ($32))|0;
    $section_lineno_size = $34;
    $35 = $1;
    $36 = $2;
    $37 = (_get_debug_record_size($35,$36)|0);
    $38 = $section_lineno_size;
    $39 = (($38) + ($37))|0;
    $section_lineno_size = $39;
    break;
   } else {
    $40 = $2;
    $41 = (_get_lineno_record_size($26,$40)|0);
    $42 = $section_lineno_size;
    $43 = (($42) + ($41))|0;
    $section_lineno_size = $43;
    break;
   }
  }
 } while(0);
 $44 = $lv_defined;
 $45 = ($44<<24>>24)!=(0);
 if ($45) {
  $46 = $section_lv_size;
  $47 = (($46) + 8)|0;
  $section_lv_size = $47;
  $48 = $1;
  $49 = $2;
  _create_lv_sym_table($48,$49,$lv_syms,$lv_syms_len);
  $50 = $1;
  $51 = $2;
  $52 = HEAP32[$lv_syms>>2]|0;
  $53 = HEAP32[$lv_syms_len>>2]|0;
  $54 = (_get_lv_section_size($50,$51,$52,$53)|0);
  $55 = $section_lv_size;
  $56 = (($55) + ($54))|0;
  $section_lv_size = $56;
 }
 $57 = HEAP32[$section_irep_size>>2]|0;
 $58 = (22 + ($57))|0;
 $59 = $section_lineno_size;
 $60 = (($58) + ($59))|0;
 $61 = $section_lv_size;
 $62 = (($60) + ($61))|0;
 $63 = (($62) + 8)|0;
 $malloc_size = $63;
 $64 = $1;
 $65 = $malloc_size;
 $66 = (_mrb_malloc($64,$65)|0);
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $cur = $66;
 $68 = $cur;
 $69 = ((($68)) + 22|0);
 $cur = $69;
 $70 = $1;
 $71 = $2;
 $72 = $cur;
 $73 = $3;
 $74 = (_write_section_irep($70,$71,$72,$section_irep_size,$73)|0);
 $result = $74;
 $75 = $result;
 $76 = ($75|0)!=(0);
 do {
  if (!($76)) {
   $77 = HEAP32[$section_irep_size>>2]|0;
   $78 = $cur;
   $79 = (($78) + ($77)|0);
   $cur = $79;
   $80 = HEAP32[$section_irep_size>>2]|0;
   $81 = (22 + ($80))|0;
   $82 = $section_lineno_size;
   $83 = (($81) + ($82))|0;
   $84 = $section_lv_size;
   $85 = (($83) + ($84))|0;
   $86 = (($85) + 8)|0;
   $87 = $5;
   HEAP32[$87>>2] = $86;
   $88 = $3;
   $89 = $88&255;
   $90 = $89 & 1;
   $91 = ($90|0)!=(0);
   if ($91) {
    $92 = $debug_info_defined;
    $93 = ($92<<24>>24)!=(0);
    $94 = $1;
    $95 = $2;
    $96 = $cur;
    if ($93) {
     $97 = HEAP32[$filenames>>2]|0;
     $98 = HEAP16[$filenames_len>>1]|0;
     $99 = (_write_section_debug($94,$95,$96,$97,$98)|0);
     $result = $99;
    } else {
     $100 = (_write_section_lineno($94,$95,$96)|0);
     $result = $100;
    }
    $101 = $result;
    $102 = ($101|0)!=(0);
    if ($102) {
     break;
    }
    $103 = $section_lineno_size;
    $104 = $cur;
    $105 = (($104) + ($103)|0);
    $cur = $105;
   }
   $106 = $lv_defined;
   $107 = ($106<<24>>24)!=(0);
   if ($107) {
    $108 = $1;
    $109 = $2;
    $110 = $cur;
    $111 = HEAP32[$lv_syms>>2]|0;
    $112 = HEAP32[$lv_syms_len>>2]|0;
    $113 = (_write_section_lv($108,$109,$110,$111,$112)|0);
    $result = $113;
    $114 = $result;
    $115 = ($114|0)!=(0);
    if ($115) {
     break;
    }
    $116 = $section_lv_size;
    $117 = $cur;
    $118 = (($117) + ($116)|0);
    $cur = $118;
   }
   $119 = $1;
   $120 = $cur;
   (_write_footer($119,$120)|0);
   $121 = $1;
   $122 = $5;
   $123 = HEAP32[$122>>2]|0;
   $124 = $4;
   $125 = HEAP32[$124>>2]|0;
   $126 = $3;
   (_write_rite_binary_header($121,$123,$125,$126)|0);
  }
 } while(0);
 $127 = $result;
 $128 = ($127|0)!=(0);
 if ($128) {
  $129 = $1;
  $130 = $4;
  $131 = HEAP32[$130>>2]|0;
  _mrb_free($129,$131);
  $132 = $4;
  HEAP32[$132>>2] = 0;
 }
 $133 = $1;
 $134 = HEAP32[$lv_syms>>2]|0;
 _mrb_free($133,$134);
 $135 = $1;
 $136 = HEAP32[$filenames>>2]|0;
 _mrb_free($135,$136);
 $137 = $result;
 $0 = $137;
 $138 = $0;
 STACKTOP = sp;return ($138|0);
}
function _is_debug_info_defined($irep) {
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $irep;
 $2 = $1;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ((($7)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $i;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_is_debug_info_defined($16)|0);
  $18 = ($17<<24>>24)!=(0);
  if (!($18)) {
   label = 6;
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 8) {
  $0 = 1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _is_lv_defined($irep) {
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $irep;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $0 = 1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ((($7)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $i;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_is_lv_defined($16)|0);
  $18 = ($17<<24>>24)!=(0);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _get_irep_record_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $irep_no = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_get_irep_record_size_1($2,$3)|0);
 $size = $4;
 $irep_no = 0;
 while(1) {
  $5 = $irep_no;
  $6 = $1;
  $7 = ((($6)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = $irep_no;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_get_irep_record_size($10,$16)|0);
  $18 = $size;
  $19 = (($18) + ($17))|0;
  $size = $19;
  $20 = $irep_no;
  $21 = (($20) + 1)|0;
  $irep_no = $21;
 }
 $22 = $size;
 STACKTOP = sp;return ($22|0);
}
function _get_irep_record_size_1($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $2 = $0;
 $3 = (_get_irep_header_size($2)|0);
 $4 = $size;
 $5 = (($4) + ($3))|0;
 $size = $5;
 $6 = $0;
 $7 = $1;
 $8 = (_get_iseq_block_size($6,$7)|0);
 $9 = $size;
 $10 = (($9) + ($8))|0;
 $size = $10;
 $11 = $0;
 $12 = $1;
 $13 = (_get_pool_block_size($11,$12)|0);
 $14 = $size;
 $15 = (($14) + ($13))|0;
 $size = $15;
 $16 = $0;
 $17 = $1;
 $18 = (_get_syms_block_size($16,$17)|0);
 $19 = $size;
 $20 = (($19) + ($18))|0;
 $size = $20;
 $21 = $size;
 STACKTOP = sp;return ($21|0);
}
function _get_irep_header_size($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $size = 0;
 $1 = $size;
 $2 = (($1) + 4)|0;
 $size = $2;
 $3 = $size;
 $4 = (($3) + 6)|0;
 $size = $4;
 $5 = $size;
 STACKTOP = sp;return ($5|0);
}
function _get_iseq_block_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $2 = $size;
 $3 = (($2) + 4)|0;
 $size = $3;
 $4 = $size;
 $5 = (($4) + 4)|0;
 $size = $5;
 $6 = $1;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $10 = $size;
 $11 = (($10) + ($9))|0;
 $size = $11;
 $12 = $size;
 STACKTOP = sp;return ($12|0);
}
function _get_pool_block_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ai = 0, $len = 0, $len1 = 0, $len2 = 0, $pool_no = 0, $size = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $str = sp + 40|0;
 $2 = sp + 24|0;
 $3 = sp + 8|0;
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $4 = $size;
 $5 = (($4) + 4)|0;
 $size = $5;
 $6 = $1;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*3)|0;
 $10 = $size;
 $11 = (($10) + ($9))|0;
 $size = $11;
 $pool_no = 0;
 while(1) {
  $12 = $pool_no;
  $13 = $1;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = (_mrb_gc_arena_save($17)|0);
  $ai = $18;
  $19 = $pool_no;
  $20 = $1;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<3)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  switch ($25|0) {
  case 3:  {
   $26 = $0;
   $27 = $pool_no;
   $28 = $1;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$31+4>>2]|0;
   _mrb_fixnum_to_str($2,$26,$$byval_copy,10);
   ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
   $32 = HEAP32[$str>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 11;
   $35 = $34 & 8;
   $36 = ($35|0)!=(0);
   $37 = HEAP32[$str>>2]|0;
   if ($36) {
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 >>> 11;
    $40 = $39 & 496;
    $41 = $40 >> 4;
    $44 = $41;
   } else {
    $42 = ((($37)) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $43;
   }
   $len = $44;
   $45 = $len;
   $46 = $size;
   $47 = (($46) + ($45))|0;
   $size = $47;
   break;
  }
  case 6:  {
   $48 = $0;
   $49 = $pool_no;
   $50 = $1;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49<<3)|0);
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$53+4>>2]|0;
   _mrb_float_to_str($3,$48,$$byval_copy1,54146);
   ;HEAP32[$str>>2]=HEAP32[$3>>2]|0;HEAP32[$str+4>>2]=HEAP32[$3+4>>2]|0;
   $54 = HEAP32[$str>>2]|0;
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 >>> 11;
   $57 = $56 & 8;
   $58 = ($57|0)!=(0);
   $59 = HEAP32[$str>>2]|0;
   if ($58) {
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 >>> 11;
    $62 = $61 & 496;
    $63 = $62 >> 4;
    $66 = $63;
   } else {
    $64 = ((($59)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65;
   }
   $len1 = $66;
   $67 = $len1;
   $68 = $size;
   $69 = (($68) + ($67))|0;
   $size = $69;
   break;
  }
  case 16:  {
   $70 = $pool_no;
   $71 = $1;
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($70<<3)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 >>> 11;
   $78 = $77 & 8;
   $79 = ($78|0)!=(0);
   $80 = $pool_no;
   $81 = $1;
   $82 = ((($81)) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + ($80<<3)|0);
   $85 = HEAP32[$84>>2]|0;
   if ($79) {
    $86 = HEAP32[$85>>2]|0;
    $87 = $86 >>> 11;
    $88 = $87 & 496;
    $89 = $88 >> 4;
    $92 = $89;
   } else {
    $90 = ((($85)) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $91;
   }
   $len2 = $92;
   $93 = $len2;
   $94 = $size;
   $95 = (($94) + ($93))|0;
   $size = $95;
   break;
  }
  default: {
  }
  }
  $96 = $0;
  $97 = $ai;
  _mrb_gc_arena_restore($96,$97);
  $98 = $pool_no;
  $99 = (($98) + 1)|0;
  $pool_no = $99;
 }
 $100 = $size;
 STACKTOP = sp;return ($100|0);
}
function _get_syms_block_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $size = 0, $sym_no = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $2 = $size;
 $3 = (($2) + 4)|0;
 $size = $3;
 $sym_no = 0;
 while(1) {
  $4 = $sym_no;
  $5 = $1;
  $6 = ((($5)) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  $9 = $size;
  if (!($8)) {
   break;
  }
  $10 = (($9) + 2)|0;
  $size = $10;
  $11 = $sym_no;
  $12 = $1;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $0;
   $19 = $sym_no;
   $20 = $1;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($19<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   (_mrb_sym2name_len($18,$24,$len)|0);
   $25 = HEAP32[$len>>2]|0;
   $26 = (($25) + 1)|0;
   $27 = $size;
   $28 = (($27) + ($26))|0;
   $size = $28;
  }
  $29 = $sym_no;
  $30 = (($29) + 1)|0;
  $sym_no = $30;
 }
 STACKTOP = sp;return ($9|0);
}
function _get_filename_table_size($mrb,$irep,$fp,$lp) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $fp = $fp|0;
 $lp = $lp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $di = 0, $file = 0, $filename_len = 0, $filenames = 0, $i = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $filename_len = sp;
 $0 = $mrb;
 $1 = $irep;
 $2 = $fp;
 $3 = $lp;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $filenames = $5;
 $size = 0;
 $6 = $1;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $di = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $di;
  $11 = ((($10)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($9>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $di;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $file = $20;
  $21 = $filenames;
  $22 = $3;
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $file;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_find_filename_index($21,$24,$27)|0);
  $29 = ($28|0)==(-1);
  if ($29) {
   $30 = $3;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = (($32) + 1)|0;
   $34 = $33&65535;
   HEAP16[$30>>1] = $34;
   $35 = $0;
   $36 = $filenames;
   $37 = $3;
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = $39<<2;
   $41 = (_mrb_realloc($35,$36,$40)|0);
   $filenames = $41;
   $42 = $2;
   HEAP32[$42>>2] = $41;
   $43 = $file;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $3;
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = (($48) - 1)|0;
   $50 = $filenames;
   $51 = (($50) + ($49<<2)|0);
   HEAP32[$51>>2] = $45;
   $52 = $0;
   $53 = $file;
   $54 = ((($53)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   (_mrb_sym2name_len($52,$55,$filename_len)|0);
   $56 = HEAP32[$filename_len>>2]|0;
   $57 = (2 + ($56))|0;
   $58 = $size;
   $59 = (($58) + ($57))|0;
   $size = $59;
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $i = 0;
 while(1) {
  $62 = $i;
  $63 = $1;
  $64 = ((($63)) + 52|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62>>>0)<($65>>>0);
  if (!($66)) {
   break;
  }
  $67 = $0;
  $68 = $i;
  $69 = $1;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($68<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $2;
  $75 = $3;
  $76 = (_get_filename_table_size($67,$73,$74,$75)|0);
  $77 = $size;
  $78 = (($77) + ($76))|0;
  $size = $78;
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
 }
 $81 = $size;
 STACKTOP = sp;return ($81|0);
}
function _find_filename_index($ary,$ary_len,$s) {
 $ary = $ary|0;
 $ary_len = $ary_len|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ary;
 $2 = $ary_len;
 $3 = $s;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $2;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ($10|0)==($11|0);
  $13 = $i;
  if ($12) {
   label = 4;
   break;
  }
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 if ((label|0) == 4) {
  $0 = $13;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _get_debug_record_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $f_idx = 0, $file = 0, $i = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $ret = 0;
 $2 = $ret;
 $3 = (($2) + 4)|0;
 $ret = $3;
 $4 = $ret;
 $5 = (($4) + 2)|0;
 $ret = $5;
 $f_idx = 0;
 while(1) {
  $6 = $f_idx;
  $7 = $6&65535;
  $8 = $1;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($7|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $f_idx;
  $16 = $15&65535;
  $17 = $1;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($16<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $file = $23;
  $24 = $ret;
  $25 = (($24) + 4)|0;
  $ret = $25;
  $26 = $ret;
  $27 = (($26) + 2)|0;
  $ret = $27;
  $28 = $ret;
  $29 = (($28) + 4)|0;
  $ret = $29;
  $30 = $ret;
  $31 = (($30) + 1)|0;
  $ret = $31;
  $32 = $file;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  switch ($34|0) {
  case 0:  {
   $35 = $file;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37<<1;
   $39 = $ret;
   $40 = (($39) + ($38))|0;
   $ret = $40;
   break;
  }
  case 1:  {
   $41 = $file;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43*6)|0;
   $45 = $ret;
   $46 = (($45) + ($44))|0;
   $ret = $46;
   break;
  }
  default: {
  }
  }
  $47 = $f_idx;
  $48 = (($47) + 1)<<16>>16;
  $f_idx = $48;
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = $1;
  $51 = ((($50)) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49>>>0)<($52>>>0);
  if (!($53)) {
   break;
  }
  $54 = $0;
  $55 = $i;
  $56 = $1;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_get_debug_record_size($54,$60)|0);
  $62 = $ret;
  $63 = (($62) + ($61))|0;
  $ret = $63;
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 $66 = $ret;
 STACKTOP = sp;return ($66|0);
}
function _get_lineno_record_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $size = 0;
 $2 = $size;
 $3 = (($2) + 4)|0;
 $size = $3;
 $4 = $size;
 $5 = (($4) + 2)|0;
 $size = $5;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strlen($12)|0);
  $14 = $size;
  $15 = (($14) + ($13))|0;
  $size = $15;
 }
 $16 = $size;
 $17 = (($16) + 4)|0;
 $size = $17;
 $18 = $1;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $28 = $size;
  STACKTOP = sp;return ($28|0);
 }
 $22 = $1;
 $23 = ((($22)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24<<1;
 $26 = $size;
 $27 = (($26) + ($25))|0;
 $size = $27;
 $28 = $size;
 STACKTOP = sp;return ($28|0);
}
function _create_lv_sym_table($mrb,$irep,$syms,$syms_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $syms = $syms|0;
 $syms_len = $syms_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $syms;
 $3 = $syms_len;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $0;
  $8 = (_mrb_malloc($7,4)|0);
  $9 = $2;
  HEAP32[$9>>2] = $8;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = (($10) + 1)|0;
  $12 = $1;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $1;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<3)|0);
  $21 = HEAP32[$20>>2]|0;
  $name = $21;
  $22 = $name;
  $23 = ($22|0)==(0);
  if (!($23)) {
   $24 = $2;
   $25 = HEAP32[$24>>2]|0;
   $26 = $3;
   $27 = HEAP32[$26>>2]|0;
   $28 = $name;
   $29 = (_find_filename_index($25,$27,$28)|0);
   $30 = ($29|0)!=(-1);
   if (!($30)) {
    $31 = $3;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$31>>2] = $33;
    $34 = $0;
    $35 = $2;
    $36 = HEAP32[$35>>2]|0;
    $37 = $3;
    $38 = HEAP32[$37>>2]|0;
    $39 = $38<<2;
    $40 = (_mrb_realloc($34,$36,$39)|0);
    $41 = $2;
    HEAP32[$41>>2] = $40;
    $42 = $name;
    $43 = $3;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - 1)|0;
    $46 = $2;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45<<2)|0);
    HEAP32[$48>>2] = $42;
   }
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = $1;
  $53 = ((($52)) + 52|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if (!($55)) {
   break;
  }
  $56 = $0;
  $57 = $i;
  $58 = $1;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($57<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $2;
  $64 = $3;
  _create_lv_sym_table($56,$62,$63,$64);
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 STACKTOP = sp;return;
}
function _get_lv_section_size($mrb,$irep,$syms,$syms_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $syms = $syms|0;
 $syms_len = $syms_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $ret = 0, $str_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str_len = sp;
 $0 = $mrb;
 $1 = $irep;
 $2 = $syms;
 $3 = $syms_len;
 $ret = 0;
 $4 = $ret;
 $5 = (($4) + 4)|0;
 $ret = $5;
 $6 = $3;
 $7 = $6<<1;
 $8 = $ret;
 $9 = (($8) + ($7))|0;
 $ret = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $0;
  if (!($12)) {
   break;
  }
  $14 = $i;
  $15 = $2;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  (_mrb_sym2name_len($13,$17,$str_len)|0);
  $18 = HEAP32[$str_len>>2]|0;
  $19 = $ret;
  $20 = (($19) + ($18))|0;
  $ret = $20;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $1;
 $24 = (_get_lv_record_size($13,$23)|0);
 $25 = $ret;
 $26 = (($25) + ($24))|0;
 $ret = $26;
 $27 = $ret;
 STACKTOP = sp;return ($27|0);
}
function _get_lv_record_size($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $ret = 0;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) - 1)|0;
 $6 = $5<<2;
 $7 = $ret;
 $8 = (($7) + ($6))|0;
 $ret = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $1;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = $i;
  $16 = $1;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_get_lv_record_size($14,$20)|0);
  $22 = $ret;
  $23 = (($22) + ($21))|0;
  $ret = $23;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $ret;
 STACKTOP = sp;return ($26|0);
}
function _write_section_irep($mrb,$irep,$bin,$len_p,$flags) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 $len_p = $len_p|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $or$cond = 0, $result = 0, $rsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rsize = sp + 4|0;
 $1 = $mrb;
 $2 = $irep;
 $3 = $bin;
 $4 = $len_p;
 $5 = $flags;
 HEAP32[$rsize>>2] = 0;
 $6 = $3;
 $cur = $6;
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $9 = $3;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -7;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $11 = $cur;
 $12 = ((($11)) + 12|0);
 $cur = $12;
 $13 = $1;
 $14 = $2;
 $15 = $cur;
 $16 = $5;
 $17 = (_write_irep_record($13,$14,$15,$rsize,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $result;
  $0 = $20;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $21 = $cur;
  $22 = $3;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = HEAP32[$rsize>>2]|0;
  $27 = (($25) + ($26))|0;
  $28 = $4;
  HEAP32[$28>>2] = $27;
  $29 = $1;
  $30 = $4;
  $31 = HEAP32[$30>>2]|0;
  $32 = $3;
  (_write_section_irep_header($29,$31,$32)|0);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _write_irep_record($mrb,$irep,$bin,$irep_record_size,$flags) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 $irep_record_size = $irep_record_size|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, $rsize = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rsize = sp;
 $1 = $mrb;
 $2 = $irep;
 $3 = $bin;
 $4 = $irep_record_size;
 $5 = $flags;
 $6 = $3;
 $src = $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -6;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $9 = $1;
 $10 = $2;
 $11 = (_get_irep_record_size_1($9,$10)|0);
 $12 = $4;
 HEAP32[$12>>2] = $11;
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $0 = -1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = (_write_irep_header($16,$17,$18)|0);
 $20 = $3;
 $21 = (($20) + ($19)|0);
 $3 = $21;
 $22 = $1;
 $23 = $2;
 $24 = $3;
 $25 = $5;
 $26 = (_write_iseq_block($22,$23,$24,$25)|0);
 $27 = $3;
 $28 = (($27) + ($26)|0);
 $3 = $28;
 $29 = $1;
 $30 = $2;
 $31 = $3;
 $32 = (_write_pool_block($29,$30,$31)|0);
 $33 = $3;
 $34 = (($33) + ($32)|0);
 $3 = $34;
 $35 = $1;
 $36 = $2;
 $37 = $3;
 $38 = (_write_syms_block($35,$36,$37)|0);
 $39 = $3;
 $40 = (($39) + ($38)|0);
 $3 = $40;
 $i = 0;
 while(1) {
  $41 = $i;
  $42 = $2;
  $43 = ((($42)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41>>>0)<($44>>>0);
  if (!($45)) {
   label = 10;
   break;
  }
  $46 = $1;
  $47 = $i;
  $48 = $2;
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $3;
  $54 = $5;
  $55 = (_write_irep_record($46,$52,$53,$rsize,$54)|0);
  $result = $55;
  $56 = $result;
  $57 = ($56|0)!=(0);
  if ($57) {
   label = 8;
   break;
  }
  $59 = HEAP32[$rsize>>2]|0;
  $60 = $3;
  $61 = (($60) + ($59)|0);
  $3 = $61;
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 if ((label|0) == 8) {
  $58 = $result;
  $0 = $58;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 10) {
  $64 = $3;
  $65 = $src;
  $66 = $64;
  $67 = $65;
  $68 = (($66) - ($67))|0;
  $69 = $4;
  HEAP32[$69>>2] = $68;
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function _write_irep_header($mrb,$irep,$buf) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $buf;
 $3 = $2;
 $cur = $3;
 $4 = $0;
 $5 = $1;
 $6 = (_get_irep_record_size_1($4,$5)|0);
 $7 = $cur;
 $8 = (_uint32_to_bin($6,$7)|0);
 $9 = $cur;
 $10 = (($9) + ($8)|0);
 $cur = $10;
 $11 = $1;
 $12 = HEAP16[$11>>1]|0;
 $13 = $cur;
 $14 = (_uint16_to_bin($12,$13)|0);
 $15 = $cur;
 $16 = (($15) + ($14)|0);
 $cur = $16;
 $17 = $1;
 $18 = ((($17)) + 2|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $cur;
 $21 = (_uint16_to_bin($19,$20)|0);
 $22 = $cur;
 $23 = (($22) + ($21)|0);
 $cur = $23;
 $24 = $1;
 $25 = ((($24)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26&65535;
 $28 = $cur;
 $29 = (_uint16_to_bin($27,$28)|0);
 $30 = $cur;
 $31 = (($30) + ($29)|0);
 $cur = $31;
 $32 = $cur;
 $33 = $2;
 $34 = $32;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 STACKTOP = sp;return ($36|0);
}
function _uint32_to_bin($l,$bin) {
 $l = $l|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $bin;
 $2 = $0;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $1 = $7;
 HEAP8[$6>>0] = $5;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 255;
 $11 = $10&255;
 $12 = $1;
 $13 = ((($12)) + 1|0);
 $1 = $13;
 HEAP8[$12>>0] = $11;
 $14 = $0;
 $15 = $14 >>> 8;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $1;
 $19 = ((($18)) + 1|0);
 $1 = $19;
 HEAP8[$18>>0] = $17;
 $20 = $0;
 $21 = $20 & 255;
 $22 = $21&255;
 $23 = $1;
 HEAP8[$23>>0] = $22;
 STACKTOP = sp;return 4;
}
function _uint16_to_bin($s,$bin) {
 $s = $s|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $bin;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 >> 8;
 $5 = $4 & 255;
 $6 = $5&255;
 $7 = $1;
 $8 = ((($7)) + 1|0);
 $1 = $8;
 HEAP8[$7>>0] = $6;
 $9 = $0;
 $10 = $9&65535;
 $11 = $10 & 255;
 $12 = $11&255;
 $13 = $1;
 HEAP8[$13>>0] = $12;
 STACKTOP = sp;return 2;
}
function _write_iseq_block($mrb,$irep,$buf,$flags) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $buf = $buf|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $cur = 0, $iseq_no = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $buf;
 $3 = $flags;
 $4 = $2;
 $cur = $4;
 $5 = $1;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $cur;
 $9 = (_uint32_to_bin($7,$8)|0);
 $10 = $cur;
 $11 = (($10) + ($9)|0);
 $cur = $11;
 $12 = $cur;
 $13 = (_write_padding($12)|0);
 $14 = $cur;
 $15 = (($14) + ($13)|0);
 $cur = $15;
 $16 = $3;
 $17 = $16&255;
 $18 = $17 & 6;
 switch ($18|0) {
 case 2:  {
  $19 = (_bigendian_p_2()|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $iseq_no = 0;
   while(1) {
    $21 = $iseq_no;
    $22 = $1;
    $23 = ((($22)) + 40|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($21>>>0)<($24>>>0);
    if (!($25)) {
     break;
    }
    $26 = $iseq_no;
    $27 = $1;
    $28 = ((($27)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $cur;
    $33 = (_uint32_to_bin($31,$32)|0);
    $34 = $cur;
    $35 = (($34) + ($33)|0);
    $cur = $35;
    $36 = $iseq_no;
    $37 = (($36) + 1)|0;
    $iseq_no = $37;
   }
   $71 = $cur;
   $72 = $2;
   $73 = $71;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   STACKTOP = sp;return ($75|0);
  }
  break;
 }
 case 4:  {
  $38 = (_bigendian_p_2()|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   $iseq_no = 0;
   while(1) {
    $40 = $iseq_no;
    $41 = $1;
    $42 = ((($41)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40>>>0)<($43>>>0);
    if (!($44)) {
     break;
    }
    $45 = $iseq_no;
    $46 = $1;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($45<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $cur;
    $52 = (_uint32l_to_bin($50,$51)|0);
    $53 = $cur;
    $54 = (($53) + ($52)|0);
    $cur = $54;
    $55 = $iseq_no;
    $56 = (($55) + 1)|0;
    $iseq_no = $56;
   }
   $71 = $cur;
   $72 = $2;
   $73 = $71;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   STACKTOP = sp;return ($75|0);
  }
  break;
 }
 case 6:  {
  break;
 }
 default: {
  $71 = $cur;
  $72 = $2;
  $73 = $71;
  $74 = $72;
  $75 = (($73) - ($74))|0;
  STACKTOP = sp;return ($75|0);
 }
 }
 $57 = $cur;
 $58 = $1;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $1;
 $62 = ((($61)) + 40|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63<<2;
 _memcpy(($57|0),($60|0),($64|0))|0;
 $65 = $1;
 $66 = ((($65)) + 40|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67<<2;
 $69 = $cur;
 $70 = (($69) + ($68)|0);
 $cur = $70;
 $71 = $cur;
 $72 = $2;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 STACKTOP = sp;return ($75|0);
}
function _write_padding($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $pad_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $align = 4;
 $1 = $0;
 $2 = $1;
 $3 = (0 - ($2))|0;
 $4 = $3 & 3;
 $pad_len = $4;
 $5 = $pad_len;
 $6 = ($5>>>0)>(0);
 if ($6) {
  $7 = $0;
  $8 = $pad_len;
  _memset(($7|0),0,($8|0))|0;
 }
 $9 = $pad_len;
 STACKTOP = sp;return ($9|0);
}
function _bigendian_p_2() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 4|0;
 HEAP32[$i>>2] = 1;
 $p = $i;
 $0 = $p;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 0 : 1;
 STACKTOP = sp;return ($4|0);
}
function _uint32l_to_bin($l,$bin) {
 $l = $l|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $bin;
 $2 = $0;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $1;
 $7 = ((($6)) + 3|0);
 HEAP8[$7>>0] = $5;
 $8 = $0;
 $9 = $8 >>> 16;
 $10 = $9 & 255;
 $11 = $10&255;
 $12 = $1;
 $13 = ((($12)) + 2|0);
 HEAP8[$13>>0] = $11;
 $14 = $0;
 $15 = $14 >>> 8;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $1;
 $19 = ((($18)) + 1|0);
 HEAP8[$19>>0] = $17;
 $20 = $0;
 $21 = $20 & 255;
 $22 = $21&255;
 $23 = $1;
 HEAP8[$23>>0] = $22;
 STACKTOP = sp;return 4;
}
function _write_pool_block($mrb,$irep,$buf) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $buf = $buf|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ai = 0, $char_ptr = 0, $cur = 0, $len = 0, $pool_no = 0, $str = 0, $tlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $str = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $0 = $mrb;
 $1 = $irep;
 $2 = $buf;
 $5 = $2;
 $cur = $5;
 $6 = $1;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $cur;
 $10 = (_uint32_to_bin($8,$9)|0);
 $11 = $cur;
 $12 = (($11) + ($10)|0);
 $cur = $12;
 $pool_no = 0;
 while(1) {
  $13 = $pool_no;
  $14 = $1;
  $15 = ((($14)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $0;
  $19 = (_mrb_gc_arena_save($18)|0);
  $ai = $19;
  $20 = $pool_no;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<3)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  switch ($26|0) {
  case 3:  {
   $27 = $cur;
   $28 = (_uint8_to_bin(1,$27)|0);
   $29 = $cur;
   $30 = (($29) + ($28)|0);
   $cur = $30;
   $31 = $0;
   $32 = $pool_no;
   $33 = $1;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$36+4>>2]|0;
   _mrb_fixnum_to_str($3,$31,$$byval_copy,10);
   ;HEAP32[$str>>2]=HEAP32[$3>>2]|0;HEAP32[$str+4>>2]=HEAP32[$3+4>>2]|0;
   label = 7;
   break;
  }
  case 6:  {
   $37 = $cur;
   $38 = (_uint8_to_bin(2,$37)|0);
   $39 = $cur;
   $40 = (($39) + ($38)|0);
   $cur = $40;
   $41 = $0;
   $42 = $pool_no;
   $43 = $1;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42<<3)|0);
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$46+4>>2]|0;
   _mrb_float_to_str($4,$41,$$byval_copy1,54146);
   ;HEAP32[$str>>2]=HEAP32[$4>>2]|0;HEAP32[$str+4>>2]=HEAP32[$4+4>>2]|0;
   label = 7;
   break;
  }
  case 16:  {
   $47 = $cur;
   $48 = (_uint8_to_bin(0,$47)|0);
   $49 = $cur;
   $50 = (($49) + ($48)|0);
   $cur = $50;
   $51 = $pool_no;
   $52 = $1;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($51<<3)|0);
   ;HEAP32[$str>>2]=HEAP32[$55>>2]|0;HEAP32[$str+4>>2]=HEAP32[$55+4>>2]|0;
   label = 7;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 7) {
   label = 0;
   $56 = HEAP32[$str>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 >>> 11;
   $59 = $58 & 8;
   $60 = ($59|0)!=(0);
   $61 = HEAP32[$str>>2]|0;
   $62 = ((($61)) + 12|0);
   if ($60) {
    $65 = $62;
   } else {
    $63 = ((($62)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64;
   }
   $char_ptr = $65;
   $66 = HEAP32[$str>>2]|0;
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 >>> 11;
   $69 = $68 & 8;
   $70 = ($69|0)!=(0);
   $71 = HEAP32[$str>>2]|0;
   if ($70) {
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 >>> 11;
    $74 = $73 & 496;
    $75 = $74 >> 4;
    $78 = $75;
   } else {
    $76 = ((($71)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77;
   }
   $tlen = $78;
   $79 = $tlen;
   $80 = $79&65535;
   $len = $80;
   $81 = $len;
   $82 = $cur;
   $83 = (_uint16_to_bin($81,$82)|0);
   $84 = $cur;
   $85 = (($84) + ($83)|0);
   $cur = $85;
   $86 = $cur;
   $87 = $char_ptr;
   $88 = $len;
   $89 = $88&65535;
   _memcpy(($86|0),($87|0),($89|0))|0;
   $90 = $len;
   $91 = $90&65535;
   $92 = $cur;
   $93 = (($92) + ($91)|0);
   $cur = $93;
   $94 = $0;
   $95 = $ai;
   _mrb_gc_arena_restore($94,$95);
  }
  $96 = $pool_no;
  $97 = (($96) + 1)|0;
  $pool_no = $97;
 }
 $98 = $cur;
 $99 = $2;
 $100 = $98;
 $101 = $99;
 $102 = (($100) - ($101))|0;
 STACKTOP = sp;return ($102|0);
}
function _uint8_to_bin($s,$bin) {
 $s = $s|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $bin;
 $2 = $0;
 $3 = $1;
 HEAP8[$3>>0] = $2;
 STACKTOP = sp;return 1;
}
function _write_syms_block($mrb,$irep,$buf) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $len = 0;
 var $name = 0, $sym_no = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $0 = $mrb;
 $1 = $irep;
 $2 = $buf;
 $3 = $2;
 $cur = $3;
 $4 = $1;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $cur;
 $8 = (_uint32_to_bin($6,$7)|0);
 $9 = $cur;
 $10 = (($9) + ($8)|0);
 $cur = $10;
 $sym_no = 0;
 while(1) {
  $11 = $sym_no;
  $12 = $1;
  $13 = ((($12)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $sym_no;
  $17 = $1;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $sym_no;
   $25 = $1;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (_mrb_sym2name_len($23,$29,$len)|0);
   $name = $30;
   $31 = HEAP32[$len>>2]|0;
   $32 = $31&65535;
   $33 = $cur;
   $34 = (_uint16_to_bin($32,$33)|0);
   $35 = $cur;
   $36 = (($35) + ($34)|0);
   $cur = $36;
   $37 = $cur;
   $38 = $name;
   $39 = HEAP32[$len>>2]|0;
   _memcpy(($37|0),($38|0),($39|0))|0;
   $40 = HEAP32[$len>>2]|0;
   $41 = $40&65535;
   $42 = $41&65535;
   $43 = $cur;
   $44 = (($43) + ($42)|0);
   $cur = $44;
   $45 = $cur;
   $46 = ((($45)) + 1|0);
   $cur = $46;
   HEAP8[$45>>0] = 0;
  } else {
   $47 = $cur;
   $48 = (_uint16_to_bin(-1,$47)|0);
   $49 = $cur;
   $50 = (($49) + ($48)|0);
   $cur = $50;
  }
  $51 = $sym_no;
  $52 = (($51) + 1)|0;
  $sym_no = $52;
 }
 $53 = $cur;
 $54 = $2;
 $55 = $53;
 $56 = $54;
 $57 = (($55) - ($56))|0;
 STACKTOP = sp;return ($57|0);
}
function _write_section_irep_header($mrb,$section_size,$bin) {
 $mrb = $mrb|0;
 $section_size = $section_size|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $section_size;
 $2 = $bin;
 $3 = $2;
 $header = $3;
 $4 = $header;
 ;HEAP8[$4>>0]=HEAP8[54151>>0]|0;HEAP8[$4+1>>0]=HEAP8[54151+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[54151+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[54151+3>>0]|0;
 $5 = $1;
 $6 = $header;
 $7 = ((($6)) + 4|0);
 (_uint32_to_bin($5,$7)|0);
 $8 = $header;
 $9 = ((($8)) + 8|0);
 ;HEAP8[$9>>0]=HEAP8[54156>>0]|0;HEAP8[$9+1>>0]=HEAP8[54156+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[54156+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[54156+3>>0]|0;
 STACKTOP = sp;return 0;
}
function _write_section_debug($mrb,$irep,$cur,$filenames,$filenames_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $cur = $cur|0;
 $filenames = $filenames|0;
 $filenames_len = $filenames_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $bin = 0, $dlen = 0, $header = 0, $i = 0, $or$cond = 0, $section_size = 0, $sym = 0, $sym_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sym_len = sp;
 $1 = $mrb;
 $2 = $irep;
 $3 = $cur;
 $4 = $filenames;
 $5 = $filenames_len;
 $section_size = 0;
 $6 = $3;
 $bin = $6;
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $9 = $3;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -7;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $11 = $bin;
 $header = $11;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $3 = $13;
 $14 = $section_size;
 $15 = (($14) + 8)|0;
 $section_size = $15;
 $16 = $5;
 $17 = $3;
 $18 = (_uint16_to_bin($16,$17)|0);
 $19 = $3;
 $20 = (($19) + ($18)|0);
 $3 = $20;
 $21 = $section_size;
 $22 = (($21) + 2)|0;
 $section_size = $22;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $23&65535;
  $25 = $5;
  $26 = $25&65535;
  $27 = ($24|0)<($26|0);
  $28 = $1;
  if (!($27)) {
   break;
  }
  $29 = $i;
  $30 = $29&65535;
  $31 = $4;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_mrb_sym2name_len($28,$33,$sym_len)|0);
  $sym = $34;
  $35 = HEAP32[$sym_len>>2]|0;
  $36 = $35&65535;
  $37 = $3;
  $38 = (_uint16_to_bin($36,$37)|0);
  $39 = $3;
  $40 = (($39) + ($38)|0);
  $3 = $40;
  $41 = $3;
  $42 = $sym;
  $43 = HEAP32[$sym_len>>2]|0;
  _memcpy(($41|0),($42|0),($43|0))|0;
  $44 = HEAP32[$sym_len>>2]|0;
  $45 = $3;
  $46 = (($45) + ($44)|0);
  $3 = $46;
  $47 = HEAP32[$sym_len>>2]|0;
  $48 = (2 + ($47))|0;
  $49 = $section_size;
  $50 = (($49) + ($48))|0;
  $section_size = $50;
  $51 = $i;
  $52 = (($51) + 1)<<16>>16;
  $i = $52;
 }
 $53 = $2;
 $54 = $3;
 $55 = $4;
 $56 = $5;
 $57 = (_write_debug_record($28,$53,$54,$55,$56)|0);
 $dlen = $57;
 $58 = $dlen;
 $59 = $section_size;
 $60 = (($59) + ($58))|0;
 $section_size = $60;
 $61 = $header;
 ;HEAP8[$61>>0]=HEAP8[54161>>0]|0;HEAP8[$61+1>>0]=HEAP8[54161+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[54161+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[54161+3>>0]|0;
 $62 = $section_size;
 $63 = $header;
 $64 = ((($63)) + 4|0);
 (_uint32_to_bin($62,$64)|0);
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _write_debug_record($mrb,$irep,$bin,$filenames,$filenames_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 $filenames = $filenames|0;
 $filenames_len = $filenames_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irep_no = 0;
 var $len = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $bin;
 $3 = $filenames;
 $4 = $filenames_len;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (_write_debug_record_1($5,$6,$7,$8,$9)|0);
 $len = $10;
 $size = $10;
 $11 = $len;
 $12 = $2;
 $13 = (($12) + ($11)|0);
 $2 = $13;
 $irep_no = 0;
 while(1) {
  $14 = $irep_no;
  $15 = $1;
  $16 = ((($15)) + 52|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $0;
  $20 = $irep_no;
  $21 = $1;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = $3;
  $28 = $4;
  $29 = (_write_debug_record($19,$25,$26,$27,$28)|0);
  $len = $29;
  $30 = $len;
  $31 = $2;
  $32 = (($31) + ($30)|0);
  $2 = $32;
  $33 = $len;
  $34 = $size;
  $35 = (($34) + ($33))|0;
  $size = $35;
  $36 = $irep_no;
  $37 = (($36) + 1)|0;
  $irep_no = $37;
 }
 $38 = $size;
 STACKTOP = sp;return ($38|0);
}
function _write_debug_record_1($mrb,$irep,$bin,$filenames,$filenames_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 $filenames = $filenames|0;
 $filenames_len = $filenames_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur = 0, $f_idx = 0, $file = 0, $filename_idx = 0, $l = 0, $line = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $bin;
 $3 = $filenames;
 $4 = $filenames_len;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $cur = $6;
 $7 = $1;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $cur;
 $13 = (_uint16_to_bin($11,$12)|0);
 $14 = $cur;
 $15 = (($14) + ($13)|0);
 $cur = $15;
 $f_idx = 0;
 while(1) {
  $16 = $f_idx;
  $17 = $16&65535;
  $18 = $1;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 4|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = ($17|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $f_idx;
  $26 = $25&65535;
  $27 = $1;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($26<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $file = $33;
  $34 = $file;
  $35 = HEAP32[$34>>2]|0;
  $36 = $cur;
  $37 = (_uint32_to_bin($35,$36)|0);
  $38 = $cur;
  $39 = (($38) + ($37)|0);
  $cur = $39;
  $40 = $3;
  $41 = $4;
  $42 = $41&65535;
  $43 = $file;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_find_filename_index($40,$42,$45)|0);
  $filename_idx = $46;
  $47 = $filename_idx;
  $48 = $47&65535;
  $49 = $cur;
  $50 = (_uint16_to_bin($48,$49)|0);
  $51 = $cur;
  $52 = (($51) + ($50)|0);
  $cur = $52;
  $53 = $file;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $cur;
  $57 = (_uint32_to_bin($55,$56)|0);
  $58 = $cur;
  $59 = (($58) + ($57)|0);
  $cur = $59;
  $60 = $file;
  $61 = ((($60)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62&255;
  $64 = $cur;
  $65 = (_uint8_to_bin($63,$64)|0);
  $66 = $cur;
  $67 = (($66) + ($65)|0);
  $cur = $67;
  $68 = $file;
  $69 = ((($68)) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  L4: do {
   switch ($70|0) {
   case 0:  {
    $l = 0;
    while(1) {
     $71 = $l;
     $72 = $file;
     $73 = ((($72)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($71>>>0)<($74>>>0);
     if (!($75)) {
      break L4;
     }
     $76 = $l;
     $77 = $file;
     $78 = ((($77)) + 20|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<1)|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = $cur;
     $83 = (_uint16_to_bin($81,$82)|0);
     $84 = $cur;
     $85 = (($84) + ($83)|0);
     $cur = $85;
     $86 = $l;
     $87 = (($86) + 1)|0;
     $l = $87;
    }
    break;
   }
   case 1:  {
    $line = 0;
    while(1) {
     $88 = $line;
     $89 = $file;
     $90 = ((($89)) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($88>>>0)<($91>>>0);
     if (!($92)) {
      break L4;
     }
     $93 = $line;
     $94 = $file;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<3)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $cur;
     $100 = (_uint32_to_bin($98,$99)|0);
     $101 = $cur;
     $102 = (($101) + ($100)|0);
     $cur = $102;
     $103 = $line;
     $104 = $file;
     $105 = ((($104)) + 20|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($106) + ($103<<3)|0);
     $108 = ((($107)) + 4|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $cur;
     $111 = (_uint16_to_bin($109,$110)|0);
     $112 = $cur;
     $113 = (($112) + ($111)|0);
     $cur = $113;
     $114 = $line;
     $115 = (($114) + 1)|0;
     $line = $115;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $116 = $f_idx;
  $117 = (($116) + 1)<<16>>16;
  $f_idx = $117;
 }
 $118 = $cur;
 $119 = $2;
 $120 = $118;
 $121 = $119;
 $122 = (($120) - ($121))|0;
 $ret = $122;
 $123 = $ret;
 $124 = $2;
 (_uint32_to_bin($123,$124)|0);
 $125 = $ret;
 STACKTOP = sp;return ($125|0);
}
function _write_section_lineno($mrb,$irep,$bin) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $or$cond = 0, $rlen = 0, $section_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $irep;
 $3 = $bin;
 $section_size = 0;
 $rlen = 0;
 $4 = $3;
 $cur = $4;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = -7;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $9 = $cur;
  $10 = ((($9)) + 8|0);
  $cur = $10;
  $11 = $section_size;
  $12 = (($11) + 8)|0;
  $section_size = $12;
  $13 = $1;
  $14 = $2;
  $15 = $cur;
  $16 = (_write_lineno_record($13,$14,$15)|0);
  $rlen = $16;
  $17 = $rlen;
  $18 = $section_size;
  $19 = (($18) + ($17))|0;
  $section_size = $19;
  $20 = $1;
  $21 = $section_size;
  $22 = $3;
  (_write_section_lineno_header($20,$21,$22)|0);
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _write_lineno_record($mrb,$irep,$bin) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $rlen = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $bin;
 $size = 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_write_lineno_record_1($3,$4,$5)|0);
 $rlen = $6;
 $7 = $rlen;
 $8 = $2;
 $9 = (($8) + ($7)|0);
 $2 = $9;
 $10 = $rlen;
 $11 = $size;
 $12 = (($11) + ($10))|0;
 $size = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $1;
  $15 = ((($14)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $0;
  $19 = $1;
  $20 = $2;
  $21 = (_write_lineno_record($18,$19,$20)|0);
  $rlen = $21;
  $22 = $rlen;
  $23 = $2;
  $24 = (($23) + ($22)|0);
  $2 = $24;
  $25 = $rlen;
  $26 = $size;
  $27 = (($26) + ($25))|0;
  $size = $27;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $size;
 STACKTOP = sp;return ($30|0);
}
function _write_lineno_record_1($mrb,$irep,$bin) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $diff = 0, $filename_len = 0, $iseq_no = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $bin;
 $3 = $2;
 $cur = $3;
 $4 = $cur;
 $5 = ((($4)) + 4|0);
 $cur = $5;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strlen($12)|0);
  $filename_len = $13;
 } else {
  $filename_len = 0;
 }
 $14 = $filename_len;
 $15 = $14&65535;
 $16 = $cur;
 $17 = (_uint16_to_bin($15,$16)|0);
 $18 = $cur;
 $19 = (($18) + ($17)|0);
 $cur = $19;
 $20 = $filename_len;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $cur;
  $23 = $1;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $filename_len;
  _memcpy(($22|0),($25|0),($26|0))|0;
  $27 = $filename_len;
  $28 = $cur;
  $29 = (($28) + ($27)|0);
  $cur = $29;
 }
 $30 = $1;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $58 = $cur;
  $59 = (_uint32_to_bin(0,$58)|0);
  $60 = $cur;
  $61 = (($60) + ($59)|0);
  $cur = $61;
  $62 = $cur;
  $63 = $2;
  $64 = $62;
  $65 = $63;
  $66 = (($64) - ($65))|0;
  $diff = $66;
  $67 = $diff;
  $68 = $2;
  (_uint32_to_bin($67,$68)|0);
  $69 = $diff;
  STACKTOP = sp;return ($69|0);
 }
 $34 = $1;
 $35 = ((($34)) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $cur;
 $38 = (_uint32_to_bin($36,$37)|0);
 $39 = $cur;
 $40 = (($39) + ($38)|0);
 $cur = $40;
 $iseq_no = 0;
 while(1) {
  $41 = $iseq_no;
  $42 = $1;
  $43 = ((($42)) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $iseq_no;
  $47 = $1;
  $48 = ((($47)) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<1)|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $cur;
  $53 = (_uint16_to_bin($51,$52)|0);
  $54 = $cur;
  $55 = (($54) + ($53)|0);
  $cur = $55;
  $56 = $iseq_no;
  $57 = (($56) + 1)|0;
  $iseq_no = $57;
 }
 $62 = $cur;
 $63 = $2;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $diff = $66;
 $67 = $diff;
 $68 = $2;
 (_uint32_to_bin($67,$68)|0);
 $69 = $diff;
 STACKTOP = sp;return ($69|0);
}
function _write_section_lineno_header($mrb,$section_size,$bin) {
 $mrb = $mrb|0;
 $section_size = $section_size|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $header = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $section_size;
 $2 = $bin;
 $3 = $2;
 $header = $3;
 $4 = $header;
 ;HEAP8[$4>>0]=HEAP8[54166>>0]|0;HEAP8[$4+1>>0]=HEAP8[54166+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[54166+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[54166+3>>0]|0;
 $5 = $1;
 $6 = $header;
 $7 = ((($6)) + 4|0);
 (_uint32_to_bin($5,$7)|0);
 STACKTOP = sp;return 0;
}
function _write_section_lv($mrb,$irep,$start,$syms,$syms_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $start = $start|0;
 $syms = $syms|0;
 $syms_len = $syms_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $diff = 0;
 var $header = 0, $or$cond = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cur = sp + 12|0;
 $1 = $mrb;
 $2 = $irep;
 $3 = $start;
 $4 = $syms;
 $5 = $syms_len;
 $6 = $3;
 HEAP32[$cur>>2] = $6;
 $result = 0;
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $9 = HEAP32[$cur>>2]|0;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -7;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $11 = HEAP32[$cur>>2]|0;
 $header = $11;
 $12 = HEAP32[$cur>>2]|0;
 $13 = ((($12)) + 8|0);
 HEAP32[$cur>>2] = $13;
 $14 = $1;
 $15 = $4;
 $16 = $5;
 $17 = (_write_lv_sym_table($14,$cur,$15,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $1;
  $21 = $2;
  $22 = $4;
  $23 = $5;
  $24 = (_write_lv_record($20,$21,$cur,$22,$23)|0);
  $result = $24;
  $25 = $result;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $27 = $header;
   ;HEAP8[$27>>0]=HEAP8[54171>>0]|0;HEAP8[$27+1>>0]=HEAP8[54171+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[54171+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[54171+3>>0]|0;
   $28 = HEAP32[$cur>>2]|0;
   $29 = $3;
   $30 = $28;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   $diff = $32;
   $33 = $diff;
   $34 = $header;
   $35 = ((($34)) + 4|0);
   (_uint32_to_bin($33,$35)|0);
  }
 }
 $36 = $result;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _write_lv_sym_table($mrb,$start,$syms,$syms_len) {
 $mrb = $mrb|0;
 $start = $start|0;
 $syms = $syms|0;
 $syms_len = $syms_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $i = 0, $str = 0, $str_len = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str_len = sp;
 $0 = $mrb;
 $1 = $start;
 $2 = $syms;
 $3 = $syms_len;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $cur = $5;
 $6 = $3;
 $7 = $cur;
 $8 = (_uint32_to_bin($6,$7)|0);
 $9 = $cur;
 $10 = (($9) + ($8)|0);
 $cur = $10;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $3;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = $i;
  $16 = $2;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_mrb_sym2name_len($14,$18,$str_len)|0);
  $str = $19;
  $20 = HEAP32[$str_len>>2]|0;
  $21 = $20&65535;
  $22 = $cur;
  $23 = (_uint16_to_bin($21,$22)|0);
  $24 = $cur;
  $25 = (($24) + ($23)|0);
  $cur = $25;
  $26 = $cur;
  $27 = $str;
  $28 = HEAP32[$str_len>>2]|0;
  _memcpy(($26|0),($27|0),($28|0))|0;
  $29 = HEAP32[$str_len>>2]|0;
  $30 = $cur;
  $31 = (($30) + ($29)|0);
  $cur = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $cur;
 $35 = $1;
 HEAP32[$35>>2] = $34;
 STACKTOP = sp;return 0;
}
function _write_lv_record($mrb,$irep,$start,$syms,$syms_len) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $start = $start|0;
 $syms = $syms|0;
 $syms_len = $syms_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $cur = 0, $i = 0, $sym_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cur = sp + 8|0;
 $0 = $mrb;
 $1 = $irep;
 $2 = $start;
 $3 = $syms;
 $4 = $syms_len;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$cur>>2] = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = (($7) + 1)|0;
  $9 = $1;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($8>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $1;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<3)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = HEAP32[$cur>>2]|0;
   $21 = (_uint16_to_bin(-1,$20)|0);
   $22 = HEAP32[$cur>>2]|0;
   $23 = (($22) + ($21)|0);
   HEAP32[$cur>>2] = $23;
   $24 = HEAP32[$cur>>2]|0;
   $25 = (_uint16_to_bin(0,$24)|0);
   $26 = HEAP32[$cur>>2]|0;
   $27 = (($26) + ($25)|0);
   HEAP32[$cur>>2] = $27;
  } else {
   $28 = $3;
   $29 = $4;
   $30 = $i;
   $31 = $1;
   $32 = ((($31)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<3)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_find_filename_index($28,$29,$35)|0);
   $sym_idx = $36;
   $37 = $sym_idx;
   $38 = $37&65535;
   $39 = HEAP32[$cur>>2]|0;
   $40 = (_uint16_to_bin($38,$39)|0);
   $41 = HEAP32[$cur>>2]|0;
   $42 = (($41) + ($40)|0);
   HEAP32[$cur>>2] = $42;
   $43 = $i;
   $44 = $1;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<3)|0);
   $48 = ((($47)) + 4|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = HEAP32[$cur>>2]|0;
   $51 = (_uint16_to_bin($49,$50)|0);
   $52 = HEAP32[$cur>>2]|0;
   $53 = (($52) + ($51)|0);
   HEAP32[$cur>>2] = $53;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = $1;
  $58 = ((($57)) + 52|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56>>>0)<($59>>>0);
  if (!($60)) {
   break;
  }
  $61 = $0;
  $62 = $i;
  $63 = $1;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $3;
  $69 = $4;
  (_write_lv_record($61,$67,$cur,$68,$69)|0);
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = HEAP32[$cur>>2]|0;
 $73 = $2;
 HEAP32[$73>>2] = $72;
 STACKTOP = sp;return 0;
}
function _write_footer($mrb,$bin) {
 $mrb = $mrb|0;
 $bin = $bin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $footer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $footer = sp + 8|0;
 $0 = $mrb;
 $1 = $bin;
 ;HEAP8[$footer>>0]=HEAP8[54176>>0]|0;HEAP8[$footer+1>>0]=HEAP8[54176+1>>0]|0;HEAP8[$footer+2>>0]=HEAP8[54176+2>>0]|0;HEAP8[$footer+3>>0]=HEAP8[54176+3>>0]|0;
 $2 = ((($footer)) + 4|0);
 (_uint32_to_bin(8,$2)|0);
 $3 = $1;
 ;HEAP8[$3>>0]=HEAP8[$footer>>0]|0;HEAP8[$3+1>>0]=HEAP8[$footer+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$footer+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$footer+3>>0]|0;HEAP8[$3+4>>0]=HEAP8[$footer+4>>0]|0;HEAP8[$3+5>>0]=HEAP8[$footer+5>>0]|0;HEAP8[$3+6>>0]=HEAP8[$footer+6>>0]|0;HEAP8[$3+7>>0]=HEAP8[$footer+7>>0]|0;
 STACKTOP = sp;return 8;
}
function _write_rite_binary_header($mrb,$binary_size,$bin,$flags) {
 $mrb = $mrb|0;
 $binary_size = $binary_size|0;
 $bin = $bin|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, $header = 0;
 var $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $binary_size;
 $2 = $bin;
 $3 = $flags;
 $4 = $2;
 $header = $4;
 $5 = $3;
 $6 = $5&255;
 $7 = $6 & 6;
 switch ($7|0) {
 case 2:  {
  label = 2;
  break;
 }
 case 4:  {
  label = 3;
  break;
 }
 case 6:  {
  $10 = (_bigendian_p_2()|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 2;
  } else {
   label = 3;
  }
  break;
 }
 default: {
 }
 }
 if ((label|0) == 2) {
  $8 = $header;
  ;HEAP8[$8>>0]=HEAP8[54181>>0]|0;HEAP8[$8+1>>0]=HEAP8[54181+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[54181+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[54181+3>>0]|0;
 }
 else if ((label|0) == 3) {
  $9 = $header;
  ;HEAP8[$9>>0]=HEAP8[54186>>0]|0;HEAP8[$9+1>>0]=HEAP8[54186+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[54186+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[54186+3>>0]|0;
 }
 $12 = $header;
 $13 = ((($12)) + 4|0);
 ;HEAP8[$13>>0]=HEAP8[54191>>0]|0;HEAP8[$13+1>>0]=HEAP8[54191+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[54191+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[54191+3>>0]|0;
 $14 = $header;
 $15 = ((($14)) + 14|0);
 ;HEAP8[$15>>0]=HEAP8[54196>>0]|0;HEAP8[$15+1>>0]=HEAP8[54196+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[54196+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[54196+3>>0]|0;
 $16 = $header;
 $17 = ((($16)) + 18|0);
 ;HEAP8[$17>>0]=HEAP8[54156>>0]|0;HEAP8[$17+1>>0]=HEAP8[54156+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[54156+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[54156+3>>0]|0;
 $18 = $1;
 $19 = $header;
 $20 = ((($19)) + 10|0);
 (_uint32_to_bin($18,$20)|0);
 $21 = $header;
 $22 = ((($21)) + 8|0);
 $23 = $2;
 $24 = $22;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = (($26) + 2)|0;
 $offset = $27;
 $28 = $2;
 $29 = $offset;
 $30 = (($28) + ($29)|0);
 $31 = $1;
 $32 = $offset;
 $33 = (($31) - ($32))|0;
 $34 = (_calc_crc_16_ccitt($30,$33,0)|0);
 $crc = $34;
 $35 = $crc;
 $36 = $header;
 $37 = ((($36)) + 8|0);
 (_uint16_to_bin($35,$37)|0);
 STACKTOP = sp;return 0;
}
function _mrb_dump_irep_binary($mrb,$irep,$flags,$fp) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $flags = $flags|0;
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bin = 0, $bin_size = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bin = sp + 8|0;
 $bin_size = sp + 4|0;
 $1 = $mrb;
 $2 = $irep;
 $3 = $flags;
 $4 = $fp;
 HEAP32[$bin>>2] = 0;
 HEAP32[$bin_size>>2] = 0;
 $5 = $4;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = -7;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (_dump_flags($9,0)|0);
 $11 = (_dump_irep($7,$8,$10,$bin,$bin_size)|0);
 $result = $11;
 $12 = $result;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[$bin>>2]|0;
  $15 = HEAP32[$bin_size>>2]|0;
  $16 = $4;
  $17 = (_fwrite($14,1,$15,$16)|0);
  $18 = HEAP32[$bin_size>>2]|0;
  $19 = ($17|0)!=($18|0);
  if ($19) {
   $result = -2;
  }
 }
 $20 = $1;
 $21 = HEAP32[$bin>>2]|0;
 _mrb_free($20,$21);
 $22 = $result;
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _mrb_dump_irep_cfunc($mrb,$irep,$flags,$fp,$initname) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $flags = $flags|0;
 $fp = $fp|0;
 $initname = $initname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $bin = 0, $bin_idx = 0, $bin_size = 0, $or$cond = 0;
 var $result = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $bin = sp + 56|0;
 $bin_size = sp + 52|0;
 $1 = $mrb;
 $2 = $irep;
 $3 = $flags;
 $4 = $fp;
 $5 = $initname;
 HEAP32[$bin>>2] = 0;
 HEAP32[$bin_size>>2] = 0;
 $bin_idx = 0;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 $8 = $5;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 if (!($or$cond)) {
  $10 = $5;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = $3;
   $15 = (_dump_flags($14,2)|0);
   $3 = $15;
   $16 = $1;
   $17 = $2;
   $18 = $3;
   $19 = (_dump_irep($16,$17,$18,$bin,$bin_size)|0);
   $result = $19;
   $20 = $result;
   $21 = ($20|0)==(0);
   do {
    if ($21) {
     $22 = $3;
     $23 = (_dump_bigendian_p($22)|0);
     $24 = ($23<<24>>24)!=(0);
     $25 = $4;
     if ($24) {
      $30 = (_fprintf($25,54283,$vararg_buffer2)|0);
      $31 = ($30|0)<(0);
      if ($31) {
       $32 = $1;
       $33 = HEAP32[$bin>>2]|0;
       _mrb_free($32,$33);
       $0 = -2;
       $75 = $0;
       STACKTOP = sp;return ($75|0);
      }
     } else {
      $26 = (_fprintf($25,54201,$vararg_buffer)|0);
      $27 = ($26|0)<(0);
      if ($27) {
       $28 = $1;
       $29 = HEAP32[$bin>>2]|0;
       _mrb_free($28,$29);
       $0 = -2;
       $75 = $0;
       STACKTOP = sp;return ($75|0);
      }
     }
     $34 = $4;
     $35 = (_fprintf($34,54387,$vararg_buffer4)|0);
     $36 = ($35|0)<(0);
     if ($36) {
      $37 = $1;
      $38 = HEAP32[$bin>>2]|0;
      _mrb_free($37,$38);
      $0 = -2;
      $75 = $0;
      STACKTOP = sp;return ($75|0);
     }
     $39 = $4;
     $40 = $5;
     HEAP32[$vararg_buffer6>>2] = 4;
     $vararg_ptr8 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = 4;
     $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr9>>2] = $40;
     $41 = (_fprintf($39,54408,$vararg_buffer6)|0);
     $42 = ($41|0)<(0);
     if ($42) {
      $43 = $1;
      $44 = HEAP32[$bin>>2]|0;
      _mrb_free($43,$44);
      $0 = -2;
      $75 = $0;
      STACKTOP = sp;return ($75|0);
     }
     while(1) {
      $45 = $bin_idx;
      $46 = HEAP32[$bin_size>>2]|0;
      $47 = ($45>>>0)<($46>>>0);
      if (!($47)) {
       label = 20;
       break;
      }
      $48 = $bin_idx;
      $49 = (($48>>>0) % 16)&-1;
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = $4;
       $52 = (_fputs(66199,$51)|0);
       $53 = ($52|0)==(-1);
       if ($53) {
        label = 17;
        break;
       }
      }
      $56 = $4;
      $57 = $bin_idx;
      $58 = (($57) + 1)|0;
      $bin_idx = $58;
      $59 = HEAP32[$bin>>2]|0;
      $60 = (($59) + ($57)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      HEAP32[$vararg_buffer10>>2] = $62;
      $63 = (_fprintf($56,54533,$vararg_buffer10)|0);
      $64 = ($63|0)<(0);
      if ($64) {
       label = 19;
       break;
      }
     }
     if ((label|0) == 17) {
      $54 = $1;
      $55 = HEAP32[$bin>>2]|0;
      _mrb_free($54,$55);
      $0 = -2;
      $75 = $0;
      STACKTOP = sp;return ($75|0);
     }
     else if ((label|0) == 19) {
      $65 = $1;
      $66 = HEAP32[$bin>>2]|0;
      _mrb_free($65,$66);
      $0 = -2;
      $75 = $0;
      STACKTOP = sp;return ($75|0);
     }
     else if ((label|0) == 20) {
      $67 = $4;
      $68 = (_fputs(54541,$67)|0);
      $69 = ($68|0)==(-1);
      if (!($69)) {
       break;
      }
      $70 = $1;
      $71 = HEAP32[$bin>>2]|0;
      _mrb_free($70,$71);
      $0 = -2;
      $75 = $0;
      STACKTOP = sp;return ($75|0);
     }
    }
   } while(0);
   $72 = $1;
   $73 = HEAP32[$bin>>2]|0;
   _mrb_free($72,$73);
   $74 = $result;
   $0 = $74;
   $75 = $0;
   STACKTOP = sp;return ($75|0);
  }
 }
 $0 = -7;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function _dump_bigendian_p($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $flags;
 $2 = $1;
 $3 = $2&255;
 $4 = $3 & 6;
 switch ($4|0) {
 case 2:  {
  $0 = 1;
  break;
 }
 case 4:  {
  $0 = 0;
  break;
 }
 default: {
  $5 = (_bigendian_p_2()|0);
  $6 = $5&255;
  $0 = $6;
 }
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _mrb_float_to_str($agg$result,$mrb,$flo,$fmt) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $flo = $flo|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $fmt;
 $3 = $0;
 HEAP32[$f>>2] = $3;
 $4 = ((($f)) + 4|0);
 $5 = $0;
 _mrb_str_buf_new($2,$5,24);
 ;HEAP32[$4>>2]=HEAP32[$2>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2+4>>2]|0;
 $6 = $1;
 $7 = +HEAPF32[$flo>>2];
 $8 = (_fmt_core($f,$6,$7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $0;
  $11 = $0;
  $12 = (_mrb_class_get($11,68855)|0);
  _mrb_raise($10,$12,54546);
  // unreachable;
 } else {
  $13 = ((($f)) + 4|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$13>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _fmt_core($f,$fmt,$flo) {
 $f = $f|0;
 $fmt = $fmt|0;
 $flo = +$flo;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $fmt;
 $3 = $flo;
 $4 = $2;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)!=(37);
 if ($7) {
  $0 = -1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $8 = $2;
 $9 = ((($8)) + 1|0);
 $2 = $9;
 $10 = $2;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(46);
 L5: do {
  if ($13) {
   $14 = $2;
   $15 = ((($14)) + 1|0);
   $2 = $15;
   $p = 0;
   while(1) {
    $16 = $2;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = (($18) - 48)|0;
    $20 = ($19>>>0)<(10);
    if (!($20)) {
     break L5;
    }
    $21 = $p;
    $22 = ($21*10)|0;
    $23 = $2;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = (($25) - 48)|0;
    $27 = (($22) + ($26))|0;
    $p = $27;
    $28 = $2;
    $29 = ((($28)) + 1|0);
    $2 = $29;
   }
  } else {
   $p = -1;
  }
 } while(0);
 $30 = $2;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 switch ($32|0) {
 case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
  $33 = $1;
  $34 = $3;
  $35 = $34;
  $36 = $p;
  $37 = $2;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = (_fmt_fp($33,$35,0,$36,0,$39)|0);
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
  break;
 }
 default: {
  $0 = -1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 }
 return (0)|0;
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0.0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $big = 0, $buf = 0;
 var $carry = 0, $carry2 = 0, $d = 0, $e = 0, $e2 = 0, $ebuf = 0, $ebuf0 = 0, $estr = 0, $i = 0, $j = 0, $l = 0, $need = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $pl = 0, $prefix = 0, $r = 0, $re = 0, $rm = 0;
 var $round = 0.0, $round5 = 0.0, $s = 0, $sh = 0, $sh3 = 0, $small = 0.0, $ss = 0, $ss6 = 0, $ss7 = 0, $ss8 = 0, $x = 0, $x1 = 0, $x4 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big = sp + 152|0;
 $e2 = sp + 128|0;
 $buf = sp + 692|0;
 $ebuf0 = sp + 680|0;
 $x1 = sp + 16|0;
 $1 = $f;
 $2 = $y;
 $3 = $w;
 $4 = $p;
 $5 = $fl;
 $6 = $t;
 HEAP32[$e2>>2] = 0;
 $prefix = 72345;
 $7 = ((($ebuf0)) + 12|0);
 $ebuf = $7;
 $pl = 1;
 $8 = $2;
 $9 = (___DOUBLE_BITS($8)|0);
 $10 = tempRet0;
 $11 = (_bitshift64Lshr(($9|0),($10|0),63)|0);
 $12 = tempRet0;
 $13 = ($11|0)!=(0);
 do {
  if ($13) {
   $14 = $2;
   $15 = -$14;
   $2 = $15;
  } else {
   $16 = $5;
   $17 = $16 & 2048;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $prefix;
    $20 = ((($19)) + 3|0);
    $prefix = $20;
    break;
   }
   $21 = $5;
   $22 = $21 & 1;
   $23 = ($22|0)!=(0);
   $24 = $prefix;
   if ($23) {
    $25 = ((($24)) + 6|0);
    $prefix = $25;
    break;
   } else {
    $26 = ((($24)) + 1|0);
    $prefix = $26;
    $pl = 0;
    break;
   }
  }
 } while(0);
 $27 = $2;
 $28 = (___DOUBLE_BITS($27)|0);
 $29 = tempRet0;
 $30 = $29 & 2147483647;
 $31 = ($30>>>0)<(2146435072);
 $32 = ($28>>>0)<(0);
 $33 = ($30|0)==(2146435072);
 $34 = $33 & $32;
 $35 = $31 | $34;
 if (!($35)) {
  $36 = $6;
  $37 = $36 & 32;
  $38 = ($37|0)!=(0);
  $39 = $38 ? 72364 : 72368;
  $ss = $39;
  $40 = $2;
  $41 = $2;
  $42 = $40 != $41;
  if ($42) {
   $43 = $6;
   $44 = $43 & 32;
   $45 = ($44|0)!=(0);
   $46 = $45 ? 72387 : 72372;
   $ss = $46;
  }
  $47 = $1;
  $48 = $3;
  $49 = $pl;
  $50 = (3 + ($49))|0;
  $51 = $5;
  $52 = $51 & -65537;
  _pad($47,32,$48,$50,$52);
  $53 = $1;
  $54 = $prefix;
  $55 = $pl;
  _out($53,$54,$55);
  $56 = $1;
  $57 = $ss;
  _out($56,$57,3);
  $58 = $1;
  $59 = $3;
  $60 = $pl;
  $61 = (3 + ($60))|0;
  $62 = $5;
  $63 = $62 ^ 8192;
  _pad($58,32,$59,$61,$63);
  $64 = $3;
  $65 = $pl;
  $66 = (3 + ($65))|0;
  $67 = ($64|0)>($66|0);
  $68 = $3;
  $69 = $pl;
  $70 = (3 + ($69))|0;
  $71 = $67 ? $68 : $70;
  $0 = $71;
  $935 = $0;
  STACKTOP = sp;return ($935|0);
 }
 $72 = $2;
 $73 = (+_frexp($72,$e2));
 $74 = $73 * 2.0;
 $2 = $74;
 $75 = $2;
 $76 = $75 != 0.0;
 if ($76) {
  $77 = HEAP32[$e2>>2]|0;
  $78 = (($77) + -1)|0;
  HEAP32[$e2>>2] = $78;
 }
 $79 = $6;
 $80 = $79 | 32;
 $81 = ($80|0)==(97);
 if ($81) {
  $round = 8.0;
  $82 = $6;
  $83 = $82 & 32;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $prefix;
   $86 = ((($85)) + 9|0);
   $prefix = $86;
  }
  $87 = $pl;
  $88 = (($87) + 2)|0;
  $pl = $88;
  $89 = $4;
  $90 = ($89|0)<(0);
  $91 = $4;
  $92 = ($91|0)>=(12);
  $or$cond = $90 | $92;
  if ($or$cond) {
   $re = 0;
  } else {
   $93 = $4;
   $94 = (12 - ($93))|0;
   $re = $94;
  }
  $95 = $re;
  $96 = ($95|0)!=(0);
  do {
   if ($96) {
    while(1) {
     $97 = $re;
     $98 = (($97) + -1)|0;
     $re = $98;
     $99 = ($97|0)!=(0);
     if (!($99)) {
      break;
     }
     $100 = $round;
     $101 = $100 * 16.0;
     $round = $101;
    }
    $102 = $prefix;
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = ($104|0)==(45);
    if ($105) {
     $106 = $2;
     $107 = -$106;
     $2 = $107;
     $108 = $round;
     $109 = $2;
     $110 = $109 - $108;
     $2 = $110;
     $111 = $round;
     $112 = $2;
     $113 = $112 + $111;
     $2 = $113;
     $114 = $2;
     $115 = -$114;
     $2 = $115;
     break;
    } else {
     $116 = $round;
     $117 = $2;
     $118 = $117 + $116;
     $2 = $118;
     $119 = $round;
     $120 = $2;
     $121 = $120 - $119;
     $2 = $121;
     break;
    }
   }
  } while(0);
  $122 = HEAP32[$e2>>2]|0;
  $123 = ($122|0)<(0);
  $124 = HEAP32[$e2>>2]|0;
  $125 = (0 - ($124))|0;
  $126 = $123 ? $125 : $124;
  $127 = $ebuf;
  $128 = (_fmt_u($126,$127)|0);
  $estr = $128;
  $129 = $estr;
  $130 = $ebuf;
  $131 = ($129|0)==($130|0);
  if ($131) {
   $132 = $estr;
   $133 = ((($132)) + -1|0);
   $estr = $133;
   HEAP8[$133>>0] = 48;
  }
  $134 = HEAP32[$e2>>2]|0;
  $135 = ($134|0)<(0);
  $136 = $135 ? 45 : 43;
  $137 = $136&255;
  $138 = $estr;
  $139 = ((($138)) + -1|0);
  $estr = $139;
  HEAP8[$139>>0] = $137;
  $140 = $6;
  $141 = (($140) + 15)|0;
  $142 = $141&255;
  $143 = $estr;
  $144 = ((($143)) + -1|0);
  $estr = $144;
  HEAP8[$144>>0] = $142;
  $s = $buf;
  while(1) {
   $145 = $2;
   $146 = (~~(($145)));
   $x = $146;
   $147 = $x;
   $148 = (70420 + ($147)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149 << 24 >> 24;
   $151 = $6;
   $152 = $151 & 32;
   $153 = $150 | $152;
   $154 = $153&255;
   $155 = $s;
   $156 = ((($155)) + 1|0);
   $s = $156;
   HEAP8[$155>>0] = $154;
   $157 = $2;
   $158 = $x;
   $159 = (+($158|0));
   $160 = $157 - $159;
   $161 = 16.0 * $160;
   $2 = $161;
   $162 = $s;
   $163 = $162;
   $164 = $buf;
   $165 = (($163) - ($164))|0;
   $166 = ($165|0)==(1);
   do {
    if ($166) {
     $167 = $2;
     $168 = $167 != 0.0;
     $169 = $4;
     $170 = ($169|0)>(0);
     $or$cond3 = $168 | $170;
     if (!($or$cond3)) {
      $171 = $5;
      $172 = $171 & 8;
      $173 = ($172|0)!=(0);
      if (!($173)) {
       break;
      }
     }
     $174 = $s;
     $175 = ((($174)) + 1|0);
     $s = $175;
     HEAP8[$174>>0] = 46;
    }
   } while(0);
   $176 = $2;
   $177 = $176 != 0.0;
   if (!($177)) {
    break;
   }
  }
  $178 = $4;
  $179 = ($178|0)!=(0);
  if ($179) {
   $180 = $s;
   $181 = $180;
   $182 = $buf;
   $183 = (($181) - ($182))|0;
   $184 = (($183) - 2)|0;
   $185 = $4;
   $186 = ($184|0)<($185|0);
   if ($186) {
    $187 = $4;
    $188 = (($187) + 2)|0;
    $189 = $ebuf;
    $190 = $estr;
    $191 = $189;
    $192 = $190;
    $193 = (($191) - ($192))|0;
    $194 = (($188) + ($193))|0;
    $l = $194;
   } else {
    label = 37;
   }
  } else {
   label = 37;
  }
  if ((label|0) == 37) {
   $195 = $s;
   $196 = $195;
   $197 = $buf;
   $198 = (($196) - ($197))|0;
   $199 = $ebuf;
   $200 = $estr;
   $201 = $199;
   $202 = $200;
   $203 = (($201) - ($202))|0;
   $204 = (($198) + ($203))|0;
   $l = $204;
  }
  $205 = $1;
  $206 = $3;
  $207 = $pl;
  $208 = $l;
  $209 = (($207) + ($208))|0;
  $210 = $5;
  _pad($205,32,$206,$209,$210);
  $211 = $1;
  $212 = $prefix;
  $213 = $pl;
  _out($211,$212,$213);
  $214 = $1;
  $215 = $3;
  $216 = $pl;
  $217 = $l;
  $218 = (($216) + ($217))|0;
  $219 = $5;
  $220 = $219 ^ 65536;
  _pad($214,48,$215,$218,$220);
  $221 = $1;
  $222 = $s;
  $223 = $222;
  $224 = $buf;
  $225 = (($223) - ($224))|0;
  _out($221,$buf,$225);
  $226 = $1;
  $227 = $l;
  $228 = $ebuf;
  $229 = $estr;
  $230 = $228;
  $231 = $229;
  $232 = (($230) - ($231))|0;
  $233 = (($227) - ($232))|0;
  $234 = $s;
  $235 = $234;
  $236 = $buf;
  $237 = (($235) - ($236))|0;
  $238 = (($233) - ($237))|0;
  _pad($226,48,$238,0,0);
  $239 = $1;
  $240 = $estr;
  $241 = $ebuf;
  $242 = $estr;
  $243 = $241;
  $244 = $242;
  $245 = (($243) - ($244))|0;
  _out($239,$240,$245);
  $246 = $1;
  $247 = $3;
  $248 = $pl;
  $249 = $l;
  $250 = (($248) + ($249))|0;
  $251 = $5;
  $252 = $251 ^ 8192;
  _pad($246,32,$247,$250,$252);
  $253 = $3;
  $254 = $pl;
  $255 = $l;
  $256 = (($254) + ($255))|0;
  $257 = ($253|0)>($256|0);
  if ($257) {
   $258 = $3;
   $262 = $258;
  } else {
   $259 = $pl;
   $260 = $l;
   $261 = (($259) + ($260))|0;
   $262 = $261;
  }
  $0 = $262;
  $935 = $0;
  STACKTOP = sp;return ($935|0);
 }
 $263 = $4;
 $264 = ($263|0)<(0);
 if ($264) {
  $4 = 6;
 }
 $265 = $2;
 $266 = $265 != 0.0;
 if ($266) {
  $267 = $2;
  $268 = $267 * 268435456.0;
  $2 = $268;
  $269 = HEAP32[$e2>>2]|0;
  $270 = (($269) - 28)|0;
  HEAP32[$e2>>2] = $270;
 }
 $271 = HEAP32[$e2>>2]|0;
 $272 = ($271|0)<(0);
 if ($272) {
  $z = $big;
  $r = $big;
  $a = $big;
 } else {
  $273 = ((($big)) + 504|0);
  $274 = ((($273)) + -212|0);
  $275 = ((($274)) + -4|0);
  $z = $275;
  $r = $275;
  $a = $275;
 }
 while(1) {
  $276 = $2;
  $277 = (~~(($276))>>>0);
  $278 = $z;
  HEAP32[$278>>2] = $277;
  $279 = $2;
  $280 = $z;
  $281 = ((($280)) + 4|0);
  $z = $281;
  $282 = HEAP32[$280>>2]|0;
  $283 = (+($282>>>0));
  $284 = $279 - $283;
  $285 = 1.0E+9 * $284;
  $2 = $285;
  $286 = $2;
  $287 = $286 != 0.0;
  if (!($287)) {
   break;
  }
 }
 while(1) {
  $288 = HEAP32[$e2>>2]|0;
  $289 = ($288|0)>(0);
  if (!($289)) {
   break;
  }
  $carry = 0;
  $290 = HEAP32[$e2>>2]|0;
  $291 = (29)<($290|0);
  $292 = HEAP32[$e2>>2]|0;
  $293 = $291 ? 29 : $292;
  $sh = $293;
  $294 = $z;
  $295 = ((($294)) + -4|0);
  $d = $295;
  while(1) {
   $296 = $d;
   $297 = $a;
   $298 = ($296>>>0)>=($297>>>0);
   if (!($298)) {
    break;
   }
   $299 = $d;
   $300 = HEAP32[$299>>2]|0;
   $301 = $sh;
   $302 = (_bitshift64Shl(($300|0),0,($301|0))|0);
   $303 = tempRet0;
   $304 = $carry;
   $305 = (_i64Add(($302|0),($303|0),($304|0),0)|0);
   $306 = tempRet0;
   $307 = $x1;
   $308 = $307;
   HEAP32[$308>>2] = $305;
   $309 = (($307) + 4)|0;
   $310 = $309;
   HEAP32[$310>>2] = $306;
   $311 = $x1;
   $312 = $311;
   $313 = HEAP32[$312>>2]|0;
   $314 = (($311) + 4)|0;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   $317 = (___uremdi3(($313|0),($316|0),1000000000,0)|0);
   $318 = tempRet0;
   $319 = $d;
   HEAP32[$319>>2] = $317;
   $320 = $x1;
   $321 = $320;
   $322 = HEAP32[$321>>2]|0;
   $323 = (($320) + 4)|0;
   $324 = $323;
   $325 = HEAP32[$324>>2]|0;
   $326 = (___udivdi3(($322|0),($325|0),1000000000,0)|0);
   $327 = tempRet0;
   $carry = $326;
   $328 = $d;
   $329 = ((($328)) + -4|0);
   $d = $329;
  }
  $330 = $carry;
  $331 = ($330|0)!=(0);
  if ($331) {
   $332 = $carry;
   $333 = $a;
   $334 = ((($333)) + -4|0);
   $a = $334;
   HEAP32[$334>>2] = $332;
  }
  while(1) {
   $335 = $z;
   $336 = $a;
   $337 = ($335>>>0)>($336>>>0);
   if (!($337)) {
    break;
   }
   $338 = $z;
   $339 = ((($338)) + -4|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($340|0)!=(0);
   $342 = $341 ^ 1;
   if (!($342)) {
    break;
   }
   $343 = $z;
   $344 = ((($343)) + -4|0);
   $z = $344;
  }
  $345 = $sh;
  $346 = HEAP32[$e2>>2]|0;
  $347 = (($346) - ($345))|0;
  HEAP32[$e2>>2] = $347;
 }
 while(1) {
  $348 = HEAP32[$e2>>2]|0;
  $349 = ($348|0)<(0);
  if (!($349)) {
   break;
  }
  $carry2 = 0;
  $350 = HEAP32[$e2>>2]|0;
  $351 = (0 - ($350))|0;
  $352 = (9)<($351|0);
  $353 = HEAP32[$e2>>2]|0;
  $354 = (0 - ($353))|0;
  $355 = $352 ? 9 : $354;
  $sh3 = $355;
  $356 = $4;
  $357 = (($356) + 17)|0;
  $358 = (($357) + 8)|0;
  $359 = (($358|0) / 9)&-1;
  $360 = (1 + ($359))|0;
  $need = $360;
  $361 = $a;
  $d = $361;
  while(1) {
   $362 = $d;
   $363 = $z;
   $364 = ($362>>>0)<($363>>>0);
   if (!($364)) {
    break;
   }
   $365 = $d;
   $366 = HEAP32[$365>>2]|0;
   $367 = $sh3;
   $368 = 1 << $367;
   $369 = (($368) - 1)|0;
   $370 = $366 & $369;
   $rm = $370;
   $371 = $d;
   $372 = HEAP32[$371>>2]|0;
   $373 = $sh3;
   $374 = $372 >>> $373;
   $375 = $carry2;
   $376 = (($374) + ($375))|0;
   $377 = $d;
   HEAP32[$377>>2] = $376;
   $378 = $sh3;
   $379 = 1000000000 >> $378;
   $380 = $rm;
   $381 = Math_imul($379, $380)|0;
   $carry2 = $381;
   $382 = $d;
   $383 = ((($382)) + 4|0);
   $d = $383;
  }
  $384 = $a;
  $385 = HEAP32[$384>>2]|0;
  $386 = ($385|0)!=(0);
  if (!($386)) {
   $387 = $a;
   $388 = ((($387)) + 4|0);
   $a = $388;
  }
  $389 = $carry2;
  $390 = ($389|0)!=(0);
  if ($390) {
   $391 = $carry2;
   $392 = $z;
   $393 = ((($392)) + 4|0);
   $z = $393;
   HEAP32[$392>>2] = $391;
  }
  $394 = $6;
  $395 = $394 | 32;
  $396 = ($395|0)==(102);
  $397 = $r;
  $398 = $a;
  $399 = $396 ? $397 : $398;
  $b = $399;
  $400 = $z;
  $401 = $b;
  $402 = $400;
  $403 = $401;
  $404 = (($402) - ($403))|0;
  $405 = (($404|0) / 4)&-1;
  $406 = $need;
  $407 = ($405|0)>($406|0);
  if ($407) {
   $408 = $b;
   $409 = $need;
   $410 = (($408) + ($409<<2)|0);
   $z = $410;
  }
  $411 = $sh3;
  $412 = HEAP32[$e2>>2]|0;
  $413 = (($412) + ($411))|0;
  HEAP32[$e2>>2] = $413;
 }
 $414 = $a;
 $415 = $z;
 $416 = ($414>>>0)<($415>>>0);
 L105: do {
  if ($416) {
   $i = 10;
   $417 = $r;
   $418 = $a;
   $419 = $417;
   $420 = $418;
   $421 = (($419) - ($420))|0;
   $422 = (($421|0) / 4)&-1;
   $423 = ($422*9)|0;
   $e = $423;
   while(1) {
    $424 = $a;
    $425 = HEAP32[$424>>2]|0;
    $426 = $i;
    $427 = ($425>>>0)>=($426>>>0);
    if (!($427)) {
     break L105;
    }
    $428 = $i;
    $429 = ($428*10)|0;
    $i = $429;
    $430 = $e;
    $431 = (($430) + 1)|0;
    $e = $431;
   }
  } else {
   $e = 0;
  }
 } while(0);
 $432 = $4;
 $433 = $6;
 $434 = $433 | 32;
 $435 = ($434|0)!=(102);
 $436 = $435&1;
 $437 = $e;
 $438 = Math_imul($436, $437)|0;
 $439 = (($432) - ($438))|0;
 $440 = $6;
 $441 = $440 | 32;
 $442 = ($441|0)==(103);
 $443 = $4;
 $444 = ($443|0)!=(0);
 $445 = $442 ? $444 : 0;
 $446 = $445&1;
 $447 = (($439) - ($446))|0;
 $j = $447;
 $448 = $j;
 $449 = $z;
 $450 = $r;
 $451 = $449;
 $452 = $450;
 $453 = (($451) - ($452))|0;
 $454 = (($453|0) / 4)&-1;
 $455 = (($454) - 1)|0;
 $456 = ($455*9)|0;
 $457 = ($448|0)<($456|0);
 if ($457) {
  $458 = $r;
  $459 = ((($458)) + 4|0);
  $460 = $j;
  $461 = (($460) + 9216)|0;
  $462 = (($461|0) / 9)&-1;
  $463 = (($462) - 1024)|0;
  $464 = (($459) + ($463<<2)|0);
  $d = $464;
  $465 = $j;
  $466 = (($465) + 9216)|0;
  $j = $466;
  $467 = $j;
  $468 = (($467|0) % 9)&-1;
  $j = $468;
  $i = 10;
  $469 = $j;
  $470 = (($469) + 1)|0;
  $j = $470;
  while(1) {
   $471 = $j;
   $472 = ($471|0)<(9);
   if (!($472)) {
    break;
   }
   $473 = $i;
   $474 = ($473*10)|0;
   $i = $474;
   $475 = $j;
   $476 = (($475) + 1)|0;
   $j = $476;
  }
  $477 = $d;
  $478 = HEAP32[$477>>2]|0;
  $479 = $i;
  $480 = (($478>>>0) % ($479>>>0))&-1;
  $x4 = $480;
  $481 = $x4;
  $482 = ($481|0)!=(0);
  if ($482) {
   label = 82;
  } else {
   $483 = $d;
   $484 = ((($483)) + 4|0);
   $485 = $z;
   $486 = ($484|0)!=($485|0);
   if ($486) {
    label = 82;
   }
  }
  L120: do {
   if ((label|0) == 82) {
    $round5 = 9007199254740992.0;
    $487 = $d;
    $488 = HEAP32[$487>>2]|0;
    $489 = $i;
    $490 = (($488>>>0) / ($489>>>0))&-1;
    $491 = $490 & 1;
    $492 = ($491|0)!=(0);
    if ($492) {
     $493 = $round5;
     $494 = $493 + 2.0;
     $round5 = $494;
    }
    $495 = $x4;
    $496 = $i;
    $497 = (($496>>>0) / 2)&-1;
    $498 = ($495>>>0)<($497>>>0);
    do {
     if ($498) {
      $small = 0.5;
     } else {
      $499 = $x4;
      $500 = $i;
      $501 = (($500>>>0) / 2)&-1;
      $502 = ($499|0)==($501|0);
      if ($502) {
       $503 = $d;
       $504 = ((($503)) + 4|0);
       $505 = $z;
       $506 = ($504|0)==($505|0);
       if ($506) {
        $small = 1.0;
        break;
       }
      }
      $small = 1.5;
     }
    } while(0);
    $507 = $pl;
    $508 = ($507|0)!=(0);
    if ($508) {
     $509 = $prefix;
     $510 = HEAP8[$509>>0]|0;
     $511 = $510 << 24 >> 24;
     $512 = ($511|0)==(45);
     if ($512) {
      $513 = $round5;
      $514 = $513 * -1.0;
      $round5 = $514;
      $515 = $small;
      $516 = $515 * -1.0;
      $small = $516;
     }
    }
    $517 = $x4;
    $518 = $d;
    $519 = HEAP32[$518>>2]|0;
    $520 = (($519) - ($517))|0;
    HEAP32[$518>>2] = $520;
    $521 = $round5;
    $522 = $small;
    $523 = $521 + $522;
    $524 = $round5;
    $525 = $523 != $524;
    if ($525) {
     $526 = $d;
     $527 = HEAP32[$526>>2]|0;
     $528 = $i;
     $529 = (($527) + ($528))|0;
     $530 = $d;
     HEAP32[$530>>2] = $529;
     while(1) {
      $531 = $d;
      $532 = HEAP32[$531>>2]|0;
      $533 = ($532>>>0)>(999999999);
      if (!($533)) {
       break;
      }
      $534 = $d;
      $535 = ((($534)) + -4|0);
      $d = $535;
      HEAP32[$534>>2] = 0;
      $536 = $d;
      $537 = $a;
      $538 = ($536>>>0)<($537>>>0);
      if ($538) {
       $539 = $a;
       $540 = ((($539)) + -4|0);
       $a = $540;
       HEAP32[$540>>2] = 0;
      }
      $541 = $d;
      $542 = HEAP32[$541>>2]|0;
      $543 = (($542) + 1)|0;
      HEAP32[$541>>2] = $543;
     }
     $i = 10;
     $544 = $r;
     $545 = $a;
     $546 = $544;
     $547 = $545;
     $548 = (($546) - ($547))|0;
     $549 = (($548|0) / 4)&-1;
     $550 = ($549*9)|0;
     $e = $550;
     while(1) {
      $551 = $a;
      $552 = HEAP32[$551>>2]|0;
      $553 = $i;
      $554 = ($552>>>0)>=($553>>>0);
      if (!($554)) {
       break L120;
      }
      $555 = $i;
      $556 = ($555*10)|0;
      $i = $556;
      $557 = $e;
      $558 = (($557) + 1)|0;
      $e = $558;
     }
    }
   }
  } while(0);
  $559 = $z;
  $560 = $d;
  $561 = ((($560)) + 4|0);
  $562 = ($559>>>0)>($561>>>0);
  if ($562) {
   $563 = $d;
   $564 = ((($563)) + 4|0);
   $z = $564;
  }
 }
 while(1) {
  $565 = $z;
  $566 = $a;
  $567 = ($565>>>0)>($566>>>0);
  if (!($567)) {
   break;
  }
  $568 = $z;
  $569 = ((($568)) + -4|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = ($570|0)!=(0);
  $572 = $571 ^ 1;
  if (!($572)) {
   break;
  }
  $573 = $z;
  $574 = ((($573)) + -4|0);
  $z = $574;
 }
 $575 = $6;
 $576 = $575 | 32;
 $577 = ($576|0)==(103);
 do {
  if ($577) {
   $578 = $4;
   $579 = ($578|0)!=(0);
   if (!($579)) {
    $580 = $4;
    $581 = (($580) + 1)|0;
    $4 = $581;
   }
   $582 = $4;
   $583 = $e;
   $584 = ($582|0)>($583|0);
   $585 = $e;
   $586 = ($585|0)>=(-4);
   $or$cond6 = $584 & $586;
   $587 = $6;
   if ($or$cond6) {
    $588 = (($587) + -1)|0;
    $6 = $588;
    $589 = $e;
    $590 = (($589) + 1)|0;
    $591 = $4;
    $592 = (($591) - ($590))|0;
    $4 = $592;
   } else {
    $593 = (($587) - 2)|0;
    $6 = $593;
    $594 = $4;
    $595 = (($594) + -1)|0;
    $4 = $595;
   }
   $596 = $5;
   $597 = $596 & 8;
   $598 = ($597|0)!=(0);
   if (!($598)) {
    $599 = $z;
    $600 = $a;
    $601 = ($599>>>0)>($600>>>0);
    L165: do {
     if ($601) {
      $602 = $z;
      $603 = ((($602)) + -4|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = ($604|0)!=(0);
      if ($605) {
       $i = 10;
       $j = 0;
       while(1) {
        $606 = $z;
        $607 = ((($606)) + -4|0);
        $608 = HEAP32[$607>>2]|0;
        $609 = $i;
        $610 = (($608>>>0) % ($609>>>0))&-1;
        $611 = ($610|0)==(0);
        if (!($611)) {
         break L165;
        }
        $612 = $i;
        $613 = ($612*10)|0;
        $i = $613;
        $614 = $j;
        $615 = (($614) + 1)|0;
        $j = $615;
       }
      } else {
       label = 119;
      }
     } else {
      label = 119;
     }
    } while(0);
    if ((label|0) == 119) {
     $j = 9;
    }
    $616 = $6;
    $617 = $616 | 32;
    $618 = ($617|0)==(102);
    $619 = $4;
    $620 = $z;
    $621 = $r;
    $622 = $620;
    $623 = $621;
    $624 = (($622) - ($623))|0;
    $625 = (($624|0) / 4)&-1;
    $626 = (($625) - 1)|0;
    $627 = ($626*9)|0;
    if ($618) {
     $628 = $j;
     $629 = (($627) - ($628))|0;
     $630 = (0)>($629|0);
     if ($630) {
      $642 = 0;
     } else {
      $631 = $z;
      $632 = $r;
      $633 = $631;
      $634 = $632;
      $635 = (($633) - ($634))|0;
      $636 = (($635|0) / 4)&-1;
      $637 = (($636) - 1)|0;
      $638 = ($637*9)|0;
      $639 = $j;
      $640 = (($638) - ($639))|0;
      $642 = $640;
     }
     $641 = ($619|0)<($642|0);
     do {
      if ($641) {
       $643 = $4;
       $665 = $643;
      } else {
       $644 = $z;
       $645 = $r;
       $646 = $644;
       $647 = $645;
       $648 = (($646) - ($647))|0;
       $649 = (($648|0) / 4)&-1;
       $650 = (($649) - 1)|0;
       $651 = ($650*9)|0;
       $652 = $j;
       $653 = (($651) - ($652))|0;
       $654 = (0)>($653|0);
       if ($654) {
        $665 = 0;
        break;
       }
       $655 = $z;
       $656 = $r;
       $657 = $655;
       $658 = $656;
       $659 = (($657) - ($658))|0;
       $660 = (($659|0) / 4)&-1;
       $661 = (($660) - 1)|0;
       $662 = ($661*9)|0;
       $663 = $j;
       $664 = (($662) - ($663))|0;
       $665 = $664;
      }
     } while(0);
     $4 = $665;
     break;
    } else {
     $666 = $e;
     $667 = (($627) + ($666))|0;
     $668 = $j;
     $669 = (($667) - ($668))|0;
     $670 = (0)>($669|0);
     if ($670) {
      $684 = 0;
     } else {
      $671 = $z;
      $672 = $r;
      $673 = $671;
      $674 = $672;
      $675 = (($673) - ($674))|0;
      $676 = (($675|0) / 4)&-1;
      $677 = (($676) - 1)|0;
      $678 = ($677*9)|0;
      $679 = $e;
      $680 = (($678) + ($679))|0;
      $681 = $j;
      $682 = (($680) - ($681))|0;
      $684 = $682;
     }
     $683 = ($619|0)<($684|0);
     do {
      if ($683) {
       $685 = $4;
       $711 = $685;
      } else {
       $686 = $z;
       $687 = $r;
       $688 = $686;
       $689 = $687;
       $690 = (($688) - ($689))|0;
       $691 = (($690|0) / 4)&-1;
       $692 = (($691) - 1)|0;
       $693 = ($692*9)|0;
       $694 = $e;
       $695 = (($693) + ($694))|0;
       $696 = $j;
       $697 = (($695) - ($696))|0;
       $698 = (0)>($697|0);
       if ($698) {
        $711 = 0;
        break;
       }
       $699 = $z;
       $700 = $r;
       $701 = $699;
       $702 = $700;
       $703 = (($701) - ($702))|0;
       $704 = (($703|0) / 4)&-1;
       $705 = (($704) - 1)|0;
       $706 = ($705*9)|0;
       $707 = $e;
       $708 = (($706) + ($707))|0;
       $709 = $j;
       $710 = (($708) - ($709))|0;
       $711 = $710;
      }
     } while(0);
     $4 = $711;
     break;
    }
   }
  }
 } while(0);
 $712 = $4;
 $713 = (1 + ($712))|0;
 $714 = $4;
 $715 = ($714|0)!=(0);
 if ($715) {
  $720 = 1;
 } else {
  $716 = $5;
  $717 = $716 & 8;
  $718 = ($717|0)!=(0);
  $720 = $718;
 }
 $719 = $720&1;
 $721 = (($713) + ($719))|0;
 $l = $721;
 $722 = $6;
 $723 = $722 | 32;
 $724 = ($723|0)==(102);
 $725 = $e;
 if ($724) {
  $726 = ($725|0)>(0);
  if ($726) {
   $727 = $e;
   $728 = $l;
   $729 = (($728) + ($727))|0;
   $l = $729;
  }
 } else {
  $730 = ($725|0)<(0);
  $731 = $e;
  $732 = (0 - ($731))|0;
  $733 = $730 ? $732 : $731;
  $734 = $ebuf;
  $735 = (_fmt_u($733,$734)|0);
  $estr = $735;
  while(1) {
   $736 = $ebuf;
   $737 = $estr;
   $738 = $736;
   $739 = $737;
   $740 = (($738) - ($739))|0;
   $741 = ($740|0)<(2);
   if (!($741)) {
    break;
   }
   $742 = $estr;
   $743 = ((($742)) + -1|0);
   $estr = $743;
   HEAP8[$743>>0] = 48;
  }
  $744 = $e;
  $745 = ($744|0)<(0);
  $746 = $745 ? 45 : 43;
  $747 = $746&255;
  $748 = $estr;
  $749 = ((($748)) + -1|0);
  $estr = $749;
  HEAP8[$749>>0] = $747;
  $750 = $6;
  $751 = $750&255;
  $752 = $estr;
  $753 = ((($752)) + -1|0);
  $estr = $753;
  HEAP8[$753>>0] = $751;
  $754 = $ebuf;
  $755 = $estr;
  $756 = $754;
  $757 = $755;
  $758 = (($756) - ($757))|0;
  $759 = $l;
  $760 = (($759) + ($758))|0;
  $l = $760;
 }
 $761 = $1;
 $762 = $3;
 $763 = $pl;
 $764 = $l;
 $765 = (($763) + ($764))|0;
 $766 = $5;
 _pad($761,32,$762,$765,$766);
 $767 = $1;
 $768 = $prefix;
 $769 = $pl;
 _out($767,$768,$769);
 $770 = $1;
 $771 = $3;
 $772 = $pl;
 $773 = $l;
 $774 = (($772) + ($773))|0;
 $775 = $5;
 $776 = $775 ^ 65536;
 _pad($770,48,$771,$774,$776);
 $777 = $6;
 $778 = $777 | 32;
 $779 = ($778|0)==(102);
 if ($779) {
  $780 = $a;
  $781 = $r;
  $782 = ($780>>>0)>($781>>>0);
  if ($782) {
   $783 = $r;
   $a = $783;
  }
  $784 = $a;
  $d = $784;
  while(1) {
   $785 = $d;
   $786 = $r;
   $787 = ($785>>>0)<=($786>>>0);
   if (!($787)) {
    break;
   }
   $788 = $d;
   $789 = HEAP32[$788>>2]|0;
   $790 = ((($buf)) + 9|0);
   $791 = (_fmt_u($789,$790)|0);
   $ss6 = $791;
   $792 = $d;
   $793 = $a;
   $794 = ($792|0)!=($793|0);
   L214: do {
    if ($794) {
     while(1) {
      $795 = $ss6;
      $796 = ($795>>>0)>($buf>>>0);
      if (!($796)) {
       break L214;
      }
      $797 = $ss6;
      $798 = ((($797)) + -1|0);
      $ss6 = $798;
      HEAP8[$798>>0] = 48;
     }
    } else {
     $799 = $ss6;
     $800 = ((($buf)) + 9|0);
     $801 = ($799|0)==($800|0);
     if ($801) {
      $802 = $ss6;
      $803 = ((($802)) + -1|0);
      $ss6 = $803;
      HEAP8[$803>>0] = 48;
     }
    }
   } while(0);
   $804 = $1;
   $805 = $ss6;
   $806 = ((($buf)) + 9|0);
   $807 = $ss6;
   $808 = $806;
   $809 = $807;
   $810 = (($808) - ($809))|0;
   _out($804,$805,$810);
   $811 = $d;
   $812 = ((($811)) + 4|0);
   $d = $812;
  }
  $813 = $4;
  $814 = ($813|0)!=(0);
  if ($814) {
   label = 157;
  } else {
   $815 = $5;
   $816 = $815 & 8;
   $817 = ($816|0)!=(0);
   if ($817) {
    label = 157;
   }
  }
  if ((label|0) == 157) {
   $818 = $1;
   _out($818,72376,1);
  }
  while(1) {
   $819 = $d;
   $820 = $z;
   $821 = ($819>>>0)<($820>>>0);
   $822 = $4;
   $823 = ($822|0)>(0);
   $824 = $821 ? $823 : 0;
   if (!($824)) {
    break;
   }
   $825 = $d;
   $826 = HEAP32[$825>>2]|0;
   $827 = ((($buf)) + 9|0);
   $828 = (_fmt_u($826,$827)|0);
   $ss7 = $828;
   while(1) {
    $829 = $ss7;
    $830 = ($829>>>0)>($buf>>>0);
    if (!($830)) {
     break;
    }
    $831 = $ss7;
    $832 = ((($831)) + -1|0);
    $ss7 = $832;
    HEAP8[$832>>0] = 48;
   }
   $833 = $1;
   $834 = $ss7;
   $835 = $4;
   $836 = (9)<($835|0);
   $837 = $4;
   $838 = $836 ? 9 : $837;
   _out($833,$834,$838);
   $839 = $d;
   $840 = ((($839)) + 4|0);
   $d = $840;
   $841 = $4;
   $842 = (($841) - 9)|0;
   $4 = $842;
  }
  $843 = $1;
  $844 = $4;
  $845 = (($844) + 9)|0;
  _pad($843,48,$845,9,0);
 } else {
  $846 = $z;
  $847 = $a;
  $848 = ($846>>>0)<=($847>>>0);
  if ($848) {
   $849 = $a;
   $850 = ((($849)) + 4|0);
   $z = $850;
  }
  $851 = $a;
  $d = $851;
  while(1) {
   $852 = $d;
   $853 = $z;
   $854 = ($852>>>0)<($853>>>0);
   $855 = $4;
   $856 = ($855|0)>=(0);
   $857 = $854 ? $856 : 0;
   if (!($857)) {
    break;
   }
   $858 = $d;
   $859 = HEAP32[$858>>2]|0;
   $860 = ((($buf)) + 9|0);
   $861 = (_fmt_u($859,$860)|0);
   $ss8 = $861;
   $862 = $ss8;
   $863 = ((($buf)) + 9|0);
   $864 = ($862|0)==($863|0);
   if ($864) {
    $865 = $ss8;
    $866 = ((($865)) + -1|0);
    $ss8 = $866;
    HEAP8[$866>>0] = 48;
   }
   $867 = $d;
   $868 = $a;
   $869 = ($867|0)!=($868|0);
   L244: do {
    if ($869) {
     while(1) {
      $870 = $ss8;
      $871 = ($870>>>0)>($buf>>>0);
      if (!($871)) {
       break L244;
      }
      $872 = $ss8;
      $873 = ((($872)) + -1|0);
      $ss8 = $873;
      HEAP8[$873>>0] = 48;
     }
    } else {
     $874 = $1;
     $875 = $ss8;
     $876 = ((($875)) + 1|0);
     $ss8 = $876;
     _out($874,$875,1);
     $877 = $4;
     $878 = ($877|0)>(0);
     if (!($878)) {
      $879 = $5;
      $880 = $879 & 8;
      $881 = ($880|0)!=(0);
      if (!($881)) {
       break;
      }
     }
     $882 = $1;
     _out($882,72376,1);
    }
   } while(0);
   $883 = $1;
   $884 = $ss8;
   $885 = ((($buf)) + 9|0);
   $886 = $ss8;
   $887 = $885;
   $888 = $886;
   $889 = (($887) - ($888))|0;
   $890 = $4;
   $891 = ($889|0)<($890|0);
   if ($891) {
    $892 = ((($buf)) + 9|0);
    $893 = $ss8;
    $894 = $892;
    $895 = $893;
    $896 = (($894) - ($895))|0;
    $898 = $896;
   } else {
    $897 = $4;
    $898 = $897;
   }
   _out($883,$884,$898);
   $899 = ((($buf)) + 9|0);
   $900 = $ss8;
   $901 = $899;
   $902 = $900;
   $903 = (($901) - ($902))|0;
   $904 = $4;
   $905 = (($904) - ($903))|0;
   $4 = $905;
   $906 = $d;
   $907 = ((($906)) + 4|0);
   $d = $907;
  }
  $908 = $1;
  $909 = $4;
  $910 = (($909) + 18)|0;
  _pad($908,48,$910,18,0);
  $911 = $1;
  $912 = $estr;
  $913 = $ebuf;
  $914 = $estr;
  $915 = $913;
  $916 = $914;
  $917 = (($915) - ($916))|0;
  _out($911,$912,$917);
 }
 $918 = $1;
 $919 = $3;
 $920 = $pl;
 $921 = $l;
 $922 = (($920) + ($921))|0;
 $923 = $5;
 $924 = $923 ^ 8192;
 _pad($918,32,$919,$922,$924);
 $925 = $3;
 $926 = $pl;
 $927 = $l;
 $928 = (($926) + ($927))|0;
 $929 = ($925|0)>($928|0);
 if ($929) {
  $930 = $3;
  $934 = $930;
 } else {
  $931 = $pl;
  $932 = $l;
  $933 = (($931) + ($932))|0;
  $934 = $933;
 }
 $0 = $934;
 $935 = $0;
 STACKTOP = sp;return ($935|0);
}
function ___FLOAT_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = ($7);
 STACKTOP = sp;return ($4|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp + 16|0;
 $0 = $f;
 $1 = $c;
 $2 = $w;
 $3 = $l;
 $4 = $fl;
 $5 = $4;
 $6 = $5 & 73728;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $2;
 $10 = ($8|0)>=($9|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = $3;
 $13 = (($11) - ($12))|0;
 $3 = $13;
 $14 = $1;
 $15 = $14 << 24 >> 24;
 $16 = $15&255;
 $17 = $3;
 $18 = ($17|0)>(256);
 $19 = $3;
 $20 = $18 ? 256 : $19;
 _memset(($pad|0),($16|0),($20|0))|0;
 while(1) {
  $21 = $3;
  $22 = ($21|0)>=(256);
  $23 = $0;
  if (!($22)) {
   break;
  }
  _out($23,$pad,256);
  $24 = $3;
  $25 = (($24) - 256)|0;
  $3 = $25;
 }
 $26 = $3;
 _out($23,$pad,$26);
 STACKTOP = sp;return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $3 = sp;
 $0 = $f;
 $1 = $s;
 $2 = $l;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 $9 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 _mrb_str_cat($3,$5,$$byval_copy,$8,$9);
 STACKTOP = sp;return;
}
function _fmt_u($x,$s) {
 $x = $x|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $s;
 while(1) {
  $2 = $0;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = (($4>>>0) % 10)&-1;
  $6 = (48 + ($5))|0;
  $7 = $6&255;
  $8 = $1;
  $9 = ((($8)) + -1|0);
  $1 = $9;
  HEAP8[$9>>0] = $7;
  $10 = $0;
  $11 = (($10>>>0) / 10)&-1;
  $0 = $11;
 }
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _mrb_realloc_simple($mrb,$p,$len) {
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiii[$5 & 255]($6,$7,$8,$11)|0);
 $p2 = $12;
 $13 = $p2;
 $14 = ($13|0)==(0|0);
 $15 = $2;
 $16 = ($15>>>0)>(0);
 $or$cond = $14 & $16;
 if (!($or$cond)) {
  $40 = $p2;
  STACKTOP = sp;return ($40|0);
 }
 $17 = $0;
 $18 = ((($17)) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $40 = $p2;
  STACKTOP = sp;return ($40|0);
 }
 $21 = $0;
 _mrb_full_gc($21);
 $22 = $0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = $1;
 $27 = $2;
 $28 = $0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_iiiii[$24 & 255]($25,$26,$27,$30)|0);
 $p2 = $31;
 $32 = $p2;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $40 = $p2;
  STACKTOP = sp;return ($40|0);
 }
 $34 = $0;
 $35 = ((($34)) + 92|0);
 $36 = ((($35)) + 452|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 & -9;
 $39 = $38 | 8;
 HEAP8[$36>>0] = $39;
 $40 = $p2;
 STACKTOP = sp;return ($40|0);
}
function _mrb_full_gc($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $gc = $2;
 $3 = $gc;
 $4 = ((($3)) + 452|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $gc;
 $9 = ((($8)) + 452|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10&255) >>> 2;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)!=(0);
 if ($13) {
  $14 = $0;
  $15 = $gc;
  _clear_all_old($14,$15);
  $16 = $gc;
  $17 = ((($16)) + 452|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & -3;
  $20 = $19 | 2;
  HEAP8[$17>>0] = $20;
 } else {
  $21 = $gc;
  $22 = ((($21)) + 420|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $0;
   $26 = $gc;
   _incremental_gc_until($25,$26,0);
  }
 }
 $27 = $0;
 $28 = $gc;
 _incremental_gc_until($27,$28,0);
 $29 = $gc;
 $30 = ((($29)) + 436|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31>>>0) / 100)&-1;
 $33 = $gc;
 $34 = ((($33)) + 444|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($32, $35)|0;
 $37 = $gc;
 $38 = ((($37)) + 440|0);
 HEAP32[$38>>2] = $36;
 $39 = $gc;
 $40 = ((($39)) + 452|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41&255) >>> 2;
 $43 = $42 & 1;
 $44 = ($43<<24>>24)!=(0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $gc;
 $46 = ((($45)) + 436|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47>>>0) / 100)&-1;
 $49 = ($48*200)|0;
 $50 = $gc;
 $51 = ((($50)) + 456|0);
 HEAP32[$51>>2] = $49;
 $52 = $gc;
 $53 = ((($52)) + 452|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54 & -3;
 HEAP8[$53>>0] = $55;
 STACKTOP = sp;return;
}
function _clear_all_old($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $origin_mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $1;
 $3 = ((($2)) + 452|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 2;
 $6 = $5 & 1;
 $origin_mode = $6;
 $7 = $1;
 $8 = ((($7)) + 452|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9&255) >>> 2;
 $11 = $10 & 1;
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 452|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16&255) >>> 1;
  $18 = $17 & 1;
  $19 = $18&255;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $0;
   $22 = $1;
   _incremental_gc_until($21,$22,0);
  }
 }
 $23 = $1;
 $24 = ((($23)) + 452|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & -5;
 HEAP8[$24>>0] = $26;
 $27 = $0;
 $28 = $1;
 _prepare_incremental_sweep($27,$28);
 $29 = $0;
 $30 = $1;
 _incremental_gc_until($29,$30,0);
 $31 = $origin_mode;
 $32 = $1;
 $33 = ((($32)) + 452|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $31 & 1;
 $36 = ($35 << 2)&255;
 $37 = $34 & -5;
 $38 = $37 | $36;
 HEAP8[$33>>0] = $38;
 $39 = $1;
 $40 = ((($39)) + 428|0);
 HEAP32[$40>>2] = 0;
 $41 = $1;
 $42 = ((($41)) + 432|0);
 HEAP32[$42>>2] = 0;
 STACKTOP = sp;return;
}
function _incremental_gc_until($mrb,$gc,$to_state) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $to_state = $to_state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $to_state;
 while(1) {
  $3 = $0;
  $4 = $1;
  (_incremental_gc($3,$4,-1)|0);
  $5 = $1;
  $6 = ((($5)) + 420|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = ($7|0)!=($8|0);
  if (!($9)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _incremental_gc($mrb,$gc,$limit) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tried_sweep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $gc;
 $3 = $limit;
 $4 = $2;
 $5 = ((($4)) + 420|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  $7 = $1;
  $8 = $2;
  _root_scan_phase($7,$8);
  $9 = $2;
  $10 = ((($9)) + 420|0);
  HEAP32[$10>>2] = 1;
  $11 = $2;
  $12 = ((($11)) + 424|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 ^ 3;
  $15 = $2;
  $16 = ((($15)) + 424|0);
  HEAP32[$16>>2] = $14;
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
  break;
 }
 case 1:  {
  $17 = $2;
  $18 = ((($17)) + 428|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = $1;
  $22 = $2;
  if ($20) {
   $23 = $3;
   $24 = (_incremental_marking_phase($21,$22,$23)|0);
   $0 = $24;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  } else {
   _final_marking_phase($21,$22);
   $25 = $1;
   $26 = $2;
   _prepare_incremental_sweep($25,$26);
   $0 = 0;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
  break;
 }
 case 2:  {
  $tried_sweep = 0;
  $27 = $1;
  $28 = $2;
  $29 = $3;
  $30 = (_incremental_sweep_phase($27,$28,$29)|0);
  $tried_sweep = $30;
  $31 = $tried_sweep;
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = $2;
   $34 = ((($33)) + 420|0);
   HEAP32[$34>>2] = 0;
  }
  $35 = $tried_sweep;
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
  break;
 }
 default: {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 }
 return (0)|0;
}
function _root_scan_phase($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $1;
 $3 = ((($2)) + 452|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 2;
 $6 = $5 & 1;
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 452|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11&255) >>> 1;
  $13 = $12 & 1;
  $14 = ($13<<24>>24)!=(0);
  if ($14) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $15 = $1;
  $16 = ((($15)) + 428|0);
  HEAP32[$16>>2] = 0;
  $17 = $1;
  $18 = ((($17)) + 432|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $0;
 _mrb_gc_mark_gv($19);
 $i = 0;
 $20 = $1;
 $21 = ((($20)) + 416|0);
 $22 = HEAP32[$21>>2]|0;
 $e = $22;
 while(1) {
  $23 = $i;
  $24 = $e;
  $25 = ($23>>>0)<($24>>>0);
  $26 = $0;
  if (!($25)) {
   break;
  }
  $27 = $i;
  $28 = $1;
  $29 = ((($28)) + 16|0);
  $30 = (($29) + ($27<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  _mrb_gc_mark($26,$31);
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $0;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 _mrb_gc_mark($26,$36);
 $37 = $0;
 $38 = $0;
 $39 = ((($38)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 _mrb_gc_mark($37,$40);
 $41 = $0;
 $42 = $0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 _mrb_gc_mark($41,$44);
 $45 = $0;
 $46 = $0;
 $47 = ((($46)) + 576|0);
 $48 = HEAP32[$47>>2]|0;
 _mrb_gc_mark($45,$48);
 $49 = $0;
 $50 = $0;
 $51 = ((($50)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 _mark_context($49,$52);
 $53 = $0;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 48|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = $0;
  $60 = $0;
  $61 = ((($60)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 48|0);
  $64 = HEAP32[$63>>2]|0;
  _mrb_gc_mark($59,$64);
 }
 $65 = $0;
 $66 = ((($65)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $0;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($67|0)!=($70|0);
 if (!($71)) {
  STACKTOP = sp;return;
 }
 $72 = $0;
 $73 = $0;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 _mark_context($72,$75);
 STACKTOP = sp;return;
}
function _mrb_gc_mark($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 8;
 $7 = $6 & 7;
 $8 = $7 & 3;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $0;
 $12 = ((($11)) + 92|0);
 $13 = $1;
 _add_gray_list($10,$12,$13);
 STACKTOP = sp;return;
}
function _add_gray_list($mrb,$gc,$obj) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $obj;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -1793;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 428|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = $1;
 $13 = ((($12)) + 428|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _mark_context($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ci = 0, $e = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $e = 0;
 $2 = $0;
 $3 = $1;
 _mark_context_stack($2,$3);
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $ci = $10;
   while(1) {
    $11 = $ci;
    $12 = $1;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($11>>>0)<=($14>>>0);
    if (!($15)) {
     break L1;
    }
    $16 = $ci;
    $17 = ((($16)) + 20|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $e;
    $20 = ($18|0)>($19|0);
    if ($20) {
     $21 = $ci;
     $22 = ((($21)) + 20|0);
     $23 = HEAP32[$22>>2]|0;
     $e = $23;
    }
    $24 = $0;
    $25 = $ci;
    $26 = ((($25)) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    _mrb_gc_mark($24,$27);
    $28 = $0;
    $29 = $ci;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    _mrb_gc_mark($28,$31);
    $32 = $0;
    $33 = $ci;
    $34 = ((($33)) + 44|0);
    $35 = HEAP32[$34>>2]|0;
    _mrb_gc_mark($32,$35);
    $36 = $ci;
    $37 = ((($36)) + 48|0);
    $ci = $37;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $e;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $0;
  $42 = $i;
  $43 = $1;
  $44 = ((($43)) + 36|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  _mrb_gc_mark($41,$47);
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 $50 = $1;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $1;
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 48|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $0;
 $59 = $1;
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 _mrb_gc_mark($58,$62);
 STACKTOP = sp;return;
}
function _mark_context_stack($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $c;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 8)&-1;
 $e = $12;
 $13 = $1;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $e;
  $23 = (($22) + ($21))|0;
  $e = $23;
 }
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $e;
 $28 = (($26) + ($27<<3)|0);
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28>>>0)>($31>>>0);
 if ($32) {
  $33 = $1;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $35;
  $40 = $38;
  $41 = (($39) - ($40))|0;
  $42 = (($41|0) / 8)&-1;
  $e = $42;
 }
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $e;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = $1;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<3)|0);
  ;HEAP32[$v>>2]=HEAP32[$50>>2]|0;HEAP32[$v+4>>2]=HEAP32[$50+4>>2]|0;
  $51 = ((($v)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52>>>0)<(8);
  do {
   if (!($53)) {
    $54 = HEAP32[$v>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 & 255;
    $57 = ($56|0)==(1);
    if ($57) {
     $58 = $i;
     $59 = $1;
     $60 = ((($59)) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + ($58<<3)|0);
     _mrb_nil_value_53($2);
     ;HEAP32[$62>>2]=HEAP32[$2>>2]|0;HEAP32[$62+4>>2]=HEAP32[$2+4>>2]|0;
     break;
    } else {
     $63 = $0;
     $64 = HEAP32[$v>>2]|0;
     _mrb_gc_mark($63,$64);
     break;
    }
   }
  } while(0);
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 STACKTOP = sp;return;
}
function _mrb_nil_value_53($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _incremental_marking_phase($mrb,$gc,$limit) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tried_marks = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $limit;
 $tried_marks = 0;
 while(1) {
  $3 = $1;
  $4 = ((($3)) + 428|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 5;
   break;
  }
  $7 = $tried_marks;
  $8 = $2;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 5;
   break;
  }
  $10 = $0;
  $11 = $1;
  $12 = $1;
  $13 = ((($12)) + 428|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_gc_gray_mark($10,$11,$14)|0);
  $16 = $tried_marks;
  $17 = (($16) + ($15))|0;
  $tried_marks = $17;
 }
 if ((label|0) == 5) {
  $18 = $tried_marks;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _gc_gray_mark($mrb,$gc,$obj) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $c = 0, $c1 = 0, $children = 0, $ci = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $obj;
 $children = 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _gc_mark_children($3,$4,$5);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 255;
 switch ($8|0) {
 case 11:  {
  $9 = $children;
  $10 = (($9) + 1)|0;
  $children = $10;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 10: case 12: case 9:  {
  $11 = $2;
  $c = $11;
  $12 = $0;
  $13 = $2;
  $14 = (_mrb_gc_mark_iv_size($12,$13)|0);
  $15 = $children;
  $16 = (($15) + ($14))|0;
  $children = $16;
  $17 = $0;
  $18 = $c;
  $19 = (_mrb_gc_mark_mt_size($17,$18)|0);
  $20 = $children;
  $21 = (($20) + ($19))|0;
  $children = $21;
  $22 = $children;
  $23 = (($22) + 1)|0;
  $children = $23;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 18: case 21: case 8:  {
  $24 = $0;
  $25 = $2;
  $26 = (_mrb_gc_mark_iv_size($24,$25)|0);
  $27 = $children;
  $28 = (($27) + ($26))|0;
  $children = $28;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 20:  {
  $29 = $2;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 11;
  $32 = $children;
  $33 = (($32) + ($31))|0;
  $children = $33;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 22:  {
  $34 = $2;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $c1 = $36;
  $37 = $c1;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   $131 = $children;
   STACKTOP = sp;return ($131|0);
  }
  $39 = $c1;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $c1;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $41;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = (($47|0) / 8)&-1;
  $i = $48;
  $49 = $c1;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $c1;
   $54 = ((($53)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $i;
   $59 = (($58) + ($57))|0;
   $i = $59;
  }
  $60 = $c1;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $i;
  $64 = (($62) + ($63<<3)|0);
  $65 = $c1;
  $66 = ((($65)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64>>>0)>($67>>>0);
  if ($68) {
   $69 = $c1;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $c1;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $71;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $78 = (($77|0) / 8)&-1;
   $i = $78;
  }
  $79 = $i;
  $80 = $children;
  $81 = (($80) + ($79))|0;
  $children = $81;
  $82 = $c1;
  $83 = ((($82)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)!=(0|0);
  if ($85) {
   $86 = $c1;
   $87 = ((($86)) + 16|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($88)) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $93 = $90;
  } else {
   $93 = 0;
  }
  $91 = $children;
  $92 = (($91) + ($93))|0;
  $children = $92;
  $94 = $c1;
  $95 = ((($94)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)!=(0|0);
  L23: do {
   if ($97) {
    $i = 0;
    $98 = $c1;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $ci = $100;
    while(1) {
     $101 = $ci;
     $102 = $c1;
     $103 = ((($102)) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($101>>>0)<=($104>>>0);
     if (!($105)) {
      break L23;
     }
     $106 = $i;
     $107 = (($106) + 1)|0;
     $i = $107;
     $108 = $ci;
     $109 = ((($108)) + 48|0);
     $ci = $109;
    }
   }
  } while(0);
  $110 = $i;
  $111 = $children;
  $112 = (($111) + ($110))|0;
  $children = $112;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 14:  {
  $113 = $2;
  $a = $113;
  $114 = $a;
  $115 = ((($114)) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $children;
  $118 = (($117) + ($116))|0;
  $children = $118;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 15:  {
  $119 = $0;
  $120 = $2;
  $121 = (_mrb_gc_mark_iv_size($119,$120)|0);
  $122 = $children;
  $123 = (($122) + ($121))|0;
  $children = $123;
  $124 = $0;
  $125 = $2;
  $126 = (_mrb_gc_mark_hash_size($124,$125)|0);
  $127 = $children;
  $128 = (($127) + ($126))|0;
  $children = $128;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 case 17: case 13:  {
  $129 = $children;
  $130 = (($129) + 2)|0;
  $children = $130;
  $131 = $children;
  STACKTOP = sp;return ($131|0);
  break;
 }
 default: {
  $131 = $children;
  STACKTOP = sp;return ($131|0);
 }
 }
 return (0)|0;
}
function _gc_mark_children($mrb,$gc,$obj) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a = 0, $c = 0, $c1 = 0, $c2 = 0, $e = 0, $e4 = 0, $i = 0, $i3 = 0, $len = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $obj;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -1793;
 $6 = $5 | 1024;
 HEAP32[$3>>2] = $6;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 428|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _mrb_gc_mark($12,$15);
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 255;
 switch ($18|0) {
 case 11:  {
  $19 = $2;
  $c = $19;
  $20 = $c;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 11;
  $23 = $22 & 1048576;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $0;
   $26 = $c;
   _mrb_gc_mark_mt($25,$26);
  }
  $27 = $0;
  $28 = $2;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  _mrb_gc_mark($27,$30);
  STACKTOP = sp;return;
  break;
 }
 case 12: case 10: case 9:  {
  $31 = $2;
  $c1 = $31;
  $32 = $0;
  $33 = $c1;
  _mrb_gc_mark_mt($32,$33);
  $34 = $0;
  $35 = $c1;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  _mrb_gc_mark($34,$37);
  break;
 }
 case 18: case 21: case 8:  {
  break;
 }
 case 13:  {
  $40 = $2;
  $p = $40;
  $41 = $0;
  $42 = $p;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  _mrb_gc_mark($41,$44);
  $45 = $0;
  $46 = $p;
  $47 = ((($46)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  _mrb_gc_mark($45,$48);
  STACKTOP = sp;return;
  break;
 }
 case 20:  {
  $49 = $2;
  $e = $49;
  $50 = $e;
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)>=(0);
  if ($53) {
   STACKTOP = sp;return;
  }
  $54 = $e;
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 >>> 11;
  $len = $56;
  $i = 0;
  while(1) {
   $57 = $i;
   $58 = $len;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $i;
   $61 = $e;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<3)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66>>>0)<(8);
   if (!($67)) {
    $68 = $0;
    $69 = $i;
    $70 = $e;
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + ($69<<3)|0);
    $74 = HEAP32[$73>>2]|0;
    _mrb_gc_mark($68,$74);
   }
   $75 = $i;
   $76 = (($75) + 1)|0;
   $i = $76;
  }
  STACKTOP = sp;return;
  break;
 }
 case 22:  {
  $77 = $2;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $c2 = $79;
  $80 = $c2;
  $81 = ($80|0)!=(0|0);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $0;
  $83 = $c2;
  _mark_context($82,$83);
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  $84 = $2;
  $a = $84;
  $i3 = 0;
  $85 = $a;
  $86 = ((($85)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $e4 = $87;
  while(1) {
   $88 = $i3;
   $89 = $e4;
   $90 = ($88>>>0)<($89>>>0);
   if (!($90)) {
    break;
   }
   $91 = $i3;
   $92 = $a;
   $93 = ((($92)) + 20|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + ($91<<3)|0);
   $96 = ((($95)) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97>>>0)<(8);
   if (!($98)) {
    $99 = $0;
    $100 = $i3;
    $101 = $a;
    $102 = ((($101)) + 20|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) + ($100<<3)|0);
    $105 = HEAP32[$104>>2]|0;
    _mrb_gc_mark($99,$105);
   }
   $106 = $i3;
   $107 = (($106) + 1)|0;
   $i3 = $107;
  }
  STACKTOP = sp;return;
  break;
 }
 case 15:  {
  $108 = $0;
  $109 = $2;
  _mrb_gc_mark_iv($108,$109);
  $110 = $0;
  $111 = $2;
  _mrb_gc_mark_hash($110,$111);
  STACKTOP = sp;return;
  break;
 }
 case 17:  {
  $112 = $2;
  $r = $112;
  $113 = $r;
  $114 = ((($113)) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)!=(0|0);
  if (!($116)) {
   STACKTOP = sp;return;
  }
  $117 = $r;
  $118 = ((($117)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($119)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121>>>0)<(8);
  if (!($122)) {
   $123 = $0;
   $124 = $r;
   $125 = ((($124)) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = HEAP32[$126>>2]|0;
   _mrb_gc_mark($123,$127);
  }
  $128 = $r;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((($130)) + 8|0);
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133>>>0)<(8);
  if ($134) {
   STACKTOP = sp;return;
  }
  $135 = $0;
  $136 = $r;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($138)) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  _mrb_gc_mark($135,$140);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $38 = $0;
 $39 = $2;
 _mrb_gc_mark_iv($38,$39);
 STACKTOP = sp;return;
}
function _final_marking_phase($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _mark_context_stack($2,$5);
 $6 = $0;
 $7 = $1;
 _gc_mark_gray_list($6,$7);
 $8 = $1;
 $9 = ((($8)) + 432|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 428|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 432|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = $1;
 _gc_mark_gray_list($15,$16);
 STACKTOP = sp;return;
}
function _gc_mark_gray_list($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 428|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = ((($6)) + 428|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 >>> 8;
  $11 = $10 & 7;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $1;
   $15 = $1;
   $16 = ((($15)) + 428|0);
   $17 = HEAP32[$16>>2]|0;
   _gc_mark_children($13,$14,$17);
   continue;
  } else {
   $18 = $1;
   $19 = ((($18)) + 428|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = ((($23)) + 428|0);
   HEAP32[$24>>2] = $22;
   continue;
  }
 }
 STACKTOP = sp;return;
}
function _prepare_incremental_sweep($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $1;
 $3 = ((($2)) + 420|0);
 HEAP32[$3>>2] = 2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 436|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _incremental_sweep_phase($mrb,$gc,$limit) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dead_slot = 0, $e = 0, $freed = 0, $full = 0, $next = 0;
 var $or$cond = 0, $or$cond3 = 0, $p = 0, $page = 0, $tried_sweep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $limit;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $page = $5;
 $tried_sweep = 0;
 while(1) {
  $6 = $page;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $tried_sweep;
   $9 = $2;
   $10 = ($8>>>0)<($9>>>0);
   $154 = $10;
  } else {
   $154 = 0;
  }
  $11 = $page;
  if (!($154)) {
   break;
  }
  $12 = ((($11)) + 24|0);
  $p = $12;
  $13 = $p;
  $14 = ((($13)) + 1536|0);
  $e = $14;
  $freed = 0;
  $dead_slot = 1;
  $15 = $page;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = $17&1;
  $19 = $18&255;
  $full = $19;
  $20 = $1;
  $21 = ((($20)) + 452|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22&255) >>> 2;
  $24 = $23 & 1;
  $25 = $24&255;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $1;
   $28 = ((($27)) + 452|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29&255) >>> 1;
   $31 = $30 & 1;
   $32 = ($31<<24>>24)!=(0);
   if (!($32)) {
    $33 = $page;
    $34 = ((($33)) + 20|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 & 1;
    $37 = $36&255;
    $38 = ($37|0)!=(0);
    if ($38) {
     $39 = $e;
     $p = $39;
     $dead_slot = 0;
    }
   }
  }
  while(1) {
   $40 = $p;
   $41 = $e;
   $42 = ($40>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = $p;
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 8;
   $46 = $45 & 7;
   $47 = $1;
   $48 = ((($47)) + 424|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 ^ 3;
   $51 = $46 & $50;
   $52 = $51 & 3;
   $53 = ($52|0)!=(0);
   if ($53) {
    label = 12;
   } else {
    $54 = $p;
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 & 255;
    $57 = ($56|0)==(1);
    if ($57) {
     label = 12;
    } else {
     $72 = $1;
     $73 = ((($72)) + 452|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74&255) >>> 2;
     $76 = $75 & 1;
     $77 = ($76<<24>>24)!=(0);
     if (!($77)) {
      $78 = $1;
      $79 = ((($78)) + 424|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $p;
      $82 = HEAP32[$81>>2]|0;
      $83 = $80 & 7;
      $84 = $83 << 8;
      $85 = $82 & -1793;
      $86 = $85 | $84;
      HEAP32[$81>>2] = $86;
     }
     $dead_slot = 0;
    }
   }
   if ((label|0) == 12) {
    label = 0;
    $58 = $p;
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 255;
    $61 = ($60|0)!=(1);
    if ($61) {
     $62 = $0;
     $63 = $p;
     _obj_free($62,$63);
     $64 = $page;
     $65 = HEAP32[$64>>2]|0;
     $66 = $p;
     $67 = ((($66)) + 12|0);
     HEAP32[$67>>2] = $65;
     $68 = $p;
     $69 = $page;
     HEAP32[$69>>2] = $68;
     $70 = $freed;
     $71 = (($70) + 1)|0;
     $freed = $71;
    }
   }
   $87 = $p;
   $88 = ((($87)) + 24|0);
   $p = $88;
  }
  $89 = $dead_slot;
  $90 = $89&255;
  $91 = ($90|0)!=(0);
  $92 = $freed;
  $93 = ($92>>>0)<(64);
  $or$cond = $91 & $93;
  if ($or$cond) {
   $94 = $page;
   $95 = ((($94)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $next = $96;
   $97 = $1;
   $98 = $page;
   _unlink_heap_page($97,$98);
   $99 = $1;
   $100 = $page;
   _unlink_free_heap_page($99,$100);
   $101 = $0;
   $102 = $page;
   _mrb_free($101,$102);
   $103 = $next;
   $page = $103;
  } else {
   $104 = $full;
   $105 = $104&255;
   $106 = ($105|0)!=(0);
   $107 = $freed;
   $108 = ($107>>>0)>(0);
   $or$cond3 = $106 & $108;
   if ($or$cond3) {
    $109 = $1;
    $110 = $page;
    _link_free_heap_page($109,$110);
   }
   $111 = $page;
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(0|0);
   if ($113) {
    $114 = $1;
    $115 = ((($114)) + 452|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = ($116&255) >>> 2;
    $118 = $117 & 1;
    $119 = $118&255;
    $120 = ($119|0)!=(0);
    if ($120) {
     $121 = $1;
     $122 = ((($121)) + 452|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = ($123&255) >>> 1;
     $125 = $124 & 1;
     $126 = ($125<<24>>24)!=(0);
     if ($126) {
      label = 26;
     } else {
      $127 = $page;
      $128 = ((($127)) + 20|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 & -2;
      $131 = $130 | 1;
      HEAP8[$128>>0] = $131;
     }
    } else {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    label = 0;
    $132 = $page;
    $133 = ((($132)) + 20|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134 & -2;
    HEAP8[$133>>0] = $135;
   }
   $136 = $page;
   $137 = ((($136)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $page = $138;
  }
  $139 = $tried_sweep;
  $140 = (($139) + 64)|0;
  $tried_sweep = $140;
  $141 = $freed;
  $142 = $1;
  $143 = ((($142)) + 12|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) - ($141))|0;
  HEAP32[$143>>2] = $145;
  $146 = $freed;
  $147 = $1;
  $148 = ((($147)) + 436|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) - ($146))|0;
  HEAP32[$148>>2] = $150;
 }
 $151 = $1;
 $152 = ((($151)) + 4|0);
 HEAP32[$152>>2] = $11;
 $153 = $tried_sweep;
 STACKTOP = sp;return ($153|0);
}
function _obj_free($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $d = 0, $e = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 255;
 L1: do {
  switch ($4|0) {
  case 18: case 8:  {
   $5 = $0;
   $6 = $1;
   _mrb_gc_free_iv($5,$6);
   break;
  }
  case 12: case 10: case 9:  {
   $7 = $0;
   $8 = $1;
   _mrb_gc_free_mt($7,$8);
   $9 = $0;
   $10 = $1;
   _mrb_gc_free_iv($9,$10);
   break;
  }
  case 11:  {
   $11 = $1;
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 >>> 11;
   $14 = $13 & 1048576;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $0;
    $17 = $1;
    _mrb_gc_free_mt($16,$17);
   }
   break;
  }
  case 20:  {
   $18 = $1;
   $e = $18;
   $19 = $e;
   $20 = ((($19)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)>=(0);
   if (!($22)) {
    $23 = $0;
    $24 = $e;
    $25 = ((($24)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    _mrb_free($23,$26);
    $27 = $e;
    $28 = ((($27)) + 12|0);
    HEAP32[$28>>2] = 0;
   }
   break;
  }
  case 22:  {
   $29 = $1;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $c = $31;
   $32 = $c;
   $33 = $0;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($32|0)!=($35|0);
   if ($36) {
    $37 = $0;
    $38 = $c;
    _mrb_free_context($37,$38);
   }
   break;
  }
  case 14:  {
   $39 = $1;
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 11;
   $42 = $41 & 256;
   $43 = ($42|0)!=(0);
   $44 = $0;
   $45 = $1;
   if ($43) {
    $46 = ((($45)) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    _mrb_ary_decref($44,$47);
    break L1;
   } else {
    $48 = ((($45)) + 20|0);
    $49 = HEAP32[$48>>2]|0;
    _mrb_free($44,$49);
    break L1;
   }
   break;
  }
  case 15:  {
   $50 = $0;
   $51 = $1;
   _mrb_gc_free_iv($50,$51);
   $52 = $0;
   $53 = $1;
   _mrb_gc_free_hash($52,$53);
   break;
  }
  case 16:  {
   $54 = $0;
   $55 = $1;
   _mrb_gc_free_str($54,$55);
   break;
  }
  case 13:  {
   $56 = $1;
   $p = $56;
   $57 = $p;
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 >>> 11;
   $60 = $59 & 128;
   $61 = ($60|0)!=(0);
   if (!($61)) {
    $62 = $p;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0|0);
    if ($65) {
     $66 = $0;
     $67 = $p;
     $68 = ((($67)) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     _mrb_irep_decref($66,$69);
    }
   }
   break;
  }
  case 17:  {
   $70 = $0;
   $71 = $1;
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   _mrb_free($70,$73);
   break;
  }
  case 21:  {
   $74 = $1;
   $d = $74;
   $75 = $d;
   $76 = ((($75)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   if ($78) {
    $79 = $d;
    $80 = ((($79)) + 16|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)!=(0|0);
    if ($84) {
     $85 = $d;
     $86 = ((($85)) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($87)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $0;
     $91 = $d;
     $92 = ((($91)) + 20|0);
     $93 = HEAP32[$92>>2]|0;
     FUNCTION_TABLE_vii[$89 & 511]($90,$93);
    }
   }
   $94 = $0;
   $95 = $1;
   _mrb_gc_free_iv($94,$95);
   break;
  }
  case 6: case 4: case 3: case 2:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
 } while(0);
 $96 = $1;
 $97 = HEAP32[$96>>2]|0;
 $98 = $97 & -256;
 $99 = $98 | 1;
 HEAP32[$96>>2] = $99;
 STACKTOP = sp;return;
}
function _mrb_free($mrb,$p) {
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$4 & 255]($5,$6,0,$9)|0);
 STACKTOP = sp;return;
}
function _unlink_heap_page($gc,$page) {
 $gc = $gc|0;
 $page = $page|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gc;
 $1 = $page;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $19;
 }
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = ($25|0)==($26|0);
 if (!($27)) {
  $32 = $1;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = 0;
  $34 = $1;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = 0;
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 HEAP32[$31>>2] = $30;
 $32 = $1;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = ((($34)) + 8|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _unlink_free_heap_page($gc,$page) {
 $gc = $gc|0;
 $page = $page|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gc;
 $1 = $page;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 16|0);
  HEAP32[$23>>2] = $19;
 }
 $24 = $0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ($26|0)==($27|0);
 if (!($28)) {
  $34 = $1;
  $35 = ((($34)) + 16|0);
  HEAP32[$35>>2] = 0;
  $36 = $1;
  $37 = ((($36)) + 12|0);
  HEAP32[$37>>2] = 0;
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $1;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = ((($36)) + 12|0);
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function _link_free_heap_page($gc,$page) {
 $gc = $gc|0;
 $page = $page|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gc;
 $1 = $page;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  HEAP32[$15>>2] = $11;
 }
 $16 = $1;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _mrb_realloc($mrb,$p,$len) {
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $p;
 $2 = $len;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_mrb_realloc_simple($4,$5,$6)|0);
 $p2 = $7;
 $8 = $p2;
 $9 = ($8|0)==(0|0);
 $10 = $2;
 $11 = ($10|0)!=(0);
 $or$cond = $9 & $11;
 $12 = $0;
 $13 = ((($12)) + 92|0);
 $14 = ((($13)) + 452|0);
 $15 = HEAP8[$14>>0]|0;
 if (!($or$cond)) {
  $29 = $15 & -9;
  HEAP8[$14>>0] = $29;
  $30 = $p2;
  STACKTOP = sp;return ($30|0);
 }
 $16 = ($15&255) >>> 3;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $30 = $p2;
  STACKTOP = sp;return ($30|0);
 } else {
  $19 = $0;
  $20 = ((($19)) + 92|0);
  $21 = ((($20)) + 452|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 & -9;
  $24 = $23 | 8;
  HEAP8[$21>>0] = $24;
  $25 = $0;
  $26 = $0;
  $27 = ((($26)) + 576|0);
  $28 = HEAP32[$27>>2]|0;
  _mrb_obj_value($3,$28);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
  _mrb_exc_raise($25,$$byval_copy);
  // unreachable;
 }
 return (0)|0;
}
function _mrb_obj_value($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_malloc($mrb,$len) {
 $mrb = $mrb|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 $4 = (_mrb_realloc($2,0,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mrb_malloc_simple($mrb,$len) {
 $mrb = $mrb|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 $4 = (_mrb_realloc_simple($2,0,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mrb_calloc($mrb,$nelem,$len) {
 $mrb = $mrb|0;
 $nelem = $nelem|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $p = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $nelem;
 $2 = $len;
 $3 = $1;
 $4 = ($3>>>0)>(0);
 $5 = $2;
 $6 = ($5>>>0)>(0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $1;
  $8 = $2;
  $9 = (4294967295 / ($8>>>0))&-1;
  $10 = ($7>>>0)<=($9>>>0);
  if ($10) {
   $11 = $1;
   $12 = $2;
   $13 = Math_imul($11, $12)|0;
   $size = $13;
   $14 = $0;
   $15 = $size;
   $16 = (_mrb_malloc($14,$15)|0);
   $p = $16;
   $17 = $p;
   $18 = $size;
   _memset(($17|0),0,($18|0))|0;
   $19 = $p;
   STACKTOP = sp;return ($19|0);
  }
 }
 $p = 0;
 $19 = $p;
 STACKTOP = sp;return ($19|0);
}
function _mrb_gc_init($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $1;
 $3 = ((($2)) + 424|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = $1;
 _add_heap($7,$8);
 $9 = $1;
 $10 = ((($9)) + 444|0);
 HEAP32[$10>>2] = 200;
 $11 = $1;
 $12 = ((($11)) + 448|0);
 HEAP32[$12>>2] = 200;
 $13 = $1;
 $14 = ((($13)) + 452|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -5;
 $17 = $16 | 4;
 HEAP8[$14>>0] = $17;
 $18 = $1;
 $19 = ((($18)) + 452|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & -3;
 $22 = $21 | 2;
 HEAP8[$19>>0] = $22;
 STACKTOP = sp;return;
}
function _add_heap($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $p = 0, $page = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $0;
 $3 = (_mrb_calloc($2,1,1564)|0);
 $page = $3;
 $prev = 0;
 $4 = $page;
 $5 = ((($4)) + 24|0);
 $p = $5;
 $6 = $p;
 $7 = ((($6)) + 1536|0);
 $e = $7;
 while(1) {
  $8 = $p;
  $9 = $e;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $p;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & -256;
  $14 = $13 | 1;
  HEAP32[$11>>2] = $14;
  $15 = $prev;
  $16 = $p;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = $15;
  $18 = $p;
  $prev = $18;
  $19 = $p;
  $20 = ((($19)) + 24|0);
  $p = $20;
 }
 $21 = $prev;
 $22 = $page;
 HEAP32[$22>>2] = $21;
 $23 = $1;
 $24 = $page;
 _link_heap_page($23,$24);
 $25 = $1;
 $26 = $page;
 _link_free_heap_page($25,$26);
 STACKTOP = sp;return;
}
function _link_heap_page($gc,$page) {
 $gc = $gc|0;
 $page = $page|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gc;
 $1 = $page;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $9;
 }
 $13 = $1;
 $14 = $0;
 HEAP32[$14>>2] = $13;
 STACKTOP = sp;return;
}
function _free_heap($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $p = 0, $page = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $page = $3;
 while(1) {
  $4 = $page;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $page;
  $tmp = $6;
  $7 = $page;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $page = $9;
  $10 = $tmp;
  $11 = ((($10)) + 24|0);
  $p = $11;
  $12 = $p;
  $13 = ((($12)) + 1536|0);
  $e = $13;
  while(1) {
   $14 = $p;
   $15 = $e;
   $16 = ($14>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $p;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 255;
   $20 = ($19|0)!=(1);
   if ($20) {
    $21 = $0;
    $22 = $p;
    _obj_free($21,$22);
   }
   $23 = $p;
   $24 = ((($23)) + 24|0);
   $p = $24;
  }
  $25 = $0;
  $26 = $tmp;
  _mrb_free($25,$26);
 }
 STACKTOP = sp;return;
}
function _mrb_gc_destroy($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $0;
 $3 = $1;
 _free_heap($2,$3);
 STACKTOP = sp;return;
}
function _mrb_gc_protect($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = ((($obj)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<(8);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $0;
 $6 = ((($5)) + 92|0);
 $7 = HEAP32[$obj>>2]|0;
 _gc_protect($4,$6,$7);
 STACKTOP = sp;return;
}
function _gc_protect($mrb,$gc,$p) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $p;
 $3 = $1;
 $4 = ((($3)) + 416|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>=(100);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 416|0);
  HEAP32[$8>>2] = 96;
  $9 = $0;
  $10 = $0;
  $11 = (_mrb_class_get($10,67967)|0);
  _mrb_raise($9,$11,54568);
  // unreachable;
 } else {
  $12 = $2;
  $13 = $1;
  $14 = ((($13)) + 416|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
  $17 = $1;
  $18 = ((($17)) + 16|0);
  $19 = (($18) + ($15<<2)|0);
  HEAP32[$19>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _mrb_obj_alloc($mrb,$ttype,$cls) {
 $mrb = $mrb|0;
 $ttype = $ttype|0;
 $cls = $cls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $gc = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $ttype;
 $2 = $cls;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $gc = $4;
 $5 = $gc;
 $6 = ((($5)) + 440|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $gc;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if ($11) {
  $12 = $0;
  _mrb_incremental_gc($12);
 }
 $13 = $gc;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $0;
  $18 = $gc;
  _add_heap($17,$18);
 }
 $19 = $gc;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $p = $22;
 $23 = $p;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $gc;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$28>>2] = $25;
 $29 = $gc;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = $gc;
  $35 = $gc;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  _unlink_free_heap_page($34,$37);
 }
 $38 = $gc;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[$39>>2] = $41;
 $42 = $0;
 $43 = $gc;
 $44 = $p;
 _gc_protect($42,$43,$44);
 $45 = $p;
 ;HEAP32[$45>>2]=HEAP32[72424>>2]|0;HEAP32[$45+4>>2]=HEAP32[72424+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[72424+8>>2]|0;HEAP32[$45+12>>2]=HEAP32[72424+12>>2]|0;HEAP32[$45+16>>2]=HEAP32[72424+16>>2]|0;HEAP32[$45+20>>2]=HEAP32[72424+20>>2]|0;
 $46 = $1;
 $47 = $p;
 $48 = HEAP32[$47>>2]|0;
 $49 = $46 & 255;
 $50 = $48 & -256;
 $51 = $50 | $49;
 HEAP32[$47>>2] = $51;
 $52 = $2;
 $53 = $p;
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = $52;
 $55 = $gc;
 $56 = ((($55)) + 424|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $p;
 $59 = HEAP32[$58>>2]|0;
 $60 = $57 & 7;
 $61 = $60 << 8;
 $62 = $59 & -1793;
 $63 = $62 | $61;
 HEAP32[$58>>2] = $63;
 $64 = $p;
 STACKTOP = sp;return ($64|0);
}
function _mrb_incremental_gc($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $gc = $2;
 $3 = $gc;
 $4 = ((($3)) + 452|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $gc;
 $9 = ((($8)) + 452|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10&255) >>> 2;
 $12 = $11 & 1;
 $13 = $12&255;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $gc;
  $16 = ((($15)) + 452|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17&255) >>> 1;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)!=(0);
  if ($20) {
   label = 5;
  } else {
   $21 = $0;
   $22 = $gc;
   _incremental_gc_until($21,$22,0);
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $23 = $0;
  $24 = $gc;
  _incremental_gc_step($23,$24);
 }
 $25 = $gc;
 $26 = ((($25)) + 420|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $gc;
 $30 = ((($29)) + 436|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31>>>0) / 100)&-1;
 $33 = $gc;
 $34 = ((($33)) + 444|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($32, $35)|0;
 $37 = $gc;
 $38 = ((($37)) + 440|0);
 HEAP32[$38>>2] = $36;
 $39 = $gc;
 $40 = ((($39)) + 440|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41>>>0)<(1024);
 if ($42) {
  $43 = $gc;
  $44 = ((($43)) + 440|0);
  HEAP32[$44>>2] = 1024;
 }
 $45 = $gc;
 $46 = ((($45)) + 452|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47&255) >>> 2;
 $49 = $48 & 1;
 $50 = $49&255;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $gc;
  $53 = ((($52)) + 452|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54&255) >>> 1;
  $56 = $55 & 1;
  $57 = $56&255;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $gc;
   $60 = ((($59)) + 436|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61>>>0) / 100)&-1;
   $63 = ($62*200)|0;
   $64 = $gc;
   $65 = ((($64)) + 456|0);
   HEAP32[$65>>2] = $63;
   $66 = $gc;
   $67 = ((($66)) + 452|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 & -3;
   HEAP8[$67>>0] = $69;
   STACKTOP = sp;return;
  }
 }
 $70 = $gc;
 $71 = ((($70)) + 452|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72&255) >>> 2;
 $74 = $73 & 1;
 $75 = $74&255;
 $76 = ($75|0)!=(0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $gc;
 $78 = ((($77)) + 452|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = ($79&255) >>> 1;
 $81 = $80 & 1;
 $82 = ($81<<24>>24)!=(0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $83 = $gc;
 $84 = ((($83)) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $gc;
 $87 = ((($86)) + 456|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($85>>>0)>($88>>>0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $0;
 $91 = $gc;
 _clear_all_old($90,$91);
 $92 = $gc;
 $93 = ((($92)) + 452|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94 & -3;
 $96 = $95 | 2;
 HEAP8[$93>>0] = $96;
 STACKTOP = sp;return;
}
function _incremental_gc_step($mrb,$gc) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $limit = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $limit = 0;
 $result = 0;
 $2 = $1;
 $3 = ((($2)) + 448|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4*10)|0;
 $limit = $5;
 while(1) {
  $6 = $result;
  $7 = $limit;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $1;
  $11 = $limit;
  $12 = (_incremental_gc($9,$10,$11)|0);
  $13 = $result;
  $14 = (($13) + ($12))|0;
  $result = $14;
  $15 = $1;
  $16 = ((($15)) + 420|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
 }
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 1024)|0;
 $23 = $1;
 $24 = ((($23)) + 440|0);
 HEAP32[$24>>2] = $22;
 STACKTOP = sp;return;
}
function _mrb_gc_arena_save($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 416|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _mrb_gc_arena_restore($mrb,$idx) {
 $mrb = $mrb|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $idx;
 $2 = $0;
 $3 = ((($2)) + 92|0);
 $gc = $3;
 $4 = $1;
 $5 = $gc;
 $6 = ((($5)) + 416|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _mrb_field_write_barrier($mrb,$obj,$value) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $value;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $gc = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 8;
 $8 = $7 & 7;
 $9 = $8 & 4;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 8;
 $14 = $13 & 7;
 $15 = $14 & 3;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $gc;
 $18 = ((($17)) + 452|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19&255) >>> 2;
 $21 = $20 & 1;
 $22 = $21&255;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $gc;
  $25 = ((($24)) + 420|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(1);
  if (!($27)) {
   $31 = $gc;
   $32 = ((($31)) + 424|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = HEAP32[$34>>2]|0;
   $36 = $33 & 7;
   $37 = $36 << 8;
   $38 = $35 & -1793;
   $39 = $38 | $37;
   HEAP32[$34>>2] = $39;
   STACKTOP = sp;return;
  }
 }
 $28 = $0;
 $29 = $gc;
 $30 = $2;
 _add_gray_list($28,$29,$30);
 STACKTOP = sp;return;
}
function _mrb_write_barrier($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $0;
 $3 = ((($2)) + 92|0);
 $gc = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 8;
 $7 = $6 & 7;
 $8 = $7 & 4;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & -1793;
 HEAP32[$10>>2] = $12;
 $13 = $gc;
 $14 = ((($13)) + 432|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = $gc;
 $20 = ((($19)) + 432|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _mrb_init_gc($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $gc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_define_module($1,54589)|0);
 $gc = $2;
 $3 = $0;
 $4 = $gc;
 _mrb_define_class_method($3,$4,54592,8,0);
 $5 = $0;
 $6 = $gc;
 _mrb_define_class_method($5,$6,54598,9,0);
 $7 = $0;
 $8 = $gc;
 _mrb_define_class_method($7,$8,54605,10,0);
 $9 = $0;
 $10 = $gc;
 _mrb_define_class_method($9,$10,54613,11,0);
 $11 = $0;
 $12 = $gc;
 _mrb_define_class_method($11,$12,54628,12,262144);
 $13 = $0;
 $14 = $gc;
 _mrb_define_class_method($13,$14,54644,13,0);
 $15 = $0;
 $16 = $gc;
 _mrb_define_class_method($15,$16,54655,14,262144);
 $17 = $0;
 $18 = $gc;
 _mrb_define_class_method($17,$18,54667,15,262144);
 $19 = $0;
 $20 = $gc;
 _mrb_define_class_method($19,$20,54686,16,0);
 STACKTOP = sp;return;
}
function _gc_start($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_full_gc($1);
 _mrb_nil_value_53($agg$result);
 STACKTOP = sp;return;
}
function _gc_enable($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 452|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $old = $5;
 $6 = $0;
 $7 = ((($6)) + 92|0);
 $8 = ((($7)) + 452|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & -2;
 HEAP8[$8>>0] = $10;
 $11 = $old;
 _mrb_bool_value($agg$result,$11);
 STACKTOP = sp;return;
}
function _mrb_bool_value($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _gc_disable($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 452|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $old = $5;
 $6 = $0;
 $7 = ((($6)) + 92|0);
 $8 = ((($7)) + 452|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & -2;
 $11 = $10 | 1;
 HEAP8[$8>>0] = $11;
 $12 = $old;
 _mrb_bool_value($agg$result,$12);
 STACKTOP = sp;return;
}
function _gc_interval_ratio_get($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 444|0);
 $4 = HEAP32[$3>>2]|0;
 _mrb_fixnum_value($agg$result,$4);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _gc_interval_ratio_set($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ratio = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ratio = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ratio;
 (_mrb_get_args($1,64319,$vararg_buffer)|0);
 $2 = HEAP32[$ratio>>2]|0;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $5 = ((($4)) + 444|0);
 HEAP32[$5>>2] = $2;
 _mrb_nil_value_53($agg$result);
 STACKTOP = sp;return;
}
function _gc_step_ratio_get($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 448|0);
 $4 = HEAP32[$3>>2]|0;
 _mrb_fixnum_value($agg$result,$4);
 STACKTOP = sp;return;
}
function _gc_step_ratio_set($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ratio = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ratio = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ratio;
 (_mrb_get_args($1,64319,$vararg_buffer)|0);
 $2 = HEAP32[$ratio>>2]|0;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $5 = ((($4)) + 448|0);
 HEAP32[$5>>2] = $2;
 _mrb_nil_value_53($agg$result);
 STACKTOP = sp;return;
}
function _gc_generational_mode_set($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enable = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $enable = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $enable;
 (_mrb_get_args($1,55037,$vararg_buffer)|0);
 $2 = $0;
 $3 = ((($2)) + 92|0);
 $4 = ((($3)) + 452|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 2;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = HEAP8[$enable>>0]|0;
 $10 = $9&255;
 $11 = ($8|0)!=($10|0);
 if (!($11)) {
  $16 = HEAP8[$enable>>0]|0;
  _mrb_bool_value($agg$result,$16);
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $0;
 $14 = ((($13)) + 92|0);
 $15 = HEAP8[$enable>>0]|0;
 _change_gen_gc_mode($12,$14,$15);
 $16 = HEAP8[$enable>>0]|0;
 _mrb_bool_value($agg$result,$16);
 STACKTOP = sp;return;
}
function _change_gen_gc_mode($mrb,$gc,$enable) {
 $mrb = $mrb|0;
 $gc = $gc|0;
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $gc;
 $2 = $enable;
 $3 = $1;
 $4 = ((($3)) + 452|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 2;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)==(0);
 $10 = $2;
 $11 = ($10<<24>>24)!=(0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $18 = $1;
  $19 = ((($18)) + 452|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20&255) >>> 2;
  $22 = $21 & 1;
  $23 = ($22<<24>>24)!=(0);
  if (!($23)) {
   $24 = $2;
   $25 = $24&255;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $0;
    $28 = $1;
    _incremental_gc_until($27,$28,0);
    $29 = $1;
    $30 = ((($29)) + 436|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31>>>0) / 100)&-1;
    $33 = ($32*200)|0;
    $34 = $1;
    $35 = ((($34)) + 456|0);
    HEAP32[$35>>2] = $33;
    $36 = $1;
    $37 = ((($36)) + 452|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 & -3;
    HEAP8[$37>>0] = $39;
   }
  }
 } else {
  $12 = $0;
  $13 = $1;
  _clear_all_old($12,$13);
  $14 = $1;
  $15 = ((($14)) + 452|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & -3;
  HEAP8[$15>>0] = $17;
 }
 $40 = $2;
 $41 = $1;
 $42 = ((($41)) + 452|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $40 & 1;
 $45 = ($44 << 2)&255;
 $46 = $43 & -5;
 $47 = $46 | $45;
 HEAP8[$42>>0] = $47;
 STACKTOP = sp;return;
}
function _gc_generational_mode_get($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = ((($2)) + 452|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 2;
 $6 = $5 & 1;
 _mrb_bool_value($agg$result,$6);
 STACKTOP = sp;return;
}
function _kh_alloc_ht($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0;
 var $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $sz = $3;
 $len = 20;
 $4 = $0;
 $5 = $sz;
 $6 = $5;
 $7 = (($6>>>0) / 4)&-1;
 $8 = $len;
 $9 = $sz;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10))|0;
 $12 = (_mrb_malloc($4,$11)|0);
 $p = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = $p;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 HEAP32[$19>>2] = $17;
 $20 = $p;
 $21 = $sz;
 $22 = $21<<3;
 $23 = (($20) + ($22)|0);
 $24 = $1;
 $25 = ((($24)) + 20|0);
 HEAP32[$25>>2] = $23;
 $26 = $p;
 $27 = $len;
 $28 = $sz;
 $29 = Math_imul($27, $28)|0;
 $30 = (($26) + ($29)|0);
 $31 = $1;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $sz;
 $37 = (($36>>>0) / 4)&-1;
 _kh_fill_flags($35,-86,$37);
 STACKTOP = sp;return;
}
function _kh_fill_flags($p,$c,$len) {
 $p = $p|0;
 $c = $c|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)|0;
  $2 = $4;
  $5 = ($3>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
  HEAP8[$7>>0] = $6;
 }
 STACKTOP = sp;return;
}
function _kh_init_ht_size($mrb,$size) {
 $mrb = $mrb|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $0;
 $3 = (_mrb_calloc($2,1,24)|0);
 $h = $3;
 $4 = $1;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $1 = 8;
 }
 $6 = $1;
 $7 = (($6) + -1)|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 1;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 2;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 4;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = $1;
 $27 = $26 | $25;
 $1 = $27;
 $28 = $1;
 $29 = (($28) + 1)|0;
 $1 = $29;
 $30 = $1;
 $31 = $h;
 HEAP32[$31>>2] = $30;
 $32 = $0;
 $33 = $h;
 _kh_alloc_ht($32,$33);
 $34 = $h;
 STACKTOP = sp;return ($34|0);
}
function _kh_init_ht($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_kh_init_ht_size($1,8)|0);
 STACKTOP = sp;return ($2|0);
}
function _kh_destroy_ht($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _mrb_free($4,$7);
 $8 = $0;
 $9 = $1;
 _mrb_free($8,$9);
 STACKTOP = sp;return;
}
function _kh_clear_ht($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12>>>0) / 4)&-1;
 _kh_fill_flags($10,-86,$13);
 $14 = $1;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _kh_get_ht($mrb,$h,$key) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $k = 0, $key$byval_copy = 0, $key$byval_copy1 = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $key$byval_copy = sp + 24|0;
 $1 = $mrb;
 $2 = $h;
 $3 = $1;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 $4 = (_mrb_hash_ht_hash_func($3,$key$byval_copy)|0);
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = $4 & $7;
 $k = $8;
 $step = 0;
 while(1) {
  $9 = $k;
  $10 = (($9>>>0) / 4)&-1;
  $11 = $2;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $k;
  $18 = (($17>>>0) % 4)&-1;
  $19 = (54704 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $16 & $21;
  $23 = ($22|0)!=(0);
  $24 = $23 ^ 1;
  if (!($24)) {
   label = 7;
   break;
  }
  $25 = $k;
  $26 = (($25>>>0) / 4)&-1;
  $27 = $2;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $k;
  $34 = (($33>>>0) % 4)&-1;
  $35 = (54708 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $32 & $37;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   $40 = $1;
   $41 = $k;
   $42 = $2;
   $43 = ((($42)) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$45+4>>2]|0;
   ;HEAP32[$key$byval_copy1>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy1+4>>2]=HEAP32[$key+4>>2]|0;
   $46 = (_mrb_hash_ht_hash_equal($40,$$byval_copy,$key$byval_copy1)|0);
   $47 = ($46|0)!=(0);
   if ($47) {
    label = 5;
    break;
   }
  }
  $49 = $k;
  $50 = $step;
  $51 = (($50) + 1)|0;
  $step = $51;
  $52 = (($49) + ($51))|0;
  $53 = $2;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) - 1)|0;
  $56 = $52 & $55;
  $k = $56;
 }
 if ((label|0) == 5) {
  $48 = $k;
  $0 = $48;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 7) {
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $0 = $58;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _mrb_hash_ht_hash_func($mrb,$key) {
 $mrb = $mrb|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $h = 0, $hv = 0, $i = 0, $key$byval_copy = 0, $len = 0, $p = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 56|0;
 $vararg_buffer = sp;
 $hv = sp + 32|0;
 $2 = sp + 8|0;
 $1 = $mrb;
 $3 = ((($key)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $t = $4;
 $5 = $t;
 switch ($5|0) {
 case 16:  {
  $6 = HEAP32[$key>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 11;
  $9 = $8 & 8;
  $10 = ($9|0)!=(0);
  $11 = HEAP32[$key>>2]|0;
  $12 = ((($11)) + 12|0);
  if ($10) {
   $15 = $12;
  } else {
   $13 = ((($12)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14;
  }
  $p = $15;
  $16 = HEAP32[$key>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 8;
  $20 = ($19|0)!=(0);
  $21 = HEAP32[$key>>2]|0;
  if ($20) {
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 >>> 11;
   $24 = $23 & 496;
   $25 = $24 >> 4;
   $28 = $25;
  } else {
   $26 = ((($21)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27;
  }
  $len = $28;
  $h = 0;
  $i = 0;
  while(1) {
   $29 = $i;
   $30 = $len;
   $31 = ($29|0)<($30|0);
   $32 = $h;
   if (!($31)) {
    break;
   }
   $33 = $32 << 5;
   $34 = $h;
   $35 = (($33) - ($34))|0;
   $36 = $p;
   $37 = ((($36)) + 1|0);
   $p = $37;
   $38 = HEAP8[$36>>0]|0;
   $39 = $38 << 24 >> 24;
   $40 = (($35) + ($39))|0;
   $h = $40;
   $41 = $i;
   $42 = (($41) + 1)|0;
   $i = $42;
  }
  $0 = $32;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
  break;
 }
 case 4:  {
  $43 = HEAP32[$key>>2]|0;
  $h = $43;
  $44 = $h;
  $45 = $h;
  $46 = $45 << 2;
  $47 = $44 ^ $46;
  $48 = $h;
  $49 = $48 >>> 2;
  $50 = $47 ^ $49;
  $0 = $50;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
  break;
 }
 case 3:  {
  $51 = HEAP32[$key>>2]|0;
  $52 = (+($51|0));
  $53 = (_mrb_float_id($52)|0);
  $h = $53;
  $54 = $h;
  $55 = $h;
  $56 = $55 << 2;
  $57 = $54 ^ $56;
  $58 = $h;
  $59 = $58 >>> 2;
  $60 = $57 ^ $59;
  $0 = $60;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
  break;
 }
 case 6:  {
  $61 = +HEAPF32[$key>>2];
  $62 = (_mrb_float_id($61)|0);
  $h = $62;
  $63 = $h;
  $64 = $h;
  $65 = $64 << 2;
  $66 = $63 ^ $65;
  $67 = $h;
  $68 = $67 >>> 2;
  $69 = $66 ^ $68;
  $0 = $69;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
  break;
 }
 default: {
  $70 = $1;
  ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
  _mrb_funcall($2,$70,$key$byval_copy,68178,0,$vararg_buffer);
  ;HEAP32[$hv>>2]=HEAP32[$2>>2]|0;HEAP32[$hv+4>>2]=HEAP32[$2+4>>2]|0;
  $71 = $t;
  $72 = HEAP32[$hv>>2]|0;
  $73 = $71 ^ $72;
  $h = $73;
  $74 = $h;
  $75 = $h;
  $76 = $75 << 2;
  $77 = $74 ^ $76;
  $78 = $h;
  $79 = $78 >>> 2;
  $80 = $77 ^ $79;
  $0 = $80;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 }
 return (0)|0;
}
function _mrb_hash_ht_hash_equal($mrb,$a,$b) {
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a$byval_copy = 0, $a$byval_copy1 = 0, $b$byval_copy = 0, $b$byval_copy2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy2 = sp + 40|0;
 $a$byval_copy1 = sp + 32|0;
 $b$byval_copy = sp + 24|0;
 $a$byval_copy = sp + 16|0;
 $1 = $mrb;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $t = $3;
 $4 = $t;
 L1: do {
  switch ($4|0) {
  case 16:  {
   $5 = $1;
   ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
   ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
   $6 = (_mrb_str_equal($5,$a$byval_copy,$b$byval_copy)|0);
   $7 = $6&255;
   $0 = $7;
   break;
  }
  case 4:  {
   $8 = ((($b)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(4);
   if ($10) {
    $0 = 0;
    break L1;
   } else {
    $11 = HEAP32[$a>>2]|0;
    $12 = HEAP32[$b>>2]|0;
    $13 = ($11|0)==($12|0);
    $14 = $13&1;
    $0 = $14;
    break L1;
   }
   break;
  }
  case 3:  {
   $15 = ((($b)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   switch ($16|0) {
   case 3:  {
    $17 = HEAP32[$a>>2]|0;
    $18 = HEAP32[$b>>2]|0;
    $19 = ($17|0)==($18|0);
    $20 = $19&1;
    $0 = $20;
    break L1;
    break;
   }
   case 6:  {
    $21 = HEAP32[$a>>2]|0;
    $22 = (+($21|0));
    $23 = +HEAPF32[$b>>2];
    $24 = $22 == $23;
    $25 = $24&1;
    $0 = $25;
    break L1;
    break;
   }
   default: {
    $0 = 0;
    break L1;
   }
   }
   break;
  }
  case 6:  {
   $26 = ((($b)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   switch ($27|0) {
   case 3:  {
    $28 = +HEAPF32[$a>>2];
    $29 = HEAP32[$b>>2]|0;
    $30 = (+($29|0));
    $31 = $28 == $30;
    $32 = $31&1;
    $0 = $32;
    break L1;
    break;
   }
   case 6:  {
    $33 = +HEAPF32[$a>>2];
    $34 = +HEAPF32[$b>>2];
    $35 = $33 == $34;
    $36 = $35&1;
    $0 = $36;
    break L1;
    break;
   }
   default: {
    $0 = 0;
    break L1;
   }
   }
   break;
  }
  default: {
   $37 = $1;
   ;HEAP32[$a$byval_copy1>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy1+4>>2]=HEAP32[$a+4>>2]|0;
   ;HEAP32[$b$byval_copy2>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy2+4>>2]=HEAP32[$b+4>>2]|0;
   $38 = (_mrb_eql($37,$a$byval_copy1,$b$byval_copy2)|0);
   $39 = $38&255;
   $0 = $39;
  }
  }
 } while(0);
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _kh_resize_ht($mrb,$h,$new_n_buckets) {
 $mrb = $mrb|0;
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$byval_copy = 0, $$new_n_buckets = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $hh = 0, $i = 0, $k = 0;
 var $old_ed_flags = 0, $old_keys = 0, $old_n_buckets = 0, $old_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 64|0;
 $hh = sp + 24|0;
 $0 = $mrb;
 $1 = $h;
 $2 = $new_n_buckets;
 $3 = $2;
 $4 = ($3>>>0)<(8);
 $$new_n_buckets = $4 ? 8 : $new_n_buckets;
 $2 = $$new_n_buckets;
 $5 = $2;
 $6 = (($5) + -1)|0;
 $2 = $6;
 $7 = $2;
 $8 = $7 >>> 1;
 $9 = $2;
 $10 = $9 | $8;
 $2 = $10;
 $11 = $2;
 $12 = $11 >>> 2;
 $13 = $2;
 $14 = $13 | $12;
 $2 = $14;
 $15 = $2;
 $16 = $15 >>> 4;
 $17 = $2;
 $18 = $17 | $16;
 $2 = $18;
 $19 = $2;
 $20 = $19 >>> 8;
 $21 = $2;
 $22 = $21 | $20;
 $2 = $22;
 $23 = $2;
 $24 = $23 >>> 16;
 $25 = $2;
 $26 = $25 | $24;
 $2 = $26;
 $27 = $2;
 $28 = (($27) + 1)|0;
 $2 = $28;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $old_ed_flags = $31;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $old_keys = $34;
 $35 = $1;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $old_vals = $37;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $old_n_buckets = $39;
 $40 = $2;
 HEAP32[$hh>>2] = $40;
 $41 = $0;
 _kh_alloc_ht($41,$hh);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $old_n_buckets;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  $46 = (($45>>>0) / 4)&-1;
  $47 = $old_ed_flags;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $i;
  $52 = (($51>>>0) % 4)&-1;
  $53 = (54712 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $50 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $0;
   $59 = $i;
   $60 = $old_keys;
   $61 = (($60) + ($59<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$61>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$61+4>>2]|0;
   $62 = (_kh_put_ht($58,$hh,$$byval_copy,0)|0);
   $k = $62;
   $63 = $k;
   $64 = ((($hh)) + 20|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + (($63*12)|0)|0);
   $67 = $i;
   $68 = $old_vals;
   $69 = (($68) + (($67*12)|0)|0);
   ;HEAP32[$66>>2]=HEAP32[$69>>2]|0;HEAP32[$66+4>>2]=HEAP32[$69+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$69+8>>2]|0;
  }
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $1;
 ;HEAP32[$72>>2]=HEAP32[$hh>>2]|0;HEAP32[$72+4>>2]=HEAP32[$hh+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$hh+8>>2]|0;HEAP32[$72+12>>2]=HEAP32[$hh+12>>2]|0;HEAP32[$72+16>>2]=HEAP32[$hh+16>>2]|0;HEAP32[$72+20>>2]=HEAP32[$hh+20>>2]|0;
 $73 = $0;
 $74 = $old_keys;
 _mrb_free($73,$74);
 STACKTOP = sp;return;
}
function _kh_put_ht($mrb,$h,$key,$ret) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $del_k = 0, $k = 0, $key$byval_copy = 0, $key$byval_copy1 = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $key$byval_copy = sp + 32|0;
 $1 = $mrb;
 $2 = $h;
 $3 = $ret;
 $step = 0;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 2;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 1;
 $13 = $9 | $12;
 $14 = ($6>>>0)>=($13>>>0);
 if ($14) {
  $15 = $1;
  $16 = $2;
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  $19 = $18<<1;
  _kh_resize_ht($15,$16,$19);
 }
 $20 = $1;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 $21 = (_mrb_hash_ht_hash_func($20,$key$byval_copy)|0);
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - 1)|0;
 $25 = $21 & $24;
 $k = $25;
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $del_k = $27;
 while(1) {
  $28 = $k;
  $29 = (($28>>>0) / 4)&-1;
  $30 = $2;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $k;
  $37 = (($36>>>0) % 4)&-1;
  $38 = (54704 + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $35 & $40;
  $42 = ($41|0)!=(0);
  $43 = $42 ^ 1;
  if (!($43)) {
   break;
  }
  $44 = $k;
  $45 = (($44>>>0) / 4)&-1;
  $46 = $2;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $k;
  $53 = (($52>>>0) % 4)&-1;
  $54 = (54708 + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $51 & $56;
  $58 = ($57|0)!=(0);
  if ($58) {
   $71 = $del_k;
   $72 = $2;
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = $k;
    $del_k = $75;
   }
  } else {
   $59 = $1;
   $60 = $k;
   $61 = $2;
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$64>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$64+4>>2]|0;
   ;HEAP32[$key$byval_copy1>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy1+4>>2]=HEAP32[$key+4>>2]|0;
   $65 = (_mrb_hash_ht_hash_equal($59,$$byval_copy,$key$byval_copy1)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    label = 7;
    break;
   }
  }
  $76 = $k;
  $77 = $step;
  $78 = (($77) + 1)|0;
  $step = $78;
  $79 = (($76) + ($78))|0;
  $80 = $2;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) - 1)|0;
  $83 = $79 & $82;
  $k = $83;
 }
 if ((label|0) == 7) {
  $67 = $3;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $69 = $3;
   HEAP32[$69>>2] = 0;
  }
  $70 = $k;
  $0 = $70;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 $84 = $del_k;
 $85 = $2;
 $86 = HEAP32[$85>>2]|0;
 $87 = ($84|0)!=($86|0);
 if ($87) {
  $88 = $del_k;
  $89 = $2;
  $90 = ((($89)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($88<<3)|0);
  ;HEAP32[$92>>2]=HEAP32[$key>>2]|0;HEAP32[$92+4>>2]=HEAP32[$key+4>>2]|0;
  $93 = $del_k;
  $94 = (($93>>>0) % 4)&-1;
  $95 = (54708 + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 ^ -1;
  $99 = $del_k;
  $100 = (($99>>>0) / 4)&-1;
  $101 = $2;
  $102 = ((($101)) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + ($100)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = $106 & $98;
  $108 = $107&255;
  HEAP8[$104>>0] = $108;
  $109 = $2;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + 1)|0;
  HEAP32[$110>>2] = $112;
  $113 = $3;
  $114 = ($113|0)!=(0|0);
  if ($114) {
   $115 = $3;
   HEAP32[$115>>2] = 2;
  }
  $116 = $del_k;
  $0 = $116;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 } else {
  $117 = $k;
  $118 = $2;
  $119 = ((($118)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($117<<3)|0);
  ;HEAP32[$121>>2]=HEAP32[$key>>2]|0;HEAP32[$121+4>>2]=HEAP32[$key+4>>2]|0;
  $122 = $k;
  $123 = (($122>>>0) % 4)&-1;
  $124 = (54704 + ($123)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = $126 ^ -1;
  $128 = $k;
  $129 = (($128>>>0) / 4)&-1;
  $130 = $2;
  $131 = ((($130)) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + ($129)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = $135 & $127;
  $137 = $136&255;
  HEAP8[$133>>0] = $137;
  $138 = $2;
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[$139>>2] = $141;
  $142 = $2;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + 1)|0;
  HEAP32[$143>>2] = $145;
  $146 = $3;
  $147 = ($146|0)!=(0|0);
  if ($147) {
   $148 = $3;
   HEAP32[$148>>2] = 1;
  }
  $149 = $k;
  $0 = $149;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 return (0)|0;
}
function _kh_del_ht($mrb,$h,$x) {
 $mrb = $mrb|0;
 $h = $h|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $x;
 $3 = $2;
 $4 = (($3>>>0) % 4)&-1;
 $5 = (54708 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $2;
 $9 = (($8>>>0) / 4)&-1;
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | $7;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = $1;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _mrb_gc_mark_hash($mrb,$hash) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, $key = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 8|0;
 $val = sp;
 $0 = $mrb;
 $1 = $hash;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $k = 0;
 while(1) {
  $7 = $k;
  $8 = $h;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $k;
  $12 = (($11>>>0) / 4)&-1;
  $13 = $h;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $k;
  $20 = (($19>>>0) % 4)&-1;
  $21 = (54712 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $18 & $23;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = $k;
   $27 = $h;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<3)|0);
   ;HEAP32[$key>>2]=HEAP32[$30>>2]|0;HEAP32[$key+4>>2]=HEAP32[$30+4>>2]|0;
   $31 = $k;
   $32 = $h;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + (($31*12)|0)|0);
   ;HEAP32[$val>>2]=HEAP32[$35>>2]|0;HEAP32[$val+4>>2]=HEAP32[$35+4>>2]|0;
   $36 = ((($key)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37>>>0)<(8);
   if (!($38)) {
    $39 = $0;
    $40 = HEAP32[$key>>2]|0;
    _mrb_gc_mark($39,$40);
   }
   $41 = ((($val)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42>>>0)<(8);
   if (!($43)) {
    $44 = $0;
    $45 = HEAP32[$val>>2]|0;
    _mrb_gc_mark($44,$45);
   }
  }
  $46 = $k;
  $47 = (($46) + 1)|0;
  $k = $47;
 }
 STACKTOP = sp;return;
}
function _mrb_gc_mark_hash_size($mrb,$hash) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $hash;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<1;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _mrb_gc_free_hash($mrb,$hash) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $hash;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _kh_destroy_ht($6,$9);
 STACKTOP = sp;return;
}
function _mrb_hash_new_capa($agg$result,$mrb,$capa) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $capa = $capa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $capa;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mrb_obj_alloc($2,15,$5)|0);
 $h = $6;
 $7 = $0;
 $8 = (_kh_init_ht($7)|0);
 $9 = $h;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = $0;
  $14 = $h;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  _kh_resize_ht($13,$16,$17);
 }
 $18 = $h;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $h;
 _mrb_obj_value_86($agg$result,$20);
 STACKTOP = sp;return;
}
function _mrb_obj_value_86($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_get($agg$result,$mrb,$hash,$key) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 $key = $key|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $hash$byval_copy = 0, $hash$byval_copy2 = 0, $k = 0, $key$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash$byval_copy2 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $hash$byval_copy = sp + 48|0;
 $key$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $0 = $mrb;
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = $h;
  ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
  $9 = (_kh_get_ht($7,$8,$key$byval_copy)|0);
  $k = $9;
  $10 = $k;
  $11 = $h;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)!=($12|0);
  if ($13) {
   $14 = $k;
   $15 = $h;
   $16 = ((($15)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + (($14*12)|0)|0);
   ;HEAP32[$agg$result>>2]=HEAP32[$18>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$18+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $19 = HEAP32[$hash>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 11;
 $22 = $21 & 256;
 $23 = ($22|0)!=(0);
 $24 = $0;
 $25 = $0;
 if ($23) {
  $26 = $0;
  $27 = (_mrb_intern_static($26,54716,6)|0);
  ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($1,$25,$hash$byval_copy,$27);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$hash>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$hash+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$hash+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$hash+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$hash+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$hash+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$hash+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$hash+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$key>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$key+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$key+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$key+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$key+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$key+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$key+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$key+7>>0]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_funcall($agg$result,$24,$$byval_copy,69512,2,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $28 = (_mrb_intern_static($25,54716,6)|0);
  ;HEAP32[$hash$byval_copy2>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy2+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($agg$result,$24,$hash$byval_copy2,$28);
  STACKTOP = sp;return;
 }
}
function _mrb_hash_set($mrb,$hash,$key,$val) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $h = 0, $hash$byval_copy = 0, $k = 0, $key$byval_copy = 0, $key$byval_copy1 = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy1 = sp + 48|0;
 $key$byval_copy = sp + 40|0;
 $hash$byval_copy = sp + 32|0;
 $r = sp + 12|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 _mrb_hash_modify($2,$hash$byval_copy);
 $3 = HEAP32[$hash>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $h = $5;
 $6 = $h;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $0;
  $9 = (_kh_init_ht($8)|0);
  $10 = HEAP32[$hash>>2]|0;
  $11 = ((($10)) + 16|0);
  HEAP32[$11>>2] = $9;
  $h = $9;
 }
 $12 = $0;
 $13 = $h;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 $14 = (_kh_put_ht($12,$13,$key$byval_copy,$r)|0);
 $k = $14;
 $15 = $k;
 $16 = $h;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($15*12)|0)|0);
 ;HEAP32[$19>>2]=HEAP32[$val>>2]|0;HEAP32[$19+4>>2]=HEAP32[$val+4>>2]|0;
 $20 = HEAP32[$r>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $0;
  $23 = (_mrb_gc_arena_save($22)|0);
  $ai = $23;
  $24 = $k;
  $25 = $h;
  $26 = ((($25)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<3)|0);
  $29 = $0;
  ;HEAP32[$key$byval_copy1>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy1+4>>2]=HEAP32[$key+4>>2]|0;
  _mrb_hash_ht_key($1,$29,$key$byval_copy1);
  ;HEAP32[$28>>2]=HEAP32[$1>>2]|0;HEAP32[$28+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP32[$key>>2]=HEAP32[$28>>2]|0;HEAP32[$key+4>>2]=HEAP32[$28+4>>2]|0;
  $30 = $0;
  $31 = $ai;
  _mrb_gc_arena_restore($30,$31);
  $32 = $h;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) - 1)|0;
  $36 = $k;
  $37 = $h;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*12)|0)|0);
  $41 = ((($40)) + 8|0);
  HEAP32[$41>>2] = $35;
 }
 $42 = ((($key)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43>>>0)<(8);
 if (!($44)) {
  $45 = $0;
  $46 = HEAP32[$hash>>2]|0;
  $47 = HEAP32[$key>>2]|0;
  _mrb_field_write_barrier($45,$46,$47);
 }
 $48 = ((($val)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)<(8);
 if ($50) {
  STACKTOP = sp;return;
 }
 $51 = $0;
 $52 = HEAP32[$hash>>2]|0;
 $53 = HEAP32[$val>>2]|0;
 _mrb_field_write_barrier($51,$52,$53);
 STACKTOP = sp;return;
}
function _mrb_hash_modify($mrb,$hash) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $hash$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 (_mrb_hash_tbl($1,$hash$byval_copy)|0);
 STACKTOP = sp;return;
}
function _mrb_hash_tbl($mrb,$hash) {
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $11 = $h;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = $1;
  $8 = (_kh_init_ht($7)|0);
  $9 = HEAP32[$hash>>2]|0;
  $10 = ((($9)) + 16|0);
  HEAP32[$10>>2] = $8;
  $0 = $8;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mrb_hash_ht_key($agg$result,$mrb,$key) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $key$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = ((($key)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(16);
 if ($4) {
  $5 = HEAP32[$key>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 >>> 11;
  $8 = $7 & 4;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = $0;
   ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
   _mrb_str_dup($1,$10,$key$byval_copy);
   ;HEAP32[$key>>2]=HEAP32[$1>>2]|0;HEAP32[$key+4>>2]=HEAP32[$1+4>>2]|0;
   $11 = HEAP32[$key>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 >>> 11;
   $14 = $13 | 4;
   $15 = HEAP32[$11>>2]|0;
   $16 = $14 & 2097151;
   $17 = $16 << 11;
   $18 = $15 & 2047;
   $19 = $18 | $17;
   HEAP32[$11>>2] = $19;
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$key>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$key+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_delete_key($agg$result,$mrb,$hash,$key) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $delVal = 0, $h = 0, $k = 0, $key$byval_copy = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 32|0;
 $delVal = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$hash>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $h = $3;
 $4 = $h;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = $h;
  ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
  $8 = (_kh_get_ht($6,$7,$key$byval_copy)|0);
  $k = $8;
  $9 = $k;
  $10 = $h;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)!=($11|0);
  if ($12) {
   $13 = $k;
   $14 = $h;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + (($13*12)|0)|0);
   ;HEAP32[$delVal>>2]=HEAP32[$17>>2]|0;HEAP32[$delVal+4>>2]=HEAP32[$17+4>>2]|0;
   $18 = $k;
   $19 = $h;
   $20 = ((($19)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + (($18*12)|0)|0);
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $n = $24;
   $25 = $0;
   $26 = $h;
   $27 = $k;
   _kh_del_ht($25,$26,$27);
   $k = 0;
   while(1) {
    $28 = $k;
    $29 = $h;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)!=($30|0);
    if (!($31)) {
     break;
    }
    $32 = $k;
    $33 = (($32>>>0) / 4)&-1;
    $34 = $h;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($33)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = $k;
    $41 = (($40>>>0) % 4)&-1;
    $42 = (54712 + ($41)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $39 & $44;
    $46 = ($45|0)!=(0);
    if (!($46)) {
     $47 = $k;
     $48 = $h;
     $49 = ((($48)) + 20|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + (($47*12)|0)|0);
     $52 = ((($51)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $n;
     $55 = ($53|0)>($54|0);
     if ($55) {
      $56 = $k;
      $57 = $h;
      $58 = ((($57)) + 20|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + (($56*12)|0)|0);
      $61 = ((($60)) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (($62) + -1)|0;
      HEAP32[$61>>2] = $63;
     }
    }
    $64 = $k;
    $65 = (($64) + 1)|0;
    $k = $65;
   }
   ;HEAP32[$agg$result>>2]=HEAP32[$delVal>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$delVal+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_91($agg$result);
 STACKTOP = sp;return;
}
function _mrb_nil_value_91($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_clear($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$hash>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $h = $3;
 $4 = $h;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = $h;
  _kh_clear_ht($6,$7);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$hash>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$hash+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_empty_p($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $h = $3;
 $4 = $h;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $h;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  $10 = $9&1;
  $11 = $10&255;
  _mrb_bool_value_92($agg$result,$11);
  STACKTOP = sp;return;
 } else {
  _mrb_true_value($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_bool_value_92($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_true_value($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_keys($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ary = 0, $ary$byval_copy = 0, $h = 0, $hv = 0, $k = 0, $kv = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $ary$byval_copy = sp + 72|0;
 $ary = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $kv = sp + 16|0;
 $hv = sp;
 $0 = $mrb;
 $3 = HEAP32[$hash>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $h = $5;
 $6 = $h;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $h;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $13 = $0;
   $14 = $h;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   _mrb_ary_new_capa($1,$13,$16);
   ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
   $17 = $0;
   $18 = $h;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - 1)|0;
   _mrb_nil_value_91($2);
   ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   _mrb_ary_set($17,$ary$byval_copy,$21,$$byval_copy);
   $22 = HEAP32[$ary>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $p = $24;
   $k = 0;
   while(1) {
    $25 = $k;
    $26 = $h;
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)!=($27|0);
    if (!($28)) {
     break;
    }
    $29 = $k;
    $30 = (($29>>>0) / 4)&-1;
    $31 = $h;
    $32 = ((($31)) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($30)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = $k;
    $38 = (($37>>>0) % 4)&-1;
    $39 = (54712 + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $36 & $41;
    $43 = ($42|0)!=(0);
    if (!($43)) {
     $44 = $k;
     $45 = $h;
     $46 = ((($45)) + 16|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + ($44<<3)|0);
     ;HEAP32[$kv>>2]=HEAP32[$48>>2]|0;HEAP32[$kv+4>>2]=HEAP32[$48+4>>2]|0;
     $49 = $k;
     $50 = $h;
     $51 = ((($50)) + 20|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + (($49*12)|0)|0);
     ;HEAP32[$hv>>2]=HEAP32[$53>>2]|0;HEAP32[$hv+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$hv+8>>2]=HEAP32[$53+8>>2]|0;
     $54 = ((($hv)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $p;
     $57 = (($56) + ($55<<3)|0);
     ;HEAP32[$57>>2]=HEAP32[$kv>>2]|0;HEAP32[$57+4>>2]=HEAP32[$kv+4>>2]|0;
    }
    $58 = $k;
    $59 = (($58) + 1)|0;
    $k = $59;
   }
   ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $12 = $0;
 _mrb_ary_new($agg$result,$12);
 STACKTOP = sp;return;
}
function _mrb_init_hash($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,64917,$4)|0);
 $h = $5;
 $6 = $0;
 $7 = ((($6)) + 56|0);
 HEAP32[$7>>2] = $5;
 $8 = $h;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & -256;
 $12 = $11 | 15;
 $13 = $h;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12 & 2097151;
 $16 = $15 << 11;
 $17 = $14 & 2047;
 $18 = $17 | $16;
 HEAP32[$13>>2] = $18;
 $19 = $0;
 $20 = $h;
 _mrb_define_method($19,$20,68841,17,262144);
 $21 = $0;
 $22 = $h;
 _mrb_define_method($21,$22,64349,18,524288);
 $23 = $0;
 $24 = $h;
 _mrb_define_method($23,$24,64358,19,0);
 $25 = $0;
 $26 = $h;
 _mrb_define_method($25,$26,54726,20,4096);
 $27 = $0;
 $28 = $h;
 _mrb_define_method($27,$28,54738,21,262144);
 $29 = $0;
 $30 = $h;
 _mrb_define_method($29,$30,54747,22,0);
 $31 = $0;
 $32 = $h;
 _mrb_define_method($31,$32,54760,23,262144);
 $33 = $0;
 $34 = $h;
 _mrb_define_method($33,$34,54774,24,262144);
 $35 = $0;
 $36 = $h;
 _mrb_define_method($35,$36,64381,25,0);
 $37 = $0;
 $38 = $h;
 _mrb_define_method($37,$38,54783,26,262144);
 $39 = $0;
 $40 = $h;
 _mrb_define_method($39,$40,54792,27,262144);
 $41 = $0;
 $42 = $h;
 _mrb_define_method($41,$42,68944,26,262144);
 $43 = $0;
 $44 = $h;
 _mrb_define_method($43,$44,68953,28,8192);
 $45 = $0;
 $46 = $h;
 _mrb_define_method($45,$46,54808,26,262144);
 $47 = $0;
 $48 = $h;
 _mrb_define_method($47,$48,54813,29,0);
 $49 = $0;
 $50 = $h;
 _mrb_define_method($49,$50,64428,30,0);
 $51 = $0;
 $52 = $h;
 _mrb_define_method($51,$52,68969,26,262144);
 $53 = $0;
 $54 = $h;
 _mrb_define_method($53,$54,64476,31,0);
 $55 = $0;
 $56 = $h;
 _mrb_define_method($55,$56,68096,32,0);
 $57 = $0;
 $58 = $h;
 _mrb_define_method($57,$58,64482,30,0);
 $59 = $0;
 $60 = $h;
 _mrb_define_method($59,$60,54818,18,524288);
 $61 = $0;
 $62 = $h;
 _mrb_define_method($61,$62,54824,27,262144);
 $63 = $0;
 $64 = $h;
 _mrb_define_method($63,$64,54831,33,0);
 $65 = $0;
 $66 = $h;
 _mrb_define_method($65,$66,64922,34,0);
 STACKTOP = sp;return;
}
function _mrb_hash_aget($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $key = 0, $key$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $key = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $key;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 _mrb_hash_get($agg$result,$2,$self$byval_copy,$key$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_hash_aset($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $key = 0, $key$byval_copy = 0, $self$byval_copy = 0, $val = 0, $val$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 48|0;
 $key$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $key = sp + 16|0;
 $val = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $key;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $val;
 (_mrb_get_args($1,54723,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_hash_set($2,$self$byval_copy,$key$byval_copy,$val$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_default($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $given = 0, $hash$byval_copy = 0;
 var $hash$byval_copy6 = 0, $key = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash$byval_copy6 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $hash$byval_copy = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $key = sp + 32|0;
 $given = sp + 72|0;
 $1 = sp + 24|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $key;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $given;
 (_mrb_get_args($2,54734,$vararg_buffer)|0);
 $3 = HEAP32[$hash>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 256;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $14 = $0;
  $15 = $0;
  $16 = (_mrb_intern_static($15,54716,6)|0);
  ;HEAP32[$hash$byval_copy6>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy6+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($agg$result,$14,$hash$byval_copy6,$16);
  STACKTOP = sp;return;
 }
 $8 = HEAP8[$given>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  $10 = $0;
  $11 = $0;
  $12 = $0;
  $13 = (_mrb_intern_static($12,54716,6)|0);
  ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($1,$11,$hash$byval_copy,$13);
  ;HEAP8[$vararg_buffer2>>0]=HEAP8[$hash>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$hash+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$hash+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$hash+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$hash+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$hash+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$hash+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$hash+7>>0]|0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  ;HEAP8[$vararg_ptr5>>0]=HEAP8[$key>>0]|0;HEAP8[$vararg_ptr5+1>>0]=HEAP8[$key+1>>0]|0;HEAP8[$vararg_ptr5+2>>0]=HEAP8[$key+2>>0]|0;HEAP8[$vararg_ptr5+3>>0]=HEAP8[$key+3>>0]|0;HEAP8[$vararg_ptr5+4>>0]=HEAP8[$key+4>>0]|0;HEAP8[$vararg_ptr5+5>>0]=HEAP8[$key+5>>0]|0;HEAP8[$vararg_ptr5+6>>0]=HEAP8[$key+6>>0]|0;HEAP8[$vararg_ptr5+7>>0]=HEAP8[$key+7>>0]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_funcall($agg$result,$10,$$byval_copy,69512,2,$vararg_buffer2);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_91($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_hash_set_default($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash$byval_copy = 0, $hash$byval_copy1 = 0, $ifnone = 0, $ifnone$byval_copy = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ifnone$byval_copy = sp + 40|0;
 $hash$byval_copy1 = sp + 32|0;
 $hash$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $ifnone = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ifnone;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 _mrb_hash_modify($2,$hash$byval_copy);
 $3 = $0;
 $4 = $0;
 $5 = (_mrb_intern_static($4,54716,6)|0);
 ;HEAP32[$hash$byval_copy1>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy1+4>>2]=HEAP32[$hash+4>>2]|0;
 ;HEAP32[$ifnone$byval_copy>>2]=HEAP32[$ifnone>>2]|0;HEAP32[$ifnone$byval_copy+4>>2]=HEAP32[$ifnone+4>>2]|0;
 _mrb_iv_set($3,$hash$byval_copy1,$5,$ifnone$byval_copy);
 $6 = HEAP32[$hash>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & -257;
 $10 = HEAP32[$6>>2]|0;
 $11 = $9 & 2097151;
 $12 = $11 << 11;
 $13 = $10 & 2047;
 $14 = $13 | $12;
 HEAP32[$6>>2] = $14;
 ;HEAP32[$agg$result>>2]=HEAP32[$ifnone>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ifnone+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_default_proc($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $hash$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$hash>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 256;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = $0;
  $8 = (_mrb_intern_static($7,54716,6)|0);
  ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($agg$result,$6,$hash$byval_copy,$8);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_91($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_hash_set_default_proc($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash$byval_copy = 0, $hash$byval_copy1 = 0, $ifnone = 0, $ifnone$byval_copy = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ifnone$byval_copy = sp + 40|0;
 $hash$byval_copy1 = sp + 32|0;
 $hash$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $ifnone = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ifnone;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 _mrb_hash_modify($2,$hash$byval_copy);
 $3 = $0;
 $4 = $0;
 $5 = (_mrb_intern_static($4,54716,6)|0);
 ;HEAP32[$hash$byval_copy1>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy1+4>>2]=HEAP32[$hash+4>>2]|0;
 ;HEAP32[$ifnone$byval_copy>>2]=HEAP32[$ifnone>>2]|0;HEAP32[$ifnone$byval_copy+4>>2]=HEAP32[$ifnone+4>>2]|0;
 _mrb_iv_set($3,$hash$byval_copy1,$5,$ifnone$byval_copy);
 $6 = HEAP32[$hash>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 | 256;
 $10 = HEAP32[$6>>2]|0;
 $11 = $9 & 2097151;
 $12 = $11 << 11;
 $13 = $10 & 2047;
 $14 = $13 | $12;
 HEAP32[$6>>2] = $14;
 ;HEAP32[$agg$result>>2]=HEAP32[$ifnone>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ifnone+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_delete($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $key = 0, $key$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $key = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $key;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
 _mrb_hash_delete_key($agg$result,$2,$self$byval_copy,$key$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_hash_has_key($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, $key = 0, $key$byval_copy = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $key = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $key;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = $h;
  ;HEAP32[$key$byval_copy>>2]=HEAP32[$key>>2]|0;HEAP32[$key$byval_copy+4>>2]=HEAP32[$key+4>>2]|0;
  $9 = (_kh_get_ht($7,$8,$key$byval_copy)|0);
  $k = $9;
  $10 = $k;
  $11 = $h;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)!=($12|0);
  $14 = $13&1;
  $15 = $14&255;
  _mrb_bool_value_92($agg$result,$15);
  STACKTOP = sp;return;
 } else {
  _mrb_false_value($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_false_value($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_has_value($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, $val = 0;
 var $val$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $val = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $val;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 L1: do {
  if ($6) {
   $k = 0;
   while(1) {
    $7 = $k;
    $8 = $h;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)!=($9|0);
    if (!($10)) {
     break L1;
    }
    $11 = $k;
    $12 = (($11>>>0) / 4)&-1;
    $13 = $h;
    $14 = ((($13)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($12)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $k;
    $20 = (($19>>>0) % 4)&-1;
    $21 = (54712 + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = $18 & $23;
    $25 = ($24|0)!=(0);
    if (!($25)) {
     $26 = $0;
     $27 = $k;
     $28 = $h;
     $29 = ((($28)) + 20|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + (($27*12)|0)|0);
     ;HEAP32[$$byval_copy>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$31+4>>2]|0;
     ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
     $32 = (_mrb_equal($26,$$byval_copy,$val$byval_copy)|0);
     $33 = ($32<<24>>24)!=(0);
     if ($33) {
      break;
     }
    }
    $34 = $k;
    $35 = (($34) + 1)|0;
    $k = $35;
   }
   _mrb_true_value($agg$result);
   STACKTOP = sp;return;
  }
 } while(0);
 _mrb_false_value($agg$result);
 STACKTOP = sp;return;
}
function _mrb_hash_init($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $hash$byval_copy = 0, $hash$byval_copy3 = 0, $ifnone = 0, $ifnone$byval_copy = 0, $ifnone_p = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ifnone$byval_copy = sp + 64|0;
 $hash$byval_copy3 = sp + 56|0;
 $hash$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $block = sp + 32|0;
 $ifnone = sp + 24|0;
 $ifnone_p = sp + 72|0;
 $1 = sp + 16|0;
 $0 = $mrb;
 _mrb_nil_value_91($1);
 ;HEAP32[$ifnone>>2]=HEAP32[$1>>2]|0;HEAP32[$ifnone+4>>2]=HEAP32[$1+4>>2]|0;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $block;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $ifnone;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $ifnone_p;
 (_mrb_get_args($2,54803,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 _mrb_hash_modify($3,$hash$byval_copy);
 $4 = ((($block)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$block>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $9 = HEAP8[$ifnone_p>>0]|0;
   $10 = ($9<<24>>24)!=(0);
   if ($10) {
    $11 = $0;
    $12 = $0;
    $13 = (_mrb_class_get($12,68855)|0);
    _mrb_raise($11,$13,64829);
    // unreachable;
   } else {
    $14 = HEAP32[$hash>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 >>> 11;
    $17 = $16 | 256;
    $18 = HEAP32[$14>>2]|0;
    $19 = $17 & 2097151;
    $20 = $19 << 11;
    $21 = $18 & 2047;
    $22 = $21 | $20;
    HEAP32[$14>>2] = $22;
    ;HEAP32[$ifnone>>2]=HEAP32[$block>>2]|0;HEAP32[$ifnone+4>>2]=HEAP32[$block+4>>2]|0;
    break;
   }
  }
 } while(0);
 $23 = $0;
 $24 = $0;
 $25 = (_mrb_intern_static($24,54716,6)|0);
 ;HEAP32[$hash$byval_copy3>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy3+4>>2]=HEAP32[$hash+4>>2]|0;
 ;HEAP32[$ifnone$byval_copy>>2]=HEAP32[$ifnone>>2]|0;HEAP32[$ifnone$byval_copy+4>>2]=HEAP32[$ifnone+4>>2]|0;
 _mrb_iv_set($23,$hash$byval_copy3,$25,$ifnone$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$hash>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$hash+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_size_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $h = $3;
 $4 = $h;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $h;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _mrb_fixnum_value_115($agg$result,$8);
  STACKTOP = sp;return;
 } else {
  _mrb_fixnum_value_115($agg$result,0);
  STACKTOP = sp;return;
 }
}
function _mrb_fixnum_value_115($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_shift($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delKey = 0, $delKey$byval_copy = 0, $delKey$byval_copy3 = 0, $delKey$byval_copy4 = 0, $delVal = 0, $delVal$byval_copy = 0;
 var $delVal$byval_copy5 = 0, $h = 0, $hash$byval_copy = 0, $hash$byval_copy2 = 0, $hash$byval_copy6 = 0, $hash$byval_copy7 = 0, $k = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hash$byval_copy7 = sp + 144|0;
 $$byval_copy = sp + 136|0;
 $hash$byval_copy6 = sp + 128|0;
 $delVal$byval_copy5 = sp + 120|0;
 $delKey$byval_copy4 = sp + 112|0;
 $delVal$byval_copy = sp + 104|0;
 $delKey$byval_copy3 = sp + 96|0;
 $hash$byval_copy2 = sp + 88|0;
 $delKey$byval_copy = sp + 80|0;
 $hash$byval_copy = sp + 72|0;
 $vararg_buffer = sp;
 $delKey = sp + 48|0;
 $delVal = sp + 40|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $0 = $mrb;
 $4 = HEAP32[$hash>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $h = $6;
 $7 = $0;
 ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
 _mrb_hash_modify($7,$hash$byval_copy);
 $8 = $h;
 $9 = ($8|0)!=(0|0);
 L1: do {
  if ($9) {
   $10 = $h;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12>>>0)>(0);
   if ($13) {
    $k = 0;
    while(1) {
     $14 = $k;
     $15 = $h;
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)!=($16|0);
     if (!($17)) {
      break L1;
     }
     $18 = $k;
     $19 = (($18>>>0) / 4)&-1;
     $20 = $h;
     $21 = ((($20)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($19)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $k;
     $27 = (($26>>>0) % 4)&-1;
     $28 = (54712 + ($27)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = $25 & $30;
     $32 = ($31|0)!=(0);
     $33 = $k;
     if (!($32)) {
      break;
     }
     $42 = (($33) + 1)|0;
     $k = $42;
    }
    $34 = $h;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($33<<3)|0);
    ;HEAP32[$delKey>>2]=HEAP32[$37>>2]|0;HEAP32[$delKey+4>>2]=HEAP32[$37+4>>2]|0;
    $38 = $0;
    ;HEAP32[$delKey$byval_copy>>2]=HEAP32[$delKey>>2]|0;HEAP32[$delKey$byval_copy+4>>2]=HEAP32[$delKey+4>>2]|0;
    _mrb_gc_protect($38,$delKey$byval_copy);
    $39 = $0;
    ;HEAP32[$hash$byval_copy2>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy2+4>>2]=HEAP32[$hash+4>>2]|0;
    ;HEAP32[$delKey$byval_copy3>>2]=HEAP32[$delKey>>2]|0;HEAP32[$delKey$byval_copy3+4>>2]=HEAP32[$delKey+4>>2]|0;
    _mrb_hash_delete_key($1,$39,$hash$byval_copy2,$delKey$byval_copy3);
    ;HEAP32[$delVal>>2]=HEAP32[$1>>2]|0;HEAP32[$delVal+4>>2]=HEAP32[$1+4>>2]|0;
    $40 = $0;
    ;HEAP32[$delVal$byval_copy>>2]=HEAP32[$delVal>>2]|0;HEAP32[$delVal$byval_copy+4>>2]=HEAP32[$delVal+4>>2]|0;
    _mrb_gc_protect($40,$delVal$byval_copy);
    $41 = $0;
    ;HEAP32[$delKey$byval_copy4>>2]=HEAP32[$delKey>>2]|0;HEAP32[$delKey$byval_copy4+4>>2]=HEAP32[$delKey+4>>2]|0;
    ;HEAP32[$delVal$byval_copy5>>2]=HEAP32[$delVal>>2]|0;HEAP32[$delVal$byval_copy5+4>>2]=HEAP32[$delVal+4>>2]|0;
    _mrb_assoc_new($agg$result,$41,$delKey$byval_copy4,$delVal$byval_copy5);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $43 = HEAP32[$hash>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 11;
 $46 = $45 & 256;
 $47 = ($46|0)!=(0);
 $48 = $0;
 $49 = $0;
 if ($47) {
  $50 = $0;
  $51 = (_mrb_intern_static($50,54716,6)|0);
  ;HEAP32[$hash$byval_copy6>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy6+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($2,$49,$hash$byval_copy6,$51);
  _mrb_nil_value_91($3);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$hash>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$hash+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$hash+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$hash+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$hash+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$hash+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$hash+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$hash+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$3+7>>0]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  _mrb_funcall($agg$result,$48,$$byval_copy,69512,2,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $52 = (_mrb_intern_static($49,54716,6)|0);
  ;HEAP32[$hash$byval_copy7>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy7+4>>2]=HEAP32[$hash+4>>2]|0;
  _mrb_iv_get($agg$result,$48,$hash$byval_copy7,$52);
  STACKTOP = sp;return;
 }
}
function _mrb_hash_dup($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $h = 0, $k = 0, $ret = 0, $ret_h = 0, $ret_k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $1 = sp;
 $0 = $mrb;
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $0;
 $6 = $0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_mrb_obj_alloc($5,15,$8)|0);
 $ret = $9;
 $10 = $0;
 $11 = (_kh_init_ht($10)|0);
 $12 = $ret;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = $h;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)>(0);
 if (!($17)) {
  $65 = $ret;
  _mrb_obj_value_86($agg$result,$65);
  STACKTOP = sp;return;
 }
 $18 = $ret;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $ret_h = $20;
 $k = 0;
 while(1) {
  $21 = $k;
  $22 = $h;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21|0)!=($23|0);
  if (!($24)) {
   break;
  }
  $25 = $k;
  $26 = (($25>>>0) / 4)&-1;
  $27 = $h;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $k;
  $34 = (($33>>>0) % 4)&-1;
  $35 = (54712 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $32 & $37;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   $40 = $0;
   $41 = (_mrb_gc_arena_save($40)|0);
   $ai = $41;
   $42 = $0;
   $43 = $ret_h;
   $44 = $0;
   $45 = $k;
   $46 = $h;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$49>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$49+4>>2]|0;
   _mrb_hash_ht_key($1,$44,$$byval_copy);
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   $50 = (_kh_put_ht($42,$43,$$byval_copy1,0)|0);
   $ret_k = $50;
   $51 = $0;
   $52 = $ai;
   _mrb_gc_arena_restore($51,$52);
   $53 = $ret_k;
   $54 = $ret_h;
   $55 = ((($54)) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + (($53*12)|0)|0);
   $58 = $k;
   $59 = $h;
   $60 = ((($59)) + 20|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + (($58*12)|0)|0);
   ;HEAP32[$57>>2]=HEAP32[$62>>2]|0;HEAP32[$57+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$62+8>>2]|0;
  }
  $63 = $k;
  $64 = (($63) + 1)|0;
  $k = $64;
 }
 $65 = $ret;
 _mrb_obj_value_86($agg$result,$65);
 STACKTOP = sp;return;
}
function _mrb_hash_values($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ary = 0, $ary$byval_copy = 0, $h = 0, $hv = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $ary$byval_copy = sp + 48|0;
 $ary = sp + 24|0;
 $1 = sp + 16|0;
 $hv = sp;
 $0 = $mrb;
 $2 = HEAP32[$hash>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 $7 = $0;
 if (!($6)) {
  _mrb_ary_new($agg$result,$7);
  STACKTOP = sp;return;
 }
 $8 = $h;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _mrb_ary_new_capa($1,$7,$10);
 ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
 $k = 0;
 while(1) {
  $11 = $k;
  $12 = $h;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)!=($13|0);
  if (!($14)) {
   break;
  }
  $15 = $k;
  $16 = (($15>>>0) / 4)&-1;
  $17 = $h;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $k;
  $24 = (($23>>>0) % 4)&-1;
  $25 = (54712 + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $22 & $27;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $k;
   $31 = $h;
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + (($30*12)|0)|0);
   ;HEAP32[$hv>>2]=HEAP32[$34>>2]|0;HEAP32[$hv+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$hv+8>>2]=HEAP32[$34+8>>2]|0;
   $35 = $0;
   $36 = ((($hv)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$hv>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$hv+4>>2]|0;
   _mrb_ary_set($35,$ary$byval_copy,$37,$$byval_copy);
  }
  $38 = $k;
  $39 = (($38) + 1)|0;
  $k = $39;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_hash_to_hash($agg$result,$mrb,$hash) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $hash = $hash|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 ;HEAP32[$agg$result>>2]=HEAP32[$hash>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$hash+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_to_flo($mrb,$val) {
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($val)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 3:  {
  $4 = HEAP32[$val>>2]|0;
  $5 = (+($4|0));
  $0 = $5;
  $10 = $0;
  STACKTOP = sp;return (+$10);
  break;
 }
 case 6:  {
  $9 = +HEAPF32[$val>>2];
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return (+$10);
  break;
 }
 default: {
  $6 = $1;
  $7 = $1;
  $8 = (_mrb_class_get($7,68905)|0);
  _mrb_raise($6,$8,54838);
  // unreachable;
 }
 }
 return +(0.0);
}
function _mrb_float_value($agg$result,$mrb,$f) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $f;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = 6;
 $3 = $1;
 HEAPF32[$v>>2] = $3;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_fixnum_mul($agg$result,$mrb,$x,$y) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 $y = $y|0;
 var $$old6 = 0, $$old8 = 0.0, $$old9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0.0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $y$byval_copy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = HEAP32[$x>>2]|0;
 $a = $1;
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if (!($4)) {
  $41 = $0;
  $42 = $a;
  $43 = (+($42|0));
  $44 = $0;
  ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
  $45 = (+_mrb_to_flo($44,$y$byval_copy));
  $46 = $43 * $45;
  _mrb_float_value($agg$result,$41,$46);
  STACKTOP = sp;return;
 }
 $5 = $a;
 $6 = ($5|0)==(0);
 if ($6) {
  ;HEAP32[$agg$result>>2]=HEAP32[$x>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$x+4>>2]|0;
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$y>>2]|0;
 $b = $7;
 $8 = $a;
 $9 = ($8|0)<(32768);
 $10 = $a;
 $11 = ($10|0)>=(-32768);
 $or$cond = $9 & $11;
 $12 = $b;
 $13 = ($12|0)<(32768);
 $or$cond3 = $or$cond & $13;
 $14 = $b;
 $15 = ($14|0)>=(-32768);
 $or$cond5 = $or$cond3 & $15;
 $16 = $a;
 $17 = $b;
 $18 = Math_imul($16, $17)|0;
 if ($or$cond5) {
  _mrb_fixnum_value_125($agg$result,$18);
  STACKTOP = sp;return;
 }
 $19 = (+($18|0));
 $c = $19;
 $20 = $a;
 $21 = ($20|0)!=(0);
 $22 = $c;
 if ($21) {
  $23 = $a;
  $24 = (+($23|0));
  $25 = $22 / $24;
  $26 = $b;
  $27 = (+($26|0));
  $28 = $25 == $27;
  $29 = $c;
  $30 = $29 <= 2147483648.0;
  $or$cond7 = $28 & $30;
  $31 = $c;
  $32 = $31 >= -2147483648.0;
  $or$cond10 = $or$cond7 & $32;
  if ($or$cond10) {
   label = 10;
  } else {
   label = 9;
  }
 } else {
  $$old6 = $22 <= 2147483648.0;
  $$old8 = $c;
  $$old9 = $$old8 >= -2147483648.0;
  $or$cond12 = $$old6 & $$old9;
  if ($or$cond12) {
   label = 10;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $33 = $0;
  $34 = $a;
  $35 = (+($34|0));
  $36 = $b;
  $37 = (+($36|0));
  $38 = $35 * $37;
  _mrb_float_value($agg$result,$33,$38);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $39 = $c;
  $40 = (~~(($39)));
  _mrb_fixnum_value_125($agg$result,$40);
  STACKTOP = sp;return;
 }
}
function _mrb_fixnum_value_125($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_flo_to_fixnum($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $d = 0.0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = ((($x)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(6);
 if (!($3)) {
  $4 = $0;
  $5 = $0;
  $6 = (_mrb_class_get($5,68905)|0);
  _mrb_raise($4,$6,54838);
  // unreachable;
 }
 $7 = +HEAPF32[$x>>2];
 $d = $7;
 $8 = $d;
 $9 = (___FLOAT_BITS_126($8)|0);
 $10 = $9 & 2147483647;
 $11 = ($10|0)==(2139095040);
 if ($11) {
  $12 = $0;
  $13 = $0;
  $14 = (_mrb_class_get($13,54854)|0);
  $15 = $d;
  $16 = $15 < 0.0;
  $17 = $16 ? 54871 : 54881;
  _mrb_raise($12,$14,$17);
  // unreachable;
 }
 $18 = $d;
 $19 = (___FLOAT_BITS_126($18)|0);
 $20 = $19 & 2147483647;
 $21 = ($20>>>0)>(2139095040);
 if ($21) {
  $22 = $0;
  $23 = $0;
  $24 = (_mrb_class_get($23,54854)|0);
  _mrb_raise($22,$24,54890);
  // unreachable;
 } else {
  $25 = $d;
  $26 = (~~(($25)));
  $z = $26;
  $27 = $z;
  _mrb_fixnum_value_125($agg$result,$27);
  STACKTOP = sp;return;
 }
}
function ___FLOAT_BITS_126($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS_127($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = ($7);
 STACKTOP = sp;return ($4|0);
}
function _mrb_fixnum_plus($agg$result,$mrb,$x,$y) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 16|0;
 $c = sp;
 $0 = $mrb;
 $1 = HEAP32[$x>>2]|0;
 $a = $1;
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if (!($4)) {
  $19 = $0;
  $20 = $a;
  $21 = (+($20|0));
  $22 = $0;
  ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
  $23 = (+_mrb_to_flo($22,$y$byval_copy));
  $24 = $21 + $23;
  _mrb_float_value($agg$result,$19,$24);
  STACKTOP = sp;return;
 }
 $5 = $a;
 $6 = ($5|0)==(0);
 if ($6) {
  ;HEAP32[$agg$result>>2]=HEAP32[$y>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$y+4>>2]|0;
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$y>>2]|0;
 $b = $7;
 $8 = $a;
 $9 = $b;
 $10 = (_mrb_int_add_overflow($8,$9,$c)|0);
 $11 = ($10<<24>>24)!=(0);
 if ($11) {
  $12 = $0;
  $13 = $a;
  $14 = (+($13|0));
  $15 = $b;
  $16 = (+($15|0));
  $17 = $14 + $16;
  _mrb_float_value($agg$result,$12,$17);
  STACKTOP = sp;return;
 } else {
  $18 = HEAP32[$c>>2]|0;
  _mrb_fixnum_value_125($agg$result,$18);
  STACKTOP = sp;return;
 }
}
function _mrb_int_add_overflow($augend,$addend,$sum) {
 $augend = $augend|0;
 $addend = $addend|0;
 $sum = $sum|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $of = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $augend;
 $1 = $addend;
 $2 = $sum;
 $3 = $0;
 $4 = $1;
 $$arith = (($3) + ($4))|0;
 $$postemp = (($3) + -2147483648)|0;
 $$negtemp = (($3) + 2147483647)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($3|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $val = $$arith;
 $5 = $val;
 $6 = ($5|0)>(2147483647);
 $or$cond = $$select | $6;
 if ($or$cond) {
  $10 = 1;
 } else {
  $7 = $val;
  $8 = ($7|0)<(-2147483648);
  $10 = $8;
 }
 $9 = $10&1;
 $11 = $9&255;
 $of = $11;
 $12 = $val;
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $of;
 STACKTOP = sp;return ($14|0);
}
function _mrb_fixnum_minus($agg$result,$mrb,$x,$y) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 16|0;
 $c = sp;
 $0 = $mrb;
 $1 = HEAP32[$x>>2]|0;
 $a = $1;
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if (!($4)) {
  $17 = $0;
  $18 = $a;
  $19 = (+($18|0));
  $20 = $0;
  ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
  $21 = (+_mrb_to_flo($20,$y$byval_copy));
  $22 = $19 - $21;
  _mrb_float_value($agg$result,$17,$22);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$y>>2]|0;
 $b = $5;
 $6 = $a;
 $7 = $b;
 $8 = (_mrb_int_sub_overflow($6,$7,$c)|0);
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  $10 = $0;
  $11 = $a;
  $12 = (+($11|0));
  $13 = $b;
  $14 = (+($13|0));
  $15 = $12 - $14;
  _mrb_float_value($agg$result,$10,$15);
  STACKTOP = sp;return;
 } else {
  $16 = HEAP32[$c>>2]|0;
  _mrb_fixnum_value_125($agg$result,$16);
  STACKTOP = sp;return;
 }
}
function _mrb_int_sub_overflow($minuend,$subtrahend,$difference) {
 $minuend = $minuend|0;
 $subtrahend = $subtrahend|0;
 $difference = $difference|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $of = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $minuend;
 $1 = $subtrahend;
 $2 = $difference;
 $3 = $0;
 $4 = $1;
 $$arith = (($3) - ($4))|0;
 $$postemp = (($3) + -2147483647)|0;
 $$negtemp = (($3) + -2147483648)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($3|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $val = $$arith;
 $5 = $val;
 $6 = ($5|0)>(2147483647);
 $or$cond = $$select | $6;
 if ($or$cond) {
  $10 = 1;
 } else {
  $7 = $val;
  $8 = ($7|0)<(-2147483648);
  $10 = $8;
 }
 $9 = $10&1;
 $11 = $9&255;
 $of = $11;
 $12 = $val;
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $of;
 STACKTOP = sp;return ($14|0);
}
function _mrb_fixnum_to_str($agg$result,$mrb,$x,$base) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0, $or$cond = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $base;
 $3 = ((($buf)) + 33|0);
 $b = $3;
 $4 = HEAP32[$x>>2]|0;
 $val = $4;
 $5 = $1;
 $6 = ($5|0)<(2);
 $7 = $1;
 $8 = (36)<($7|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $9 = $0;
  $10 = $0;
  $11 = (_mrb_class_get($10,68855)|0);
  $12 = $1;
  _mrb_fixnum_value_125($2,$12);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_raisef($9,$11,54894,$vararg_buffer);
  // unreachable;
 }
 $13 = $val;
 $14 = ($13|0)==(0);
 L4: do {
  if ($14) {
   $15 = $b;
   $16 = ((($15)) + -1|0);
   $b = $16;
   HEAP8[$16>>0] = 48;
  } else {
   $17 = $val;
   $18 = ($17|0)<(0);
   if (!($18)) {
    while(1) {
     $33 = $val;
     $34 = $1;
     $35 = (($33|0) % ($34|0))&-1;
     $36 = (55345 + ($35)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $b;
     $39 = ((($38)) + -1|0);
     $b = $39;
     HEAP8[$39>>0] = $37;
     $40 = $1;
     $41 = $val;
     $42 = (($41|0) / ($40|0))&-1;
     $val = $42;
     $43 = ($42|0)!=(0);
     if (!($43)) {
      break L4;
     }
    }
   }
   while(1) {
    $19 = $val;
    $20 = $1;
    $21 = (($19|0) % ($20|0))&-1;
    $22 = (0 - ($21))|0;
    $23 = (55345 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $b;
    $26 = ((($25)) + -1|0);
    $b = $26;
    HEAP8[$26>>0] = $24;
    $27 = $1;
    $28 = $val;
    $29 = (($28|0) / ($27|0))&-1;
    $val = $29;
    $30 = ($29|0)!=(0);
    if (!($30)) {
     break;
    }
   }
   $31 = $b;
   $32 = ((($31)) + -1|0);
   $b = $32;
   HEAP8[$32>>0] = 45;
  }
 } while(0);
 $44 = $0;
 $45 = $b;
 $46 = ((($buf)) + 33|0);
 $47 = $b;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 _mrb_str_new($agg$result,$44,$45,$50);
 STACKTOP = sp;return;
}
function _mrb_init_numeric($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fixnum = 0, $fl = 0, $integer = 0;
 var $numeric = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_mrb_define_class($3,54911,$6)|0);
 $numeric = $7;
 $8 = $0;
 $9 = $numeric;
 _mrb_define_method($8,$9,57087,35,262144);
 $10 = $0;
 $11 = $numeric;
 _mrb_define_method($10,$11,59628,36,262144);
 $12 = $0;
 $13 = $numeric;
 _mrb_define_method($12,$13,54921,36,262144);
 $14 = $0;
 $15 = $numeric;
 _mrb_define_method($14,$15,68851,37,262144);
 $16 = $0;
 $17 = $numeric;
 $18 = (_mrb_define_class($16,55060,$17)|0);
 $integer = $18;
 $19 = $0;
 $20 = $integer;
 _mrb_undef_class_method($19,$20,67683);
 $21 = $0;
 $22 = $integer;
 _mrb_define_method($21,$22,56116,38,0);
 $23 = $0;
 $24 = $integer;
 _mrb_define_method($23,$24,55221,38,0);
 $25 = $0;
 $26 = $integer;
 $27 = (_mrb_define_class($25,55129,$26)|0);
 $fixnum = $27;
 $28 = $0;
 $29 = ((($28)) + 64|0);
 HEAP32[$29>>2] = $27;
 $30 = $0;
 $31 = $fixnum;
 _mrb_define_method($30,$31,64315,39,262144);
 $32 = $0;
 $33 = $fixnum;
 _mrb_define_method($32,$33,69609,40,262144);
 $34 = $0;
 $35 = $fixnum;
 _mrb_define_method($34,$35,68114,41,262144);
 $36 = $0;
 $37 = $fixnum;
 _mrb_define_method($36,$37,59630,42,262144);
 $38 = $0;
 $39 = $fixnum;
 _mrb_define_method($38,$39,68902,43,262144);
 $40 = $0;
 $41 = $fixnum;
 _mrb_define_method($40,$41,59638,44,0);
 $42 = $0;
 $43 = $fixnum;
 _mrb_define_method($42,$43,68778,45,262144);
 $44 = $0;
 $45 = $fixnum;
 _mrb_define_method($44,$45,59632,46,262144);
 $46 = $0;
 $47 = $fixnum;
 _mrb_define_method($46,$47,59634,47,262144);
 $48 = $0;
 $49 = $fixnum;
 _mrb_define_method($48,$49,64339,48,262144);
 $50 = $0;
 $51 = $fixnum;
 _mrb_define_method($50,$51,57205,49,262144);
 $52 = $0;
 $53 = $fixnum;
 _mrb_define_method($52,$53,68994,50,262144);
 $54 = $0;
 $55 = $fixnum;
 _mrb_define_method($54,$55,68178,51,0);
 $56 = $0;
 $57 = $fixnum;
 _mrb_define_method($56,$57,56111,52,0);
 $58 = $0;
 $59 = $fixnum;
 _mrb_define_method($58,$59,68977,53,0);
 $60 = $0;
 $61 = $fixnum;
 _mrb_define_method($60,$61,68986,53,0);
 $62 = $0;
 $63 = $fixnum;
 _mrb_define_method($62,$63,54958,54,262144);
 $64 = $0;
 $65 = $numeric;
 $66 = (_mrb_define_class($64,55150,$65)|0);
 $fl = $66;
 $67 = $0;
 $68 = ((($67)) + 60|0);
 HEAP32[$68>>2] = $66;
 $69 = $0;
 $70 = $fl;
 _mrb_undef_class_method($69,$70,67683);
 $71 = $0;
 $72 = $fl;
 _mrb_define_method($71,$72,64315,55,262144);
 $73 = $0;
 $74 = $fl;
 _mrb_define_method($73,$74,69609,56,262144);
 $75 = $0;
 $76 = $fl;
 _mrb_define_method($75,$76,68114,57,262144);
 $77 = $0;
 $78 = $fl;
 _mrb_define_method($77,$78,59630,58,262144);
 $79 = $0;
 $80 = $fl;
 _mrb_define_method($79,$80,68902,59,262144);
 $81 = $0;
 $82 = $fl;
 _mrb_define_method($81,$82,54965,60,0);
 $83 = $0;
 $84 = $fl;
 _mrb_define_method($83,$84,54970,61,0);
 $85 = $0;
 $86 = $fl;
 _mrb_define_method($85,$86,54978,62,0);
 $87 = $0;
 $88 = $fl;
 _mrb_define_method($87,$88,54984,63,0);
 $89 = $0;
 $90 = $fl;
 _mrb_define_method($89,$90,54994,64,8192);
 $91 = $0;
 $92 = $fl;
 _mrb_define_method($91,$92,56111,65,0);
 $93 = $0;
 $94 = $fl;
 _mrb_define_method($93,$94,56116,66,0);
 $95 = $0;
 $96 = $fl;
 _mrb_define_method($95,$96,55221,66,0);
 $97 = $0;
 $98 = $fl;
 _mrb_define_method($97,$98,55000,66,0);
 $99 = $0;
 $100 = $fl;
 _mrb_define_method($99,$100,54958,67,262144);
 $101 = $0;
 $102 = $fl;
 _mrb_define_method($101,$102,68994,68,262144);
 $103 = $0;
 $104 = $fl;
 _mrb_define_method($103,$104,68977,69,0);
 $105 = $0;
 $106 = $fl;
 _mrb_define_method($105,$106,68986,69,0);
 $107 = $0;
 $108 = $fl;
 _mrb_define_method($107,$108,55014,70,0);
 $109 = $0;
 $110 = $fl;
 $111 = $0;
 _mrb_float_value($1,$111,inf);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_define_const($109,$110,55019,$$byval_copy);
 $112 = $0;
 $113 = $fl;
 $114 = $0;
 _mrb_float_value($2,$114,nan);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_define_const($112,$113,72372,$$byval_copy1);
 STACKTOP = sp;return;
}
function _num_pow($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $x$byval_copy = 0;
 var $y = 0, $y$byval_copy = 0, $yv = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$byval_copy = sp + 40|0;
 $y$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $y = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $3 = (+_mrb_to_flo($2,$y$byval_copy));
 $yv = $3;
 $4 = $0;
 ;HEAP32[$x$byval_copy>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;
 $5 = (+_mrb_to_flo($4,$x$byval_copy));
 $6 = $5;
 $7 = $yv;
 $8 = $7;
 $9 = (+Math_pow((+$6),(+$8)));
 $10 = $9;
 $d = $10;
 $11 = ((($x)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(3);
 do {
  if ($13) {
   $14 = ((($y)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(3);
   $17 = $d;
   $18 = $17 <= 2147483648.0;
   $or$cond = $16 & $18;
   $19 = $d;
   $20 = $19 >= -2147483648.0;
   $or$cond3 = $or$cond & $20;
   $21 = $yv;
   $22 = $21 > 0.0;
   $or$cond5 = $or$cond3 & $22;
   if ($or$cond5) {
    $23 = $d;
    $24 = $23 < 0.0;
    if (!($24)) {
     $25 = $d;
     $26 = $25 > 0.0;
     if (!($26)) {
      break;
     }
     $27 = $d;
     $28 = (~~(($27)));
     $29 = ($28|0)>(0);
     if (!($29)) {
      break;
     }
    }
    $30 = $d;
    $31 = (~~(($30)));
    _mrb_fixnum_value_125($agg$result,$31);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = $0;
 $33 = $d;
 _mrb_float_value($agg$result,$32,$33);
 STACKTOP = sp;return;
}
function _num_div($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $vararg_buffer = 0, $x$byval_copy = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $y = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,54919,$vararg_buffer)|0);
 $2 = $0;
 $3 = $0;
 ;HEAP32[$x$byval_copy>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;
 $4 = (+_mrb_to_flo($3,$x$byval_copy));
 $5 = +HEAPF32[$y>>2];
 $6 = $4 / $5;
 _mrb_float_value($agg$result,$2,$6);
 STACKTOP = sp;return;
}
function _num_cmp($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $other = 0, $self$byval_copy = 0, $vararg_buffer = 0, $x = 0.0, $y = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $other = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $other;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $3 = (+_mrb_to_flo($2,$self$byval_copy));
 $x = $3;
 $4 = ((($other)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 3:  {
  $6 = HEAP32[$other>>2]|0;
  $7 = (+($6|0));
  $y = $7;
  break;
 }
 case 6:  {
  $8 = +HEAPF32[$other>>2];
  $y = $8;
  break;
 }
 default: {
  _mrb_nil_value_141($agg$result);
  STACKTOP = sp;return;
 }
 }
 $9 = $x;
 $10 = $y;
 $11 = $9 > $10;
 if ($11) {
  _mrb_fixnum_value_125($agg$result,1);
  STACKTOP = sp;return;
 }
 $12 = $x;
 $13 = $y;
 $14 = $12 < $13;
 if ($14) {
  _mrb_fixnum_value_125($agg$result,-1);
  STACKTOP = sp;return;
 } else {
  _mrb_fixnum_value_125($agg$result,0);
  STACKTOP = sp;return;
 }
}
function _mrb_nil_value_141($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _int_to_i($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 ;HEAP32[$agg$result>>2]=HEAP32[$num>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$num+4>>2]|0;
 STACKTOP = sp;return;
}
function _fix_plus($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $other = 0, $other$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $other$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $other = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $other;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$other$byval_copy>>2]=HEAP32[$other>>2]|0;HEAP32[$other$byval_copy+4>>2]=HEAP32[$other+4>>2]|0;
 _mrb_fixnum_plus($agg$result,$2,$self$byval_copy,$other$byval_copy);
 STACKTOP = sp;return;
}
function _fix_minus($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $other = 0, $other$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $other$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $other = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $other;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$other$byval_copy>>2]=HEAP32[$other>>2]|0;HEAP32[$other$byval_copy+4>>2]=HEAP32[$other+4>>2]|0;
 _mrb_fixnum_minus($agg$result,$2,$self$byval_copy,$other$byval_copy);
 STACKTOP = sp;return;
}
function _fix_mul($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $x$byval_copy = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 32|0;
 $x$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$x$byval_copy>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 _mrb_fixnum_mul($agg$result,$2,$x$byval_copy,$y$byval_copy);
 STACKTOP = sp;return;
}
function _fix_mod($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $mod = 0, $mod1 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $y = sp + 24|0;
 $mod = sp + 8|0;
 $mod1 = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = HEAP32[$x>>2]|0;
 $a = $2;
 $3 = ((($y)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(3);
 if (!($5)) {
  $12 = $0;
  $13 = $a;
  $14 = (+($13|0));
  $15 = $0;
  ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
  $16 = (+_mrb_to_flo($15,$y$byval_copy));
  _flodivmod($12,$14,$16,0,$mod1);
  $17 = $0;
  $18 = +HEAPF32[$mod1>>2];
  _mrb_float_value($agg$result,$17,$18);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$y>>2]|0;
 $b = $6;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _mrb_float_value($agg$result,$8,nan);
  STACKTOP = sp;return;
 } else {
  $9 = $a;
  $10 = $b;
  _fixdivmod($8,$9,$10,0,$mod);
  $11 = HEAP32[$mod>>2]|0;
  _mrb_fixnum_value_125($agg$result,$11);
  STACKTOP = sp;return;
 }
}
function _fixdivmod($mrb,$x,$y,$divp,$modp) {
 $mrb = $mrb|0;
 $x = $x|0;
 $y = $y|0;
 $divp = $divp|0;
 $modp = $modp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $x;
 $2 = $y;
 $3 = $divp;
 $4 = $modp;
 $5 = $2;
 $6 = ($5|0)<(0);
 $7 = $1;
 $8 = ($7|0)<(0);
 $9 = $1;
 do {
  if ($6) {
   if ($8) {
    $10 = (0 - ($9))|0;
    $11 = $2;
    $12 = (0 - ($11))|0;
    $13 = (($10|0) / ($12|0))&-1;
    $div = $13;
    break;
   } else {
    $14 = $2;
    $15 = (0 - ($14))|0;
    $16 = (($9|0) / ($15|0))&-1;
    $17 = (0 - ($16))|0;
    $div = $17;
    break;
   }
  } else {
   if ($8) {
    $18 = (0 - ($9))|0;
    $19 = $2;
    $20 = (($18|0) / ($19|0))&-1;
    $21 = (0 - ($20))|0;
    $div = $21;
    break;
   } else {
    $22 = $2;
    $23 = (($9|0) / ($22|0))&-1;
    $div = $23;
    break;
   }
  }
 } while(0);
 $24 = $1;
 $25 = $div;
 $26 = $2;
 $27 = Math_imul($25, $26)|0;
 $28 = (($24) - ($27))|0;
 $mod = $28;
 $29 = $mod;
 $30 = ($29|0)<(0);
 $31 = $2;
 $32 = ($31|0)>(0);
 $or$cond = $30 & $32;
 if ($or$cond) {
  label = 10;
 } else {
  $33 = $mod;
  $34 = ($33|0)>(0);
  $35 = $2;
  $36 = ($35|0)<(0);
  $or$cond3 = $34 & $36;
  if ($or$cond3) {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $37 = $2;
  $38 = $mod;
  $39 = (($38) + ($37))|0;
  $mod = $39;
  $40 = $div;
  $41 = (($40) - 1)|0;
  $div = $41;
 }
 $42 = $3;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $div;
  $45 = $3;
  HEAP32[$45>>2] = $44;
 }
 $46 = $4;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = $mod;
 $49 = $4;
 HEAP32[$49>>2] = $48;
 STACKTOP = sp;return;
}
function _flodivmod($mrb,$x,$y,$divp,$modp) {
 $mrb = $mrb|0;
 $x = +$x;
 $y = +$y;
 $divp = $divp|0;
 $modp = $modp|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $div = 0.0, $mod = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $x;
 $2 = $y;
 $3 = $divp;
 $4 = $modp;
 $5 = $2;
 $6 = $5;
 $7 = $6 == 0.0;
 if ($7) {
  $div = inf;
  $mod = nan;
 } else {
  $8 = $1;
  $9 = $2;
  $10 = (+_fmodf($8,$9));
  $mod = $10;
  $11 = $1;
  $12 = (___FLOAT_BITS_126($11)|0);
  $13 = $12 & 2147483647;
  $14 = ($13|0)==(2139095040);
  if ($14) {
   $15 = $2;
   $16 = (___FLOAT_BITS_126($15)|0);
   $17 = $16 & 2147483647;
   $18 = ($17>>>0)<(2139095040);
   if ($18) {
    $19 = $1;
    $div = $19;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   $20 = $1;
   $21 = $mod;
   $22 = $20 - $21;
   $23 = $2;
   $24 = $22 / $23;
   $div = $24;
  }
  $25 = $2;
  $26 = $mod;
  $27 = $25 * $26;
  $28 = $27 < 0.0;
  if ($28) {
   $29 = $2;
   $30 = $mod;
   $31 = $30 + $29;
   $mod = $31;
   $32 = $div;
   $33 = $32;
   $34 = $33 - 1.0;
   $35 = $34;
   $div = $35;
  }
 }
 $36 = $4;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $mod;
  $39 = $4;
  HEAPF32[$39>>2] = $38;
 }
 $40 = $3;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $div;
 $43 = $3;
 HEAPF32[$43>>2] = $42;
 STACKTOP = sp;return;
}
function _fix_equal($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 3:  {
  $4 = HEAP32[$x>>2]|0;
  $5 = HEAP32[$y>>2]|0;
  $6 = ($4|0)==($5|0);
  $7 = $6&1;
  $8 = $7&255;
  _mrb_bool_value_152($agg$result,$8);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $9 = HEAP32[$x>>2]|0;
  $10 = (+($9|0));
  $11 = +HEAPF32[$y>>2];
  $12 = $10 == $11;
  $13 = $12&1;
  $14 = $13&255;
  _mrb_bool_value_152($agg$result,$14);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _mrb_false_value_153($agg$result);
  STACKTOP = sp;return;
 }
 }
}
function _mrb_bool_value_152($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_false_value_153($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _fix_rev($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$num>>2]|0;
 $val = $1;
 $2 = $val;
 $3 = $2 ^ -1;
 _mrb_fixnum_value_125($agg$result,$3);
 STACKTOP = sp;return;
}
function _fix_and($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $y = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 _bit_coerce($1,$3,$y$byval_copy);
 ;HEAP32[$y>>2]=HEAP32[$1>>2]|0;HEAP32[$y+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[$y>>2]|0;
 $6 = $4 & $5;
 _mrb_fixnum_value_125($agg$result,$6);
 STACKTOP = sp;return;
}
function _bit_coerce($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$byval_copy = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 while(1) {
  $2 = ((($x)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(3);
  $5 = $4 ^ 1;
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = ((($x)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(6);
  $9 = $0;
  if ($8) {
   label = 4;
   break;
  }
  ;HEAP32[$x$byval_copy>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;
  _mrb_to_int($1,$9,$x$byval_copy);
  ;HEAP32[$x>>2]=HEAP32[$1>>2]|0;HEAP32[$x+4>>2]=HEAP32[$1+4>>2]|0;
 }
 if ((label|0) == 4) {
  $10 = $0;
  $11 = (_mrb_class_get($10,68905)|0);
  _mrb_raise($9,$11,54925);
  // unreachable;
 }
 else if ((label|0) == 6) {
  ;HEAP32[$agg$result>>2]=HEAP32[$x>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$x+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _fix_or($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $y = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 _bit_coerce($1,$3,$y$byval_copy);
 ;HEAP32[$y>>2]=HEAP32[$1>>2]|0;HEAP32[$y+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[$y>>2]|0;
 $6 = $4 | $5;
 _mrb_fixnum_value_125($agg$result,$6);
 STACKTOP = sp;return;
}
function _fix_xor($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $y = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 _bit_coerce($1,$3,$y$byval_copy);
 ;HEAP32[$y>>2]=HEAP32[$1>>2]|0;HEAP32[$y+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[$y>>2]|0;
 $6 = $4 ^ $5;
 _mrb_fixnum_value_125($agg$result,$6);
 STACKTOP = sp;return;
}
function _fix_lshift($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 _fix_shift_get_width($1,$width);
 $2 = HEAP32[$width>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ;HEAP32[$agg$result>>2]=HEAP32[$x>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$x+4>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$x>>2]|0;
 $val = $4;
 $5 = HEAP32[$width>>2]|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = $val;
  $8 = HEAP32[$width>>2]|0;
  $9 = (0 - ($8))|0;
  _rshift($agg$result,$7,$9);
  STACKTOP = sp;return;
 } else {
  $10 = $0;
  $11 = $val;
  $12 = HEAP32[$width>>2]|0;
  _lshift($agg$result,$10,$11,$12);
  STACKTOP = sp;return;
 }
}
function _fix_shift_get_width($mrb,$width) {
 $mrb = $mrb|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $y = sp + 16|0;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $width;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($3,68900,$vararg_buffer)|0);
 $4 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 _bit_coerce($2,$4,$y$byval_copy);
 $5 = HEAP32[$2>>2]|0;
 $6 = $1;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _rshift($agg$result,$val,$width) {
 $agg$result = $agg$result|0;
 $val = $val|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $val;
 $1 = $width;
 $2 = $1;
 $3 = ($2|0)>=(31);
 $4 = $0;
 if (!($3)) {
  $6 = $1;
  $7 = $4 >> $6;
  _mrb_fixnum_value_125($agg$result,$7);
  STACKTOP = sp;return;
 }
 $5 = ($4|0)<(0);
 if ($5) {
  _mrb_fixnum_value_125($agg$result,-1);
  STACKTOP = sp;return;
 } else {
  _mrb_fixnum_value_125($agg$result,0);
  STACKTOP = sp;return;
 }
}
function _lshift($agg$result,$mrb,$val,$width) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $f = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $val;
 $2 = $width;
 $3 = $2;
 $4 = ($3|0)>(31);
 $5 = $1;
 if (!($4)) {
  $14 = $2;
  $15 = $5 << $14;
  _mrb_fixnum_value_125($agg$result,$15);
  STACKTOP = sp;return;
 }
 $6 = (+($5|0));
 $f = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $f;
  $11 = $10 * 2.0;
  $f = $11;
 }
 $12 = $0;
 $13 = $f;
 _mrb_float_value($agg$result,$12,$13);
 STACKTOP = sp;return;
}
function _fix_rshift($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 _fix_shift_get_width($1,$width);
 $2 = HEAP32[$width>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ;HEAP32[$agg$result>>2]=HEAP32[$x>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$x+4>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$x>>2]|0;
 $val = $4;
 $5 = HEAP32[$width>>2]|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = $0;
  $8 = $val;
  $9 = HEAP32[$width>>2]|0;
  $10 = (0 - ($9))|0;
  _lshift($agg$result,$7,$8,$10);
  STACKTOP = sp;return;
 } else {
  $11 = $val;
  $12 = HEAP32[$width>>2]|0;
  _rshift($agg$result,$11,$12);
  STACKTOP = sp;return;
 }
}
function _fix_eql($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = HEAP32[$x>>2]|0;
  $6 = HEAP32[$y>>2]|0;
  $7 = ($5|0)==($6|0);
  $8 = $7&1;
  $9 = $8&255;
  _mrb_bool_value_152($agg$result,$9);
  STACKTOP = sp;return;
 } else {
  _mrb_false_value_153($agg$result);
  STACKTOP = sp;return;
 }
}
function _flo_hash($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c = 0, $d = 0, $hash = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp + 12|0;
 $0 = $mrb;
 $1 = HEAP32[$num>>2]|0;
 $2 = (+($1|0));
 HEAPF32[$d>>2] = $2;
 $3 = +HEAPF32[$d>>2];
 $4 = $3 == 0.0;
 if ($4) {
  HEAPF32[$d>>2] = 0.0;
 }
 $c = $d;
 $hash = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(4);
  $7 = $hash;
  if (!($6)) {
   break;
  }
  $8 = ($7*971)|0;
  $9 = $i;
  $10 = $c;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $8 ^ $13;
  $hash = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = ($7|0)<(0);
 if (!($17)) {
  $20 = $hash;
  _mrb_fixnum_value_125($agg$result,$20);
  STACKTOP = sp;return;
 }
 $18 = $hash;
 $19 = (0 - ($18))|0;
 $hash = $19;
 $20 = $hash;
 _mrb_fixnum_value_125($agg$result,$20);
 STACKTOP = sp;return;
}
function _fix_to_f($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = HEAP32[$num>>2]|0;
 $3 = (+($2|0));
 _mrb_float_value($agg$result,$1,$3);
 STACKTOP = sp;return;
}
function _fix_to_s($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $base = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $base = sp + 4|0;
 $0 = $mrb;
 HEAP32[$base>>2] = 10;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $base;
 (_mrb_get_args($1,64388,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$base>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_fixnum_to_str($agg$result,$2,$self$byval_copy,$3);
 STACKTOP = sp;return;
}
function _fix_divmod($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a$byval_copy = 0, $b = 0;
 var $b$byval_copy = 0, $div = 0, $div1 = 0, $mod = 0, $mod2 = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy = sp + 152|0;
 $a$byval_copy = sp + 144|0;
 $y$byval_copy = sp + 136|0;
 $$byval_copy3 = sp + 128|0;
 $$byval_copy2 = sp + 120|0;
 $$byval_copy1 = sp + 112|0;
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $y = sp + 88|0;
 $div = sp + 84|0;
 $mod = sp + 80|0;
 $1 = sp + 72|0;
 $2 = sp + 64|0;
 $3 = sp + 56|0;
 $4 = sp + 48|0;
 $div1 = sp + 44|0;
 $mod2 = sp + 40|0;
 $a = sp + 32|0;
 $b = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $0 = $mrb;
 $7 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($7,68900,$vararg_buffer)|0);
 $8 = ((($y)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(3);
 if (!($10)) {
  $21 = $0;
  $22 = HEAP32[$x>>2]|0;
  $23 = (+($22|0));
  $24 = $0;
  ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
  $25 = (+_mrb_to_flo($24,$y$byval_copy));
  _flodivmod($21,$23,$25,$div1,$mod2);
  $26 = $0;
  $27 = +HEAPF32[$div1>>2];
  $28 = (~~(($27)));
  $29 = (+($28|0));
  _mrb_float_value($5,$26,$29);
  ;HEAP32[$a>>2]=HEAP32[$5>>2]|0;HEAP32[$a+4>>2]=HEAP32[$5+4>>2]|0;
  $30 = $0;
  $31 = +HEAPF32[$mod2>>2];
  _mrb_float_value($6,$30,$31);
  ;HEAP32[$b>>2]=HEAP32[$6>>2]|0;HEAP32[$b+4>>2]=HEAP32[$6+4>>2]|0;
  $32 = $0;
  ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
  ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
  _mrb_assoc_new($agg$result,$32,$a$byval_copy,$b$byval_copy);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$y>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $0;
 if ($12) {
  $14 = $0;
  _mrb_float_value($1,$14,inf);
  $15 = $0;
  _mrb_float_value($2,$15,nan);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
  _mrb_assoc_new($agg$result,$13,$$byval_copy,$$byval_copy1);
  STACKTOP = sp;return;
 } else {
  $16 = HEAP32[$x>>2]|0;
  $17 = HEAP32[$y>>2]|0;
  _fixdivmod($13,$16,$17,$div,$mod);
  $18 = $0;
  $19 = HEAP32[$div>>2]|0;
  _mrb_fixnum_value_125($3,$19);
  $20 = HEAP32[$mod>>2]|0;
  _mrb_fixnum_value_125($4,$20);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;
  _mrb_assoc_new($agg$result,$18,$$byval_copy2,$$byval_copy3);
  STACKTOP = sp;return;
 }
}
function _flo_plus($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 $3 = +HEAPF32[$x>>2];
 $4 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $5 = (+_mrb_to_flo($4,$y$byval_copy));
 $6 = $3 + $5;
 _mrb_float_value($agg$result,$2,$6);
 STACKTOP = sp;return;
}
function _flo_minus($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 $3 = +HEAPF32[$x>>2];
 $4 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $5 = (+_mrb_to_flo($4,$y$byval_copy));
 $6 = $3 - $5;
 _mrb_float_value($agg$result,$2,$6);
 STACKTOP = sp;return;
}
function _flo_mul($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 $3 = +HEAPF32[$x>>2];
 $4 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $5 = (+_mrb_to_flo($4,$y$byval_copy));
 $6 = $3 * $5;
 _mrb_float_value($agg$result,$2,$6);
 STACKTOP = sp;return;
}
function _flo_mod($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $mod = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $mod = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 $3 = +HEAPF32[$x>>2];
 $4 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $5 = (+_mrb_to_flo($4,$y$byval_copy));
 _flodivmod($2,$3,$5,0,$mod);
 $6 = $0;
 $7 = +HEAPF32[$mod>>2];
 _mrb_float_value($agg$result,$6,$7);
 STACKTOP = sp;return;
}
function _flo_eq($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 3:  {
  $4 = +HEAPF32[$x>>2];
  $5 = HEAP32[$y>>2]|0;
  $6 = (+($5|0));
  $7 = $4 == $6;
  $8 = $7&1;
  $9 = $8&255;
  _mrb_bool_value_152($agg$result,$9);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $10 = +HEAPF32[$x>>2];
  $11 = +HEAPF32[$y>>2];
  $12 = $10 == $11;
  $13 = $12&1;
  $14 = $13&255;
  _mrb_bool_value_152($agg$result,$14);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _mrb_false_value_153($agg$result);
  STACKTOP = sp;return;
 }
 }
}
function _flo_ceil($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $f = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $2 = (+Math_ceil((+$1)));
 $f = $2;
 $3 = $f;
 $4 = $3 <= 2147483648.0;
 $5 = $f;
 $6 = $5 >= -2147483648.0;
 $or$cond = $4 & $6;
 if ($or$cond) {
  $9 = $f;
  $10 = (~~(($9)));
  _mrb_fixnum_value_125($agg$result,$10);
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = $f;
  _mrb_float_value($agg$result,$7,$8);
  STACKTOP = sp;return;
 }
}
function _flo_finite_p($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $2 = (___FLOAT_BITS_126($1)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)<(2139095040);
 $5 = $4&1;
 $6 = $5&255;
 _mrb_bool_value_152($agg$result,$6);
 STACKTOP = sp;return;
}
function _flo_floor($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $f = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $2 = (+Math_floor((+$1)));
 $f = $2;
 $3 = $f;
 $4 = $3 <= 2147483648.0;
 $5 = $f;
 $6 = $5 >= -2147483648.0;
 $or$cond = $4 & $6;
 if ($or$cond) {
  $9 = $f;
  $10 = (~~(($9)));
  _mrb_fixnum_value_125($agg$result,$10);
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = $f;
  _mrb_float_value($agg$result,$7,$8);
  STACKTOP = sp;return;
 }
}
function _flo_infinite_p($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $value = $1;
 $2 = $value;
 $3 = (___FLOAT_BITS_126($2)|0);
 $4 = $3 & 2147483647;
 $5 = ($4|0)==(2139095040);
 if ($5) {
  $6 = $value;
  $7 = $6 < 0.0;
  $8 = $7 ? -1 : 1;
  _mrb_fixnum_value_125($agg$result,$8);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_141($agg$result);
  STACKTOP = sp;return;
 }
}
function _flo_round($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $d = 0.0, $f = 0.0, $i = 0, $ndigits = 0, $number = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $ndigits = sp + 32|0;
 $0 = $mrb;
 HEAP32[$ndigits>>2] = 0;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ndigits;
 (_mrb_get_args($1,64388,$vararg_buffer)|0);
 $2 = +HEAPF32[$num>>2];
 $3 = $2;
 $number = $3;
 $4 = $number;
 $5 = (___DOUBLE_BITS_127($4)|0);
 $6 = tempRet0;
 $7 = $6 & 2147483647;
 $8 = ($5|0)==(0);
 $9 = ($7|0)==(2146435072);
 $10 = $8 & $9;
 if ($10) {
  $11 = HEAP32[$ndigits>>2]|0;
  $12 = (0)<($11|0);
  if (!($12)) {
   $13 = $0;
   $14 = $0;
   $15 = (_mrb_class_get($14,54854)|0);
   $16 = $number;
   $17 = $16 < 0.0;
   $18 = $17 ? 54871 : 54881;
   _mrb_raise($13,$15,$18);
   // unreachable;
  }
  ;HEAP32[$agg$result>>2]=HEAP32[$num>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$num+4>>2]|0;
  STACKTOP = sp;return;
 }
 $19 = $number;
 $20 = (___DOUBLE_BITS_127($19)|0);
 $21 = tempRet0;
 $22 = $21 & 2147483647;
 $23 = ($22>>>0)>(2146435072);
 $24 = ($20>>>0)>(0);
 $25 = ($22|0)==(2146435072);
 $26 = $25 & $24;
 $27 = $23 | $26;
 if ($27) {
  $28 = HEAP32[$ndigits>>2]|0;
  $29 = (0)<($28|0);
  if (!($29)) {
   $30 = $0;
   $31 = $0;
   $32 = (_mrb_class_get($31,54854)|0);
   _mrb_raise($30,$32,54890);
   // unreachable;
  }
  ;HEAP32[$agg$result>>2]=HEAP32[$num>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$num+4>>2]|0;
  STACKTOP = sp;return;
 }
 $f = 1.0;
 $33 = HEAP32[$ndigits>>2]|0;
 $34 = ($33|0)>=(0);
 $35 = HEAP32[$ndigits>>2]|0;
 $36 = (0 - ($35))|0;
 $37 = $34 ? $35 : $36;
 $i = $37;
 while(1) {
  $38 = $i;
  $39 = (($38) + -1)|0;
  $i = $39;
  $40 = ($39|0)>=(0);
  $41 = $f;
  if (!($40)) {
   break;
  }
  $42 = $41 * 10.0;
  $f = $42;
 }
 $43 = (___DOUBLE_BITS_127($41)|0);
 $44 = tempRet0;
 $45 = $44 & 2147483647;
 $46 = ($43|0)==(0);
 $47 = ($45|0)==(2146435072);
 $48 = $46 & $47;
 $49 = HEAP32[$ndigits>>2]|0;
 $50 = ($49|0)<(0);
 do {
  if ($48) {
   if ($50) {
    $number = 0.0;
   }
  } else {
   $51 = $f;
   $52 = $number;
   if ($50) {
    $53 = $52 / $51;
    $number = $53;
   } else {
    $54 = $52 * $51;
    $number = $54;
   }
   $55 = $number;
   $56 = $55 > 0.0;
   $57 = $number;
   if ($56) {
    $58 = $57;
    $59 = (+Math_floor((+$58)));
    $60 = $59;
    $d = $60;
    $61 = $d;
    $62 = $number;
    $63 = $d;
    $64 = $62 - $63;
    $65 = $64 >= 0.5;
    $66 = $65&1;
    $67 = (+($66|0));
    $68 = $61 + $67;
    $number = $68;
   } else {
    $69 = $57 < 0.0;
    if ($69) {
     $70 = $number;
     $71 = $70;
     $72 = (+Math_ceil((+$71)));
     $73 = $72;
     $d = $73;
     $74 = $d;
     $75 = $d;
     $76 = $number;
     $77 = $75 - $76;
     $78 = $77 >= 0.5;
     $79 = $78&1;
     $80 = (+($79|0));
     $81 = $74 - $80;
     $number = $81;
    }
   }
   $82 = HEAP32[$ndigits>>2]|0;
   $83 = ($82|0)<(0);
   $84 = $f;
   $85 = $number;
   if ($83) {
    $86 = $85 * $84;
    $number = $86;
    break;
   } else {
    $87 = $85 / $84;
    $number = $87;
    break;
   }
  }
 } while(0);
 $88 = HEAP32[$ndigits>>2]|0;
 $89 = ($88|0)>(0);
 $90 = $number;
 if (!($89)) {
  $102 = (~~(($90)));
  _mrb_fixnum_value_125($agg$result,$102);
  STACKTOP = sp;return;
 }
 $91 = (___DOUBLE_BITS_127($90)|0);
 $92 = tempRet0;
 $93 = $92 & 2147483647;
 $94 = ($93>>>0)<(2146435072);
 $95 = ($91>>>0)<(0);
 $96 = ($93|0)==(2146435072);
 $97 = $96 & $95;
 $98 = $94 | $97;
 if ($98) {
  $99 = $0;
  $100 = $number;
  $101 = $100;
  _mrb_float_value($agg$result,$99,$101);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$num>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$num+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _flo_to_f($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 ;HEAP32[$agg$result>>2]=HEAP32[$num>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$num+4>>2]|0;
 STACKTOP = sp;return;
}
function _flo_truncate($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $f = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $f = $1;
 $2 = $f;
 $3 = $2;
 $4 = $3 > 0.0;
 if ($4) {
  $5 = $f;
  $6 = (+Math_floor((+$5)));
  $f = $6;
 }
 $7 = $f;
 $8 = $7;
 $9 = $8 < 0.0;
 if ($9) {
  $10 = $f;
  $11 = (+Math_ceil((+$10)));
  $f = $11;
 }
 $12 = $f;
 $13 = $12 <= 2147483648.0;
 $14 = $f;
 $15 = $14 >= -2147483648.0;
 $or$cond = $13 & $15;
 if ($or$cond) {
  $18 = $f;
  $19 = (~~(($18)));
  _mrb_fixnum_value_125($agg$result,$19);
  STACKTOP = sp;return;
 } else {
  $16 = $0;
  $17 = $f;
  _mrb_float_value($agg$result,$16,$17);
  STACKTOP = sp;return;
 }
}
function _flo_divmod($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $a = 0, $a$byval_copy = 0, $b = 0, $b$byval_copy = 0, $div = 0;
 var $mod = 0, $vararg_buffer = 0, $y = 0, $y$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy = sp + 80|0;
 $a$byval_copy = sp + 72|0;
 $y$byval_copy = sp + 64|0;
 $vararg_buffer = sp;
 $y = sp + 48|0;
 $div = sp + 44|0;
 $mod = sp + 40|0;
 $a = sp + 32|0;
 $b = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($3,68900,$vararg_buffer)|0);
 $4 = $0;
 $5 = +HEAPF32[$x>>2];
 $6 = $0;
 ;HEAP32[$y$byval_copy>>2]=HEAP32[$y>>2]|0;HEAP32[$y$byval_copy+4>>2]=HEAP32[$y+4>>2]|0;
 $7 = (+_mrb_to_flo($6,$y$byval_copy));
 _flodivmod($4,$5,$7,$div,$mod);
 $8 = $0;
 $9 = +HEAPF32[$div>>2];
 $10 = (~~(($9)));
 $11 = (+($10|0));
 _mrb_float_value($1,$8,$11);
 ;HEAP32[$a>>2]=HEAP32[$1>>2]|0;HEAP32[$a+4>>2]=HEAP32[$1+4>>2]|0;
 $12 = $0;
 $13 = +HEAPF32[$mod>>2];
 _mrb_float_value($2,$12,$13);
 ;HEAP32[$b>>2]=HEAP32[$2>>2]|0;HEAP32[$b+4>>2]=HEAP32[$2+4>>2]|0;
 $14 = $0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
 _mrb_assoc_new($agg$result,$14,$a$byval_copy,$b$byval_copy);
 STACKTOP = sp;return;
}
function _flo_eql($agg$result,$mrb,$x) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $y = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $y;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($y)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(6);
 if ($4) {
  $5 = +HEAPF32[$x>>2];
  $6 = HEAP32[$y>>2]|0;
  $7 = (+($6|0));
  $8 = $5 == $7;
  $9 = $8&1;
  $10 = $9&255;
  _mrb_bool_value_152($agg$result,$10);
  STACKTOP = sp;return;
 } else {
  _mrb_false_value_153($agg$result);
  STACKTOP = sp;return;
 }
}
function _flo_to_s($agg$result,$mrb,$flt) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $flt = $flt|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $flt$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $flt$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = +HEAPF32[$flt>>2];
 $2 = (___FLOAT_BITS_126($1)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 $5 = $0;
 if ($4) {
  _mrb_str_new_static($agg$result,$5,54890,3);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$flt$byval_copy>>2]=HEAP32[$flt>>2]|0;HEAP32[$flt$byval_copy+4>>2]=HEAP32[$flt+4>>2]|0;
  _mrb_float_to_str($agg$result,$5,$flt$byval_copy,55009);
  STACKTOP = sp;return;
 }
}
function _flo_nan_p($agg$result,$mrb,$num) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = +HEAPF32[$num>>2];
 $2 = (___FLOAT_BITS_126($1)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 $5 = $4&1;
 $6 = $5&255;
 _mrb_bool_value_152($agg$result,$6);
 STACKTOP = sp;return;
}
function _mrb_obj_eq($mrb,$v1,$v2) {
 $mrb = $mrb|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($v2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 L1: do {
  if ($6) {
   $0 = 0;
  } else {
   $7 = ((($v1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   switch ($8|0) {
   case 2:  {
    $0 = 1;
    break L1;
    break;
   }
   case 3: case 0:  {
    $9 = HEAP32[$v1>>2]|0;
    $10 = HEAP32[$v2>>2]|0;
    $11 = ($9|0)==($10|0);
    $12 = $11&1;
    $13 = $12&255;
    $0 = $13;
    break L1;
    break;
   }
   case 4:  {
    $14 = HEAP32[$v1>>2]|0;
    $15 = HEAP32[$v2>>2]|0;
    $16 = ($14|0)==($15|0);
    $17 = $16&1;
    $18 = $17&255;
    $0 = $18;
    break L1;
    break;
   }
   case 6:  {
    $19 = +HEAPF32[$v1>>2];
    $20 = +HEAPF32[$v2>>2];
    $21 = $19 == $20;
    $22 = $21&1;
    $23 = $22&255;
    $0 = $23;
    break L1;
    break;
   }
   default: {
    $24 = HEAP32[$v1>>2]|0;
    $25 = HEAP32[$v2>>2]|0;
    $26 = ($24|0)==($25|0);
    $27 = $26&1;
    $28 = $27&255;
    $0 = $28;
    break L1;
   }
   }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _mrb_obj_equal($mrb,$v1,$v2) {
 $mrb = $mrb|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $v1$byval_copy = 0, $v2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v2$byval_copy = sp + 16|0;
 $v1$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$v1$byval_copy>>2]=HEAP32[$v1>>2]|0;HEAP32[$v1$byval_copy+4>>2]=HEAP32[$v1+4>>2]|0;
 ;HEAP32[$v2$byval_copy>>2]=HEAP32[$v2>>2]|0;HEAP32[$v2$byval_copy+4>>2]=HEAP32[$v2+4>>2]|0;
 $2 = (_mrb_obj_eq($1,$v1$byval_copy,$v2$byval_copy)|0);
 STACKTOP = sp;return ($2|0);
}
function _mrb_equal($mrb,$obj1,$obj2) {
 $mrb = $mrb|0;
 $obj1 = $obj1|0;
 $obj2 = $obj2|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj1$byval_copy = 0, $obj1$byval_copy1 = 0, $obj2$byval_copy = 0, $result = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj1$byval_copy1 = sp + 48|0;
 $obj2$byval_copy = sp + 40|0;
 $obj1$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $result = sp + 16|0;
 $2 = sp + 8|0;
 $1 = $mrb;
 $3 = $1;
 ;HEAP32[$obj1$byval_copy>>2]=HEAP32[$obj1>>2]|0;HEAP32[$obj1$byval_copy+4>>2]=HEAP32[$obj1+4>>2]|0;
 ;HEAP32[$obj2$byval_copy>>2]=HEAP32[$obj2>>2]|0;HEAP32[$obj2$byval_copy+4>>2]=HEAP32[$obj2+4>>2]|0;
 $4 = (_mrb_obj_eq($3,$obj1$byval_copy,$obj2$byval_copy)|0);
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 $6 = $1;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$obj2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$obj2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$obj2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$obj2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$obj2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$obj2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$obj2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$obj2+7>>0]|0;
 ;HEAP32[$obj1$byval_copy1>>2]=HEAP32[$obj1>>2]|0;HEAP32[$obj1$byval_copy1+4>>2]=HEAP32[$obj1+4>>2]|0;
 _mrb_funcall($2,$6,$obj1$byval_copy1,68902,1,$vararg_buffer);
 ;HEAP32[$result>>2]=HEAP32[$2>>2]|0;HEAP32[$result+4>>2]=HEAP32[$2+4>>2]|0;
 $7 = ((($result)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _mrb_init_object($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f = 0, $n = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,55028,$4)|0);
 $n = $5;
 $6 = $0;
 $7 = ((($6)) + 76|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = $n;
 _mrb_undef_class_method($8,$9,67683);
 $10 = $0;
 $11 = $n;
 _mrb_define_method($10,$11,68778,71,262144);
 $12 = $0;
 $13 = $n;
 _mrb_define_method($12,$13,59634,72,262144);
 $14 = $0;
 $15 = $n;
 _mrb_define_method($14,$15,59632,73,262144);
 $16 = $0;
 $17 = $n;
 _mrb_define_method($16,$17,68379,74,0);
 $18 = $0;
 $19 = $n;
 _mrb_define_method($18,$19,68977,75,0);
 $20 = $0;
 $21 = $n;
 _mrb_define_method($20,$21,68986,76,0);
 $22 = $0;
 $23 = $0;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_mrb_define_class($22,55039,$25)|0);
 $t = $26;
 $27 = $0;
 $28 = ((($27)) + 68|0);
 HEAP32[$28>>2] = $26;
 $29 = $0;
 $30 = $t;
 _mrb_undef_class_method($29,$30,67683);
 $31 = $0;
 $32 = $t;
 _mrb_define_method($31,$32,68778,77,262144);
 $33 = $0;
 $34 = $t;
 _mrb_define_method($33,$34,59634,78,262144);
 $35 = $0;
 $36 = $t;
 _mrb_define_method($35,$36,68977,79,0);
 $37 = $0;
 $38 = $t;
 _mrb_define_method($37,$38,59632,80,262144);
 $39 = $0;
 $40 = $t;
 _mrb_define_method($39,$40,68986,79,0);
 $41 = $0;
 $42 = $0;
 $43 = ((($42)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_mrb_define_class($41,55049,$44)|0);
 $f = $45;
 $46 = $0;
 $47 = ((($46)) + 72|0);
 HEAP32[$47>>2] = $45;
 $48 = $0;
 $49 = $f;
 _mrb_undef_class_method($48,$49,67683);
 $50 = $0;
 $51 = $f;
 _mrb_define_method($50,$51,68778,71,262144);
 $52 = $0;
 $53 = $f;
 _mrb_define_method($52,$53,59634,72,262144);
 $54 = $0;
 $55 = $f;
 _mrb_define_method($54,$55,68977,81,0);
 $56 = $0;
 $57 = $f;
 _mrb_define_method($56,$57,59632,73,262144);
 $58 = $0;
 $59 = $f;
 _mrb_define_method($58,$59,68986,81,0);
 STACKTOP = sp;return;
}
function _false_and($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 _mrb_false_value_176($agg$result);
 STACKTOP = sp;return;
}
function _mrb_false_value_176($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _false_xor($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $obj2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $obj2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj2;
 (_mrb_get_args($1,55037,$vararg_buffer)|0);
 $2 = HEAP8[$obj2>>0]|0;
 _mrb_bool_value_179($agg$result,$2);
 STACKTOP = sp;return;
}
function _mrb_bool_value_179($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _false_or($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $obj2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $obj2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj2;
 (_mrb_get_args($1,55037,$vararg_buffer)|0);
 $2 = HEAP8[$obj2>>0]|0;
 _mrb_bool_value_179($agg$result,$2);
 STACKTOP = sp;return;
}
function _mrb_true($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 _mrb_true_value_182($agg$result);
 STACKTOP = sp;return;
}
function _mrb_true_value_182($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _nil_to_s($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_str_new($agg$result,$1,0,0);
 STACKTOP = sp;return;
}
function _nil_inspect($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_str_new_static($agg$result,$1,58162,3);
 STACKTOP = sp;return;
}
function _true_and($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $obj2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $obj2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj2;
 (_mrb_get_args($1,55037,$vararg_buffer)|0);
 $2 = HEAP8[$obj2>>0]|0;
 _mrb_bool_value_179($agg$result,$2);
 STACKTOP = sp;return;
}
function _true_xor($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $obj2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $obj2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj2;
 (_mrb_get_args($1,55037,$vararg_buffer)|0);
 $2 = HEAP8[$obj2>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ^ 1;
 $5 = $4&1;
 $6 = $5&255;
 _mrb_bool_value_179($agg$result,$6);
 STACKTOP = sp;return;
}
function _true_to_s($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_str_new_static($agg$result,$1,58206,4);
 STACKTOP = sp;return;
}
function _true_or($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 _mrb_true_value_182($agg$result);
 STACKTOP = sp;return;
}
function _false_to_s($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_str_new_static($agg$result,$1,58182,5);
 STACKTOP = sp;return;
}
function _convert_type($agg$result,$mrb,$val,$tname,$method,$raise) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $tname = $tname|0;
 $method = $method|0;
 $raise = $raise|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $m = 0, $val$byval_copy = 0, $val$byval_copy2 = 0, $val$byval_copy3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy3 = sp + 64|0;
 $val$byval_copy2 = sp + 56|0;
 $val$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $0 = $mrb;
 $1 = $tname;
 $2 = $method;
 $3 = $raise;
 $m = 0;
 $6 = $0;
 $7 = $2;
 $8 = (_mrb_intern_cstr($6,$7)|0);
 $m = $8;
 $9 = $0;
 $10 = $m;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 $11 = (_mrb_respond_to($9,$val$byval_copy,$10)|0);
 $12 = ($11<<24>>24)!=(0);
 if ($12) {
  $21 = $0;
  $22 = $m;
  ;HEAP32[$val$byval_copy3>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy3+4>>2]=HEAP32[$val+4>>2]|0;
  _mrb_funcall_argv($agg$result,$21,$val$byval_copy3,$22,0,0);
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = ($13<<24>>24)!=(0);
 if ($14) {
  $15 = $0;
  $16 = $0;
  $17 = (_mrb_class_get($16,68905)|0);
  $18 = $0;
  ;HEAP32[$val$byval_copy2>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy2+4>>2]=HEAP32[$val+4>>2]|0;
  _inspect_type($4,$18,$val$byval_copy2);
  $19 = $0;
  $20 = $1;
  _mrb_str_new_cstr($5,$19,$20);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$5+7>>0]|0;
  _mrb_raisef($15,$17,55068,$vararg_buffer);
  // unreachable;
 }
 _mrb_nil_value_193($agg$result);
 STACKTOP = sp;return;
}
function _inspect_type($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val$byval_copy = 0, $val$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy1 = sp + 16|0;
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = ((($val)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($val)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(2);
  if (!($6)) {
   $8 = $0;
   $9 = $0;
   ;HEAP32[$val$byval_copy1>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy1+4>>2]=HEAP32[$val+4>>2]|0;
   $10 = (_mrb_obj_classname($9,$val$byval_copy1)|0);
   _mrb_str_new_cstr($agg$result,$8,$10);
   STACKTOP = sp;return;
  }
 }
 $7 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_inspect($agg$result,$7,$val$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_inspect($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $obj$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 $3 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_funcall($1,$3,$obj$byval_copy,68986,0,$vararg_buffer);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_obj_as_string($agg$result,$2,$$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_nil_value_193($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_convert_type($agg$result,$mrb,$val,$type,$tname,$method) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $type = $type|0;
 $tname = $tname|0;
 $method = $method|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, $val$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 72|0;
 $vararg_buffer = sp;
 $v = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $0 = $mrb;
 $1 = $type;
 $2 = $tname;
 $3 = $method;
 $7 = ((($val)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ($8|0)==($9|0);
 if ($10) {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = $2;
 $13 = $3;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _convert_type($4,$11,$val$byval_copy,$12,$13,1);
 ;HEAP32[$v>>2]=HEAP32[$4>>2]|0;HEAP32[$v+4>>2]=HEAP32[$4+4>>2]|0;
 $14 = ((($v)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ($15|0)!=($16|0);
 if ($17) {
  $18 = $0;
  $19 = $0;
  $20 = (_mrb_class_get($19,68905)|0);
  $21 = $0;
  $22 = $2;
  _mrb_str_new_cstr($5,$21,$22);
  $23 = $0;
  $24 = $3;
  _mrb_str_new_cstr($6,$23,$24);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$val>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$val+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$val+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$val+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$val+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$val+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$val+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$val+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$5+7>>0]|0;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  ;HEAP8[$vararg_ptr2>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$6+7>>0]|0;
  _mrb_raisef($18,$20,55093,$vararg_buffer);
  // unreachable;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_check_convert_type($agg$result,$mrb,$val,$type,$tname,$method) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $type = $type|0;
 $tname = $tname|0;
 $method = $method|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $v = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 32|0;
 $v = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $type;
 $2 = $tname;
 $3 = $method;
 $5 = ((($val)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ($6|0)==($7|0);
 $9 = $1;
 $10 = ($9|0)!=(21);
 $or$cond = $8 & $10;
 if ($or$cond) {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = $2;
 $13 = $3;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _convert_type($4,$11,$val$byval_copy,$12,$13,0);
 ;HEAP32[$v>>2]=HEAP32[$4>>2]|0;HEAP32[$v+4>>2]=HEAP32[$4+4>>2]|0;
 $14 = ((($v)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = HEAP32[$v>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($v)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ($20|0)!=($21|0);
  if (!($22)) {
   ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_193($agg$result);
 STACKTOP = sp;return;
}
function _mrb_check_type($mrb,$x,$t) {
 $mrb = $mrb|0;
 $x = $x|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $etype = 0, $or$cond = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $x$byval_copy = 0, $x$byval_copy7 = 0;
 var $x$byval_copy8 = 0, $x$byval_copy9 = 0, $xt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$byval_copy9 = sp + 136|0;
 $x$byval_copy8 = sp + 128|0;
 $x$byval_copy7 = sp + 120|0;
 $x$byval_copy = sp + 112|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 80|0;
 $3 = sp + 72|0;
 $4 = sp + 64|0;
 $5 = sp + 56|0;
 $6 = sp + 48|0;
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $0 = $mrb;
 $1 = $t;
 $type = 56;
 $9 = ((($x)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $xt = $10;
 $11 = $xt;
 $12 = $1;
 $13 = ($11|0)!=($12|0);
 $14 = $xt;
 $15 = ($14|0)==(21);
 $or$cond = $13 | $15;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = $type;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(23);
  if (!($19)) {
   label = 19;
   break;
  }
  $20 = $type;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $1;
  $24 = ($22|0)==($23|0);
  if ($24) {
   break;
  }
  $63 = $type;
  $64 = ((($63)) + 8|0);
  $type = $64;
 }
 if ((label|0) == 19) {
  $65 = $0;
  $66 = $0;
  $67 = (_mrb_class_get($66,68905)|0);
  $68 = $1;
  _mrb_fixnum_value_213($7,$68);
  $69 = ((($x)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  _mrb_fixnum_value_213($8,$70);
  ;HEAP8[$vararg_buffer3>>0]=HEAP8[$7>>0]|0;HEAP8[$vararg_buffer3+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$vararg_buffer3+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$vararg_buffer3+3>>0]=HEAP8[$7+3>>0]|0;HEAP8[$vararg_buffer3+4>>0]=HEAP8[$7+4>>0]|0;HEAP8[$vararg_buffer3+5>>0]=HEAP8[$7+5>>0]|0;HEAP8[$vararg_buffer3+6>>0]=HEAP8[$7+6>>0]|0;HEAP8[$vararg_buffer3+7>>0]=HEAP8[$7+7>>0]|0;
  $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
  ;HEAP8[$vararg_ptr6>>0]=HEAP8[$8>>0]|0;HEAP8[$vararg_ptr6+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$vararg_ptr6+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$vararg_ptr6+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$vararg_ptr6+4>>0]=HEAP8[$8+4>>0]|0;HEAP8[$vararg_ptr6+5>>0]=HEAP8[$8+5>>0]|0;HEAP8[$vararg_ptr6+6>>0]=HEAP8[$8+6>>0]|0;HEAP8[$vararg_ptr6+7>>0]=HEAP8[$8+7>>0]|0;
  _mrb_raisef($65,$67,55166,$vararg_buffer3);
  // unreachable;
 }
 $25 = ((($x)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = HEAP32[$x>>2]|0;
  $29 = ($28|0)!=(0);
  if ($29) {
   label = 7;
  } else {
   $etype = 58162;
  }
 } else {
  label = 7;
 }
 do {
  if ((label|0) == 7) {
   $30 = ((($x)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(3);
   if ($32) {
    $etype = 55129;
    break;
   }
   $33 = ((($x)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(4);
   if ($35) {
    $etype = 56184;
    break;
   }
   $36 = ((($x)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37>>>0)<(8);
   $39 = $0;
   if (!($38)) {
    ;HEAP32[$x$byval_copy9>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy9+4>>2]=HEAP32[$x+4>>2]|0;
    $53 = (_mrb_obj_classname($39,$x$byval_copy9)|0);
    $etype = $53;
    break;
   }
   ;HEAP32[$x$byval_copy>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;
   _mrb_obj_as_string($2,$39,$x$byval_copy);
   $40 = HEAP32[$2>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 >>> 11;
   $43 = $42 & 8;
   $44 = ($43|0)!=(0);
   $45 = $0;
   if ($44) {
    ;HEAP32[$x$byval_copy7>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy7+4>>2]=HEAP32[$x+4>>2]|0;
    _mrb_obj_as_string($3,$45,$x$byval_copy7);
    $46 = HEAP32[$3>>2]|0;
    $47 = ((($46)) + 12|0);
    $52 = $47;
   } else {
    ;HEAP32[$x$byval_copy8>>2]=HEAP32[$x>>2]|0;HEAP32[$x$byval_copy8+4>>2]=HEAP32[$x+4>>2]|0;
    _mrb_obj_as_string($4,$45,$x$byval_copy8);
    $48 = HEAP32[$4>>2]|0;
    $49 = ((($48)) + 12|0);
    $50 = ((($49)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51;
   }
   $etype = $52;
  }
 } while(0);
 $54 = $0;
 $55 = $0;
 $56 = (_mrb_class_get($55,68905)|0);
 $57 = $0;
 $58 = $etype;
 _mrb_str_new_cstr($5,$57,$58);
 $59 = $0;
 $60 = $type;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 _mrb_str_new_cstr($6,$59,$62);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$5+7>>0]|0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 ;HEAP8[$vararg_ptr2>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$6+7>>0]|0;
 _mrb_raisef($54,$56,67788,$vararg_buffer);
 // unreachable;
}
function _mrb_fixnum_value_213($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_any_to_s($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cname = 0, $obj$byval_copy = 0;
 var $str = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $str$byval_copy4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy4 = sp + 112|0;
 $$byval_copy = sp + 104|0;
 $str$byval_copy3 = sp + 96|0;
 $str$byval_copy2 = sp + 88|0;
 $str$byval_copy1 = sp + 80|0;
 $str$byval_copy = sp + 72|0;
 $obj$byval_copy = sp + 64|0;
 $str = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $6 = $0;
 _mrb_str_buf_new($str,$6,20);
 $7 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $8 = (_mrb_obj_classname($7,$obj$byval_copy)|0);
 $cname = $8;
 $9 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($1,$9,$str$byval_copy,55193,2);
 $10 = $0;
 $11 = $cname;
 ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat_cstr($2,$10,$str$byval_copy1,$11);
 $12 = $0;
 ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($3,$12,$str$byval_copy2,67713,1);
 $13 = $0;
 $14 = $0;
 $15 = HEAP32[$obj>>2]|0;
 _mrb_ptr_to_str($4,$14,$15);
 ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_str_concat($13,$str$byval_copy3,$$byval_copy);
 $16 = $0;
 ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($5,$16,$str$byval_copy4,65241,1);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_is_kind_of($mrb,$obj,$c) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $c = $c|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cl = 0, $obj$byval_copy = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 16|0;
 $1 = $mrb;
 $2 = $c;
 $3 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $4 = (_mrb_class($3,$obj$byval_copy)|0);
 $cl = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 255;
 $$off = (($7) + -9)|0;
 $switch = ($$off>>>0)<(3);
 if (!($switch)) {
  $8 = $1;
  $9 = $1;
  $10 = (_mrb_class_get($9,68905)|0);
  _mrb_raise($8,$10,55196);
  // unreachable;
 }
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 524288;
 $15 = ($14|0)!=(0);
 L4: do {
  if ($15) {
   $16 = $2;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $2 = $18;
   while(1) {
    $19 = $2;
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 >>> 11;
    $22 = $21 & 1048576;
    $23 = ($22|0)!=(0);
    $24 = $23 ^ 1;
    if (!($24)) {
     break L4;
    }
    $25 = $2;
    $26 = ((($25)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $2 = $27;
   }
  }
 } while(0);
 while(1) {
  $28 = $cl;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   label = 12;
   break;
  }
  $30 = $cl;
  $31 = $2;
  $32 = ($30|0)==($31|0);
  if ($32) {
   label = 10;
   break;
  }
  $33 = $cl;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $2;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)==($38|0);
  if ($39) {
   label = 10;
   break;
  }
  $40 = $cl;
  $41 = ((($40)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $cl = $42;
 }
 if ((label|0) == 10) {
  $0 = 1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _mrb_class($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = HEAP32[$v>>2]|0;
   $5 = ($4|0)!=(0);
   $6 = $1;
   if ($5) {
    $7 = ((($6)) + 72|0);
    $8 = HEAP32[$7>>2]|0;
    $0 = $8;
    break L1;
   } else {
    $9 = ((($6)) + 76|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break L1;
   }
   break;
  }
  case 2:  {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   break;
  }
  case 4:  {
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   break;
  }
  case 3:  {
   $17 = $1;
   $18 = ((($17)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $0 = $19;
   break;
  }
  case 6:  {
   $20 = $1;
   $21 = ((($20)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $0 = $22;
   break;
  }
  case 7:  {
   $23 = $1;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $0 = $25;
   break;
  }
  case 20:  {
   $0 = 0;
   break;
  }
  default: {
   $26 = HEAP32[$v>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
  }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _mrb_to_int($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_to_integer($agg$result,$1,$val$byval_copy,55221);
 STACKTOP = sp;return;
}
function _mrb_to_integer($agg$result,$mrb,$val,$method) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $method = $method|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $type = 0, $v = 0, $v$byval_copy = 0, $v$byval_copy5 = 0, $val$byval_copy = 0, $val$byval_copy4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy5 = sp + 104|0;
 $val$byval_copy4 = sp + 96|0;
 $v$byval_copy = sp + 88|0;
 $val$byval_copy = sp + 80|0;
 $vararg_buffer = sp;
 $v = sp + 64|0;
 $2 = sp + 56|0;
 $type = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $0 = $mrb;
 $1 = $method;
 $5 = ((($val)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(3);
 if ($7) {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $1;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _convert_type($2,$8,$val$byval_copy,55060,$9,1);
 ;HEAP32[$v>>2]=HEAP32[$2>>2]|0;HEAP32[$v+4>>2]=HEAP32[$2+4>>2]|0;
 $10 = $0;
 $11 = $0;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 $14 = (_mrb_obj_is_kind_of($10,$v$byval_copy,$13)|0);
 $15 = ($14<<24>>24)!=(0);
 if (!($15)) {
  $16 = $0;
  ;HEAP32[$val$byval_copy4>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy4+4>>2]=HEAP32[$val+4>>2]|0;
  _inspect_type($type,$16,$val$byval_copy4);
  $17 = $0;
  $18 = $0;
  $19 = (_mrb_class_get($18,68905)|0);
  $20 = $0;
  $21 = $1;
  _mrb_str_new_cstr($3,$20,$21);
  $22 = $0;
  ;HEAP32[$v$byval_copy5>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy5+4>>2]=HEAP32[$v+4>>2]|0;
  _inspect_type($4,$22,$v$byval_copy5);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$type>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$type+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$type+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$type+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$type+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$type+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$type+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$type+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$type>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$type+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$type+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$type+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$type+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$type+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$type+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$type+7>>0]|0;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  ;HEAP8[$vararg_ptr2>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$3+7>>0]|0;
  $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
  ;HEAP8[$vararg_ptr3>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_ptr3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_ptr3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_ptr3+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_ptr3+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_ptr3+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_ptr3+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_ptr3+7>>0]=HEAP8[$4+7>>0]|0;
  _mrb_raisef($17,$19,55228,$vararg_buffer);
  // unreachable;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_convert_to_integer($agg$result,$mrb,$val,$base) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $val$byval_copy = 0, $val$byval_copy1 = 0, $val$byval_copy2 = 0, $val$byval_copy3 = 0, $val$byval_copy4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy4 = sp + 64|0;
 $val$byval_copy3 = sp + 56|0;
 $val$byval_copy2 = sp + 48|0;
 $val$byval_copy1 = sp + 40|0;
 $val$byval_copy = sp + 32|0;
 $tmp = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $base;
 $4 = ((($val)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$val>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = $1;
   $10 = ($9|0)!=(0);
   if ($10) {
    $35 = $0;
    $36 = $0;
    $37 = (_mrb_class_get($36,68855)|0);
    _mrb_raise($35,$37,55304);
    // unreachable;
   } else {
    $11 = $0;
    $12 = $0;
    $13 = (_mrb_class_get($12,68905)|0);
    _mrb_raise($11,$13,55273);
    // unreachable;
   }
  }
 }
 $14 = ((($val)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 switch ($15|0) {
 case 6:  {
  label = 6;
  break;
 }
 case 3:  {
  $23 = $1;
  $24 = ($23|0)!=(0);
  if ($24) {
   $35 = $0;
   $36 = $0;
   $37 = (_mrb_class_get($36,68855)|0);
   _mrb_raise($35,$37,55304);
   // unreachable;
  }
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  label = 13;
 }
 }
 do {
  if ((label|0) == 6) {
   $16 = $1;
   $17 = ($16|0)!=(0);
   if ($17) {
    $35 = $0;
    $36 = $0;
    $37 = (_mrb_class_get($36,68855)|0);
    _mrb_raise($35,$37,55304);
    // unreachable;
   }
   $18 = +HEAPF32[$val>>2];
   $19 = $18 <= 2147483648.0;
   if ($19) {
    $20 = +HEAPF32[$val>>2];
    $21 = $20 >= -2147483648.0;
    if ($21) {
     label = 13;
     break;
    }
   }
   $22 = $0;
   ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
   _mrb_flo_to_fixnum($agg$result,$22,$val$byval_copy);
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 13) {
   $27 = $1;
   $28 = ($27|0)!=(0);
   $29 = $0;
   if ($28) {
    ;HEAP32[$val$byval_copy2>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy2+4>>2]=HEAP32[$val+4>>2]|0;
    _mrb_check_string_type($2,$29,$val$byval_copy2);
    ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0;
    $30 = ((($tmp)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0);
    if (!($32)) {
     break;
    }
    $33 = HEAP32[$tmp>>2]|0;
    $34 = ($33|0)!=(0);
    if ($34) {
     break;
    }
    $35 = $0;
    $36 = $0;
    $37 = (_mrb_class_get($36,68855)|0);
    _mrb_raise($35,$37,55304);
    // unreachable;
   }
   ;HEAP32[$val$byval_copy3>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy3+4>>2]=HEAP32[$val+4>>2]|0;
   _convert_type($3,$29,$val$byval_copy3,55060,55221,0);
   ;HEAP32[$tmp>>2]=HEAP32[$3>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$3+4>>2]|0;
   $38 = ((($tmp)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = HEAP32[$tmp>>2]|0;
    $42 = ($41|0)!=(0);
    if (!($42)) {
     $43 = $0;
     ;HEAP32[$val$byval_copy4>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy4+4>>2]=HEAP32[$val+4>>2]|0;
     _mrb_to_integer($agg$result,$43,$val$byval_copy4,56116);
     STACKTOP = sp;return;
    }
   }
   ;HEAP32[$agg$result>>2]=HEAP32[$tmp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$tmp+4>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $25 = $0;
 $26 = $1;
 ;HEAP32[$val$byval_copy1>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy1+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_str_to_inum($agg$result,$25,$val$byval_copy1,$26,1);
 STACKTOP = sp;return;
}
function _mrb_Integer($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_convert_to_integer($agg$result,$1,$val$byval_copy,0);
 STACKTOP = sp;return;
}
function _mrb_eql($mrb,$obj1,$obj2) {
 $mrb = $mrb|0;
 $obj1 = $obj1|0;
 $obj2 = $obj2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj1$byval_copy = 0, $obj1$byval_copy1 = 0, $obj2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj1$byval_copy1 = sp + 40|0;
 $obj2$byval_copy = sp + 32|0;
 $obj1$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $mrb;
 $3 = $1;
 ;HEAP32[$obj1$byval_copy>>2]=HEAP32[$obj1>>2]|0;HEAP32[$obj1$byval_copy+4>>2]=HEAP32[$obj1+4>>2]|0;
 ;HEAP32[$obj2$byval_copy>>2]=HEAP32[$obj2>>2]|0;HEAP32[$obj2$byval_copy+4>>2]=HEAP32[$obj2+4>>2]|0;
 $4 = (_mrb_obj_eq($3,$obj1$byval_copy,$obj2$byval_copy)|0);
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $6 = $1;
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$obj2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$obj2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$obj2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$obj2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$obj2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$obj2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$obj2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$obj2+7>>0]|0;
  ;HEAP32[$obj1$byval_copy1>>2]=HEAP32[$obj1>>2]|0;HEAP32[$obj1$byval_copy1+4>>2]=HEAP32[$obj1+4>>2]|0;
  _mrb_funcall($2,$6,$obj1$byval_copy1,68994,1,$vararg_buffer);
  $7 = ((($2)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  $10 = $9&1;
  $11 = $10&255;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mrb_p($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $obj$byval_copy = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_inspect($1,$2,$obj$byval_copy);
 $3 = HEAP32[695]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _printstr($$byval_copy,$3);
 STACKTOP = sp;return;
}
function _printstr($obj,$stream) {
 $obj = $obj|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stream;
 $1 = ((($obj)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(16);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[637]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = HEAP32[$obj>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 11;
  $10 = $9 & 8;
  $11 = ($10|0)!=(0);
  $12 = HEAP32[$obj>>2]|0;
  $13 = ((($12)) + 12|0);
  if ($11) {
   $16 = $13;
  } else {
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15;
  }
  _OutputDebugStringA(($16|0));
 }
 $17 = HEAP32[$obj>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 8;
 $21 = ($20|0)!=(0);
 $22 = HEAP32[$obj>>2]|0;
 $23 = ((($22)) + 12|0);
 if ($21) {
  $39 = $23;
 } else {
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $39 = $25;
 }
 $26 = HEAP32[$obj>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 11;
 $29 = $28 & 8;
 $30 = ($29|0)!=(0);
 $31 = HEAP32[$obj>>2]|0;
 if ($30) {
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 >>> 11;
  $34 = $33 & 496;
  $35 = $34 >> 4;
  $40 = $35;
 } else {
  $36 = ((($31)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $40 = $37;
 }
 $38 = $0;
 (_fwrite($39,$40,1,$38)|0);
 $41 = $0;
 (_putc(10,$41)|0);
 STACKTOP = sp;return;
}
function _mrb_obj_value_233($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_show_version($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 _mrb_obj_value_233($2,$6);
 $7 = $0;
 $8 = (_mrb_intern_static($7,69184,17)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_const_get($1,$3,$$byval_copy,$8);
 $9 = HEAP32[695]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
 _printstr($$byval_copy1,$9);
 STACKTOP = sp;return;
}
function _mrb_show_copyright($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 _mrb_obj_value_233($2,$6);
 $7 = $0;
 $8 = (_mrb_intern_static($7,69251,15)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_const_get($1,$3,$$byval_copy,$8);
 $9 = HEAP32[695]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
 _printstr($$byval_copy1,$9);
 STACKTOP = sp;return;
}
function _mrb_open_core($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mrb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $ud;
 $3 = $1;
 $4 = $2;
 $5 = (FUNCTION_TABLE_iiiii[$3 & 255](0,0,592,$4)|0);
 $mrb = $5;
 $6 = $mrb;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $8 = $mrb;
  $9 = $1;
  $10 = $2;
  _mrb_init($8,$9,$10);
  $11 = $mrb;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mrb_init($mrb,$f,$ud) {
 $mrb = $mrb|0;
 $f = $f|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $f;
 $2 = $ud;
 $3 = $0;
 _memcpy(($3|0),(72448|0),592)|0;
 $4 = $2;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 588|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = $0;
 $14 = ((($13)) + 92|0);
 _mrb_gc_init($12,$14);
 $15 = $0;
 $16 = (_mrb_malloc($15,52)|0);
 $17 = $0;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 dest=$21; src=73040; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $22 = $0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 _mrb_init_core($27);
 STACKTOP = sp;return;
}
function _mrb_default_allocf($mrb,$p,$size,$ud) {
 $mrb = $mrb|0;
 $p = $p|0;
 $size = $size|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $p;
 $3 = $size;
 $4 = $ud;
 $5 = $3;
 $6 = ($5|0)==(0);
 $7 = $2;
 if ($6) {
  _free($7);
  $0 = 0;
 } else {
  $8 = $3;
  $9 = (_realloc($7,$8)|0);
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _mrb_alloca($mrb,$size) {
 $mrb = $mrb|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = (8 + ($3))|0;
 $5 = (_mrb_malloc($2,$4)|0);
 $p = $5;
 $6 = $0;
 $7 = ((($6)) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $p;
 HEAP32[$9>>2] = $8;
 $10 = $p;
 $11 = $0;
 $12 = ((($11)) + 88|0);
 HEAP32[$12>>2] = $10;
 $13 = $p;
 $14 = ((($13)) + 4|0);
 STACKTOP = sp;return ($14|0);
}
function _mrb_open() {
 var $0 = 0, $1 = 0, $mrb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_mrb_open_allocf(82,0)|0);
 $mrb = $0;
 $1 = $mrb;
 STACKTOP = sp;return ($1|0);
}
function _mrb_open_allocf($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mrb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $ud;
 $3 = $1;
 $4 = $2;
 $5 = (_mrb_open_core($3,$4)|0);
 $mrb = $5;
 $6 = $mrb;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = $mrb;
  _mrb_init_mrbgems($8);
  $9 = $mrb;
  _mrb_gc_arena_restore($9,0);
  $10 = $mrb;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _mrb_irep_incref($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function _mrb_irep_decref($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $1;
 _mrb_irep_free($10,$11);
 STACKTOP = sp;return;
}
function _mrb_irep_free($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $0;
  $9 = $1;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _mrb_free($8,$11);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $1;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $1;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<3)|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(16);
  if ($24) {
   $25 = $0;
   $26 = $i;
   $27 = $1;
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<3)|0);
   $31 = HEAP32[$30>>2]|0;
   _mrb_gc_free_str($25,$31);
   $32 = $0;
   $33 = $i;
   $34 = $1;
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($33<<3)|0);
   $38 = HEAP32[$37>>2]|0;
   _mrb_free($32,$38);
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 $41 = $0;
 $42 = $1;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 _mrb_free($41,$44);
 $45 = $0;
 $46 = $1;
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 _mrb_free($45,$48);
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = $1;
  $51 = ((($50)) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49>>>0)<($52>>>0);
  $54 = $0;
  if (!($53)) {
   break;
  }
  $55 = $i;
  $56 = $1;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  _mrb_irep_decref($54,$60);
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $1;
 $64 = ((($63)) + 20|0);
 $65 = HEAP32[$64>>2]|0;
 _mrb_free($54,$65);
 $66 = $0;
 $67 = $1;
 $68 = ((($67)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 _mrb_free($66,$69);
 $70 = $0;
 $71 = $1;
 $72 = ((($71)) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 _mrb_free($70,$73);
 $74 = $0;
 $75 = $1;
 $76 = ((($75)) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 _mrb_free($74,$77);
 $78 = $0;
 $79 = $1;
 $80 = ((($79)) + 36|0);
 $81 = HEAP32[$80>>2]|0;
 _mrb_debug_info_free($78,$81);
 $82 = $0;
 $83 = $1;
 _mrb_free($82,$83);
 STACKTOP = sp;return;
}
function _mrb_str_pool($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $ns = 0, $ptr = 0, $s = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = (_mrb_malloc($2,24)|0);
 $ns = $3;
 $4 = $ns;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -256;
 $7 = $6 | 16;
 HEAP32[$4>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $ns;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $s;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 11;
 $16 = $15 & 2;
 $17 = ($16|0)!=(0);
 $18 = $ns;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2047;
 if ($17) {
  $21 = $20 | 4096;
  HEAP32[$18>>2] = $21;
  $22 = $s;
  $23 = ((($22)) + 12|0);
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $ns;
  $27 = ((($26)) + 12|0);
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $25;
  $29 = $s;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $ns;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $ns;
  $35 = ((($34)) + 12|0);
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 0;
  $124 = $ns;
  _mrb_obj_value_245($agg$result,$124);
  STACKTOP = sp;return;
 }
 HEAP32[$18>>2] = $20;
 $37 = $s;
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 >>> 11;
 $40 = $39 & 8;
 $41 = ($40|0)!=(0);
 $42 = $s;
 $43 = ((($42)) + 12|0);
 if ($41) {
  $ptr = $43;
  $44 = $s;
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 >>> 11;
  $47 = $46 & 496;
  $48 = $47 >> 4;
  $len = $48;
 } else {
  $49 = ((($43)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $ptr = $50;
  $51 = $s;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $len = $53;
 }
 $54 = $len;
 $55 = ($54|0)<(11);
 if ($55) {
  $56 = $ns;
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 >>> 11;
  $59 = $58 | 8;
  $60 = HEAP32[$56>>2]|0;
  $61 = $59 & 2097151;
  $62 = $61 << 11;
  $63 = $60 & 2047;
  $64 = $63 | $62;
  HEAP32[$56>>2] = $64;
  $65 = $len;
  $tmp_n = $65;
  $66 = $ns;
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 >>> 11;
  $69 = $68 & -497;
  $70 = HEAP32[$66>>2]|0;
  $71 = $69 & 2097151;
  $72 = $71 << 11;
  $73 = $70 & 2047;
  $74 = $73 | $72;
  HEAP32[$66>>2] = $74;
  $75 = $tmp_n;
  $76 = $75 << 4;
  $77 = $ns;
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 >>> 11;
  $80 = $79 | $76;
  $81 = HEAP32[$77>>2]|0;
  $82 = $80 & 2097151;
  $83 = $82 << 11;
  $84 = $81 & 2047;
  $85 = $84 | $83;
  HEAP32[$77>>2] = $85;
  $86 = $ptr;
  $87 = ($86|0)!=(0|0);
  if ($87) {
   $88 = $ns;
   $89 = ((($88)) + 12|0);
   $90 = $ptr;
   $91 = $len;
   _memcpy(($89|0),($90|0),($91|0))|0;
  }
  $92 = $len;
  $93 = $ns;
  $94 = ((($93)) + 12|0);
  $95 = (($94) + ($92)|0);
  HEAP8[$95>>0] = 0;
  $124 = $ns;
  _mrb_obj_value_245($agg$result,$124);
  STACKTOP = sp;return;
 } else {
  $96 = $0;
  $97 = $len;
  $98 = (($97) + 1)|0;
  $99 = (_mrb_malloc($96,$98)|0);
  $100 = $ns;
  $101 = ((($100)) + 12|0);
  $102 = ((($101)) + 8|0);
  HEAP32[$102>>2] = $99;
  $103 = $len;
  $104 = $ns;
  $105 = ((($104)) + 12|0);
  HEAP32[$105>>2] = $103;
  $106 = $len;
  $107 = $ns;
  $108 = ((($107)) + 12|0);
  $109 = ((($108)) + 4|0);
  HEAP32[$109>>2] = $106;
  $110 = $ptr;
  $111 = ($110|0)!=(0|0);
  if ($111) {
   $112 = $ns;
   $113 = ((($112)) + 12|0);
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $ptr;
   $117 = $len;
   _memcpy(($115|0),($116|0),($117|0))|0;
  }
  $118 = $len;
  $119 = $ns;
  $120 = ((($119)) + 12|0);
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($118)|0);
  HEAP8[$123>>0] = 0;
  $124 = $ns;
  _mrb_obj_value_245($agg$result,$124);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_value_245($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_free_context($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 _mrb_free($4,$7);
 $8 = $0;
 $9 = $1;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 _mrb_free($8,$11);
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 _mrb_free($12,$15);
 $16 = $0;
 $17 = $1;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 _mrb_free($16,$19);
 $20 = $0;
 $21 = $1;
 _mrb_free($20,$21);
 STACKTOP = sp;return;
}
function _mrb_close($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 588|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 588|0);
  $9 = HEAP32[$8>>2]|0;
  $i = $9;
  while(1) {
   $10 = $i;
   $11 = ($10|0)>(0);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $13 = (($12) - 1)|0;
   $14 = $0;
   $15 = ((($14)) + 584|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   FUNCTION_TABLE_vi[$18 & 511]($19);
   $20 = $i;
   $21 = (($20) + -1)|0;
   $i = $21;
  }
  $22 = $0;
  $23 = $0;
  $24 = ((($23)) + 584|0);
  $25 = HEAP32[$24>>2]|0;
  _mrb_free($22,$25);
 }
 $26 = $0;
 _mrb_gc_free_gv($26);
 $27 = $0;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 _mrb_free_context($27,$30);
 $31 = $0;
 _mrb_free_symtbl($31);
 $32 = $0;
 _mrb_alloca_free($32);
 $33 = $0;
 $34 = $0;
 $35 = ((($34)) + 92|0);
 _mrb_gc_destroy($33,$35);
 $36 = $0;
 $37 = $0;
 _mrb_free($36,$37);
 STACKTOP = sp;return;
}
function _mrb_alloca_free($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $p = $5;
 while(1) {
  $6 = $p;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $p;
  $tmp = $8;
  $9 = $p;
  $10 = HEAP32[$9>>2]|0;
  $p = $10;
  $11 = $0;
  $12 = $tmp;
  _mrb_free($11,$12);
 }
 STACKTOP = sp;return;
}
function _mrb_add_irep($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $irep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_malloc($1,60)|0);
 $irep = $2;
 $3 = $irep;
 dest=$3; src=73092; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $irep;
 $5 = ((($4)) + 56|0);
 HEAP32[$5>>2] = 1;
 $6 = $irep;
 STACKTOP = sp;return ($6|0);
}
function _mrb_top_self($agg$result,$mrb) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $20 = $0;
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  _mrb_obj_value_245($agg$result,$22);
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_mrb_obj_alloc($5,8,$8)|0);
 $10 = $0;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = $0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 _mrb_define_singleton_method($12,$15,68986,83,0);
 $16 = $0;
 $17 = $0;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 _mrb_define_singleton_method($16,$19,68977,83,0);
 $20 = $0;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 _mrb_obj_value_245($agg$result,$22);
 STACKTOP = sp;return;
}
function _inspect_main($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_str_new_static($agg$result,$1,55340,4);
 STACKTOP = sp;return;
}
function _mrb_str_buf_new($agg$result,$mrb,$capa) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $capa = $capa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $capa;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mrb_obj_alloc($2,16,$5)|0);
 $s = $6;
 $7 = $1;
 $8 = ($7>>>0)>=(2147483647);
 if ($8) {
  $9 = $0;
  $10 = $0;
  $11 = (_mrb_class_get($10,68855)|0);
  _mrb_raise($9,$11,55382);
  // unreachable;
 }
 $12 = $1;
 $13 = ($12>>>0)<(20);
 if ($13) {
  $1 = 20;
 }
 $14 = $s;
 $15 = ((($14)) + 12|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = $s;
 $18 = ((($17)) + 12|0);
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $16;
 $20 = $0;
 $21 = $1;
 $22 = (($21) + 1)|0;
 $23 = (_mrb_malloc($20,$22)|0);
 $24 = $s;
 $25 = ((($24)) + 12|0);
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $23;
 $27 = $s;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 11;
 $30 = $29 & 8;
 $31 = ($30|0)!=(0);
 $32 = $s;
 $33 = ((($32)) + 12|0);
 if ($31) {
  $36 = $33;
  HEAP8[$36>>0] = 0;
  $37 = $s;
  _mrb_obj_value_259($agg$result,$37);
  STACKTOP = sp;return;
 } else {
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35;
  HEAP8[$36>>0] = 0;
  $37 = $s;
  _mrb_obj_value_259($agg$result,$37);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_value_259($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_new($agg$result,$mrb,$p,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $len;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_str_new($3,$4,$5)|0);
 _mrb_obj_value_259($agg$result,$6);
 STACKTOP = sp;return;
}
function _str_new($mrb,$p,$len) {
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $s = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $p;
 $3 = $len;
 $4 = $1;
 $5 = $1;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_mrb_obj_alloc($4,16,$7)|0);
 $s = $8;
 $9 = $3;
 $10 = ($9>>>0)<(11);
 if ($10) {
  $11 = $s;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 11;
  $14 = $13 | 8;
  $15 = HEAP32[$11>>2]|0;
  $16 = $14 & 2097151;
  $17 = $16 << 11;
  $18 = $15 & 2047;
  $19 = $18 | $17;
  HEAP32[$11>>2] = $19;
  $20 = $3;
  $tmp_n = $20;
  $21 = $s;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & -497;
  $25 = HEAP32[$21>>2]|0;
  $26 = $24 & 2097151;
  $27 = $26 << 11;
  $28 = $25 & 2047;
  $29 = $28 | $27;
  HEAP32[$21>>2] = $29;
  $30 = $tmp_n;
  $31 = $30 << 4;
  $32 = $s;
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 11;
  $35 = $34 | $31;
  $36 = HEAP32[$32>>2]|0;
  $37 = $35 & 2097151;
  $38 = $37 << 11;
  $39 = $36 & 2047;
  $40 = $39 | $38;
  HEAP32[$32>>2] = $40;
  $41 = $2;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = $s;
   $44 = ((($43)) + 12|0);
   $45 = $2;
   $46 = $3;
   _memcpy(($44|0),($45|0),($46|0))|0;
  }
 } else {
  $47 = $3;
  $48 = ($47>>>0)>=(2147483647);
  if ($48) {
   $49 = $1;
   $50 = $1;
   $51 = (_mrb_class_get($50,68855)|0);
   _mrb_raise($49,$51,55411);
   // unreachable;
  }
  $52 = $3;
  $53 = $s;
  $54 = ((($53)) + 12|0);
  HEAP32[$54>>2] = $52;
  $55 = $3;
  $56 = $s;
  $57 = ((($56)) + 12|0);
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = $55;
  $59 = $1;
  $60 = $3;
  $61 = (($60) + 1)|0;
  $62 = (_mrb_malloc($59,$61)|0);
  $63 = $s;
  $64 = ((($63)) + 12|0);
  $65 = ((($64)) + 8|0);
  HEAP32[$65>>2] = $62;
  $66 = $2;
  $67 = ($66|0)!=(0|0);
  if ($67) {
   $68 = $s;
   $69 = ((($68)) + 12|0);
   $70 = ((($69)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $2;
   $73 = $3;
   _memcpy(($71|0),($72|0),($73|0))|0;
  }
 }
 $74 = $3;
 $75 = $s;
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 >>> 11;
 $78 = $77 & 8;
 $79 = ($78|0)!=(0);
 $80 = $s;
 $81 = ((($80)) + 12|0);
 if ($79) {
  $85 = $81;
  $84 = (($85) + ($74)|0);
  HEAP8[$84>>0] = 0;
  $86 = $s;
  $0 = $86;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 } else {
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
  $84 = (($85) + ($74)|0);
  HEAP8[$84>>0] = 0;
  $86 = $s;
  $0 = $86;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 return (0)|0;
}
function _str_new_static($mrb,$p,$len) {
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $len;
 $3 = $2;
 $4 = ($3>>>0)>=(2147483647);
 $5 = $0;
 $6 = $0;
 if ($4) {
  $7 = (_mrb_class_get($6,68855)|0);
  _mrb_raise($5,$7,55411);
  // unreachable;
 } else {
  $8 = ((($6)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_mrb_obj_alloc($5,16,$9)|0);
  $s = $10;
  $11 = $2;
  $12 = $s;
  $13 = ((($12)) + 12|0);
  HEAP32[$13>>2] = $11;
  $14 = $s;
  $15 = ((($14)) + 12|0);
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = $1;
  $18 = $s;
  $19 = ((($18)) + 12|0);
  $20 = ((($19)) + 8|0);
  HEAP32[$20>>2] = $17;
  $21 = $s;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2047;
  $24 = $23 | 4096;
  HEAP32[$21>>2] = $24;
  $25 = $s;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _mrb_str_new_cstr($agg$result,$mrb,$p) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (_strlen($4)|0);
  $len = $5;
 } else {
  $len = 0;
 }
 $6 = $0;
 $7 = $1;
 $8 = $len;
 $9 = (_str_new($6,$7,$8)|0);
 $s = $9;
 $10 = $s;
 _mrb_obj_value_259($agg$result,$10);
 STACKTOP = sp;return;
}
function _mrb_str_new_static($agg$result,$mrb,$p,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $len;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_str_new_static($3,$4,$5)|0);
 $s = $6;
 $7 = $s;
 _mrb_obj_value_259($agg$result,$7);
 STACKTOP = sp;return;
}
function _mrb_gc_free_str($mrb,$str) {
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $str;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 11;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $0;
  $13 = $1;
  $14 = ((($13)) + 12|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  _str_decref($12,$16);
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 2;
 $21 = ($20|0)!=(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = $1;
 $24 = ((($23)) + 12|0);
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 _mrb_free($22,$26);
 STACKTOP = sp;return;
}
function _str_decref($mrb,$shared) {
 $mrb = $mrb|0;
 $shared = $shared|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $shared;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)!=(0);
 if (!($13)) {
  $14 = $0;
  $15 = $1;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  _mrb_free($14,$17);
 }
 $18 = $0;
 $19 = $1;
 _mrb_free($18,$19);
 STACKTOP = sp;return;
}
function _mrb_str_strlen($mrb,$s) {
 $mrb = $mrb|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $max = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $s;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 8;
 $7 = ($6|0)!=(0);
 $8 = $2;
 if ($7) {
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 >>> 11;
  $11 = $10 & 496;
  $12 = $11 >> 4;
  $15 = $12;
 } else {
  $13 = ((($8)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
 }
 $max = $15;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = $2;
 $22 = ((($21)) + 12|0);
 if ($20) {
  $25 = $22;
 } else {
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24;
 }
 $p = $25;
 $26 = $p;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $max;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $i;
  $32 = $p;
  $33 = (($32) + ($31)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = ($35|0)==(0);
  if ($36) {
   label = 12;
   break;
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 12) {
  $37 = $1;
  $38 = $1;
  $39 = (_mrb_class_get($38,68855)|0);
  _mrb_raise($37,$39,55431);
  // unreachable;
 }
 $42 = $max;
 $0 = $42;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _mrb_str_modify($mrb,$s) {
 $mrb = $mrb|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0;
 var $p = 0, $p1 = 0, $ptr = 0, $shared = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 _check_frozen($2,$3);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 $9 = $1;
 if (!($8)) {
  $97 = HEAP32[$9>>2]|0;
  $98 = $97 >>> 11;
  $99 = $98 & 2;
  $100 = ($99|0)!=(0);
  if (!($100)) {
   STACKTOP = sp;return;
  }
  $101 = $1;
  $102 = ((($101)) + 12|0);
  $103 = ((($102)) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $p1 = $104;
  $105 = $0;
  $106 = $1;
  $107 = ((($106)) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 1)|0;
  $110 = (_mrb_malloc($105,$109)|0);
  $111 = $1;
  $112 = ((($111)) + 12|0);
  $113 = ((($112)) + 8|0);
  HEAP32[$113>>2] = $110;
  $114 = $p1;
  $115 = ($114|0)!=(0|0);
  if ($115) {
   $116 = $1;
   $117 = HEAP32[$116>>2]|0;
   $118 = $117 >>> 11;
   $119 = $118 & 8;
   $120 = ($119|0)!=(0);
   $121 = $1;
   $122 = ((($121)) + 12|0);
   if ($120) {
    $129 = $122;
   } else {
    $123 = ((($122)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $129 = $124;
   }
   $125 = $p1;
   $126 = $1;
   $127 = ((($126)) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   _memcpy(($129|0),($125|0),($128|0))|0;
  }
  $130 = $1;
  $131 = ((($130)) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $1;
  $134 = HEAP32[$133>>2]|0;
  $135 = $134 >>> 11;
  $136 = $135 & 8;
  $137 = ($136|0)!=(0);
  $138 = $1;
  $139 = ((($138)) + 12|0);
  if ($137) {
   $143 = $139;
  } else {
   $140 = ((($139)) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $143 = $141;
  }
  $142 = (($143) + ($132)|0);
  HEAP8[$142>>0] = 0;
  $144 = $1;
  $145 = ((($144)) + 12|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $1;
  $148 = ((($147)) + 12|0);
  $149 = ((($148)) + 4|0);
  HEAP32[$149>>2] = $146;
  $150 = $1;
  $151 = HEAP32[$150>>2]|0;
  $152 = $151 >>> 11;
  $153 = $152 & -3;
  $154 = HEAP32[$150>>2]|0;
  $155 = $153 & 2097151;
  $156 = $155 << 11;
  $157 = $154 & 2047;
  $158 = $157 | $156;
  HEAP32[$150>>2] = $158;
  STACKTOP = sp;return;
 }
 $10 = ((($9)) + 12|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $shared = $12;
 $13 = $shared;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 12|0);
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $shared;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)==($23|0);
  if ($24) {
   $25 = $shared;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 12|0);
   $30 = ((($29)) + 8|0);
   HEAP32[$30>>2] = $27;
   $31 = $shared;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = ((($34)) + 12|0);
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = $33;
   $37 = $1;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $1;
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 >>> 11;
   $43 = $42 & 8;
   $44 = ($43|0)!=(0);
   $45 = $1;
   $46 = ((($45)) + 12|0);
   if ($44) {
    $50 = $46;
   } else {
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $50 = $48;
   }
   $49 = (($50) + ($39)|0);
   HEAP8[$49>>0] = 0;
   $51 = $0;
   $52 = $shared;
   _mrb_free($51,$52);
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $53 = $1;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 >>> 11;
  $56 = $55 & 8;
  $57 = ($56|0)!=(0);
  $58 = $1;
  $59 = ((($58)) + 12|0);
  if ($57) {
   $62 = $59;
  } else {
   $60 = ((($59)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61;
  }
  $p = $62;
  $63 = $1;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $len = $65;
  $66 = $0;
  $67 = $len;
  $68 = (($67) + 1)|0;
  $69 = (_mrb_malloc($66,$68)|0);
  $ptr = $69;
  $70 = $p;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = $ptr;
   $73 = $p;
   $74 = $len;
   _memcpy(($72|0),($73|0),($74|0))|0;
  }
  $75 = $len;
  $76 = $ptr;
  $77 = (($76) + ($75)|0);
  HEAP8[$77>>0] = 0;
  $78 = $ptr;
  $79 = $1;
  $80 = ((($79)) + 12|0);
  $81 = ((($80)) + 8|0);
  HEAP32[$81>>2] = $78;
  $82 = $len;
  $83 = $1;
  $84 = ((($83)) + 12|0);
  $85 = ((($84)) + 4|0);
  HEAP32[$85>>2] = $82;
  $86 = $0;
  $87 = $shared;
  _str_decref($86,$87);
 }
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 >>> 11;
 $91 = $90 & -2;
 $92 = HEAP32[$88>>2]|0;
 $93 = $91 & 2097151;
 $94 = $93 << 11;
 $95 = $92 & 2047;
 $96 = $95 | $94;
 HEAP32[$88>>2] = $96;
 STACKTOP = sp;return;
}
function _check_frozen($mrb,$s) {
 $mrb = $mrb|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = $0;
  $9 = (_mrb_class_get($8,67967)|0);
  _mrb_raise($7,$9,55457);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _resize_capa($mrb,$s,$capacity) {
 $mrb = $mrb|0;
 $s = $s|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = $capacity;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 8;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = (11)<($8|0);
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $10 = $0;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $13 = (_mrb_malloc($10,$12)|0);
  $tmp = $13;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 >>> 11;
  $17 = $16 & 496;
  $18 = $17 >> 4;
  $len = $18;
  $19 = $tmp;
  $20 = $1;
  $21 = ((($20)) + 12|0);
  $22 = $len;
  _memcpy(($19|0),($21|0),($22|0))|0;
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 >>> 11;
  $26 = $25 & -505;
  $27 = HEAP32[$23>>2]|0;
  $28 = $26 & 2097151;
  $29 = $28 << 11;
  $30 = $27 & 2047;
  $31 = $30 | $29;
  HEAP32[$23>>2] = $31;
  $32 = $tmp;
  $33 = $1;
  $34 = ((($33)) + 12|0);
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $32;
  $36 = $len;
  $37 = $1;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $36;
  $39 = $2;
  $40 = $1;
  $41 = ((($40)) + 12|0);
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = $39;
  STACKTOP = sp;return;
 }
 $43 = $0;
 $44 = $1;
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 >>> 11;
 $47 = $46 & 8;
 $48 = ($47|0)!=(0);
 $49 = $1;
 $50 = ((($49)) + 12|0);
 if ($48) {
  $55 = $50;
 } else {
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $55 = $52;
 }
 $53 = $2;
 $54 = (($53) + 1)|0;
 $56 = (_mrb_realloc($43,$55,$54)|0);
 $57 = $1;
 $58 = ((($57)) + 12|0);
 $59 = ((($58)) + 8|0);
 HEAP32[$59>>2] = $56;
 $60 = $2;
 $61 = $1;
 $62 = ((($61)) + 12|0);
 $63 = ((($62)) + 4|0);
 HEAP32[$63>>2] = $60;
 STACKTOP = sp;return;
}
function _mrb_str_concat($mrb,$self,$other) {
 $mrb = $mrb|0;
 $self = $self|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0;
 var $other$byval_copy = 0, $s1 = 0, $s2 = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $other$byval_copy = sp + 32|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = HEAP32[$self>>2]|0;
 $s1 = $2;
 $3 = $0;
 $4 = $s1;
 _mrb_str_modify($3,$4);
 $5 = ((($other)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(16);
 if (!($7)) {
  $8 = $0;
  ;HEAP32[$other$byval_copy>>2]=HEAP32[$other>>2]|0;HEAP32[$other$byval_copy+4>>2]=HEAP32[$other+4>>2]|0;
  _mrb_str_to_str($1,$8,$other$byval_copy);
  ;HEAP32[$other>>2]=HEAP32[$1>>2]|0;HEAP32[$other+4>>2]=HEAP32[$1+4>>2]|0;
 }
 $9 = HEAP32[$other>>2]|0;
 $s2 = $9;
 $10 = $s1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 11;
 $13 = $12 & 8;
 $14 = ($13|0)!=(0);
 $15 = $s1;
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >>> 11;
  $18 = $17 & 496;
  $19 = $18 >> 4;
  $35 = $19;
 } else {
  $20 = ((($15)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $35 = $21;
 }
 $22 = $s2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 11;
 $25 = $24 & 8;
 $26 = ($25|0)!=(0);
 $27 = $s2;
 if ($26) {
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 >>> 11;
  $30 = $29 & 496;
  $31 = $30 >> 4;
  $36 = $31;
 } else {
  $32 = ((($27)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $36 = $33;
 }
 $34 = (($35) + ($36))|0;
 $len = $34;
 $37 = HEAP32[$self>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 >>> 11;
 $40 = $39 & 8;
 $41 = ($40|0)!=(0);
 if ($41) {
  $47 = 11;
 } else {
  $42 = HEAP32[$self>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $47 = $45;
 }
 $46 = $len;
 $48 = ($47|0)<($46|0);
 if ($48) {
  $49 = $0;
  $50 = $s1;
  $51 = $len;
  _resize_capa($49,$50,$51);
 }
 $52 = $s1;
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >>> 11;
 $55 = $54 & 8;
 $56 = ($55|0)!=(0);
 $57 = $s1;
 $58 = ((($57)) + 12|0);
 if ($56) {
  $74 = $58;
 } else {
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $74 = $60;
 }
 $61 = $s1;
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >>> 11;
 $64 = $63 & 8;
 $65 = ($64|0)!=(0);
 $66 = $s1;
 if ($65) {
  $67 = HEAP32[$66>>2]|0;
  $68 = $67 >>> 11;
  $69 = $68 & 496;
  $70 = $69 >> 4;
  $75 = $70;
 } else {
  $71 = ((($66)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $75 = $72;
 }
 $73 = (($74) + ($75)|0);
 $76 = $s2;
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 >>> 11;
 $79 = $78 & 8;
 $80 = ($79|0)!=(0);
 $81 = $s2;
 $82 = ((($81)) + 12|0);
 if ($80) {
  $97 = $82;
 } else {
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $97 = $84;
 }
 $85 = $s2;
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 >>> 11;
 $88 = $87 & 8;
 $89 = ($88|0)!=(0);
 $90 = $s2;
 if ($89) {
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 >>> 11;
  $93 = $92 & 496;
  $94 = $93 >> 4;
  $98 = $94;
 } else {
  $95 = ((($90)) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  $98 = $96;
 }
 _memcpy(($73|0),($97|0),($98|0))|0;
 $99 = $s1;
 $100 = HEAP32[$99>>2]|0;
 $101 = $100 >>> 11;
 $102 = $101 & 8;
 $103 = ($102|0)!=(0);
 $104 = $len;
 if ($103) {
  $tmp_n = $104;
  $105 = $s1;
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 >>> 11;
  $108 = $107 & -497;
  $109 = HEAP32[$105>>2]|0;
  $110 = $108 & 2097151;
  $111 = $110 << 11;
  $112 = $109 & 2047;
  $113 = $112 | $111;
  HEAP32[$105>>2] = $113;
  $114 = $tmp_n;
  $115 = $114 << 4;
  $116 = $s1;
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 >>> 11;
  $119 = $118 | $115;
  $120 = HEAP32[$116>>2]|0;
  $121 = $119 & 2097151;
  $122 = $121 << 11;
  $123 = $120 & 2047;
  $124 = $123 | $122;
  HEAP32[$116>>2] = $124;
 } else {
  $125 = $s1;
  $126 = ((($125)) + 12|0);
  HEAP32[$126>>2] = $104;
 }
 $127 = $len;
 $128 = $s1;
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 >>> 11;
 $131 = $130 & 8;
 $132 = ($131|0)!=(0);
 $133 = $s1;
 $134 = ((($133)) + 12|0);
 if ($132) {
  $138 = $134;
  $137 = (($138) + ($127)|0);
  HEAP8[$137>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $138 = $136;
  $137 = (($138) + ($127)|0);
  HEAP8[$137>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _mrb_str_to_str($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy1 = sp + 40|0;
 $str$byval_copy = sp + 32|0;
 $s = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = ((($str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(16);
 if ($5) {
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_check_convert_type($1,$6,$str$byval_copy,16,64878,64885);
 ;HEAP32[$s>>2]=HEAP32[$1>>2]|0;HEAP32[$s+4>>2]=HEAP32[$1+4>>2]|0;
 $7 = ((($s)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$s>>2]|0;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $0;
   ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_convert_type($2,$12,$str$byval_copy1,16,64878,68977);
   ;HEAP32[$s>>2]=HEAP32[$2>>2]|0;HEAP32[$s+4>>2]=HEAP32[$2+4>>2]|0;
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$s>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$s+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_plus($agg$result,$mrb,$a,$b) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $s = 0, $s2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$a>>2]|0;
 $s = $1;
 $2 = HEAP32[$b>>2]|0;
 $s2 = $2;
 $3 = $0;
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $29 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $29 = $15;
 }
 $16 = $s2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = $s2;
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 496;
  $25 = $24 >> 4;
  $30 = $25;
 } else {
  $26 = ((($21)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $30 = $27;
 }
 $28 = (($29) + ($30))|0;
 $31 = (_str_new($3,0,$28)|0);
 $t = $31;
 $32 = $t;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 11;
 $35 = $34 & 8;
 $36 = ($35|0)!=(0);
 $37 = $t;
 $38 = ((($37)) + 12|0);
 if ($36) {
  $62 = $38;
 } else {
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $62 = $40;
 }
 $41 = $s;
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 >>> 11;
 $44 = $43 & 8;
 $45 = ($44|0)!=(0);
 $46 = $s;
 $47 = ((($46)) + 12|0);
 if ($45) {
  $63 = $47;
 } else {
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $63 = $49;
 }
 $50 = $s;
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> 11;
 $53 = $52 & 8;
 $54 = ($53|0)!=(0);
 $55 = $s;
 if ($54) {
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 >>> 11;
  $58 = $57 & 496;
  $59 = $58 >> 4;
  $64 = $59;
 } else {
  $60 = ((($55)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $64 = $61;
 }
 _memcpy(($62|0),($63|0),($64|0))|0;
 $65 = $t;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >>> 11;
 $68 = $67 & 8;
 $69 = ($68|0)!=(0);
 $70 = $t;
 $71 = ((($70)) + 12|0);
 if ($69) {
  $87 = $71;
 } else {
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $87 = $73;
 }
 $74 = $s;
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >>> 11;
 $77 = $76 & 8;
 $78 = ($77|0)!=(0);
 $79 = $s;
 if ($78) {
  $80 = HEAP32[$79>>2]|0;
  $81 = $80 >>> 11;
  $82 = $81 & 496;
  $83 = $82 >> 4;
  $88 = $83;
 } else {
  $84 = ((($79)) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $88 = $85;
 }
 $86 = (($87) + ($88)|0);
 $89 = $s2;
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 >>> 11;
 $92 = $91 & 8;
 $93 = ($92|0)!=(0);
 $94 = $s2;
 $95 = ((($94)) + 12|0);
 if ($93) {
  $110 = $95;
 } else {
  $96 = ((($95)) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $110 = $97;
 }
 $98 = $s2;
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 >>> 11;
 $101 = $100 & 8;
 $102 = ($101|0)!=(0);
 $103 = $s2;
 if ($102) {
  $104 = HEAP32[$103>>2]|0;
  $105 = $104 >>> 11;
  $106 = $105 & 496;
  $107 = $106 >> 4;
  $111 = $107;
  _memcpy(($86|0),($110|0),($111|0))|0;
  $112 = $t;
  _mrb_obj_value_259($agg$result,$112);
  STACKTOP = sp;return;
 } else {
  $108 = ((($103)) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $111 = $109;
  _memcpy(($86|0),($110|0),($111|0))|0;
  $112 = $t;
  _mrb_obj_value_259($agg$result,$112);
  STACKTOP = sp;return;
 }
}
function _mrb_str_cmp($mrb,$str1,$str2) {
 $mrb = $mrb|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $retval = 0, $s1 = 0;
 var $s2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = HEAP32[$str1>>2]|0;
 $s1 = $2;
 $3 = HEAP32[$str2>>2]|0;
 $s2 = $3;
 $4 = $s1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s1;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $28 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $28 = $15;
 }
 $16 = $s2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = $s2;
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 496;
  $25 = $24 >> 4;
  $30 = $25;
 } else {
  $26 = ((($21)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $30 = $27;
 }
 $29 = ($28|0)>($30|0);
 do {
  if ($29) {
   $31 = $s2;
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 >>> 11;
   $34 = $33 & 8;
   $35 = ($34|0)!=(0);
   $36 = $s2;
   if ($35) {
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 >>> 11;
    $39 = $38 & 496;
    $40 = $39 >> 4;
    $55 = $40;
    break;
   } else {
    $41 = ((($36)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $55 = $42;
    break;
   }
  } else {
   $43 = $s1;
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 11;
   $46 = $45 & 8;
   $47 = ($46|0)!=(0);
   $48 = $s1;
   if ($47) {
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 >>> 11;
    $51 = $50 & 496;
    $52 = $51 >> 4;
    $55 = $52;
    break;
   } else {
    $53 = ((($48)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $54;
    break;
   }
  }
 } while(0);
 $len = $55;
 $56 = $s1;
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 >>> 11;
 $59 = $58 & 8;
 $60 = ($59|0)!=(0);
 $61 = $s1;
 $62 = ((($61)) + 12|0);
 if ($60) {
  $75 = $62;
 } else {
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $75 = $64;
 }
 $65 = $s2;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >>> 11;
 $68 = $67 & 8;
 $69 = ($68|0)!=(0);
 $70 = $s2;
 $71 = ((($70)) + 12|0);
 if ($69) {
  $76 = $71;
 } else {
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $76 = $73;
 }
 $74 = $len;
 $77 = (_memcmp($75,$76,$74)|0);
 $retval = $77;
 $78 = $retval;
 $79 = ($78|0)==(0);
 if (!($79)) {
  $134 = $retval;
  $135 = ($134|0)>(0);
  if ($135) {
   $0 = 1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  } else {
   $0 = -1;
   $136 = $0;
   STACKTOP = sp;return ($136|0);
  }
 }
 $80 = $s1;
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 >>> 11;
 $83 = $82 & 8;
 $84 = ($83|0)!=(0);
 $85 = $s1;
 if ($84) {
  $86 = HEAP32[$85>>2]|0;
  $87 = $86 >>> 11;
  $88 = $87 & 496;
  $89 = $88 >> 4;
  $104 = $89;
 } else {
  $90 = ((($85)) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $104 = $91;
 }
 $92 = $s2;
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 >>> 11;
 $95 = $94 & 8;
 $96 = ($95|0)!=(0);
 $97 = $s2;
 if ($96) {
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 >>> 11;
  $100 = $99 & 496;
  $101 = $100 >> 4;
  $106 = $101;
 } else {
  $102 = ((($97)) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $106 = $103;
 }
 $105 = ($104|0)==($106|0);
 if ($105) {
  $0 = 0;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $107 = $s1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 >>> 11;
 $110 = $109 & 8;
 $111 = ($110|0)!=(0);
 $112 = $s1;
 if ($111) {
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 >>> 11;
  $115 = $114 & 496;
  $116 = $115 >> 4;
  $131 = $116;
 } else {
  $117 = ((($112)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $131 = $118;
 }
 $119 = $s2;
 $120 = HEAP32[$119>>2]|0;
 $121 = $120 >>> 11;
 $122 = $121 & 8;
 $123 = ($122|0)!=(0);
 $124 = $s2;
 if ($123) {
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 >>> 11;
  $127 = $126 & 496;
  $128 = $127 >> 4;
  $133 = $128;
 } else {
  $129 = ((($124)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $133 = $130;
 }
 $132 = ($131|0)>($133|0);
 if ($132) {
  $0 = 1;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 } else {
  $0 = -1;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 return (0)|0;
}
function _mrb_str_equal($mrb,$str1,$str2) {
 $mrb = $mrb|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str1$byval_copy = 0, $str1$byval_copy3 = 0, $str2$byval_copy = 0, $str2$byval_copy1 = 0, $str2$byval_copy2 = 0, $str2$byval_copy4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy4 = sp + 64|0;
 $str1$byval_copy3 = sp + 56|0;
 $str1$byval_copy = sp + 48|0;
 $str2$byval_copy2 = sp + 40|0;
 $str2$byval_copy1 = sp + 32|0;
 $str2$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $mrb;
 $3 = ((($str2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $6 = ((($str2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(16);
 if ($8) {
  $22 = $1;
  ;HEAP32[$str1$byval_copy3>>2]=HEAP32[$str1>>2]|0;HEAP32[$str1$byval_copy3+4>>2]=HEAP32[$str1+4>>2]|0;
  ;HEAP32[$str2$byval_copy4>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy4+4>>2]=HEAP32[$str2+4>>2]|0;
  $23 = (_str_eql($22,$str1$byval_copy3,$str2$byval_copy4)|0);
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = ((($str2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$str2>>2]|0;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $0 = 0;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $14 = $1;
 $15 = $1;
 $16 = (_mrb_intern_static($15,64885,6)|0);
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 $17 = (_mrb_respond_to($14,$str2$byval_copy,$16)|0);
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $1;
  ;HEAP32[$str2$byval_copy1>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy1+4>>2]=HEAP32[$str2+4>>2]|0;
  _mrb_funcall($2,$19,$str2$byval_copy1,64885,0,$vararg_buffer);
  ;HEAP32[$str2>>2]=HEAP32[$2>>2]|0;HEAP32[$str2+4>>2]=HEAP32[$2+4>>2]|0;
  $20 = $1;
  ;HEAP32[$str2$byval_copy2>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy2+4>>2]=HEAP32[$str2+4>>2]|0;
  ;HEAP32[$str1$byval_copy>>2]=HEAP32[$str1>>2]|0;HEAP32[$str1$byval_copy+4>>2]=HEAP32[$str1+4>>2]|0;
  $21 = (_mrb_equal($20,$str2$byval_copy2,$str1$byval_copy)|0);
  $0 = $21;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _str_eql($mrb,$str1,$str2) {
 $mrb = $mrb|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = HEAP32[$str1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str1>>2]|0;
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 11;
  $10 = $9 & 496;
  $11 = $10 >> 4;
  $14 = $11;
 } else {
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 }
 $len = $14;
 $15 = $len;
 $16 = HEAP32[$str2>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$str2>>2]|0;
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 496;
  $25 = $24 >> 4;
  $29 = $25;
 } else {
  $26 = ((($21)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $29 = $27;
 }
 $28 = ($15|0)!=($29|0);
 if ($28) {
  $0 = 0;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $30 = HEAP32[$str1>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 11;
 $33 = $32 & 8;
 $34 = ($33|0)!=(0);
 $35 = HEAP32[$str1>>2]|0;
 $36 = ((($35)) + 12|0);
 if ($34) {
  $49 = $36;
 } else {
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $49 = $38;
 }
 $39 = HEAP32[$str2>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 11;
 $42 = $41 & 8;
 $43 = ($42|0)!=(0);
 $44 = HEAP32[$str2>>2]|0;
 $45 = ((($44)) + 12|0);
 if ($43) {
  $50 = $45;
 } else {
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $50 = $47;
 }
 $48 = $len;
 $51 = (_memcmp($49,$50,$48)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $0 = 1;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 } else {
  $0 = 0;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _mrb_string_value_ptr($mrb,$ptr) {
 $mrb = $mrb|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$byval_copy = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptr$byval_copy = sp + 16|0;
 $str = sp;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$ptr$byval_copy>>2]=HEAP32[$ptr>>2]|0;HEAP32[$ptr$byval_copy+4>>2]=HEAP32[$ptr+4>>2]|0;
 _mrb_str_to_str($str,$1,$ptr$byval_copy);
 $2 = HEAP32[$str>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str>>2]|0;
 $8 = ((($7)) + 12|0);
 if ($6) {
  $11 = $8;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _mrb_noregexp($mrb,$self) {
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = (_mrb_class_get($2,64809)|0);
 _mrb_raise($1,$3,55484);
 // unreachable;
}
function _mrb_regexp_check($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy1 = sp + 16|0;
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $2 = (_mrb_regexp_p($1,$obj$byval_copy)|0);
 $3 = ($2<<24>>24)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_noregexp($4,$obj$byval_copy1);
 STACKTOP = sp;return;
}
function _mrb_str_dup($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $dup = 0, $s = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = (_str_new($2,0,0)|0);
 $dup = $3;
 $4 = $0;
 $5 = $dup;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _str_with_class($4,$5,$str$byval_copy);
 $6 = $0;
 $7 = $dup;
 $8 = $s;
 _str_replace($agg$result,$6,$7,$8);
 STACKTOP = sp;return;
}
function _str_with_class($mrb,$s,$obj) {
 $mrb = $mrb|0;
 $s = $s|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = HEAP32[$obj>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _str_replace($agg$result,$mrb,$s1,$s2) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s1;
 $2 = $s2;
 $3 = $0;
 $4 = $1;
 _check_frozen($3,$4);
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 11;
 $8 = $7 & 8;
 $9 = ($8|0)!=(0);
 $10 = $2;
 if ($9) {
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 11;
  $13 = $12 & 496;
  $14 = $13 >> 4;
  $17 = $14;
 } else {
  $15 = ((($10)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 }
 $len = $17;
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 & 1;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $0;
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  _str_decref($23,$27);
 } else {
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 11;
  $31 = $30 & 8;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   $33 = $1;
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 >>> 11;
   $36 = $35 & 2;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = $0;
    $39 = $1;
    $40 = ((($39)) + 12|0);
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    _mrb_free($38,$42);
   }
  }
 }
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 11;
 $46 = $45 & -3;
 $47 = HEAP32[$43>>2]|0;
 $48 = $46 & 2097151;
 $49 = $48 << 11;
 $50 = $47 & 2047;
 $51 = $50 | $49;
 HEAP32[$43>>2] = $51;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >>> 11;
 $55 = $54 & 1;
 $56 = ($55|0)!=(0);
 do {
  if (!($56)) {
   $99 = $len;
   $100 = ($99|0)<=(11);
   if (!($100)) {
    $153 = $0;
    $154 = $2;
    _str_make_shared($153,$154);
    break;
   }
   $101 = $1;
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 >>> 11;
   $104 = $103 & -2;
   $105 = HEAP32[$101>>2]|0;
   $106 = $104 & 2097151;
   $107 = $106 << 11;
   $108 = $105 & 2047;
   $109 = $108 | $107;
   HEAP32[$101>>2] = $109;
   $110 = $1;
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 >>> 11;
   $113 = $112 | 8;
   $114 = HEAP32[$110>>2]|0;
   $115 = $113 & 2097151;
   $116 = $115 << 11;
   $117 = $114 & 2047;
   $118 = $117 | $116;
   HEAP32[$110>>2] = $118;
   $119 = $1;
   $120 = ((($119)) + 12|0);
   $121 = $2;
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 >>> 11;
   $124 = $123 & 8;
   $125 = ($124|0)!=(0);
   $126 = $2;
   $127 = ((($126)) + 12|0);
   if ($125) {
    $131 = $127;
   } else {
    $128 = ((($127)) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    $131 = $129;
   }
   $130 = $len;
   _memcpy(($120|0),($131|0),($130|0))|0;
   $132 = $len;
   $tmp_n = $132;
   $133 = $1;
   $134 = HEAP32[$133>>2]|0;
   $135 = $134 >>> 11;
   $136 = $135 & -497;
   $137 = HEAP32[$133>>2]|0;
   $138 = $136 & 2097151;
   $139 = $138 << 11;
   $140 = $137 & 2047;
   $141 = $140 | $139;
   HEAP32[$133>>2] = $141;
   $142 = $tmp_n;
   $143 = $142 << 4;
   $144 = $1;
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 >>> 11;
   $147 = $146 | $143;
   $148 = HEAP32[$144>>2]|0;
   $149 = $147 & 2097151;
   $150 = $149 << 11;
   $151 = $148 & 2047;
   $152 = $151 | $150;
   HEAP32[$144>>2] = $152;
   $155 = $1;
   _mrb_obj_value_259($agg$result,$155);
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 >>> 11;
 $60 = $59 & -505;
 $61 = HEAP32[$57>>2]|0;
 $62 = $60 & 2097151;
 $63 = $62 << 11;
 $64 = $61 & 2047;
 $65 = $64 | $63;
 HEAP32[$57>>2] = $65;
 $66 = $2;
 $67 = ((($66)) + 12|0);
 $68 = ((($67)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $1;
 $71 = ((($70)) + 12|0);
 $72 = ((($71)) + 8|0);
 HEAP32[$72>>2] = $69;
 $73 = $len;
 $74 = $1;
 $75 = ((($74)) + 12|0);
 HEAP32[$75>>2] = $73;
 $76 = $2;
 $77 = ((($76)) + 12|0);
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $1;
 $81 = ((($80)) + 12|0);
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = $79;
 $83 = $1;
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 >>> 11;
 $86 = $85 | 1;
 $87 = HEAP32[$83>>2]|0;
 $88 = $86 & 2097151;
 $89 = $88 << 11;
 $90 = $87 & 2047;
 $91 = $90 | $89;
 HEAP32[$83>>2] = $91;
 $92 = $1;
 $93 = ((($92)) + 12|0);
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + 1)|0;
 HEAP32[$96>>2] = $98;
 $155 = $1;
 _mrb_obj_value_259($agg$result,$155);
 STACKTOP = sp;return;
}
function _str_make_shared($mrb,$s) {
 $mrb = $mrb|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $shared = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = (_mrb_malloc($7,16)|0);
 $shared = $8;
 $9 = $shared;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 1;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 do {
  if ($15) {
   $19 = $18 & 496;
   $20 = $19 >> 4;
   $len = $20;
   $21 = $0;
   $22 = $len;
   $23 = (($22) + 1)|0;
   $24 = (_mrb_malloc($21,$23)|0);
   $tmp = $24;
   $25 = $tmp;
   $26 = $1;
   $27 = ((($26)) + 12|0);
   $28 = $len;
   _memcpy(($25|0),($27|0),($28|0))|0;
   $29 = $len;
   $30 = $tmp;
   $31 = (($30) + ($29)|0);
   HEAP8[$31>>0] = 0;
   $32 = $1;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 11;
   $35 = $34 & -505;
   $36 = HEAP32[$32>>2]|0;
   $37 = $35 & 2097151;
   $38 = $37 << 11;
   $39 = $36 & 2047;
   $40 = $39 | $38;
   HEAP32[$32>>2] = $40;
   $41 = $tmp;
   $42 = $1;
   $43 = ((($42)) + 12|0);
   $44 = ((($43)) + 8|0);
   HEAP32[$44>>2] = $41;
   $45 = $len;
   $46 = $1;
   $47 = ((($46)) + 12|0);
   HEAP32[$47>>2] = $45;
   $48 = $shared;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49 & -2;
   HEAP8[$48>>0] = $50;
   $51 = $1;
   $52 = ((($51)) + 12|0);
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $shared;
   $56 = ((($55)) + 8|0);
   HEAP32[$56>>2] = $54;
  } else {
   $57 = $18 & 2;
   $58 = ($57|0)!=(0);
   $59 = $shared;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 & -2;
   if ($58) {
    $62 = $61 | 1;
    HEAP8[$59>>0] = $62;
    $63 = $1;
    $64 = ((($63)) + 12|0);
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $shared;
    $68 = ((($67)) + 8|0);
    HEAP32[$68>>2] = $66;
    $69 = $1;
    $70 = HEAP32[$69>>2]|0;
    $71 = $70 >>> 11;
    $72 = $71 & -3;
    $73 = HEAP32[$69>>2]|0;
    $74 = $72 & 2097151;
    $75 = $74 << 11;
    $76 = $73 & 2047;
    $77 = $76 | $75;
    HEAP32[$69>>2] = $77;
    break;
   }
   HEAP8[$59>>0] = $61;
   $78 = $1;
   $79 = ((($78)) + 12|0);
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $1;
   $83 = ((($82)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($81|0)>($84|0);
   if ($85) {
    $86 = $0;
    $87 = $1;
    $88 = ((($87)) + 12|0);
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $1;
    $92 = ((($91)) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + 1)|0;
    $95 = (_mrb_realloc($86,$90,$94)|0);
    $96 = $shared;
    $97 = ((($96)) + 8|0);
    HEAP32[$97>>2] = $95;
    $98 = $1;
    $99 = ((($98)) + 12|0);
    $100 = ((($99)) + 8|0);
    HEAP32[$100>>2] = $95;
    break;
   } else {
    $101 = $1;
    $102 = ((($101)) + 12|0);
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $shared;
    $106 = ((($105)) + 8|0);
    HEAP32[$106>>2] = $104;
    break;
   }
  }
 } while(0);
 $107 = $1;
 $108 = ((($107)) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $shared;
 $111 = ((($110)) + 12|0);
 HEAP32[$111>>2] = $109;
 $112 = $shared;
 $113 = $1;
 $114 = ((($113)) + 12|0);
 $115 = ((($114)) + 4|0);
 HEAP32[$115>>2] = $112;
 $116 = $1;
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 >>> 11;
 $119 = $118 | 1;
 $120 = HEAP32[$116>>2]|0;
 $121 = $119 & 2097151;
 $122 = $121 << 11;
 $123 = $120 & 2047;
 $124 = $123 | $122;
 HEAP32[$116>>2] = $124;
 STACKTOP = sp;return;
}
function _str_substr($agg$result,$mrb,$str,$beg,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $beg = $beg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clen = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy1 = sp + 24|0;
 $str$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $beg;
 $2 = $len;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $3 = (_utf8_strlen($str$byval_copy,-1)|0);
 $clen = $3;
 $4 = $2;
 $5 = ($4|0)<(0);
 if ($5) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $6 = $clen;
 $7 = ($6|0)==(0);
 if ($7) {
  $2 = 0;
 } else {
  $8 = $1;
  $9 = ($8|0)<(0);
  if ($9) {
   $10 = $clen;
   $11 = $1;
   $12 = (($10) + ($11))|0;
   $1 = $12;
  }
 }
 $13 = $1;
 $14 = $clen;
 $15 = ($13|0)>($14|0);
 if ($15) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $clen;
  $19 = $1;
  $20 = (($19) + ($18))|0;
  $1 = $20;
  $21 = $1;
  $22 = ($21|0)<(0);
  if ($22) {
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
 }
 $23 = $1;
 $24 = $2;
 $25 = (($23) + ($24))|0;
 $26 = $clen;
 $27 = ($25|0)>($26|0);
 if ($27) {
  $28 = $clen;
  $29 = $1;
  $30 = (($28) - ($29))|0;
  $2 = $30;
 }
 $31 = $2;
 $32 = ($31|0)<=(0);
 if ($32) {
  $2 = 0;
 }
 $33 = $0;
 $34 = $1;
 $35 = $2;
 ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
 _str_subseq($agg$result,$33,$str$byval_copy1,$34,$35);
 STACKTOP = sp;return;
}
function _utf8_strlen($str,$len) {
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $e = 0, $p = 0, $total = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $total = 0;
 $1 = HEAP32[$str>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$str>>2]|0;
 $7 = ((($6)) + 12|0);
 if ($5) {
  $10 = $7;
 } else {
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
 }
 $p = $10;
 $11 = $p;
 $e = $11;
 $12 = $0;
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $14 = HEAP32[$str>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 >>> 11;
   $17 = $16 & 8;
   $18 = ($17|0)!=(0);
   $19 = HEAP32[$str>>2]|0;
   if ($18) {
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 >>> 11;
    $22 = $21 & 496;
    $23 = $22 >> 4;
    $29 = $23;
    break;
   } else {
    $24 = ((($19)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $29 = $25;
    break;
   }
  } else {
   $26 = $0;
   $29 = $26;
  }
 } while(0);
 $27 = $e;
 $28 = (($27) + ($29)|0);
 $e = $28;
 while(1) {
  $30 = $p;
  $31 = $e;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $p;
  $34 = $e;
  $35 = (_utf8len($33,$34)|0);
  $36 = $p;
  $37 = (($36) + ($35)|0);
  $p = $37;
  $38 = $total;
  $39 = (($38) + 1)|0;
  $total = $39;
 }
 $40 = $total;
 STACKTOP = sp;return ($40|0);
}
function _utf8len($p,$e) {
 $p = $p|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $e;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (55513 + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $len = $8;
 $9 = $1;
 $10 = $len;
 $11 = (($9) + ($10)|0);
 $12 = $2;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $i = 1;
 while(1) {
  $14 = $i;
  $15 = $len;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $i;
  $18 = $1;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $21 & 192;
  $23 = ($22|0)!=(128);
  if ($23) {
   label = 6;
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  $26 = $len;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _mrb_nil_value_282($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _str_subseq($agg$result,$mrb,$str,$beg,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $beg = $beg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, $str$byval_copy2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy2 = sp + 32|0;
 $str$byval_copy1 = sp + 24|0;
 $str$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $beg;
 $2 = $len;
 $3 = $1;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $4 = (_chars2bytes($str$byval_copy,0,$3)|0);
 $1 = $4;
 $5 = $1;
 $6 = $2;
 ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
 $7 = (_chars2bytes($str$byval_copy1,$5,$6)|0);
 $2 = $7;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
 _byte_subseq($agg$result,$8,$str$byval_copy2,$9,$10);
 STACKTOP = sp;return;
}
function _chars2bytes($s,$off,$idx) {
 $s = $s|0;
 $off = $off|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $e = 0, $i = 0, $n = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $off;
 $1 = $idx;
 $2 = HEAP32[$s>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$s>>2]|0;
 $8 = ((($7)) + 12|0);
 if ($6) {
  $13 = $8;
 } else {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $11 = $0;
 $12 = (($13) + ($11)|0);
 $p = $12;
 $14 = HEAP32[$s>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 11;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$s>>2]|0;
 $20 = ((($19)) + 12|0);
 if ($18) {
  $36 = $20;
 } else {
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $36 = $22;
 }
 $23 = HEAP32[$s>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 11;
 $26 = $25 & 8;
 $27 = ($26|0)!=(0);
 $28 = HEAP32[$s>>2]|0;
 if ($27) {
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 11;
  $31 = $30 & 496;
  $32 = $31 >> 4;
  $37 = $32;
 } else {
  $33 = ((($28)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $37 = $34;
 }
 $35 = (($36) + ($37)|0);
 $e = $35;
 $i = 0;
 $b = 0;
 while(1) {
  $38 = $p;
  $39 = $e;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   label = 14;
   break;
  }
  $41 = $i;
  $42 = $1;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   label = 14;
   break;
  }
  $44 = $p;
  $45 = $e;
  $46 = (_utf8len($44,$45)|0);
  $n = $46;
  $47 = $n;
  $48 = $b;
  $49 = (($48) + ($47))|0;
  $b = $49;
  $50 = $n;
  $51 = $p;
  $52 = (($51) + ($50)|0);
  $p = $52;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 if ((label|0) == 14) {
  $55 = $b;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _byte_subseq($agg$result,$mrb,$str,$beg,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $beg = $beg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $orig = 0, $s = 0, $shared = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $beg;
 $2 = $len;
 $3 = HEAP32[$str>>2]|0;
 $orig = $3;
 $4 = $orig;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $0;
 $10 = $orig;
 if ($8) {
  $11 = ((($10)) + 12|0);
  $12 = $1;
  $13 = (($11) + ($12)|0);
  $14 = $2;
  $15 = (_str_new($9,$13,$14)|0);
  $s = $15;
  $54 = $s;
  _mrb_obj_value_259($agg$result,$54);
  STACKTOP = sp;return;
 } else {
  _str_make_shared($9,$10);
  $16 = $orig;
  $17 = ((($16)) + 12|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $shared = $19;
  $20 = $0;
  $21 = $0;
  $22 = ((($21)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_mrb_obj_alloc($20,16,$23)|0);
  $s = $24;
  $25 = $orig;
  $26 = ((($25)) + 12|0);
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $1;
  $30 = (($28) + ($29)|0);
  $31 = $s;
  $32 = ((($31)) + 12|0);
  $33 = ((($32)) + 8|0);
  HEAP32[$33>>2] = $30;
  $34 = $2;
  $35 = $s;
  $36 = ((($35)) + 12|0);
  HEAP32[$36>>2] = $34;
  $37 = $shared;
  $38 = $s;
  $39 = ((($38)) + 12|0);
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = $37;
  $41 = $s;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 >>> 11;
  $44 = $43 | 1;
  $45 = HEAP32[$41>>2]|0;
  $46 = $44 & 2097151;
  $47 = $46 << 11;
  $48 = $45 & 2047;
  $49 = $48 | $47;
  HEAP32[$41>>2] = $49;
  $50 = $shared;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$51>>2] = $53;
  $54 = $s;
  _mrb_obj_value_259($agg$result,$54);
  STACKTOP = sp;return;
 }
}
function _mrb_str_hash($mrb,$str) {
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0;
 var $len = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = $s;
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 11;
  $10 = $9 & 496;
  $11 = $10 >> 4;
  $14 = $11;
 } else {
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 }
 $len = $14;
 $15 = $s;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 8;
 $19 = ($18|0)!=(0);
 $20 = $s;
 $21 = ((($20)) + 12|0);
 if ($19) {
  $24 = $21;
 } else {
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 }
 $p = $24;
 $key = 0;
 while(1) {
  $25 = $len;
  $26 = (($25) + -1)|0;
  $len = $26;
  $27 = ($25|0)!=(0);
  $28 = $key;
  if (!($27)) {
   break;
  }
  $29 = ($28*65599)|0;
  $30 = $p;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (($29) + ($32))|0;
  $key = $33;
  $34 = $p;
  $35 = ((($34)) + 1|0);
  $p = $35;
 }
 $36 = $key;
 $37 = $36 >> 5;
 $38 = (($28) + ($37))|0;
 STACKTOP = sp;return ($38|0);
}
function _mrb_str_intern($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $2 = (_mrb_intern_str($1,$self$byval_copy)|0);
 _mrb_symbol_value($agg$result,$2);
 STACKTOP = sp;return;
}
function _mrb_symbol_value($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_as_string($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, $str = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy1 = sp + 40|0;
 $obj$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($obj)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(16);
 if ($4) {
  ;HEAP32[$agg$result>>2]=HEAP32[$obj>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$obj+4>>2]|0;
  STACKTOP = sp;return;
 }
 $5 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_funcall($1,$5,$obj$byval_copy,68977,0,$vararg_buffer);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $6 = ((($str)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(16);
 if ($8) {
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $9 = $0;
  ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_any_to_s($agg$result,$9,$obj$byval_copy1);
  STACKTOP = sp;return;
 }
}
function _mrb_ptr_to_str($agg$result,$mrb,$p) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $c = 0, $n = 0, $p1 = 0, $p2 = 0, $p_str = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $1;
 $3 = $2;
 $n = $3;
 $4 = $0;
 $5 = (_str_new($4,0,10)|0);
 $p_str = $5;
 $6 = $p_str;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & 8;
 $10 = ($9|0)!=(0);
 $11 = $p_str;
 $12 = ((($11)) + 12|0);
 if ($10) {
  $15 = $12;
 } else {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
 }
 $p1 = $15;
 $16 = $p1;
 $17 = ((($16)) + 1|0);
 $p1 = $17;
 HEAP8[$16>>0] = 48;
 $18 = $p1;
 $19 = ((($18)) + 1|0);
 $p1 = $19;
 HEAP8[$18>>0] = 120;
 $20 = $p1;
 $p2 = $20;
 while(1) {
  $21 = $n;
  $22 = (($21>>>0) % 16)&-1;
  $23 = (55345 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $p2;
  $26 = ((($25)) + 1|0);
  $p2 = $26;
  HEAP8[$25>>0] = $24;
  $27 = $n;
  $28 = (($27>>>0) / 16)&-1;
  $n = $28;
  $29 = $n;
  $30 = ($29>>>0)>(0);
  if (!($30)) {
   break;
  }
 }
 $31 = $p2;
 HEAP8[$31>>0] = 0;
 $32 = $p_str;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 11;
 $35 = $34 & 8;
 $36 = ($35|0)!=(0);
 $37 = $p2;
 $38 = $p_str;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 11;
 $41 = $40 & 8;
 $42 = ($41|0)!=(0);
 $43 = $p_str;
 $44 = ((($43)) + 12|0);
 if ($36) {
  if ($42) {
   $48 = $44;
  } else {
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $48 = $46;
  }
  $47 = $37;
  $49 = $48;
  $50 = (($47) - ($49))|0;
  $tmp_n = $50;
  $51 = $p_str;
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 >>> 11;
  $54 = $53 & -497;
  $55 = HEAP32[$51>>2]|0;
  $56 = $54 & 2097151;
  $57 = $56 << 11;
  $58 = $55 & 2047;
  $59 = $58 | $57;
  HEAP32[$51>>2] = $59;
  $60 = $tmp_n;
  $61 = $60 << 4;
  $62 = $p_str;
  $63 = HEAP32[$62>>2]|0;
  $64 = $63 >>> 11;
  $65 = $64 | $61;
  $66 = HEAP32[$62>>2]|0;
  $67 = $65 & 2097151;
  $68 = $67 << 11;
  $69 = $66 & 2047;
  $70 = $69 | $68;
  HEAP32[$62>>2] = $70;
 } else {
  if ($42) {
   $74 = $44;
  } else {
   $71 = ((($44)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $74 = $72;
  }
  $73 = $37;
  $75 = $74;
  $76 = (($73) - ($75))|0;
  $77 = $p_str;
  $78 = ((($77)) + 12|0);
  HEAP32[$78>>2] = $76;
 }
 while(1) {
  $79 = $p1;
  $80 = $p2;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $p1;
  $83 = HEAP8[$82>>0]|0;
  $c = $83;
  $84 = $p2;
  $85 = ((($84)) + -1|0);
  $p2 = $85;
  $86 = HEAP8[$85>>0]|0;
  $87 = $p1;
  $88 = ((($87)) + 1|0);
  $p1 = $88;
  HEAP8[$87>>0] = $86;
  $89 = $c;
  $90 = $p2;
  HEAP8[$90>>0] = $89;
 }
 $91 = $p_str;
 _mrb_obj_value_259($agg$result,$91);
 STACKTOP = sp;return;
}
function _mrb_check_string_type($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_check_convert_type($agg$result,$1,$str$byval_copy,16,64878,64885);
 STACKTOP = sp;return;
}
function _mrb_cstr_to_inum($agg$result,$mrb,$str,$base,$badcheck) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $base = $base|0;
 $badcheck = $badcheck|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $sign = 0, $uscore = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $n = sp;
 $4 = sp + 48|0;
 $5 = sp + 40|0;
 $6 = sp + 32|0;
 $0 = $mrb;
 $1 = $str;
 $2 = $base;
 $3 = $badcheck;
 $sign = 1;
 $7 = $n;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   while(1) {
    $15 = $1;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)==(32);
    if ($18) {
     $319 = 1;
    } else {
     $19 = $1;
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = (($21) - 9)|0;
     $23 = ($22>>>0)<(5);
     $319 = $23;
    }
    $24 = $1;
    if (!($319)) {
     break;
    }
    $25 = ((($24)) + 1|0);
    $1 = $25;
   }
   $26 = HEAP8[$24>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)==(43);
   $29 = $1;
   if ($28) {
    $30 = ((($29)) + 1|0);
    $1 = $30;
   } else {
    $31 = HEAP8[$29>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(45);
    if ($33) {
     $34 = $1;
     $35 = ((($34)) + 1|0);
     $1 = $35;
     $sign = 0;
    }
   }
   $36 = $1;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = ($38|0)==(43);
   if (!($39)) {
    $40 = $1;
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    $43 = ($42|0)==(45);
    if (!($43)) {
     $46 = $2;
     $47 = ($46|0)<=(0);
     L17: do {
      if ($47) {
       $48 = $1;
       $49 = HEAP8[$48>>0]|0;
       $50 = $49 << 24 >> 24;
       $51 = ($50|0)==(48);
       if (!($51)) {
        $56 = $2;
        $57 = ($56|0)<(-1);
        if ($57) {
         $58 = $2;
         $59 = (0 - ($58))|0;
         $2 = $59;
         break;
        } else {
         $2 = 10;
         break;
        }
       }
       $52 = $1;
       $53 = ((($52)) + 1|0);
       $54 = HEAP8[$53>>0]|0;
       $55 = $54 << 24 >> 24;
       switch ($55|0) {
       case 88: case 120:  {
        $2 = 16;
        break L17;
        break;
       }
       case 66: case 98:  {
        $2 = 2;
        break L17;
        break;
       }
       case 79: case 111:  {
        $2 = 8;
        break L17;
        break;
       }
       case 68: case 100:  {
        $2 = 10;
        break L17;
        break;
       }
       default: {
        $2 = 8;
        break L17;
       }
       }
      }
     } while(0);
     $60 = $2;
     L32: do {
      switch ($60|0) {
      case 2:  {
       $61 = $1;
       $62 = HEAP8[$61>>0]|0;
       $63 = $62 << 24 >> 24;
       $64 = ($63|0)==(48);
       if ($64) {
        $65 = $1;
        $66 = ((($65)) + 1|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = $67 << 24 >> 24;
        $69 = ($68|0)==(98);
        if (!($69)) {
         $70 = $1;
         $71 = ((($70)) + 1|0);
         $72 = HEAP8[$71>>0]|0;
         $73 = $72 << 24 >> 24;
         $74 = ($73|0)==(66);
         if (!($74)) {
          break L32;
         }
        }
        $75 = $1;
        $76 = ((($75)) + 2|0);
        $1 = $76;
       }
       break;
      }
      case 15: case 14: case 13: case 12: case 11: case 9: case 7: case 6: case 5: case 4: case 3:  {
       break;
      }
      case 8:  {
       $77 = $1;
       $78 = HEAP8[$77>>0]|0;
       $79 = $78 << 24 >> 24;
       $80 = ($79|0)==(48);
       if ($80) {
        $81 = $1;
        $82 = ((($81)) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83 << 24 >> 24;
        $85 = ($84|0)==(111);
        if (!($85)) {
         $86 = $1;
         $87 = ((($86)) + 1|0);
         $88 = HEAP8[$87>>0]|0;
         $89 = $88 << 24 >> 24;
         $90 = ($89|0)==(79);
         if (!($90)) {
          break L32;
         }
        }
        $91 = $1;
        $92 = ((($91)) + 2|0);
        $1 = $92;
       }
       break;
      }
      case 10:  {
       $93 = $1;
       $94 = HEAP8[$93>>0]|0;
       $95 = $94 << 24 >> 24;
       $96 = ($95|0)==(48);
       if ($96) {
        $97 = $1;
        $98 = ((($97)) + 1|0);
        $99 = HEAP8[$98>>0]|0;
        $100 = $99 << 24 >> 24;
        $101 = ($100|0)==(100);
        if (!($101)) {
         $102 = $1;
         $103 = ((($102)) + 1|0);
         $104 = HEAP8[$103>>0]|0;
         $105 = $104 << 24 >> 24;
         $106 = ($105|0)==(68);
         if (!($106)) {
          break L32;
         }
        }
        $107 = $1;
        $108 = ((($107)) + 2|0);
        $1 = $108;
       }
       break;
      }
      case 16:  {
       $109 = $1;
       $110 = HEAP8[$109>>0]|0;
       $111 = $110 << 24 >> 24;
       $112 = ($111|0)==(48);
       if ($112) {
        $113 = $1;
        $114 = ((($113)) + 1|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = $115 << 24 >> 24;
        $117 = ($116|0)==(120);
        if (!($117)) {
         $118 = $1;
         $119 = ((($118)) + 1|0);
         $120 = HEAP8[$119>>0]|0;
         $121 = $120 << 24 >> 24;
         $122 = ($121|0)==(88);
         if (!($122)) {
          break L32;
         }
        }
        $123 = $1;
        $124 = ((($123)) + 2|0);
        $1 = $124;
       }
       break;
      }
      default: {
       $125 = $2;
       $126 = ($125|0)<(2);
       $127 = $2;
       $128 = (36)<($127|0);
       $or$cond = $126 | $128;
       if ($or$cond) {
        $129 = $0;
        $130 = $0;
        $131 = (_mrb_class_get($130,68855)|0);
        $132 = $2;
        _mrb_fixnum_value_289($4,$132);
        ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
        _mrb_raisef($129,$131,55769,$vararg_buffer);
        // unreachable;
       }
      }
      }
     } while(0);
     $133 = $1;
     $134 = HEAP8[$133>>0]|0;
     $135 = $134 << 24 >> 24;
     $136 = ($135|0)==(48);
     do {
      if ($136) {
       $uscore = 0;
       while(1) {
        $137 = $1;
        $138 = ((($137)) + 1|0);
        $1 = $138;
        $139 = HEAP8[$138>>0]|0;
        $140 = $139 << 24 >> 24;
        $c = $140;
        $141 = ($140|0)==(48);
        $142 = $c;
        $143 = ($142|0)==(95);
        $144 = $141 ? 1 : $143;
        if (!($144)) {
         break;
        }
        $145 = $c;
        $146 = ($145|0)==(95);
        if ($146) {
         $147 = $uscore;
         $148 = (($147) + 1)|0;
         $uscore = $148;
         $149 = ($148|0)>=(2);
         if ($149) {
          break;
         } else {
          continue;
         }
        } else {
         $uscore = 0;
         continue;
        }
       }
       $150 = $1;
       $151 = HEAP8[$150>>0]|0;
       $152 = $151 << 24 >> 24;
       $c = $152;
       $153 = ($152|0)==(0);
       $154 = $c;
       $155 = ($154|0)==(32);
       $or$cond3 = $153 | $155;
       if (!($or$cond3)) {
        $156 = $c;
        $157 = (($156) - 9)|0;
        $158 = ($157>>>0)<(5);
        if (!($158)) {
         break;
        }
       }
       $159 = $1;
       $160 = ((($159)) + -1|0);
       $1 = $160;
      }
     } while(0);
     $161 = $1;
     $162 = HEAP8[$161>>0]|0;
     $163 = $162 << 24 >> 24;
     $c = $163;
     $164 = $c;
     $165 = (($164) - 48)|0;
     $166 = ($165>>>0)<(10);
     $167 = $c;
     do {
      if ($166) {
       $168 = (($167) - 48)|0;
       $179 = $168;
      } else {
       $169 = (($167) - 97)|0;
       $170 = ($169>>>0)<(26);
       $171 = $c;
       if ($170) {
        $172 = (($171) - 97)|0;
        $173 = (($172) + 10)|0;
        $179 = $173;
        break;
       }
       $174 = (($171) - 65)|0;
       $175 = ($174>>>0)<(26);
       if ($175) {
        $176 = $c;
        $177 = (($176) - 65)|0;
        $178 = (($177) + 10)|0;
        $179 = $178;
       } else {
        $179 = -1;
       }
      }
     } while(0);
     $c = $179;
     $180 = $c;
     $181 = ($180|0)<(0);
     if (!($181)) {
      $182 = $c;
      $183 = $2;
      $184 = ($182|0)>=($183|0);
      if (!($184)) {
       $uscore = 0;
       $187 = $1;
       $p = $187;
       while(1) {
        $188 = $p;
        $189 = HEAP8[$188>>0]|0;
        $190 = ($189<<24>>24)!=(0);
        if (!($190)) {
         break;
        }
        $191 = $p;
        $192 = HEAP8[$191>>0]|0;
        $193 = $192 << 24 >> 24;
        $194 = ($193|0)==(95);
        if ($194) {
         $195 = $uscore;
         $196 = ($195|0)==(0);
         if (!($196)) {
          label = 70;
          break;
         }
         $197 = $uscore;
         $198 = (($197) + 1)|0;
         $uscore = $198;
        } else {
         $uscore = 0;
         $201 = $p;
         $202 = HEAP8[$201>>0]|0;
         $203 = $202 << 24 >> 24;
         $204 = (($203) - 48)|0;
         $205 = ($204>>>0)<(10);
         $206 = $p;
         $207 = HEAP8[$206>>0]|0;
         $208 = $207 << 24 >> 24;
         do {
          if ($205) {
           $209 = (($208) - 48)|0;
           $224 = $209;
          } else {
           $210 = (($208) - 97)|0;
           $211 = ($210>>>0)<(26);
           $212 = $p;
           $213 = HEAP8[$212>>0]|0;
           $214 = $213 << 24 >> 24;
           if ($211) {
            $215 = (($214) - 97)|0;
            $216 = (($215) + 10)|0;
            $224 = $216;
            break;
           }
           $217 = (($214) - 65)|0;
           $218 = ($217>>>0)<(26);
           if ($218) {
            $219 = $p;
            $220 = HEAP8[$219>>0]|0;
            $221 = $220 << 24 >> 24;
            $222 = (($221) - 65)|0;
            $223 = (($222) + 10)|0;
            $224 = $223;
           } else {
            $224 = -1;
           }
          }
         } while(0);
         $c = $224;
         $225 = $c;
         $226 = ($225|0)<(0);
         if ($226) {
          label = 79;
          break;
         }
         $227 = $c;
         $228 = $2;
         $229 = ($227|0)>=($228|0);
         if ($229) {
          label = 79;
          break;
         }
         $232 = $2;
         $233 = ($232|0)<(0);
         $234 = $233 << 31 >> 31;
         $235 = $n;
         $236 = $235;
         $237 = HEAP32[$236>>2]|0;
         $238 = (($235) + 4)|0;
         $239 = $238;
         $240 = HEAP32[$239>>2]|0;
         $241 = (___muldi3(($237|0),($240|0),($232|0),($234|0))|0);
         $242 = tempRet0;
         $243 = $n;
         $244 = $243;
         HEAP32[$244>>2] = $241;
         $245 = (($243) + 4)|0;
         $246 = $245;
         HEAP32[$246>>2] = $242;
         $247 = $c;
         $248 = ($247|0)<(0);
         $249 = $248 << 31 >> 31;
         $250 = $n;
         $251 = $250;
         $252 = HEAP32[$251>>2]|0;
         $253 = (($250) + 4)|0;
         $254 = $253;
         $255 = HEAP32[$254>>2]|0;
         $256 = (_i64Add(($252|0),($255|0),($247|0),($249|0))|0);
         $257 = tempRet0;
         $258 = $n;
         $259 = $258;
         HEAP32[$259>>2] = $256;
         $260 = (($258) + 4)|0;
         $261 = $260;
         HEAP32[$261>>2] = $257;
         $262 = $n;
         $263 = $262;
         $264 = HEAP32[$263>>2]|0;
         $265 = (($262) + 4)|0;
         $266 = $265;
         $267 = HEAP32[$266>>2]|0;
         $268 = ($267>>>0)>(0);
         $269 = ($264>>>0)>(2147483647);
         $270 = ($267|0)==(0);
         $271 = $270 & $269;
         $272 = $268 | $271;
         if ($272) {
          label = 81;
          break;
         }
        }
        $278 = $p;
        $279 = ((($278)) + 1|0);
        $p = $279;
       }
       if ((label|0) == 70) {
        $199 = $3;
        $200 = ($199|0)!=(0);
        if ($200) {
         break;
        }
       }
       else if ((label|0) == 79) {
        $230 = $3;
        $231 = ($230|0)!=(0);
        if ($231) {
         break;
        }
       }
       else if ((label|0) == 81) {
        $273 = $0;
        $274 = $0;
        $275 = (_mrb_class_get($274,68855)|0);
        $276 = $0;
        $277 = $1;
        _mrb_str_new_cstr($5,$276,$277);
        ;HEAP8[$vararg_buffer4>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_buffer4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_buffer4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_buffer4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_buffer4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_buffer4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_buffer4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_buffer4+7>>0]=HEAP8[$5+7>>0]|0;
        _mrb_raisef($273,$275,55786,$vararg_buffer4);
        // unreachable;
       }
       $280 = $n;
       $281 = $280;
       $282 = HEAP32[$281>>2]|0;
       $283 = (($280) + 4)|0;
       $284 = $283;
       $285 = HEAP32[$284>>2]|0;
       $val = $282;
       $286 = $3;
       $287 = ($286|0)!=(0);
       if ($287) {
        $288 = $p;
        $289 = $1;
        $290 = ($288|0)==($289|0);
        if ($290) {
         break;
        }
        while(1) {
         $291 = $p;
         $292 = HEAP8[$291>>0]|0;
         $293 = $292 << 24 >> 24;
         $294 = ($293|0)!=(0);
         if ($294) {
          $295 = $p;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296 << 24 >> 24;
          $298 = ($297|0)==(32);
          if ($298) {
           $320 = 1;
          } else {
           $299 = $p;
           $300 = HEAP8[$299>>0]|0;
           $301 = $300 << 24 >> 24;
           $302 = (($301) - 9)|0;
           $303 = ($302>>>0)<(5);
           $320 = $303;
          }
         } else {
          $320 = 0;
         }
         $304 = $p;
         if (!($320)) {
          break;
         }
         $305 = ((($304)) + 1|0);
         $p = $305;
        }
        $306 = HEAP8[$304>>0]|0;
        $307 = ($306<<24>>24)!=(0);
        if ($307) {
         break;
        }
       }
       $308 = $sign;
       $309 = $308 << 24 >> 24;
       $310 = ($309|0)!=(0);
       $311 = $val;
       $312 = (0 - ($311))|0;
       $313 = $310 ? $311 : $312;
       _mrb_fixnum_value_289($agg$result,$313);
       STACKTOP = sp;return;
      }
     }
     $185 = $3;
     $186 = ($185|0)!=(0);
     if ($186) {
      break;
     }
     _mrb_fixnum_value_289($agg$result,0);
     STACKTOP = sp;return;
    }
   }
   $44 = $3;
   $45 = ($44|0)!=(0);
   if (!($45)) {
    _mrb_fixnum_value_289($agg$result,0);
    STACKTOP = sp;return;
   }
  } else {
   $13 = $3;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    _mrb_fixnum_value_289($agg$result,0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $314 = $0;
 $315 = $0;
 $316 = (_mrb_class_get($315,68855)|0);
 $317 = $0;
 $318 = $1;
 _mrb_str_new_cstr($6,$317,$318);
 ;HEAP8[$vararg_buffer7>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_buffer7+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_buffer7+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_buffer7+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_buffer7+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_buffer7+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_buffer7+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_buffer7+7>>0]=HEAP8[$6+7>>0]|0;
 _mrb_raisef($314,$316,55818,$vararg_buffer7);
 // unreachable;
}
function _mrb_fixnum_value_289($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_string_value_cstr($mrb,$ptr) {
 $mrb = $mrb|0;
 $ptr = $ptr|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, $p = 0, $ps = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $str = sp + 16|0;
 $1 = $mrb;
 $2 = $ptr;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_str_to_str($str,$3,$$byval_copy);
 $5 = HEAP32[$str>>2]|0;
 $ps = $5;
 $6 = $1;
 $7 = $ps;
 $8 = (_mrb_str_strlen($6,$7)|0);
 $len = $8;
 $9 = $ps;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >>> 11;
 $12 = $11 & 8;
 $13 = ($12|0)!=(0);
 $14 = $ps;
 $15 = ((($14)) + 12|0);
 if ($13) {
  $18 = $15;
 } else {
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
 }
 $p = $18;
 $19 = $p;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $len;
  $22 = $p;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $39 = $p;
   $0 = $39;
   $40 = $0;
   STACKTOP = sp;return ($40|0);
  }
 }
 $27 = $1;
 $28 = $ps;
 _mrb_str_modify($27,$28);
 $29 = $ps;
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 >>> 11;
 $32 = $31 & 8;
 $33 = ($32|0)!=(0);
 $34 = $ps;
 $35 = ((($34)) + 12|0);
 if ($33) {
  $38 = $35;
 } else {
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37;
 }
 $0 = $38;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _mrb_str_to_inum($agg$result,$mrb,$str,$base,$badcheck) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $base = $base|0;
 $badcheck = $badcheck|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $s = 0, $str$byval_copy = 0, $temp_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 24|0;
 $0 = $mrb;
 $1 = $base;
 $2 = $badcheck;
 $3 = $2;
 $4 = ($3<<24>>24)!=(0);
 $5 = $0;
 if ($4) {
  $6 = (_mrb_string_value_cstr($5,$str)|0);
  $s = $6;
 } else {
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  $7 = (_mrb_string_value_ptr($5,$str$byval_copy)|0);
  $s = $7;
 }
 $8 = $s;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$str>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 11;
  $13 = $12 & 8;
  $14 = ($13|0)!=(0);
  $15 = HEAP32[$str>>2]|0;
  if ($14) {
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 >>> 11;
   $18 = $17 & 496;
   $19 = $18 >> 4;
   $22 = $19;
  } else {
   $20 = ((($15)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21;
  }
  $len = $22;
  $23 = $len;
  $24 = $s;
  $25 = (($24) + ($23)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)!=(0);
  if ($27) {
   $28 = $0;
   $29 = $s;
   $30 = $len;
   $31 = (_str_new($28,$29,$30)|0);
   $temp_str = $31;
   $32 = $temp_str;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 11;
   $35 = $34 & 8;
   $36 = ($35|0)!=(0);
   $37 = $temp_str;
   $38 = ((($37)) + 12|0);
   if ($36) {
    $41 = $38;
   } else {
    $39 = ((($38)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40;
   }
   $s = $41;
  }
 }
 $42 = $0;
 $43 = $s;
 $44 = $1;
 $45 = $2;
 $46 = $45&255;
 _mrb_cstr_to_inum($agg$result,$42,$43,$44,$46);
 STACKTOP = sp;return;
}
function _mrb_cstr_to_dbl($mrb,$p,$badcheck) {
 $mrb = $mrb|0;
 $p = $p|0;
 $badcheck = $badcheck|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $d = 0.0, $e = 0, $end = 0, $n = 0, $prev = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $end = sp + 40|0;
 $buf = sp + 54|0;
 $4 = sp + 32|0;
 $1 = $mrb;
 $2 = $p;
 $3 = $badcheck;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0.0;
  $143 = $0;
  STACKTOP = sp;return (+$143);
 }
 while(1) {
  $7 = $2;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)==(32);
  if (!($10)) {
   $11 = $2;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = (($13) - 9)|0;
   $15 = ($14>>>0)<(5);
   if (!($15)) {
    break;
   }
  }
  $16 = $2;
  $17 = ((($16)) + 1|0);
  $2 = $17;
 }
 $18 = $3;
 $19 = ($18<<24>>24)!=(0);
 do {
  if (!($19)) {
   $20 = $2;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(48);
   if ($23) {
    $24 = $2;
    $25 = ((($24)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($27|0)==(120);
    if (!($28)) {
     $29 = $2;
     $30 = ((($29)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = ($32|0)==(88);
     if (!($33)) {
      break;
     }
    }
    $0 = 0.0;
    $143 = $0;
    STACKTOP = sp;return (+$143);
   }
  }
 } while(0);
 $34 = $2;
 $35 = (+_strtod($34,$end));
 $d = $35;
 $36 = $2;
 $37 = HEAP32[$end>>2]|0;
 $38 = ($36|0)==($37|0);
 L18: do {
  if ($38) {
   $39 = $3;
   $40 = ($39<<24>>24)!=(0);
   if (!($40)) {
    $46 = $d;
    $0 = $46;
    $143 = $0;
    STACKTOP = sp;return (+$143);
   }
  } else {
   $47 = HEAP32[$end>>2]|0;
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)!=(0);
   if ($49) {
    $n = $buf;
    $50 = ((($buf)) + 70|0);
    $51 = ((($50)) + -1|0);
    $e = $51;
    $prev = 0;
    while(1) {
     $52 = $2;
     $53 = HEAP32[$end>>2]|0;
     $54 = ($52>>>0)<($53>>>0);
     if (!($54)) {
      break;
     }
     $55 = $n;
     $56 = $e;
     $57 = ($55>>>0)<($56>>>0);
     if (!($57)) {
      break;
     }
     $58 = $2;
     $59 = ((($58)) + 1|0);
     $2 = $59;
     $60 = HEAP8[$58>>0]|0;
     $61 = $n;
     $62 = ((($61)) + 1|0);
     $n = $62;
     HEAP8[$61>>0] = $60;
     $prev = $60;
    }
    L29: while(1) {
     $63 = $2;
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)!=(0);
     if (!($65)) {
      break;
     }
     $66 = $2;
     $67 = HEAP8[$66>>0]|0;
     $68 = $67 << 24 >> 24;
     $69 = ($68|0)==(95);
     if ($69) {
      $70 = $3;
      $71 = ($70<<24>>24)!=(0);
      if (!($71)) {
       while(1) {
        $85 = $2;
        $86 = ((($85)) + 1|0);
        $2 = $86;
        $87 = HEAP8[$86>>0]|0;
        $88 = $87 << 24 >> 24;
        $89 = ($88|0)==(95);
        if (!($89)) {
         continue L29;
        }
       }
      }
      $72 = $n;
      $73 = ($72|0)==($buf|0);
      if ($73) {
       break L18;
      }
      $74 = $prev;
      $75 = $74 << 24 >> 24;
      $76 = (($75) - 48)|0;
      $77 = ($76>>>0)<(10);
      if (!($77)) {
       break L18;
      }
      $78 = $2;
      $79 = ((($78)) + 1|0);
      $2 = $79;
      $80 = $2;
      $81 = HEAP8[$80>>0]|0;
      $82 = $81 << 24 >> 24;
      $83 = (($82) - 48)|0;
      $84 = ($83>>>0)<(10);
      if (!($84)) {
       break L18;
      }
     }
     $90 = $2;
     $91 = ((($90)) + 1|0);
     $2 = $91;
     $92 = HEAP8[$90>>0]|0;
     $prev = $92;
     $93 = $n;
     $94 = $e;
     $95 = ($93>>>0)<($94>>>0);
     if (!($95)) {
      continue;
     }
     $96 = $prev;
     $97 = $n;
     $98 = ((($97)) + 1|0);
     $n = $98;
     HEAP8[$97>>0] = $96;
    }
    $99 = $n;
    HEAP8[$99>>0] = 0;
    $2 = $buf;
    $100 = $3;
    $101 = ($100<<24>>24)!=(0);
    do {
     if (!($101)) {
      $102 = $2;
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)==(48);
      if ($105) {
       $106 = $2;
       $107 = ((($106)) + 1|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108 << 24 >> 24;
       $110 = ($109|0)==(120);
       if (!($110)) {
        $111 = $2;
        $112 = ((($111)) + 1|0);
        $113 = HEAP8[$112>>0]|0;
        $114 = $113 << 24 >> 24;
        $115 = ($114|0)==(88);
        if (!($115)) {
         break;
        }
       }
       $0 = 0.0;
       $143 = $0;
       STACKTOP = sp;return (+$143);
      }
     }
    } while(0);
    $116 = $2;
    $117 = (+_strtod($116,$end));
    $d = $117;
    $118 = $3;
    $119 = ($118<<24>>24)!=(0);
    if ($119) {
     $120 = HEAP32[$end>>2]|0;
     $121 = ($120|0)!=(0|0);
     if (!($121)) {
      break;
     }
     $122 = $2;
     $123 = HEAP32[$end>>2]|0;
     $124 = ($122|0)==($123|0);
     if ($124) {
      break;
     }
     while(1) {
      $125 = HEAP32[$end>>2]|0;
      $126 = HEAP8[$125>>0]|0;
      $127 = $126 << 24 >> 24;
      $128 = ($127|0)!=(0);
      if ($128) {
       $129 = HEAP32[$end>>2]|0;
       $130 = HEAP8[$129>>0]|0;
       $131 = $130 << 24 >> 24;
       $132 = ($131|0)==(32);
       if ($132) {
        $144 = 1;
       } else {
        $133 = HEAP32[$end>>2]|0;
        $134 = HEAP8[$133>>0]|0;
        $135 = $134 << 24 >> 24;
        $136 = (($135) - 9)|0;
        $137 = ($136>>>0)<(5);
        $144 = $137;
       }
      } else {
       $144 = 0;
      }
      $138 = HEAP32[$end>>2]|0;
      if (!($144)) {
       break;
      }
      $139 = ((($138)) + 1|0);
      HEAP32[$end>>2] = $139;
     }
     $140 = HEAP8[$138>>0]|0;
     $141 = ($140<<24>>24)!=(0);
     if ($141) {
      break;
     }
    }
   }
   $142 = $d;
   $0 = $142;
   $143 = $0;
   STACKTOP = sp;return (+$143);
  }
 } while(0);
 $41 = $1;
 $42 = $1;
 $43 = (_mrb_class_get($42,68855)|0);
 $44 = $1;
 $45 = $2;
 _mrb_str_new_cstr($4,$44,$45);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
 _mrb_raisef($41,$43,55848,$vararg_buffer);
 // unreachable;
 return +(0.0);
}
function _mrb_str_to_dbl($mrb,$str,$badcheck) {
 $mrb = $mrb|0;
 $str = $str|0;
 $badcheck = $badcheck|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, $s = 0, $str$byval_copy = 0, $temp_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 32|0;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $badcheck;
 $3 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_to_str($2,$3,$str$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 $4 = HEAP32[$str>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$str>>2]|0;
 $10 = ((($9)) + 12|0);
 if ($8) {
  $13 = $10;
 } else {
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $s = $13;
 $14 = HEAP32[$str>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 11;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$str>>2]|0;
 if ($18) {
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 >>> 11;
  $22 = $21 & 496;
  $23 = $22 >> 4;
  $26 = $23;
 } else {
  $24 = ((($19)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25;
 }
 $len = $26;
 $27 = $s;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $58 = $0;
  $59 = $s;
  $60 = $1;
  $61 = (+_mrb_cstr_to_dbl($58,$59,$60));
  STACKTOP = sp;return (+$61);
 }
 $29 = $1;
 $30 = $29&255;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $s;
  $33 = $len;
  $34 = (_memchr($32,0,$33)|0);
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $0;
   $37 = $0;
   $38 = (_mrb_class_get($37,68855)|0);
   _mrb_raise($36,$38,55877);
   // unreachable;
  }
 }
 $39 = $len;
 $40 = $s;
 $41 = (($40) + ($39)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)!=(0);
 if (!($43)) {
  $58 = $0;
  $59 = $s;
  $60 = $1;
  $61 = (+_mrb_cstr_to_dbl($58,$59,$60));
  STACKTOP = sp;return (+$61);
 }
 $44 = $0;
 $45 = $s;
 $46 = $len;
 $47 = (_str_new($44,$45,$46)|0);
 $temp_str = $47;
 $48 = $temp_str;
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 11;
 $51 = $50 & 8;
 $52 = ($51|0)!=(0);
 $53 = $temp_str;
 $54 = ((($53)) + 12|0);
 if ($52) {
  $57 = $54;
 } else {
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56;
 }
 $s = $57;
 $58 = $0;
 $59 = $s;
 $60 = $1;
 $61 = (+_mrb_cstr_to_dbl($58,$59,$60));
 STACKTOP = sp;return (+$61);
}
function _mrb_str_dump($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c1 = 0, $len = 0, $p = 0, $pend = 0, $q = 0, $result = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 24|0;
 $0 = $mrb;
 $len = 2;
 $1 = HEAP32[$str>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$str>>2]|0;
 $7 = ((($6)) + 12|0);
 if ($5) {
  $10 = $7;
 } else {
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
 }
 $p = $10;
 $11 = $p;
 $12 = HEAP32[$str>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 11;
 $15 = $14 & 8;
 $16 = ($15|0)!=(0);
 $17 = HEAP32[$str>>2]|0;
 if ($16) {
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 11;
  $20 = $19 & 496;
  $21 = $20 >> 4;
  $25 = $21;
 } else {
  $22 = ((($17)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $25 = $23;
 }
 $24 = (($11) + ($25)|0);
 $pend = $24;
 L9: while(1) {
  $26 = $p;
  $27 = $pend;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $p;
  $30 = ((($29)) + 1|0);
  $p = $30;
  $31 = HEAP8[$29>>0]|0;
  $c = $31;
  $32 = $c;
  $33 = $32&255;
  switch ($33|0) {
  case 27: case 7: case 8: case 11: case 12: case 9: case 13: case 10: case 92: case 34:  {
   $34 = $len;
   $35 = (($34) + 2)|0;
   $len = $35;
   continue L9;
   break;
  }
  case 35:  {
   $36 = $p;
   $37 = $pend;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = $p;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)==(36);
    if ($42) {
     $51 = 1;
    } else {
     $43 = $p;
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = ($45|0)==(64);
     if ($46) {
      $51 = 1;
     } else {
      $47 = $p;
      $48 = HEAP8[$47>>0]|0;
      $49 = $48 << 24 >> 24;
      $50 = ($49|0)==(123);
      $51 = $50;
     }
    }
   } else {
    $51 = 0;
   }
   $52 = $51 ? 2 : 1;
   $53 = $len;
   $54 = (($53) + ($52))|0;
   $len = $54;
   continue L9;
   break;
  }
  default: {
   $55 = $c;
   $56 = $55&255;
   $57 = (($56) - 32)|0;
   $58 = ($57>>>0)<(95);
   $59 = $len;
   if ($58) {
    $60 = (($59) + 1)|0;
    $len = $60;
    continue L9;
   } else {
    $61 = (($59) + 4)|0;
    $len = $61;
    continue L9;
   }
  }
  }
 }
 $62 = $0;
 $63 = $len;
 $64 = (_str_new($62,0,$63)|0);
 $result = $64;
 $65 = $0;
 $66 = $result;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _str_with_class($65,$66,$str$byval_copy);
 $67 = HEAP32[$str>>2]|0;
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 >>> 11;
 $70 = $69 & 8;
 $71 = ($70|0)!=(0);
 $72 = HEAP32[$str>>2]|0;
 $73 = ((($72)) + 12|0);
 if ($71) {
  $76 = $73;
 } else {
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75;
 }
 $p = $76;
 $77 = $p;
 $78 = HEAP32[$str>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >>> 11;
 $81 = $80 & 8;
 $82 = ($81|0)!=(0);
 $83 = HEAP32[$str>>2]|0;
 if ($82) {
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 >>> 11;
  $86 = $85 & 496;
  $87 = $86 >> 4;
  $91 = $87;
 } else {
  $88 = ((($83)) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  $91 = $89;
 }
 $90 = (($77) + ($91)|0);
 $pend = $90;
 $92 = $result;
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 >>> 11;
 $95 = $94 & 8;
 $96 = ($95|0)!=(0);
 $97 = $result;
 $98 = ((($97)) + 12|0);
 if ($96) {
  $101 = $98;
 } else {
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100;
 }
 $q = $101;
 $102 = $q;
 $103 = ((($102)) + 1|0);
 $q = $103;
 HEAP8[$102>>0] = 34;
 L37: while(1) {
  $104 = $p;
  $105 = $pend;
  $106 = ($104>>>0)<($105>>>0);
  if (!($106)) {
   break;
  }
  $107 = $p;
  $108 = ((($107)) + 1|0);
  $p = $108;
  $109 = HEAP8[$107>>0]|0;
  $c1 = $109;
  $110 = $c1;
  $111 = $110&255;
  do {
   switch ($111|0) {
   case 92: case 34:  {
    $112 = $q;
    $113 = ((($112)) + 1|0);
    $q = $113;
    HEAP8[$112>>0] = 92;
    $114 = $c1;
    $115 = $q;
    $116 = ((($115)) + 1|0);
    $q = $116;
    HEAP8[$115>>0] = $114;
    continue L37;
    break;
   }
   case 10:  {
    $117 = $q;
    $118 = ((($117)) + 1|0);
    $q = $118;
    HEAP8[$117>>0] = 92;
    $119 = $q;
    $120 = ((($119)) + 1|0);
    $q = $120;
    HEAP8[$119>>0] = 110;
    continue L37;
    break;
   }
   case 13:  {
    $121 = $q;
    $122 = ((($121)) + 1|0);
    $q = $122;
    HEAP8[$121>>0] = 92;
    $123 = $q;
    $124 = ((($123)) + 1|0);
    $q = $124;
    HEAP8[$123>>0] = 114;
    continue L37;
    break;
   }
   case 9:  {
    $125 = $q;
    $126 = ((($125)) + 1|0);
    $q = $126;
    HEAP8[$125>>0] = 92;
    $127 = $q;
    $128 = ((($127)) + 1|0);
    $q = $128;
    HEAP8[$127>>0] = 116;
    continue L37;
    break;
   }
   case 12:  {
    $129 = $q;
    $130 = ((($129)) + 1|0);
    $q = $130;
    HEAP8[$129>>0] = 92;
    $131 = $q;
    $132 = ((($131)) + 1|0);
    $q = $132;
    HEAP8[$131>>0] = 102;
    continue L37;
    break;
   }
   case 11:  {
    $133 = $q;
    $134 = ((($133)) + 1|0);
    $q = $134;
    HEAP8[$133>>0] = 92;
    $135 = $q;
    $136 = ((($135)) + 1|0);
    $q = $136;
    HEAP8[$135>>0] = 118;
    continue L37;
    break;
   }
   case 8:  {
    $137 = $q;
    $138 = ((($137)) + 1|0);
    $q = $138;
    HEAP8[$137>>0] = 92;
    $139 = $q;
    $140 = ((($139)) + 1|0);
    $q = $140;
    HEAP8[$139>>0] = 98;
    continue L37;
    break;
   }
   case 7:  {
    $141 = $q;
    $142 = ((($141)) + 1|0);
    $q = $142;
    HEAP8[$141>>0] = 92;
    $143 = $q;
    $144 = ((($143)) + 1|0);
    $q = $144;
    HEAP8[$143>>0] = 97;
    continue L37;
    break;
   }
   case 27:  {
    $145 = $q;
    $146 = ((($145)) + 1|0);
    $q = $146;
    HEAP8[$145>>0] = 92;
    $147 = $q;
    $148 = ((($147)) + 1|0);
    $q = $148;
    HEAP8[$147>>0] = 101;
    continue L37;
    break;
   }
   case 35:  {
    $149 = $p;
    $150 = $pend;
    $151 = ($149>>>0)<($150>>>0);
    do {
     if ($151) {
      $152 = $p;
      $153 = HEAP8[$152>>0]|0;
      $154 = $153 << 24 >> 24;
      $155 = ($154|0)==(36);
      if (!($155)) {
       $156 = $p;
       $157 = HEAP8[$156>>0]|0;
       $158 = $157 << 24 >> 24;
       $159 = ($158|0)==(64);
       if (!($159)) {
        $160 = $p;
        $161 = HEAP8[$160>>0]|0;
        $162 = $161 << 24 >> 24;
        $163 = ($162|0)==(123);
        if (!($163)) {
         break;
        }
       }
      }
      $164 = $q;
      $165 = ((($164)) + 1|0);
      $q = $165;
      HEAP8[$164>>0] = 92;
     }
    } while(0);
    $166 = $q;
    $167 = ((($166)) + 1|0);
    $q = $167;
    HEAP8[$166>>0] = 35;
    continue L37;
    break;
   }
   default: {
    $168 = $c1;
    $169 = $168&255;
    $170 = (($169) - 32)|0;
    $171 = ($170>>>0)<(95);
    if ($171) {
     $172 = $c1;
     $173 = $q;
     $174 = ((($173)) + 1|0);
     $q = $174;
     HEAP8[$173>>0] = $172;
     continue L37;
    } else {
     $175 = $q;
     $176 = ((($175)) + 1|0);
     $q = $176;
     HEAP8[$175>>0] = 92;
     $177 = $c1;
     $178 = $177&255;
     $179 = (($178|0) % 8)&-1;
     $180 = (48 + ($179))|0;
     $181 = $180&255;
     $182 = $q;
     $183 = ((($182)) + 2|0);
     HEAP8[$183>>0] = $181;
     $184 = $c1;
     $185 = $184&255;
     $186 = (($185|0) / 8)&-1;
     $187 = $186&255;
     $c1 = $187;
     $188 = $c1;
     $189 = $188&255;
     $190 = (($189|0) % 8)&-1;
     $191 = (48 + ($190))|0;
     $192 = $191&255;
     $193 = $q;
     $194 = ((($193)) + 1|0);
     HEAP8[$194>>0] = $192;
     $195 = $c1;
     $196 = $195&255;
     $197 = (($196|0) / 8)&-1;
     $198 = $197&255;
     $c1 = $198;
     $199 = $c1;
     $200 = $199&255;
     $201 = (($200|0) % 8)&-1;
     $202 = (48 + ($201))|0;
     $203 = $202&255;
     $204 = $q;
     HEAP8[$204>>0] = $203;
     $205 = $q;
     $206 = ((($205)) + 3|0);
     $q = $206;
     continue L37;
    }
   }
   }
  } while(0);
 }
 $207 = $q;
 HEAP8[$207>>0] = 34;
 $208 = $result;
 _mrb_obj_value_259($agg$result,$208);
 STACKTOP = sp;return;
}
function _mrb_str_cat($agg$result,$mrb,$str,$ptr,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = HEAP32[$str>>2]|0;
 $5 = $1;
 $6 = $2;
 _str_buf_cat($3,$4,$5,$6);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _str_buf_cat($mrb,$s,$ptr,$len) {
 $mrb = $mrb|0;
 $s = $s|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $capa = 0, $off = 0, $tmp_n = 0, $total = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $2 = $ptr;
 $3 = $len;
 $off = -1;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 _mrb_str_modify($6,$7);
 $8 = $2;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >>> 11;
 $12 = $11 & 8;
 $13 = ($12|0)!=(0);
 $14 = $1;
 $15 = ((($14)) + 12|0);
 if ($13) {
  $19 = $15;
 } else {
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $19 = $17;
 }
 $18 = ($8>>>0)>=($19>>>0);
 if ($18) {
  $20 = $2;
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 8;
  $25 = ($24|0)!=(0);
  $26 = $1;
  $27 = ((($26)) + 12|0);
  if ($25) {
   $43 = $27;
  } else {
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $43 = $29;
  }
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 >>> 11;
  $33 = $32 & 8;
  $34 = ($33|0)!=(0);
  $35 = $1;
  if ($34) {
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 >>> 11;
   $38 = $37 & 496;
   $39 = $38 >> 4;
   $44 = $39;
  } else {
   $40 = ((($35)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $44 = $41;
  }
  $42 = (($43) + ($44)|0);
  $45 = ($20>>>0)<=($42>>>0);
  if ($45) {
   $46 = $2;
   $47 = $1;
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >>> 11;
   $50 = $49 & 8;
   $51 = ($50|0)!=(0);
   $52 = $1;
   $53 = ((($52)) + 12|0);
   if ($51) {
    $57 = $53;
   } else {
    $54 = ((($53)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $57 = $55;
   }
   $56 = $46;
   $58 = $57;
   $59 = (($56) - ($58))|0;
   $off = $59;
  }
 }
 $60 = $1;
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 >>> 11;
 $63 = $62 & 8;
 $64 = ($63|0)!=(0);
 if ($64) {
  $capa = 11;
 } else {
  $65 = $1;
  $66 = ((($65)) + 12|0);
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $capa = $68;
 }
 $69 = $1;
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 >>> 11;
 $72 = $71 & 8;
 $73 = ($72|0)!=(0);
 $74 = $1;
 if ($73) {
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 11;
  $77 = $76 & 496;
  $78 = $77 >> 4;
  $83 = $78;
 } else {
  $79 = ((($74)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $83 = $80;
 }
 $81 = $3;
 $82 = (2147483647 - ($81))|0;
 $84 = ($83|0)>=($82|0);
 if ($84) {
  $85 = $0;
  $86 = $0;
  $87 = (_mrb_class_get($86,68855)|0);
  _mrb_raise($85,$87,55411);
  // unreachable;
 }
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 >>> 11;
 $91 = $90 & 8;
 $92 = ($91|0)!=(0);
 $93 = $1;
 if ($92) {
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 >>> 11;
  $96 = $95 & 496;
  $97 = $96 >> 4;
  $102 = $97;
 } else {
  $98 = ((($93)) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $102 = $99;
 }
 $100 = $3;
 $101 = (($102) + ($100))|0;
 $total = $101;
 $103 = $capa;
 $104 = $total;
 $105 = ($103>>>0)<=($104>>>0);
 if ($105) {
  while(1) {
   $106 = $total;
   $107 = $capa;
   $108 = ($106>>>0)>($107>>>0);
   if (!($108)) {
    break;
   }
   $109 = $capa;
   $110 = (($109) + 1)|0;
   $111 = ($110>>>0)>=(1073741823);
   if ($111) {
    label = 31;
    break;
   }
   $115 = $capa;
   $116 = (($115) + 1)|0;
   $117 = $116<<1;
   $capa = $117;
  }
  if ((label|0) == 31) {
   $112 = $total;
   $113 = (($112) + 4095)|0;
   $114 = (($113>>>0) / 4096)&-1;
   $capa = $114;
  }
  $118 = $0;
  $119 = $1;
  $120 = $capa;
  _resize_capa($118,$119,$120);
 }
 $121 = $off;
 $122 = ($121|0)!=(-1);
 if ($122) {
  $123 = $1;
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 >>> 11;
  $126 = $125 & 8;
  $127 = ($126|0)!=(0);
  $128 = $1;
  $129 = ((($128)) + 12|0);
  if ($127) {
   $134 = $129;
  } else {
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $134 = $131;
  }
  $132 = $off;
  $133 = (($134) + ($132)|0);
  $2 = $133;
 }
 $135 = $1;
 $136 = HEAP32[$135>>2]|0;
 $137 = $136 >>> 11;
 $138 = $137 & 8;
 $139 = ($138|0)!=(0);
 $140 = $1;
 $141 = ((($140)) + 12|0);
 if ($139) {
  $157 = $141;
 } else {
  $142 = ((($141)) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $157 = $143;
 }
 $144 = $1;
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 >>> 11;
 $147 = $146 & 8;
 $148 = ($147|0)!=(0);
 $149 = $1;
 if ($148) {
  $150 = HEAP32[$149>>2]|0;
  $151 = $150 >>> 11;
  $152 = $151 & 496;
  $153 = $152 >> 4;
  $158 = $153;
 } else {
  $154 = ((($149)) + 12|0);
  $155 = HEAP32[$154>>2]|0;
  $158 = $155;
 }
 $156 = (($157) + ($158)|0);
 $159 = $2;
 $160 = $3;
 _memcpy(($156|0),($159|0),($160|0))|0;
 $161 = $1;
 $162 = HEAP32[$161>>2]|0;
 $163 = $162 >>> 11;
 $164 = $163 & 8;
 $165 = ($164|0)!=(0);
 $166 = $total;
 if ($165) {
  $tmp_n = $166;
  $167 = $1;
  $168 = HEAP32[$167>>2]|0;
  $169 = $168 >>> 11;
  $170 = $169 & -497;
  $171 = HEAP32[$167>>2]|0;
  $172 = $170 & 2097151;
  $173 = $172 << 11;
  $174 = $171 & 2047;
  $175 = $174 | $173;
  HEAP32[$167>>2] = $175;
  $176 = $tmp_n;
  $177 = $176 << 4;
  $178 = $1;
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 >>> 11;
  $181 = $180 | $177;
  $182 = HEAP32[$178>>2]|0;
  $183 = $181 & 2097151;
  $184 = $183 << 11;
  $185 = $182 & 2047;
  $186 = $185 | $184;
  HEAP32[$178>>2] = $186;
 } else {
  $187 = $1;
  $188 = ((($187)) + 12|0);
  HEAP32[$188>>2] = $166;
 }
 $189 = $total;
 $190 = $1;
 $191 = HEAP32[$190>>2]|0;
 $192 = $191 >>> 11;
 $193 = $192 & 8;
 $194 = ($193|0)!=(0);
 $195 = $1;
 $196 = ((($195)) + 12|0);
 if ($194) {
  $200 = $196;
 } else {
  $197 = ((($196)) + 8|0);
  $198 = HEAP32[$197>>2]|0;
  $200 = $198;
 }
 $199 = (($200) + ($189)|0);
 HEAP8[$199>>0] = 0;
 STACKTOP = sp;return;
}
function _mrb_str_cat_cstr($agg$result,$mrb,$str,$ptr) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $ptr;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen($4)|0);
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($agg$result,$2,$str$byval_copy,$3,$5);
 STACKTOP = sp;return;
}
function _mrb_str_cat_str($agg$result,$mrb,$str,$str2) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = HEAP32[$str2>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str2>>2]|0;
 $8 = ((($7)) + 12|0);
 if ($6) {
  $23 = $8;
 } else {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $11 = HEAP32[$str2>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$str2>>2]|0;
 if ($15) {
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 496;
  $20 = $19 >> 4;
  $24 = $20;
 } else {
  $21 = ((($16)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $24 = $22;
 }
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($agg$result,$1,$str$byval_copy,$23,$24);
 STACKTOP = sp;return;
}
function _mrb_str_append($agg$result,$mrb,$str1,$str2) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $str1$byval_copy = 0, $str2$byval_copy = 0, $str2$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy1 = sp + 32|0;
 $str1$byval_copy = sp + 24|0;
 $str2$byval_copy = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 _mrb_str_to_str($1,$2,$str2$byval_copy);
 ;HEAP32[$str2>>2]=HEAP32[$1>>2]|0;HEAP32[$str2+4>>2]=HEAP32[$1+4>>2]|0;
 $3 = $0;
 ;HEAP32[$str1$byval_copy>>2]=HEAP32[$str1>>2]|0;HEAP32[$str1$byval_copy+4>>2]=HEAP32[$str1+4>>2]|0;
 ;HEAP32[$str2$byval_copy1>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy1+4>>2]=HEAP32[$str2+4>>2]|0;
 _mrb_str_cat_str($agg$result,$3,$str1$byval_copy,$str2$byval_copy1);
 STACKTOP = sp;return;
}
function _mrb_str_inspect($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c = 0;
 var $cc = 0, $clen = 0, $i = 0, $p = 0, $pend = 0, $result = 0, $result$byval_copy = 0, $result$byval_copy1 = 0, $result$byval_copy2 = 0, $result$byval_copy3 = 0, $result$byval_copy4 = 0, $result$byval_copy5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result$byval_copy5 = sp + 120|0;
 $result$byval_copy4 = sp + 112|0;
 $result$byval_copy3 = sp + 104|0;
 $result$byval_copy2 = sp + 96|0;
 $result$byval_copy1 = sp + 88|0;
 $result$byval_copy = sp + 80|0;
 $buf = sp + 130|0;
 $result = sp + 56|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $0 = $mrb;
 $7 = $0;
 _mrb_str_new_static($result,$7,55913,1);
 $8 = HEAP32[$str>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & 8;
 $12 = ($11|0)!=(0);
 $13 = HEAP32[$str>>2]|0;
 $14 = ((($13)) + 12|0);
 if ($12) {
  $17 = $14;
 } else {
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 }
 $p = $17;
 $18 = HEAP32[$str>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 & 8;
 $22 = ($21|0)!=(0);
 $23 = HEAP32[$str>>2]|0;
 $24 = ((($23)) + 12|0);
 if ($22) {
  $40 = $24;
 } else {
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $40 = $26;
 }
 $27 = HEAP32[$str>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 11;
 $30 = $29 & 8;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[$str>>2]|0;
 if ($31) {
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 11;
  $35 = $34 & 496;
  $36 = $35 >> 4;
  $41 = $36;
 } else {
  $37 = ((($32)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $41 = $38;
 }
 $39 = (($40) + ($41)|0);
 $pend = $39;
 while(1) {
  $42 = $p;
  $43 = $pend;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $p;
  $46 = $pend;
  $47 = (_utf8len($45,$46)|0);
  $clen = $47;
  $48 = $clen;
  $49 = ($48|0)>(1);
  L16: do {
   if ($49) {
    $i = 0;
    while(1) {
     $50 = $i;
     $51 = $clen;
     $52 = ($50|0)<($51|0);
     if (!($52)) {
      break;
     }
     $53 = $i;
     $54 = $p;
     $55 = (($54) + ($53)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $i;
     $58 = (($buf) + ($57)|0);
     HEAP8[$58>>0] = $56;
     $59 = $i;
     $60 = (($59) + 1)|0;
     $i = $60;
    }
    $61 = $0;
    $62 = $clen;
    ;HEAP32[$result$byval_copy>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy+4>>2]=HEAP32[$result+4>>2]|0;
    _mrb_str_cat($1,$61,$result$byval_copy,$buf,$62);
    $63 = $clen;
    $64 = (($63) - 1)|0;
    $65 = $p;
    $66 = (($65) + ($64)|0);
    $p = $66;
   } else {
    $67 = $p;
    $68 = HEAP8[$67>>0]|0;
    $c = $68;
    $69 = $c;
    $70 = $69&255;
    $71 = ($70|0)==(34);
    do {
     if (!($71)) {
      $72 = $c;
      $73 = $72&255;
      $74 = ($73|0)==(92);
      if (!($74)) {
       $75 = $c;
       $76 = $75&255;
       $77 = ($76|0)==(35);
       if ($77) {
        $78 = $p;
        $79 = $pend;
        $80 = ($78>>>0)<($79>>>0);
        if ($80) {
         $81 = $p;
         $82 = HEAP8[$81>>0]|0;
         $83 = $82 << 24 >> 24;
         $84 = ($83|0)==(36);
         if ($84) {
          break;
         }
         $85 = $p;
         $86 = HEAP8[$85>>0]|0;
         $87 = $86 << 24 >> 24;
         $88 = ($87|0)==(64);
         if ($88) {
          break;
         }
         $89 = $p;
         $90 = HEAP8[$89>>0]|0;
         $91 = $90 << 24 >> 24;
         $92 = ($91|0)==(123);
         if ($92) {
          break;
         }
        }
       }
       $96 = $c;
       $97 = $96&255;
       $98 = (($97) - 32)|0;
       $99 = ($98>>>0)<(95);
       $100 = $c;
       if ($99) {
        HEAP8[$buf>>0] = $100;
        $101 = $0;
        ;HEAP32[$result$byval_copy2>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy2+4>>2]=HEAP32[$result+4>>2]|0;
        _mrb_str_cat($3,$101,$result$byval_copy2,$buf,1);
        break L16;
       }
       $102 = $100&255;
       switch ($102|0) {
       case 10:  {
        $cc = 110;
        break;
       }
       case 13:  {
        $cc = 114;
        break;
       }
       case 9:  {
        $cc = 116;
        break;
       }
       case 12:  {
        $cc = 102;
        break;
       }
       case 11:  {
        $cc = 118;
        break;
       }
       case 8:  {
        $cc = 98;
        break;
       }
       case 7:  {
        $cc = 97;
        break;
       }
       case 27:  {
        $cc = 101;
        break;
       }
       default: {
        $cc = 0;
       }
       }
       $103 = $cc;
       $104 = ($103<<24>>24)!=(0);
       HEAP8[$buf>>0] = 92;
       if ($104) {
        $105 = $cc;
        $106 = ((($buf)) + 1|0);
        HEAP8[$106>>0] = $105;
        $107 = $0;
        ;HEAP32[$result$byval_copy3>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy3+4>>2]=HEAP32[$result+4>>2]|0;
        _mrb_str_cat($4,$107,$result$byval_copy3,$buf,2);
        break L16;
       } else {
        $108 = $c;
        $109 = $108&255;
        $110 = (($109|0) % 8)&-1;
        $111 = (48 + ($110))|0;
        $112 = $111&255;
        $113 = ((($buf)) + 3|0);
        HEAP8[$113>>0] = $112;
        $114 = $c;
        $115 = $114&255;
        $116 = (($115|0) / 8)&-1;
        $117 = $116&255;
        $c = $117;
        $118 = $c;
        $119 = $118&255;
        $120 = (($119|0) % 8)&-1;
        $121 = (48 + ($120))|0;
        $122 = $121&255;
        $123 = ((($buf)) + 2|0);
        HEAP8[$123>>0] = $122;
        $124 = $c;
        $125 = $124&255;
        $126 = (($125|0) / 8)&-1;
        $127 = $126&255;
        $c = $127;
        $128 = $c;
        $129 = $128&255;
        $130 = (($129|0) % 8)&-1;
        $131 = (48 + ($130))|0;
        $132 = $131&255;
        $133 = ((($buf)) + 1|0);
        HEAP8[$133>>0] = $132;
        $134 = $0;
        ;HEAP32[$result$byval_copy4>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy4+4>>2]=HEAP32[$result+4>>2]|0;
        _mrb_str_cat($5,$134,$result$byval_copy4,$buf,4);
        break L16;
       }
      }
     }
    } while(0);
    HEAP8[$buf>>0] = 92;
    $93 = $c;
    $94 = ((($buf)) + 1|0);
    HEAP8[$94>>0] = $93;
    $95 = $0;
    ;HEAP32[$result$byval_copy1>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy1+4>>2]=HEAP32[$result+4>>2]|0;
    _mrb_str_cat($2,$95,$result$byval_copy1,$buf,2);
   }
  } while(0);
  $135 = $p;
  $136 = ((($135)) + 1|0);
  $p = $136;
 }
 $137 = $0;
 ;HEAP32[$result$byval_copy5>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy5+4>>2]=HEAP32[$result+4>>2]|0;
 _mrb_str_cat($6,$137,$result$byval_copy5,55913,1);
 ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_init_string($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,64878,$4)|0);
 $s = $5;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = $s;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & -256;
 $12 = $11 | 16;
 $13 = $s;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12 & 2097151;
 $16 = $15 << 11;
 $17 = $14 & 2047;
 $18 = $17 | $16;
 HEAP32[$13>>2] = $18;
 $19 = $0;
 $20 = $s;
 _mrb_define_method($19,$20,55915,84,0);
 $21 = $0;
 $22 = $s;
 _mrb_define_method($21,$22,68851,85,262144);
 $23 = $0;
 $24 = $s;
 _mrb_define_method($23,$24,68902,86,262144);
 $25 = $0;
 $26 = $s;
 _mrb_define_method($25,$26,64315,87,262144);
 $27 = $0;
 $28 = $s;
 _mrb_define_method($27,$28,68114,88,262144);
 $29 = $0;
 $30 = $s;
 _mrb_define_method($29,$30,68841,89,4096);
 $31 = $0;
 $32 = $s;
 _mrb_define_method($31,$32,56008,90,0);
 $33 = $0;
 $34 = $s;
 _mrb_define_method($33,$34,56019,91,0);
 $35 = $0;
 $36 = $s;
 _mrb_define_method($35,$36,56031,92,4096);
 $37 = $0;
 $38 = $s;
 _mrb_define_method($37,$38,56040,93,4096);
 $39 = $0;
 $40 = $s;
 _mrb_define_method($39,$40,56047,94,262144);
 $41 = $0;
 $42 = $s;
 _mrb_define_method($41,$42,56052,95,262144);
 $43 = $0;
 $44 = $s;
 _mrb_define_method($43,$44,56058,96,0);
 $45 = $0;
 $46 = $s;
 _mrb_define_method($45,$46,56067,97,0);
 $47 = $0;
 $48 = $s;
 _mrb_define_method($47,$48,64381,98,0);
 $49 = $0;
 $50 = $s;
 _mrb_define_method($49,$50,68994,99,262144);
 $51 = $0;
 $52 = $s;
 _mrb_define_method($51,$52,68178,100,0);
 $53 = $0;
 $54 = $s;
 _mrb_define_method($53,$54,68944,101,262144);
 $55 = $0;
 $56 = $s;
 _mrb_define_method($55,$56,64411,102,4096);
 $57 = $0;
 $58 = $s;
 _mrb_define_method($57,$58,68953,103,262144);
 $59 = $0;
 $60 = $s;
 _mrb_define_method($59,$60,68999,104,262144);
 $61 = $0;
 $62 = $s;
 _mrb_define_method($61,$62,69611,105,0);
 $63 = $0;
 $64 = $s;
 _mrb_define_method($63,$64,64428,106,0);
 $65 = $0;
 $66 = $s;
 _mrb_define_method($65,$66,64444,104,262144);
 $67 = $0;
 $68 = $s;
 _mrb_define_method($67,$68,64452,107,0);
 $69 = $0;
 $70 = $s;
 _mrb_define_method($69,$70,64460,108,0);
 $71 = $0;
 $72 = $s;
 _mrb_define_method($71,$72,64469,109,4096);
 $73 = $0;
 $74 = $s;
 _mrb_define_method($73,$74,64482,106,0);
 $75 = $0;
 $76 = $s;
 _mrb_define_method($75,$76,64487,89,4096);
 $77 = $0;
 $78 = $s;
 _mrb_define_method($77,$78,56101,110,4096);
 $79 = $0;
 $80 = $s;
 _mrb_define_method($79,$80,56111,111,0);
 $81 = $0;
 $82 = $s;
 _mrb_define_method($81,$82,56116,112,4096);
 $83 = $0;
 $84 = $s;
 _mrb_define_method($83,$84,68977,113,0);
 $85 = $0;
 $86 = $s;
 _mrb_define_method($85,$86,64885,113,0);
 $87 = $0;
 $88 = $s;
 _mrb_define_method($87,$88,56199,105,0);
 $89 = $0;
 $90 = $s;
 _mrb_define_method($89,$90,56121,114,0);
 $91 = $0;
 $92 = $s;
 _mrb_define_method($91,$92,56128,115,0);
 $93 = $0;
 $94 = $s;
 _mrb_define_method($93,$94,68986,116,0);
 $95 = $0;
 $96 = $s;
 _mrb_define_method($95,$96,56136,117,0);
 $97 = $0;
 $98 = $s;
 _mrb_define_method($97,$98,56142,118,0);
 STACKTOP = sp;return;
}
function _mrb_str_bytesize($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$self>>2]|0;
 if ($5) {
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 11;
  $9 = $8 & 496;
  $10 = $9 >> 4;
  $13 = $10;
 } else {
  $11 = ((($6)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $len = $13;
 $14 = $len;
 _mrb_fixnum_value_289($agg$result,$14);
 STACKTOP = sp;return;
}
function _mrb_str_cmp_m($agg$result,$mrb,$str1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str1 = $str1|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $str1$byval_copy = 0, $str2 = 0, $str2$byval_copy = 0, $str2$byval_copy7 = 0, $str2$byval_copy8 = 0, $str2$byval_copy9 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy9 = sp + 104|0;
 $str1$byval_copy = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $str2$byval_copy8 = sp + 80|0;
 $str2$byval_copy7 = sp + 72|0;
 $str2$byval_copy = sp + 64|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $str2 = sp + 48|0;
 $tmp = sp + 32|0;
 $1 = sp + 24|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = ((($str2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(16);
 $6 = $0;
 do {
  if ($5) {
   ;HEAP32[$str1$byval_copy>>2]=HEAP32[$str1>>2]|0;HEAP32[$str1$byval_copy+4>>2]=HEAP32[$str1+4>>2]|0;
   ;HEAP32[$str2$byval_copy9>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy9+4>>2]=HEAP32[$str2+4>>2]|0;
   $27 = (_mrb_str_cmp($6,$str1$byval_copy,$str2$byval_copy9)|0);
   $result = $27;
  } else {
   $7 = $0;
   $8 = (_mrb_intern_static($7,68977,4)|0);
   ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
   $9 = (_mrb_respond_to($6,$str2$byval_copy,$8)|0);
   $10 = ($9<<24>>24)!=(0);
   if (!($10)) {
    _mrb_nil_value_282($agg$result);
    STACKTOP = sp;return;
   }
   $11 = $0;
   $12 = $0;
   $13 = (_mrb_intern_static($12,68851,3)|0);
   ;HEAP32[$str2$byval_copy7>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy7+4>>2]=HEAP32[$str2+4>>2]|0;
   $14 = (_mrb_respond_to($11,$str2$byval_copy7,$13)|0);
   $15 = ($14<<24>>24)!=(0);
   if (!($15)) {
    _mrb_nil_value_282($agg$result);
    STACKTOP = sp;return;
   }
   $16 = $0;
   ;HEAP8[$vararg_buffer1>>0]=HEAP8[$str1>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$str1+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$str1+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$str1+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$str1+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$str1+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$str1+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$str1+7>>0]|0;
   ;HEAP32[$str2$byval_copy8>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy8+4>>2]=HEAP32[$str2+4>>2]|0;
   _mrb_funcall($tmp,$16,$str2$byval_copy8,68851,1,$vararg_buffer1);
   $17 = ((($tmp)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = HEAP32[$tmp>>2]|0;
    $21 = ($20|0)!=(0);
    if (!($21)) {
     _mrb_nil_value_282($agg$result);
     STACKTOP = sp;return;
    }
   }
   $22 = HEAP32[$tmp>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $25 = HEAP32[$tmp>>2]|0;
    $26 = (0 - ($25))|0;
    $result = $26;
    break;
   }
   $24 = $0;
   _mrb_fixnum_value_289($1,0);
   ;HEAP8[$vararg_buffer4>>0]=HEAP8[$tmp>>0]|0;HEAP8[$vararg_buffer4+1>>0]=HEAP8[$tmp+1>>0]|0;HEAP8[$vararg_buffer4+2>>0]=HEAP8[$tmp+2>>0]|0;HEAP8[$vararg_buffer4+3>>0]=HEAP8[$tmp+3>>0]|0;HEAP8[$vararg_buffer4+4>>0]=HEAP8[$tmp+4>>0]|0;HEAP8[$vararg_buffer4+5>>0]=HEAP8[$tmp+5>>0]|0;HEAP8[$vararg_buffer4+6>>0]=HEAP8[$tmp+6>>0]|0;HEAP8[$vararg_buffer4+7>>0]=HEAP8[$tmp+7>>0]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
   _mrb_funcall($agg$result,$24,$$byval_copy,69609,1,$vararg_buffer4);
   STACKTOP = sp;return;
  }
 } while(0);
 $28 = $result;
 _mrb_fixnum_value_289($agg$result,$28);
 STACKTOP = sp;return;
}
function _mrb_str_equal_m($agg$result,$mrb,$str1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str1 = $str1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $str1$byval_copy = 0, $str2 = 0, $str2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy = sp + 32|0;
 $str1$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $str2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$str1$byval_copy>>2]=HEAP32[$str1>>2]|0;HEAP32[$str1$byval_copy+4>>2]=HEAP32[$str1+4>>2]|0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 $3 = (_mrb_str_equal($2,$str1$byval_copy,$str2$byval_copy)|0);
 _mrb_bool_value_307($agg$result,$3);
 STACKTOP = sp;return;
}
function _mrb_bool_value_307($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_plus_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $str = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $str;
 (_mrb_get_args($1,55924,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_plus($agg$result,$2,$self$byval_copy,$str$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_str_times($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $n = 0, $p = 0, $self$byval_copy = 0, $str2 = 0;
 var $times = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $times = sp + 12|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $times;
 (_mrb_get_args($1,64319,$vararg_buffer)|0);
 $2 = HEAP32[$times>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (_mrb_class_get($5,68855)|0);
  _mrb_raise($4,$6,64321);
  // unreachable;
 }
 $7 = HEAP32[$times>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$times>>2]|0;
  $10 = (2147483647 / ($9|0))&-1;
  $11 = HEAP32[$self>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 11;
  $14 = $13 & 8;
  $15 = ($14|0)!=(0);
  $16 = HEAP32[$self>>2]|0;
  if ($15) {
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 >>> 11;
   $19 = $18 & 496;
   $20 = $19 >> 4;
   $24 = $20;
  } else {
   $21 = ((($16)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $24 = $22;
  }
  $23 = ($10|0)<($24|0);
  if ($23) {
   $25 = $0;
   $26 = $0;
   $27 = (_mrb_class_get($26,68855)|0);
   _mrb_raise($25,$27,55926);
   // unreachable;
  }
 }
 $28 = HEAP32[$self>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 11;
 $31 = $30 & 8;
 $32 = ($31|0)!=(0);
 $33 = HEAP32[$self>>2]|0;
 if ($32) {
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 >>> 11;
  $36 = $35 & 496;
  $37 = $36 >> 4;
  $42 = $37;
 } else {
  $38 = ((($33)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $42 = $39;
 }
 $40 = HEAP32[$times>>2]|0;
 $41 = Math_imul($42, $40)|0;
 $len = $41;
 $43 = $0;
 $44 = $len;
 $45 = (_str_new($43,0,$44)|0);
 $str2 = $45;
 $46 = $0;
 $47 = $str2;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _str_with_class($46,$47,$self$byval_copy);
 $48 = $str2;
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 11;
 $51 = $50 & 8;
 $52 = ($51|0)!=(0);
 $53 = $str2;
 $54 = ((($53)) + 12|0);
 if ($52) {
  $57 = $54;
 } else {
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56;
 }
 $p = $57;
 $58 = $len;
 $59 = ($58|0)>(0);
 if ($59) {
  $60 = HEAP32[$self>>2]|0;
  $61 = HEAP32[$60>>2]|0;
  $62 = $61 >>> 11;
  $63 = $62 & 8;
  $64 = ($63|0)!=(0);
  $65 = HEAP32[$self>>2]|0;
  if ($64) {
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 >>> 11;
   $68 = $67 & 496;
   $69 = $68 >> 4;
   $72 = $69;
  } else {
   $70 = ((($65)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71;
  }
  $n = $72;
  $73 = $p;
  $74 = HEAP32[$self>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 11;
  $77 = $76 & 8;
  $78 = ($77|0)!=(0);
  $79 = HEAP32[$self>>2]|0;
  $80 = ((($79)) + 12|0);
  if ($78) {
   $84 = $80;
  } else {
   $81 = ((($80)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $84 = $82;
  }
  $83 = $n;
  _memcpy(($73|0),($84|0),($83|0))|0;
  while(1) {
   $85 = $n;
   $86 = $len;
   $87 = (($86|0) / 2)&-1;
   $88 = ($85|0)<=($87|0);
   $89 = $p;
   $90 = $n;
   $91 = (($89) + ($90)|0);
   $92 = $p;
   if (!($88)) {
    break;
   }
   $93 = $n;
   _memcpy(($91|0),($92|0),($93|0))|0;
   $94 = $n;
   $95 = $94<<1;
   $n = $95;
  }
  $96 = $len;
  $97 = $n;
  $98 = (($96) - ($97))|0;
  _memcpy(($91|0),($92|0),($98|0))|0;
 }
 $99 = $str2;
 $100 = HEAP32[$99>>2]|0;
 $101 = $100 >>> 11;
 $102 = $101 & 8;
 $103 = ($102|0)!=(0);
 $104 = $str2;
 if ($103) {
  $105 = HEAP32[$104>>2]|0;
  $106 = $105 >>> 11;
  $107 = $106 & 496;
  $108 = $107 >> 4;
  $113 = $108;
  $111 = $p;
  $112 = (($111) + ($113)|0);
  HEAP8[$112>>0] = 0;
  $114 = $str2;
  _mrb_obj_value_259($agg$result,$114);
  STACKTOP = sp;return;
 } else {
  $109 = ((($104)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $113 = $110;
  $111 = $p;
  $112 = (($111) + ($113)|0);
  HEAP8[$112>>0] = 0;
  $114 = $str2;
  _mrb_obj_value_259($agg$result,$114);
  STACKTOP = sp;return;
 }
}
function _mrb_str_aref_m($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a1$byval_copy = 0, $a1$byval_copy6 = 0, $a2 = 0;
 var $argc = 0, $str$byval_copy = 0, $str$byval_copy5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a1$byval_copy6 = sp + 80|0;
 $str$byval_copy5 = sp + 72|0;
 $str$byval_copy = sp + 64|0;
 $a1$byval_copy = sp + 56|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $a1 = sp + 40|0;
 $a2 = sp + 32|0;
 $1 = sp + 16|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $a1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $a2;
 $3 = (_mrb_get_args($2,55943,$vararg_buffer)|0);
 $argc = $3;
 $4 = $argc;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = $0;
  ;HEAP32[$a1$byval_copy>>2]=HEAP32[$a1>>2]|0;HEAP32[$a1$byval_copy+4>>2]=HEAP32[$a1+4>>2]|0;
  _mrb_regexp_check($6,$a1$byval_copy);
  $7 = $0;
  $8 = HEAP32[$a1>>2]|0;
  $9 = HEAP32[$a2>>2]|0;
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _str_substr($agg$result,$7,$str$byval_copy,$8,$9);
  STACKTOP = sp;return;
 }
 $10 = $argc;
 $11 = ($10|0)!=(1);
 $12 = $0;
 if ($11) {
  $13 = $0;
  $14 = (_mrb_class_get($13,68855)|0);
  $15 = $argc;
  _mrb_fixnum_value_289($1,$15);
  ;HEAP8[$vararg_buffer2>>0]=HEAP8[$1>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$1+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$1+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$1+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$1+7>>0]|0;
  _mrb_raisef($12,$14,55947,$vararg_buffer2);
  // unreachable;
 }
 ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$a1$byval_copy6>>2]=HEAP32[$a1>>2]|0;HEAP32[$a1$byval_copy6+4>>2]=HEAP32[$a1+4>>2]|0;
 _mrb_str_aref($agg$result,$12,$str$byval_copy5,$a1$byval_copy6);
 STACKTOP = sp;return;
}
function _mrb_str_aref($agg$result,$mrb,$str,$indx) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 $indx = $indx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beg = 0, $idx = 0, $indx$byval_copy = 0, $indx$byval_copy2 = 0, $indx$byval_copy3 = 0, $indx$byval_copy5 = 0, $indx$byval_copy7 = 0, $len = 0, $str$byval_copy = 0, $str$byval_copy1 = 0;
 var $str$byval_copy4 = 0, $str$byval_copy6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $indx$byval_copy7 = sp + 96|0;
 $str$byval_copy6 = sp + 88|0;
 $indx$byval_copy5 = sp + 80|0;
 $str$byval_copy4 = sp + 72|0;
 $indx$byval_copy3 = sp + 64|0;
 $indx$byval_copy2 = sp + 56|0;
 $str$byval_copy1 = sp + 48|0;
 $str$byval_copy = sp + 40|0;
 $indx$byval_copy = sp + 32|0;
 $1 = sp + 16|0;
 $beg = sp + 12|0;
 $len = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$indx$byval_copy>>2]=HEAP32[$indx>>2]|0;HEAP32[$indx$byval_copy+4>>2]=HEAP32[$indx+4>>2]|0;
 _mrb_regexp_check($3,$indx$byval_copy);
 $4 = ((($indx)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 3:  {
  $6 = HEAP32[$indx>>2]|0;
  $idx = $6;
  break;
 }
 case 16:  {
  $28 = $0;
  ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$indx$byval_copy2>>2]=HEAP32[$indx>>2]|0;HEAP32[$indx$byval_copy2+4>>2]=HEAP32[$indx+4>>2]|0;
  $29 = (_str_index($28,$str$byval_copy1,$indx$byval_copy2,0)|0);
  $30 = ($29|0)!=(-1);
  if ($30) {
   $31 = $0;
   ;HEAP32[$indx$byval_copy3>>2]=HEAP32[$indx>>2]|0;HEAP32[$indx$byval_copy3+4>>2]=HEAP32[$indx+4>>2]|0;
   _mrb_str_dup($agg$result,$31,$indx$byval_copy3);
   STACKTOP = sp;return;
  } else {
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
  break;
 }
 case 17:  {
  ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
  $32 = (_utf8_strlen($str$byval_copy4,-1)|0);
  HEAP32[$len>>2] = $32;
  $33 = $0;
  $34 = HEAP32[$len>>2]|0;
  ;HEAP32[$indx$byval_copy5>>2]=HEAP32[$indx>>2]|0;HEAP32[$indx$byval_copy5+4>>2]=HEAP32[$indx+4>>2]|0;
  $35 = (_mrb_range_beg_len($33,$indx$byval_copy5,$beg,$len,$34)|0);
  $36 = ($35<<24>>24)!=(0);
  if ($36) {
   $37 = $0;
   $38 = HEAP32[$beg>>2]|0;
   $39 = HEAP32[$len>>2]|0;
   ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
   _str_subseq($agg$result,$37,$str$byval_copy6,$38,$39);
   STACKTOP = sp;return;
  } else {
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $40 = $0;
  ;HEAP32[$indx$byval_copy7>>2]=HEAP32[$indx>>2]|0;HEAP32[$indx$byval_copy7+4>>2]=HEAP32[$indx+4>>2]|0;
  _mrb_Integer($2,$40,$indx$byval_copy7);
  ;HEAP32[$indx>>2]=HEAP32[$2>>2]|0;HEAP32[$indx+4>>2]=HEAP32[$2+4>>2]|0;
  $41 = ((($indx)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = HEAP32[$indx>>2]|0;
   $45 = ($44|0)!=(0);
   if (!($45)) {
    $46 = $0;
    $47 = $0;
    $48 = (_mrb_class_get($47,68905)|0);
    _mrb_raise($46,$48,55984);
    // unreachable;
   }
  }
  $49 = HEAP32[$indx>>2]|0;
  $idx = $49;
 }
 }
 $7 = $0;
 $8 = $idx;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _str_substr($1,$7,$str$byval_copy,$8,1);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $9 = ((($str)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$str>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $14 = HEAP32[$str>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 >>> 11;
  $17 = $16 & 8;
  $18 = ($17|0)!=(0);
  $19 = HEAP32[$str>>2]|0;
  if ($18) {
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 >>> 11;
   $22 = $21 & 496;
   $23 = $22 >> 4;
   $26 = $23;
  } else {
   $24 = ((($19)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25;
  }
  $27 = ($26|0)==(0);
  if ($27) {
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _str_index($mrb,$str,$sub,$offset) {
 $mrb = $mrb|0;
 $str = $str|0;
 $sub = $sub|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $pos = 0, $s = 0, $slen = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $offset;
 $3 = HEAP32[$str>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 8;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$str>>2]|0;
 if ($7) {
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 >>> 11;
  $11 = $10 & 496;
  $12 = $11 >> 4;
  $15 = $12;
 } else {
  $13 = ((($8)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
 }
 $len = $15;
 $16 = HEAP32[$sub>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$sub>>2]|0;
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 496;
  $25 = $24 >> 4;
  $28 = $25;
 } else {
  $26 = ((($21)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27;
 }
 $slen = $28;
 $29 = $2;
 $30 = ($29|0)<(0);
 if ($30) {
  $31 = $len;
  $32 = $2;
  $33 = (($32) + ($31))|0;
  $2 = $33;
  $34 = $2;
  $35 = ($34|0)<(0);
  if ($35) {
   $0 = -1;
   $107 = $0;
   STACKTOP = sp;return ($107|0);
  }
 }
 $36 = $len;
 $37 = $2;
 $38 = (($36) - ($37))|0;
 $39 = $slen;
 $40 = ($38|0)<($39|0);
 if ($40) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $41 = HEAP32[$str>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 >>> 11;
 $44 = $43 & 8;
 $45 = ($44|0)!=(0);
 $46 = HEAP32[$str>>2]|0;
 $47 = ((($46)) + 12|0);
 if ($45) {
  $50 = $47;
 } else {
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49;
 }
 $s = $50;
 $51 = $2;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $2;
  $54 = $s;
  $55 = (($54) + ($53)|0);
  $s = $55;
 }
 $56 = $slen;
 $57 = ($56|0)==(0);
 if ($57) {
  $58 = $2;
  $0 = $58;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $59 = HEAP32[$sub>>2]|0;
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 >>> 11;
 $62 = $61 & 8;
 $63 = ($62|0)!=(0);
 $64 = HEAP32[$sub>>2]|0;
 $65 = ((($64)) + 12|0);
 if ($63) {
  $68 = $65;
 } else {
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67;
 }
 $sptr = $68;
 $69 = HEAP32[$sub>>2]|0;
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 >>> 11;
 $72 = $71 & 8;
 $73 = ($72|0)!=(0);
 $74 = HEAP32[$sub>>2]|0;
 if ($73) {
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 11;
  $77 = $76 & 496;
  $78 = $77 >> 4;
  $81 = $78;
 } else {
  $79 = ((($74)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80;
 }
 $slen = $81;
 $82 = HEAP32[$str>>2]|0;
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 >>> 11;
 $85 = $84 & 8;
 $86 = ($85|0)!=(0);
 $87 = HEAP32[$str>>2]|0;
 if ($86) {
  $88 = HEAP32[$87>>2]|0;
  $89 = $88 >>> 11;
  $90 = $89 & 496;
  $91 = $90 >> 4;
  $96 = $91;
 } else {
  $92 = ((($87)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $96 = $93;
 }
 $94 = $2;
 $95 = (($96) - ($94))|0;
 $len = $95;
 $97 = $sptr;
 $98 = $slen;
 $99 = $s;
 $100 = $len;
 $101 = (_mrb_memsearch($97,$98,$99,$100)|0);
 $pos = $101;
 $102 = $pos;
 $103 = ($102|0)<(0);
 $104 = $pos;
 if ($103) {
  $0 = $104;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else {
  $105 = $2;
  $106 = (($104) + ($105))|0;
  $0 = $106;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _mrb_memsearch($x0,$m,$y0,$n) {
 $x0 = $x0|0;
 $m = $m|0;
 $y0 = $y0|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, $ye = 0, $ys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x0;
 $2 = $m;
 $3 = $y0;
 $4 = $n;
 $5 = $1;
 $x = $5;
 $6 = $3;
 $y = $6;
 $7 = $2;
 $8 = $4;
 $9 = ($7|0)>($8|0);
 do {
  if ($9) {
   $0 = -1;
  } else {
   $10 = $2;
   $11 = $4;
   $12 = ($10|0)==($11|0);
   if ($12) {
    $13 = $1;
    $14 = $3;
    $15 = $2;
    $16 = (_memcmp($13,$14,$15)|0);
    $17 = ($16|0)==(0);
    $18 = $17 ? 0 : -1;
    $0 = $18;
    break;
   }
   $19 = $2;
   $20 = ($19|0)<(1);
   if ($20) {
    $0 = 0;
    break;
   }
   $21 = $2;
   $22 = ($21|0)==(1);
   if (!($22)) {
    $43 = $1;
    $44 = $2;
    $45 = $3;
    $46 = $4;
    $47 = (_mrb_memsearch_qs($43,$44,$45,$46)|0);
    $0 = $47;
    break;
   }
   $23 = $y;
   $ys = $23;
   $24 = $ys;
   $25 = $4;
   $26 = (($24) + ($25)|0);
   $ye = $26;
   while(1) {
    $27 = $y;
    $28 = $ye;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     label = 13;
     break;
    }
    $30 = $x;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $y;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = ($32|0)==($35|0);
    $37 = $y;
    if ($36) {
     label = 11;
     break;
    }
    $42 = ((($37)) + 1|0);
    $y = $42;
   }
   if ((label|0) == 11) {
    $38 = $ys;
    $39 = $37;
    $40 = $38;
    $41 = (($39) - ($40))|0;
    $0 = $41;
    break;
   }
   else if ((label|0) == 13) {
    $0 = -1;
    break;
   }
  }
 } while(0);
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _mrb_memsearch_qs($xs,$m,$ys,$n) {
 $xs = $xs|0;
 $m = $m|0;
 $ys = $ys|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $qstable = 0, $x = 0, $xe = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $qstable = sp;
 $1 = $xs;
 $2 = $m;
 $3 = $ys;
 $4 = $n;
 $5 = $1;
 $x = $5;
 $6 = $1;
 $7 = $2;
 $8 = (($6) + ($7)|0);
 $xe = $8;
 $9 = $3;
 $y = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(256);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = (($12) + 1)|0;
  $14 = $i;
  $15 = (($qstable) + ($14<<2)|0);
  HEAP32[$15>>2] = $13;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 while(1) {
  $18 = $x;
  $19 = $xe;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $xe;
  $22 = $x;
  $23 = $21;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $x;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($qstable) + ($28<<2)|0);
  HEAP32[$29>>2] = $25;
  $30 = $x;
  $31 = ((($30)) + 1|0);
  $x = $31;
 }
 while(1) {
  $32 = $y;
  $33 = $2;
  $34 = (($32) + ($33)|0);
  $35 = $3;
  $36 = $4;
  $37 = (($35) + ($36)|0);
  $38 = ($34>>>0)<=($37>>>0);
  if (!($38)) {
   label = 11;
   break;
  }
  $39 = $1;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $y;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($41|0)==($44|0);
  if ($45) {
   $46 = $1;
   $47 = $y;
   $48 = $2;
   $49 = (_memcmp($46,$47,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    label = 9;
    break;
   }
  }
  $56 = $2;
  $57 = $y;
  $58 = (($57) + ($56)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($qstable) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $y;
  $64 = (($63) + ($62)|0);
  $y = $64;
 }
 if ((label|0) == 9) {
  $51 = $y;
  $52 = $3;
  $53 = $51;
  $54 = $52;
  $55 = (($53) - ($54))|0;
  $0 = $55;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _mrb_str_capitalize($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_str_dup($1,$3,$self$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_capitalize_bang($2,$4,$str$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_capitalize_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $modify = 0, $p = 0, $pend = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $modify = 0;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = $s;
 _mrb_str_modify($2,$3);
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $16 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 $17 = ($16|0)==(0);
 do {
  if (!($17)) {
   $18 = $s;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 >>> 11;
   $21 = $20 & 8;
   $22 = ($21|0)!=(0);
   $23 = $s;
   $24 = ((($23)) + 12|0);
   if ($22) {
    $25 = ($24|0)!=(0|0);
    if (!($25)) {
     break;
    }
   } else {
    $26 = ((($24)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     break;
    }
   }
   $29 = $s;
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 11;
   $32 = $31 & 8;
   $33 = ($32|0)!=(0);
   $34 = $s;
   $35 = ((($34)) + 12|0);
   if ($33) {
    $38 = $35;
   } else {
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
   }
   $p = $38;
   $39 = $s;
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 >>> 11;
   $42 = $41 & 8;
   $43 = ($42|0)!=(0);
   $44 = $s;
   $45 = ((($44)) + 12|0);
   if ($43) {
    $61 = $45;
   } else {
    $46 = ((($45)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $61 = $47;
   }
   $48 = $s;
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 >>> 11;
   $51 = $50 & 8;
   $52 = ($51|0)!=(0);
   $53 = $s;
   if ($52) {
    $54 = HEAP32[$53>>2]|0;
    $55 = $54 >>> 11;
    $56 = $55 & 496;
    $57 = $56 >> 4;
    $62 = $57;
   } else {
    $58 = ((($53)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $62 = $59;
   }
   $60 = (($61) + ($62)|0);
   $pend = $60;
   $63 = $p;
   $64 = HEAP8[$63>>0]|0;
   $65 = $64 << 24 >> 24;
   $66 = (($65) - 97)|0;
   $67 = ($66>>>0)<(26);
   if ($67) {
    $68 = $p;
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = (($70) - 97)|0;
    $72 = ($71>>>0)<(26);
    $73 = $p;
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 << 24 >> 24;
    $76 = $75 & 95;
    $77 = $72 ? $76 : $75;
    $78 = $77&255;
    $79 = $p;
    HEAP8[$79>>0] = $78;
    $modify = 1;
   }
   while(1) {
    $80 = $p;
    $81 = ((($80)) + 1|0);
    $p = $81;
    $82 = $pend;
    $83 = ($81>>>0)<($82>>>0);
    if (!($83)) {
     break;
    }
    $84 = $p;
    $85 = HEAP8[$84>>0]|0;
    $86 = $85 << 24 >> 24;
    $87 = (($86) - 65)|0;
    $88 = ($87>>>0)<(26);
    if (!($88)) {
     continue;
    }
    $89 = $p;
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = (($91) - 65)|0;
    $93 = ($92>>>0)<(26);
    $94 = $p;
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = $96 | 32;
    $98 = $93 ? $97 : $96;
    $99 = $98&255;
    $100 = $p;
    HEAP8[$100>>0] = $99;
    $modify = 1;
   }
   $101 = $modify;
   $102 = ($101<<24>>24)!=(0);
   if ($102) {
    ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
    STACKTOP = sp;return;
   } else {
    _mrb_nil_value_282($agg$result);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 _mrb_nil_value_282($agg$result);
 STACKTOP = sp;return;
}
function _mrb_str_chomp($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_str_dup($1,$3,$self$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_chomp_bang($2,$4,$str$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_chomp_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $len = 0, $newline = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $pp = 0, $rs = 0, $rslen = 0, $s = 0, $tmp_n = 0, $tmp_n1 = 0, $tmp_n2 = 0, $tmp_n3 = 0, $tmp_n4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $rs = sp + 48|0;
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = $s;
 _mrb_str_modify($2,$3);
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $16 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 $len = $16;
 $17 = $0;
 HEAP32[$vararg_buffer>>2] = $rs;
 $18 = (_mrb_get_args($17,56037,$vararg_buffer)|0);
 $19 = ($18|0)==(0);
 $20 = $len;
 $21 = ($20|0)==(0);
 L5: do {
  if ($19) {
   if ($21) {
    _mrb_nil_value_282($agg$result);
    STACKTOP = sp;return;
   }
  } else {
   do {
    if (!($21)) {
     $267 = ((($rs)) + 4|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = ($268|0)==(0);
     if ($269) {
      $270 = HEAP32[$rs>>2]|0;
      $271 = ($270|0)!=(0);
      if (!($271)) {
       break;
      }
     }
     $272 = $s;
     $273 = HEAP32[$272>>2]|0;
     $274 = $273 >>> 11;
     $275 = $274 & 8;
     $276 = ($275|0)!=(0);
     $277 = $s;
     $278 = ((($277)) + 12|0);
     if ($276) {
      $281 = $278;
     } else {
      $279 = ((($278)) + 8|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280;
     }
     $p = $281;
     $282 = HEAP32[$rs>>2]|0;
     $283 = HEAP32[$282>>2]|0;
     $284 = $283 >>> 11;
     $285 = $284 & 8;
     $286 = ($285|0)!=(0);
     $287 = HEAP32[$rs>>2]|0;
     if ($286) {
      $288 = HEAP32[$287>>2]|0;
      $289 = $288 >>> 11;
      $290 = $289 & 496;
      $291 = $290 >> 4;
      $294 = $291;
     } else {
      $292 = ((($287)) + 12|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $293;
     }
     $rslen = $294;
     $295 = $rslen;
     $296 = ($295|0)==(0);
     if ($296) {
      while(1) {
       $297 = $len;
       $298 = ($297|0)>(0);
       if ($298) {
        $299 = $len;
        $300 = (($299) - 1)|0;
        $301 = $p;
        $302 = (($301) + ($300)|0);
        $303 = HEAP8[$302>>0]|0;
        $304 = $303 << 24 >> 24;
        $305 = ($304|0)==(10);
        $480 = $305;
       } else {
        $480 = 0;
       }
       $306 = $len;
       if (!($480)) {
        break;
       }
       $307 = (($306) + -1)|0;
       $len = $307;
       $308 = $len;
       $309 = ($308|0)>(0);
       if (!($309)) {
        continue;
       }
       $310 = $len;
       $311 = (($310) - 1)|0;
       $312 = $p;
       $313 = (($312) + ($311)|0);
       $314 = HEAP8[$313>>0]|0;
       $315 = $314 << 24 >> 24;
       $316 = ($315|0)==(13);
       if (!($316)) {
        continue;
       }
       $317 = $len;
       $318 = (($317) + -1)|0;
       $len = $318;
      }
      $319 = $s;
      $320 = HEAP32[$319>>2]|0;
      $321 = $320 >>> 11;
      $322 = $321 & 8;
      $323 = ($322|0)!=(0);
      $324 = $s;
      if ($323) {
       $325 = HEAP32[$324>>2]|0;
       $326 = $325 >>> 11;
       $327 = $326 & 496;
       $328 = $327 >> 4;
       $332 = $328;
      } else {
       $329 = ((($324)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $332 = $330;
      }
      $331 = ($306|0)<($332|0);
      if (!($331)) {
       _mrb_nil_value_282($agg$result);
       STACKTOP = sp;return;
      }
      $333 = $s;
      $334 = HEAP32[$333>>2]|0;
      $335 = $334 >>> 11;
      $336 = $335 & 8;
      $337 = ($336|0)!=(0);
      $338 = $len;
      if ($337) {
       $tmp_n3 = $338;
       $339 = $s;
       $340 = HEAP32[$339>>2]|0;
       $341 = $340 >>> 11;
       $342 = $341 & -497;
       $343 = HEAP32[$339>>2]|0;
       $344 = $342 & 2097151;
       $345 = $344 << 11;
       $346 = $343 & 2047;
       $347 = $346 | $345;
       HEAP32[$339>>2] = $347;
       $348 = $tmp_n3;
       $349 = $348 << 4;
       $350 = $s;
       $351 = HEAP32[$350>>2]|0;
       $352 = $351 >>> 11;
       $353 = $352 | $349;
       $354 = HEAP32[$350>>2]|0;
       $355 = $353 & 2097151;
       $356 = $355 << 11;
       $357 = $354 & 2047;
       $358 = $357 | $356;
       HEAP32[$350>>2] = $358;
      } else {
       $359 = $s;
       $360 = ((($359)) + 12|0);
       HEAP32[$360>>2] = $338;
      }
      $361 = $len;
      $362 = $p;
      $363 = (($362) + ($361)|0);
      HEAP8[$363>>0] = 0;
      ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
      STACKTOP = sp;return;
     }
     $364 = $rslen;
     $365 = $len;
     $366 = ($364|0)>($365|0);
     if ($366) {
      _mrb_nil_value_282($agg$result);
      STACKTOP = sp;return;
     }
     $367 = $rslen;
     $368 = (($367) - 1)|0;
     $369 = HEAP32[$rs>>2]|0;
     $370 = HEAP32[$369>>2]|0;
     $371 = $370 >>> 11;
     $372 = $371 & 8;
     $373 = ($372|0)!=(0);
     $374 = HEAP32[$rs>>2]|0;
     $375 = ((($374)) + 12|0);
     if ($373) {
      $379 = $375;
     } else {
      $376 = ((($375)) + 8|0);
      $377 = HEAP32[$376>>2]|0;
      $379 = $377;
     }
     $378 = (($379) + ($368)|0);
     $380 = HEAP8[$378>>0]|0;
     $381 = $380 << 24 >> 24;
     $newline = $381;
     $382 = $rslen;
     $383 = ($382|0)==(1);
     $384 = $newline;
     $385 = ($384|0)==(10);
     $or$cond = $383 & $385;
     if ($or$cond) {
      $386 = $rslen;
      $387 = (($386) - 1)|0;
      $388 = HEAP32[$rs>>2]|0;
      $389 = HEAP32[$388>>2]|0;
      $390 = $389 >>> 11;
      $391 = $390 & 8;
      $392 = ($391|0)!=(0);
      $393 = HEAP32[$rs>>2]|0;
      $394 = ((($393)) + 12|0);
      if ($392) {
       $398 = $394;
      } else {
       $395 = ((($394)) + 8|0);
       $396 = HEAP32[$395>>2]|0;
       $398 = $396;
      }
      $397 = (($398) + ($387)|0);
      $399 = HEAP8[$397>>0]|0;
      $400 = $399 << 24 >> 24;
      $newline = $400;
     }
     $401 = $rslen;
     $402 = ($401|0)==(1);
     $403 = $newline;
     $404 = ($403|0)==(10);
     $or$cond3 = $402 & $404;
     if ($or$cond3) {
      break L5;
     }
     $405 = $p;
     $406 = $len;
     $407 = (($405) + ($406)|0);
     $408 = $rslen;
     $409 = (0 - ($408))|0;
     $410 = (($407) + ($409)|0);
     $pp = $410;
     $411 = $len;
     $412 = (($411) - 1)|0;
     $413 = $p;
     $414 = (($413) + ($412)|0);
     $415 = HEAP8[$414>>0]|0;
     $416 = $415 << 24 >> 24;
     $417 = $newline;
     $418 = ($416|0)==($417|0);
     do {
      if ($418) {
       $419 = $rslen;
       $420 = ($419|0)<=(1);
       if (!($420)) {
        $421 = HEAP32[$rs>>2]|0;
        $422 = HEAP32[$421>>2]|0;
        $423 = $422 >>> 11;
        $424 = $423 & 8;
        $425 = ($424|0)!=(0);
        $426 = HEAP32[$rs>>2]|0;
        $427 = ((($426)) + 12|0);
        if ($425) {
         $432 = $427;
        } else {
         $428 = ((($427)) + 8|0);
         $429 = HEAP32[$428>>2]|0;
         $432 = $429;
        }
        $430 = $pp;
        $431 = $rslen;
        $433 = (_memcmp($432,$430,$431)|0);
        $434 = ($433|0)==(0);
        if (!($434)) {
         break;
        }
       }
       $435 = $s;
       $436 = HEAP32[$435>>2]|0;
       $437 = $436 >>> 11;
       $438 = $437 & 8;
       $439 = ($438|0)!=(0);
       $440 = $len;
       $441 = $rslen;
       $442 = (($440) - ($441))|0;
       if ($439) {
        $tmp_n4 = $442;
        $443 = $s;
        $444 = HEAP32[$443>>2]|0;
        $445 = $444 >>> 11;
        $446 = $445 & -497;
        $447 = HEAP32[$443>>2]|0;
        $448 = $446 & 2097151;
        $449 = $448 << 11;
        $450 = $447 & 2047;
        $451 = $450 | $449;
        HEAP32[$443>>2] = $451;
        $452 = $tmp_n4;
        $453 = $452 << 4;
        $454 = $s;
        $455 = HEAP32[$454>>2]|0;
        $456 = $455 >>> 11;
        $457 = $456 | $453;
        $458 = HEAP32[$454>>2]|0;
        $459 = $457 & 2097151;
        $460 = $459 << 11;
        $461 = $458 & 2047;
        $462 = $461 | $460;
        HEAP32[$454>>2] = $462;
       } else {
        $463 = $s;
        $464 = ((($463)) + 12|0);
        HEAP32[$464>>2] = $442;
       }
       $465 = $s;
       $466 = HEAP32[$465>>2]|0;
       $467 = $466 >>> 11;
       $468 = $467 & 8;
       $469 = ($468|0)!=(0);
       $470 = $s;
       if ($469) {
        $471 = HEAP32[$470>>2]|0;
        $472 = $471 >>> 11;
        $473 = $472 & 496;
        $474 = $473 >> 4;
        $479 = $474;
       } else {
        $475 = ((($470)) + 12|0);
        $476 = HEAP32[$475>>2]|0;
        $479 = $476;
       }
       $477 = $p;
       $478 = (($477) + ($479)|0);
       HEAP8[$478>>0] = 0;
       ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
       STACKTOP = sp;return;
      }
     } while(0);
     _mrb_nil_value_282($agg$result);
     STACKTOP = sp;return;
    }
   } while(0);
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = $len;
 $23 = (($22) - 1)|0;
 $24 = $s;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 11;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 $29 = $s;
 $30 = ((($29)) + 12|0);
 if ($28) {
  $34 = $30;
 } else {
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $34 = $32;
 }
 $33 = (($34) + ($23)|0);
 $35 = HEAP8[$33>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)==(10);
 do {
  if ($37) {
   $38 = $s;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 >>> 11;
   $41 = $40 & 8;
   $42 = ($41|0)!=(0);
   $43 = $s;
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 11;
   $46 = $45 & 8;
   $47 = ($46|0)!=(0);
   $48 = $s;
   if ($42) {
    if ($47) {
     $49 = HEAP32[$48>>2]|0;
     $50 = $49 >>> 11;
     $51 = $50 & 496;
     $52 = $51 >> 4;
     $56 = $52;
    } else {
     $53 = ((($48)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $56 = $54;
    }
    $55 = (($56) - 1)|0;
    $tmp_n = $55;
    $57 = $s;
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 >>> 11;
    $60 = $59 & -497;
    $61 = HEAP32[$57>>2]|0;
    $62 = $60 & 2097151;
    $63 = $62 << 11;
    $64 = $61 & 2047;
    $65 = $64 | $63;
    HEAP32[$57>>2] = $65;
    $66 = $tmp_n;
    $67 = $66 << 4;
    $68 = $s;
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 >>> 11;
    $71 = $70 | $67;
    $72 = HEAP32[$68>>2]|0;
    $73 = $71 & 2097151;
    $74 = $73 << 11;
    $75 = $72 & 2047;
    $76 = $75 | $74;
    HEAP32[$68>>2] = $76;
   } else {
    if ($47) {
     $77 = HEAP32[$48>>2]|0;
     $78 = $77 >>> 11;
     $79 = $78 & 496;
     $80 = $79 >> 4;
     $84 = $80;
    } else {
     $81 = ((($48)) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $84 = $82;
    }
    $83 = (($84) - 1)|0;
    $85 = $s;
    $86 = ((($85)) + 12|0);
    HEAP32[$86>>2] = $83;
   }
   $87 = $s;
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 >>> 11;
   $90 = $89 & 8;
   $91 = ($90|0)!=(0);
   $92 = $s;
   if ($91) {
    $93 = HEAP32[$92>>2]|0;
    $94 = $93 >>> 11;
    $95 = $94 & 496;
    $96 = $95 >> 4;
    $99 = $96;
   } else {
    $97 = ((($92)) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $98;
   }
   $100 = ($99|0)>(0);
   if ($100) {
    $101 = $s;
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 >>> 11;
    $104 = $103 & 8;
    $105 = ($104|0)!=(0);
    $106 = $s;
    if ($105) {
     $107 = HEAP32[$106>>2]|0;
     $108 = $107 >>> 11;
     $109 = $108 & 496;
     $110 = $109 >> 4;
     $114 = $110;
    } else {
     $111 = ((($106)) + 12|0);
     $112 = HEAP32[$111>>2]|0;
     $114 = $112;
    }
    $113 = (($114) - 1)|0;
    $115 = $s;
    $116 = HEAP32[$115>>2]|0;
    $117 = $116 >>> 11;
    $118 = $117 & 8;
    $119 = ($118|0)!=(0);
    $120 = $s;
    $121 = ((($120)) + 12|0);
    if ($119) {
     $125 = $121;
    } else {
     $122 = ((($121)) + 8|0);
     $123 = HEAP32[$122>>2]|0;
     $125 = $123;
    }
    $124 = (($125) + ($113)|0);
    $126 = HEAP8[$124>>0]|0;
    $127 = $126 << 24 >> 24;
    $128 = ($127|0)==(13);
    if ($128) {
     $129 = $s;
     $130 = HEAP32[$129>>2]|0;
     $131 = $130 >>> 11;
     $132 = $131 & 8;
     $133 = ($132|0)!=(0);
     $134 = $s;
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 >>> 11;
     $137 = $136 & 8;
     $138 = ($137|0)!=(0);
     $139 = $s;
     if ($133) {
      if ($138) {
       $140 = HEAP32[$139>>2]|0;
       $141 = $140 >>> 11;
       $142 = $141 & 496;
       $143 = $142 >> 4;
       $147 = $143;
      } else {
       $144 = ((($139)) + 12|0);
       $145 = HEAP32[$144>>2]|0;
       $147 = $145;
      }
      $146 = (($147) - 1)|0;
      $tmp_n1 = $146;
      $148 = $s;
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 >>> 11;
      $151 = $150 & -497;
      $152 = HEAP32[$148>>2]|0;
      $153 = $151 & 2097151;
      $154 = $153 << 11;
      $155 = $152 & 2047;
      $156 = $155 | $154;
      HEAP32[$148>>2] = $156;
      $157 = $tmp_n1;
      $158 = $157 << 4;
      $159 = $s;
      $160 = HEAP32[$159>>2]|0;
      $161 = $160 >>> 11;
      $162 = $161 | $158;
      $163 = HEAP32[$159>>2]|0;
      $164 = $162 & 2097151;
      $165 = $164 << 11;
      $166 = $163 & 2047;
      $167 = $166 | $165;
      HEAP32[$159>>2] = $167;
      break;
     } else {
      if ($138) {
       $168 = HEAP32[$139>>2]|0;
       $169 = $168 >>> 11;
       $170 = $169 & 496;
       $171 = $170 >> 4;
       $175 = $171;
      } else {
       $172 = ((($139)) + 12|0);
       $173 = HEAP32[$172>>2]|0;
       $175 = $173;
      }
      $174 = (($175) - 1)|0;
      $176 = $s;
      $177 = ((($176)) + 12|0);
      HEAP32[$177>>2] = $174;
      break;
     }
    }
   }
  } else {
   $178 = $len;
   $179 = (($178) - 1)|0;
   $180 = $s;
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 >>> 11;
   $183 = $182 & 8;
   $184 = ($183|0)!=(0);
   $185 = $s;
   $186 = ((($185)) + 12|0);
   if ($184) {
    $190 = $186;
   } else {
    $187 = ((($186)) + 8|0);
    $188 = HEAP32[$187>>2]|0;
    $190 = $188;
   }
   $189 = (($190) + ($179)|0);
   $191 = HEAP8[$189>>0]|0;
   $192 = $191 << 24 >> 24;
   $193 = ($192|0)==(13);
   if (!($193)) {
    _mrb_nil_value_282($agg$result);
    STACKTOP = sp;return;
   }
   $194 = $s;
   $195 = HEAP32[$194>>2]|0;
   $196 = $195 >>> 11;
   $197 = $196 & 8;
   $198 = ($197|0)!=(0);
   $199 = $s;
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 >>> 11;
   $202 = $201 & 8;
   $203 = ($202|0)!=(0);
   $204 = $s;
   if ($198) {
    if ($203) {
     $205 = HEAP32[$204>>2]|0;
     $206 = $205 >>> 11;
     $207 = $206 & 496;
     $208 = $207 >> 4;
     $212 = $208;
    } else {
     $209 = ((($204)) + 12|0);
     $210 = HEAP32[$209>>2]|0;
     $212 = $210;
    }
    $211 = (($212) - 1)|0;
    $tmp_n2 = $211;
    $213 = $s;
    $214 = HEAP32[$213>>2]|0;
    $215 = $214 >>> 11;
    $216 = $215 & -497;
    $217 = HEAP32[$213>>2]|0;
    $218 = $216 & 2097151;
    $219 = $218 << 11;
    $220 = $217 & 2047;
    $221 = $220 | $219;
    HEAP32[$213>>2] = $221;
    $222 = $tmp_n2;
    $223 = $222 << 4;
    $224 = $s;
    $225 = HEAP32[$224>>2]|0;
    $226 = $225 >>> 11;
    $227 = $226 | $223;
    $228 = HEAP32[$224>>2]|0;
    $229 = $227 & 2097151;
    $230 = $229 << 11;
    $231 = $228 & 2047;
    $232 = $231 | $230;
    HEAP32[$224>>2] = $232;
    break;
   } else {
    if ($203) {
     $233 = HEAP32[$204>>2]|0;
     $234 = $233 >>> 11;
     $235 = $234 & 496;
     $236 = $235 >> 4;
     $240 = $236;
    } else {
     $237 = ((($204)) + 12|0);
     $238 = HEAP32[$237>>2]|0;
     $240 = $238;
    }
    $239 = (($240) - 1)|0;
    $241 = $s;
    $242 = ((($241)) + 12|0);
    HEAP32[$242>>2] = $239;
    break;
   }
  }
 } while(0);
 $243 = $s;
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 >>> 11;
 $246 = $245 & 8;
 $247 = ($246|0)!=(0);
 $248 = $s;
 if ($247) {
  $249 = HEAP32[$248>>2]|0;
  $250 = $249 >>> 11;
  $251 = $250 & 496;
  $252 = $251 >> 4;
  $266 = $252;
 } else {
  $253 = ((($248)) + 12|0);
  $254 = HEAP32[$253>>2]|0;
  $266 = $254;
 }
 $255 = $s;
 $256 = HEAP32[$255>>2]|0;
 $257 = $256 >>> 11;
 $258 = $257 & 8;
 $259 = ($258|0)!=(0);
 $260 = $s;
 $261 = ((($260)) + 12|0);
 if ($259) {
  $265 = $261;
 } else {
  $262 = ((($261)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $265 = $263;
 }
 $264 = (($265) + ($266)|0);
 HEAP8[$264>>0] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_chop($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_str_dup($1,$3,$self$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_chop_bang($2,$4,$str$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_chop_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $clen = 0, $e = 0;
 var $len = 0, $or$cond = 0, $p = 0, $s = 0, $t = 0, $tmp_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = $s;
 _mrb_str_modify($2,$3);
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $16 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 $17 = ($16|0)>(0);
 if (!($17)) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $18 = $s;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 & 8;
 $22 = ($21|0)!=(0);
 $23 = $s;
 $24 = ((($23)) + 12|0);
 if ($22) {
  $27 = $24;
 } else {
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26;
 }
 $t = $27;
 $28 = $t;
 $p = $28;
 $29 = $p;
 $30 = $s;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 11;
 $33 = $32 & 8;
 $34 = ($33|0)!=(0);
 $35 = $s;
 if ($34) {
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 >>> 11;
  $38 = $37 & 496;
  $39 = $38 >> 4;
  $43 = $39;
 } else {
  $40 = ((($35)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $43 = $41;
 }
 $42 = (($29) + ($43)|0);
 $e = $42;
 while(1) {
  $44 = $p;
  $45 = $e;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $p;
  $48 = $e;
  $49 = (_utf8len($47,$48)|0);
  $clen = $49;
  $50 = $p;
  $51 = $clen;
  $52 = (($50) + ($51)|0);
  $53 = $e;
  $54 = ($52>>>0)>=($53>>>0);
  if ($54) {
   break;
  }
  $55 = $clen;
  $56 = $p;
  $57 = (($56) + ($55)|0);
  $p = $57;
 }
 $58 = $p;
 $59 = $t;
 $60 = $58;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $len = $62;
 $63 = $len;
 $64 = $s;
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 >>> 11;
 $67 = $66 & 8;
 $68 = ($67|0)!=(0);
 $69 = $s;
 $70 = ((($69)) + 12|0);
 if ($68) {
  $74 = $70;
 } else {
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $74 = $72;
 }
 $73 = (($74) + ($63)|0);
 $75 = HEAP8[$73>>0]|0;
 $76 = $75 << 24 >> 24;
 $77 = ($76|0)==(10);
 $78 = $len;
 $79 = ($78|0)>(0);
 $or$cond = $77 & $79;
 if ($or$cond) {
  $80 = $len;
  $81 = (($80) - 1)|0;
  $82 = $s;
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 >>> 11;
  $85 = $84 & 8;
  $86 = ($85|0)!=(0);
  $87 = $s;
  $88 = ((($87)) + 12|0);
  if ($86) {
   $92 = $88;
  } else {
   $89 = ((($88)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $92 = $90;
  }
  $91 = (($92) + ($81)|0);
  $93 = HEAP8[$91>>0]|0;
  $94 = $93 << 24 >> 24;
  $95 = ($94|0)==(13);
  if ($95) {
   $96 = $len;
   $97 = (($96) + -1)|0;
   $len = $97;
  }
 }
 $98 = $s;
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 >>> 11;
 $101 = $100 & 8;
 $102 = ($101|0)!=(0);
 $103 = $len;
 if ($102) {
  $tmp_n = $103;
  $104 = $s;
  $105 = HEAP32[$104>>2]|0;
  $106 = $105 >>> 11;
  $107 = $106 & -497;
  $108 = HEAP32[$104>>2]|0;
  $109 = $107 & 2097151;
  $110 = $109 << 11;
  $111 = $108 & 2047;
  $112 = $111 | $110;
  HEAP32[$104>>2] = $112;
  $113 = $tmp_n;
  $114 = $113 << 4;
  $115 = $s;
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 >>> 11;
  $118 = $117 | $114;
  $119 = HEAP32[$115>>2]|0;
  $120 = $118 & 2097151;
  $121 = $120 << 11;
  $122 = $119 & 2047;
  $123 = $122 | $121;
  HEAP32[$115>>2] = $123;
 } else {
  $124 = $s;
  $125 = ((($124)) + 12|0);
  HEAP32[$125>>2] = $103;
 }
 $126 = $len;
 $127 = $s;
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 >>> 11;
 $130 = $129 & 8;
 $131 = ($130|0)!=(0);
 $132 = $s;
 $133 = ((($132)) + 12|0);
 if ($131) {
  $137 = $133;
 } else {
  $134 = ((($133)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $137 = $135;
 }
 $136 = (($137) + ($126)|0);
 HEAP8[$136>>0] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_downcase($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_str_dup($1,$3,$self$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_downcase_bang($2,$4,$str$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_downcase_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $modify = 0, $p = 0, $pend = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $modify = 0;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $0;
 $3 = $s;
 _mrb_str_modify($2,$3);
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 $10 = ((($9)) + 12|0);
 if ($8) {
  $13 = $10;
 } else {
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $p = $13;
 $14 = $s;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 11;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 $19 = $s;
 $20 = ((($19)) + 12|0);
 if ($18) {
  $36 = $20;
 } else {
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $36 = $22;
 }
 $23 = $s;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 11;
 $26 = $25 & 8;
 $27 = ($26|0)!=(0);
 $28 = $s;
 if ($27) {
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 11;
  $31 = $30 & 496;
  $32 = $31 >> 4;
  $37 = $32;
 } else {
  $33 = ((($28)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $37 = $34;
 }
 $35 = (($36) + ($37)|0);
 $pend = $35;
 while(1) {
  $38 = $p;
  $39 = $pend;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (($43) - 65)|0;
  $45 = ($44>>>0)<(26);
  if ($45) {
   $46 = $p;
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = (($48) - 65)|0;
   $50 = ($49>>>0)<(26);
   $51 = $p;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 << 24 >> 24;
   $54 = $53 | 32;
   $55 = $50 ? $54 : $53;
   $56 = $55&255;
   $57 = $p;
   HEAP8[$57>>0] = $56;
   $modify = 1;
  }
  $58 = $p;
  $59 = ((($58)) + 1|0);
  $p = $59;
 }
 $60 = $modify;
 $61 = ($60<<24>>24)!=(0);
 if ($61) {
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_str_empty_p($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = $s;
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 11;
  $10 = $9 & 496;
  $11 = $10 >> 4;
  $14 = $11;
 } else {
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 }
 $15 = ($14|0)==(0);
 $16 = $15&1;
 $17 = $16&255;
 _mrb_bool_value_307($agg$result,$17);
 STACKTOP = sp;return;
}
function _mrb_str_eql($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eql_p = 0, $self$byval_copy = 0, $str2 = 0, $str2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $str2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($str2)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(16);
 if (!($4)) {
  $10 = 0;
  $9 = $10&1;
  $11 = $9&255;
  $eql_p = $11;
  $12 = $eql_p;
  _mrb_bool_value_307($agg$result,$12);
  STACKTOP = sp;return;
 }
 $5 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 $6 = (_str_eql($5,$self$byval_copy,$str2$byval_copy)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 $10 = $8;
 $9 = $10&1;
 $11 = $9&255;
 $eql_p = $11;
 $12 = $eql_p;
 _mrb_bool_value_307($agg$result,$12);
 STACKTOP = sp;return;
}
function _mrb_str_hash_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $key = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $2 = (_mrb_str_hash($1,$self$byval_copy)|0);
 $key = $2;
 $3 = $key;
 _mrb_fixnum_value_289($agg$result,$3);
 STACKTOP = sp;return;
}
function _mrb_str_include($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $include_p = 0, $self$byval_copy = 0, $str2 = 0, $str2$byval_copy = 0, $str2$byval_copy1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy1 = sp + 48|0;
 $self$byval_copy = sp + 40|0;
 $str2$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $str2 = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = ((($str2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(3);
 if (!($5)) {
  $34 = $0;
  ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
  _mrb_str_to_str($1,$34,$str2$byval_copy);
  ;HEAP32[$str2>>2]=HEAP32[$1>>2]|0;HEAP32[$str2+4>>2]=HEAP32[$1+4>>2]|0;
  $35 = $0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$str2$byval_copy1>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy1+4>>2]=HEAP32[$str2+4>>2]|0;
  $36 = (_str_index($35,$self$byval_copy,$str2$byval_copy1,0)|0);
  $i = $36;
  $37 = $i;
  $38 = ($37|0)!=(-1);
  $39 = $38&1;
  $40 = $39&255;
  $include_p = $40;
  $41 = $include_p;
  _mrb_bool_value_307($agg$result,$41);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$self>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & 8;
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$self>>2]|0;
 $12 = ((($11)) + 12|0);
 if ($10) {
  $28 = $12;
 } else {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $28 = $14;
 }
 $15 = HEAP32[$str2>>2]|0;
 $16 = HEAP32[$self>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$self>>2]|0;
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 496;
  $25 = $24 >> 4;
  $29 = $25;
 } else {
  $26 = ((($21)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $29 = $27;
 }
 $30 = (_memchr($28,$15,$29)|0);
 $31 = ($30|0)!=(0|0);
 $32 = $31&1;
 $33 = $32&255;
 $include_p = $33;
 $41 = $include_p;
 _mrb_bool_value_307($agg$result,$41);
 STACKTOP = sp;return;
}
function _mrb_str_index($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $clen = 0, $cond = 0;
 var $pos = 0, $str$byval_copy = 0, $str$byval_copy5 = 0, $str$byval_copy7 = 0, $sub = 0, $sub$byval_copy = 0, $sub$byval_copy6 = 0, $sub$byval_copy8 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sub$byval_copy8 = sp + 112|0;
 $str$byval_copy7 = sp + 104|0;
 $sub$byval_copy6 = sp + 96|0;
 $str$byval_copy5 = sp + 88|0;
 $str$byval_copy = sp + 80|0;
 $sub$byval_copy = sp + 72|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $argv = sp + 60|0;
 $argc = sp + 56|0;
 $sub = sp + 48|0;
 $1 = sp + 32|0;
 $tmp = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($3,68114,$vararg_buffer)|0);
 $4 = HEAP32[$argc>>2]|0;
 $5 = ($4|0)==(2);
 do {
  if ($5) {
   $6 = HEAP32[$argv>>2]|0;
   $7 = ((($6)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $pos = $8;
   $9 = HEAP32[$argv>>2]|0;
   ;HEAP32[$sub>>2]=HEAP32[$9>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$9+4>>2]|0;
  } else {
   $pos = 0;
   $10 = HEAP32[$argc>>2]|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$argv>>2]|0;
    ;HEAP32[$sub>>2]=HEAP32[$12>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$12+4>>2]|0;
    break;
   } else {
    _mrb_nil_value_282($1);
    ;HEAP32[$sub>>2]=HEAP32[$1>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$1+4>>2]|0;
    break;
   }
  }
 } while(0);
 $13 = $0;
 ;HEAP32[$sub$byval_copy>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy+4>>2]=HEAP32[$sub+4>>2]|0;
 _mrb_regexp_check($13,$sub$byval_copy);
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $14 = (_utf8_strlen($str$byval_copy,-1)|0);
 $clen = $14;
 $15 = $pos;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $clen;
  $18 = $pos;
  $19 = (($18) + ($17))|0;
  $pos = $19;
  $20 = $pos;
  $21 = ($20|0)<(0);
  if ($21) {
   _mrb_nil_value_282($agg$result);
   STACKTOP = sp;return;
  }
 }
 $22 = $pos;
 $23 = $clen;
 $24 = ($22|0)>=($23|0);
 if ($24) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $25 = $pos;
 ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
 $26 = (_chars2bytes($str$byval_copy5,0,$25)|0);
 $pos = $26;
 $27 = ((($sub)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $cond = ($28|0)==(16);
 if (!($cond)) {
  $29 = $0;
  ;HEAP32[$sub$byval_copy6>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy6+4>>2]=HEAP32[$sub+4>>2]|0;
  _mrb_check_string_type($2,$29,$sub$byval_copy6);
  ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0;
  $30 = ((($tmp)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = HEAP32[$tmp>>2]|0;
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $35 = $0;
    $36 = $0;
    $37 = (_mrb_class_get($36,68905)|0);
    ;HEAP8[$vararg_buffer2>>0]=HEAP8[$sub>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$sub+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$sub+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$sub+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$sub+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$sub+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$sub+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$sub+7>>0]|0;
    _mrb_raisef($35,$37,56077,$vararg_buffer2);
    // unreachable;
   }
  }
  ;HEAP32[$sub>>2]=HEAP32[$tmp>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$tmp+4>>2]|0;
 }
 $38 = $0;
 $39 = $pos;
 ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$sub$byval_copy8>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy8+4>>2]=HEAP32[$sub+4>>2]|0;
 $40 = (_str_index($38,$str$byval_copy7,$sub$byval_copy8,$39)|0);
 $pos = $40;
 $41 = $pos;
 $42 = ($41|0)==(-1);
 if ($42) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $43 = HEAP32[$str>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 11;
 $46 = $45 & 8;
 $47 = ($46|0)!=(0);
 $48 = HEAP32[$str>>2]|0;
 $49 = ((($48)) + 12|0);
 if ($47) {
  $53 = $49;
 } else {
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $53 = $51;
 }
 $52 = $pos;
 $54 = (_bytes2chars($53,$52)|0);
 $pos = $54;
 $55 = $pos;
 _mrb_fixnum_value_289($agg$result,$55);
 STACKTOP = sp;return;
}
function _bytes2chars($p,$bi) {
 $p = $p|0;
 $bi = $bi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0;
 var $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $bi;
 $i = 0;
 $b = 0;
 while(1) {
  $2 = $b;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $0;
  $7 = $1;
  $8 = (($6) + ($7)|0);
  $9 = (_utf8len($5,$8)|0);
  $n = $9;
  $10 = $n;
  $11 = $b;
  $12 = (($11) + ($10))|0;
  $b = $12;
  $13 = $n;
  $14 = $0;
  $15 = (($14) + ($13)|0);
  $0 = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $i;
 STACKTOP = sp;return ($18|0);
}
function _mrb_str_init($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $str2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $str2 = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 $3 = (_mrb_get_args($2,56037,$vararg_buffer)|0);
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$self>>2]|0;
  $7 = HEAP32[$str2>>2]|0;
  _str_replace($1,$5,$6,$7);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_replace($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $str2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $str2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $str2;
 (_mrb_get_args($1,55924,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$str>>2]|0;
 $4 = HEAP32[$str2>>2]|0;
 _str_replace($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function _mrb_str_size($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $len = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $1 = (_utf8_strlen($self$byval_copy,-1)|0);
 $len = $1;
 $2 = $len;
 _mrb_fixnum_value_289($agg$result,$2);
 STACKTOP = sp;return;
}
function _mrb_str_reverse($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $str$byval_copy = 0, $str2 = 0, $str2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy = sp + 32|0;
 $str$byval_copy = sp + 24|0;
 $str2 = sp + 8|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_dup($str2,$2,$str$byval_copy);
 $3 = $0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 _mrb_str_reverse_bang($1,$3,$str2$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str2+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_reverse_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0;
 var $c = 0, $clen = 0, $e = 0, $e2 = 0, $len = 0, $p = 0, $p1 = 0, $r = 0, $s = 0, $str$byval_copy = 0, $utf8_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 48|0;
 $0 = $mrb;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $1 = (_utf8_strlen($str$byval_copy,-1)|0);
 $utf8_len = $1;
 $2 = HEAP32[$str>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str>>2]|0;
 if ($6) {
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 11;
  $10 = $9 & 496;
  $11 = $10 >> 4;
  $14 = $11;
 } else {
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
 }
 $len = $14;
 $15 = $utf8_len;
 $16 = $len;
 $17 = ($15|0)==($16|0);
 if ($17) {
  $84 = HEAP32[$str>>2]|0;
  $s = $84;
  $85 = $0;
  $86 = $s;
  _mrb_str_modify($85,$86);
  $87 = $s;
  $88 = HEAP32[$87>>2]|0;
  $89 = $88 >>> 11;
  $90 = $89 & 8;
  $91 = ($90|0)!=(0);
  $92 = $s;
  if ($91) {
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 >>> 11;
   $95 = $94 & 496;
   $96 = $95 >> 4;
   $99 = $96;
  } else {
   $97 = ((($92)) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98;
  }
  $100 = ($99|0)>(1);
  L11: do {
   if ($100) {
    $101 = $s;
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 >>> 11;
    $104 = $103 & 8;
    $105 = ($104|0)!=(0);
    $106 = $s;
    $107 = ((($106)) + 12|0);
    if ($105) {
     $110 = $107;
    } else {
     $108 = ((($107)) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $109;
    }
    $p1 = $110;
    $111 = $p1;
    $112 = $s;
    $113 = HEAP32[$112>>2]|0;
    $114 = $113 >>> 11;
    $115 = $114 & 8;
    $116 = ($115|0)!=(0);
    $117 = $s;
    if ($116) {
     $118 = HEAP32[$117>>2]|0;
     $119 = $118 >>> 11;
     $120 = $119 & 496;
     $121 = $120 >> 4;
     $125 = $121;
    } else {
     $122 = ((($117)) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $125 = $123;
    }
    $124 = (($111) + ($125)|0);
    $126 = ((($124)) + -1|0);
    $e2 = $126;
    while(1) {
     $127 = $p1;
     $128 = $e2;
     $129 = ($127>>>0)<($128>>>0);
     if (!($129)) {
      break L11;
     }
     $130 = $p1;
     $131 = HEAP8[$130>>0]|0;
     $c = $131;
     $132 = $e2;
     $133 = HEAP8[$132>>0]|0;
     $134 = $p1;
     $135 = ((($134)) + 1|0);
     $p1 = $135;
     HEAP8[$134>>0] = $133;
     $136 = $c;
     $137 = $e2;
     $138 = ((($137)) + -1|0);
     $e2 = $138;
     HEAP8[$137>>0] = $136;
    }
   }
  } while(0);
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 }
 $18 = $utf8_len;
 $19 = ($18|0)>(1);
 if ($19) {
  $20 = $0;
  $21 = HEAP32[$str>>2]|0;
  _mrb_str_modify($20,$21);
  $22 = HEAP32[$str>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> 11;
  $25 = $24 & 8;
  $26 = ($25|0)!=(0);
  $27 = HEAP32[$str>>2]|0;
  if ($26) {
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 >>> 11;
   $30 = $29 & 496;
   $31 = $30 >> 4;
   $34 = $31;
  } else {
   $32 = ((($27)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33;
  }
  $len = $34;
  $35 = $0;
  $36 = $len;
  $37 = (_mrb_malloc($35,$36)|0);
  $buf = $37;
  $38 = $buf;
  $p = $38;
  $39 = $buf;
  $40 = $len;
  $41 = (($39) + ($40)|0);
  $e = $41;
  $42 = $buf;
  $43 = HEAP32[$str>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 >>> 11;
  $46 = $45 & 8;
  $47 = ($46|0)!=(0);
  $48 = HEAP32[$str>>2]|0;
  $49 = ((($48)) + 12|0);
  if ($47) {
   $53 = $49;
  } else {
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $53 = $51;
  }
  $52 = $len;
  _memcpy(($42|0),($53|0),($52|0))|0;
  $54 = HEAP32[$str>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 >>> 11;
  $57 = $56 & 8;
  $58 = ($57|0)!=(0);
  $59 = HEAP32[$str>>2]|0;
  $60 = ((($59)) + 12|0);
  if ($58) {
   $65 = $60;
  } else {
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $65 = $62;
  }
  $63 = $len;
  $64 = (($65) + ($63)|0);
  $r = $64;
  while(1) {
   $66 = $p;
   $67 = $e;
   $68 = ($66>>>0)<($67>>>0);
   if (!($68)) {
    break;
   }
   $69 = $p;
   $70 = $e;
   $71 = (_utf8len($69,$70)|0);
   $clen = $71;
   $72 = $clen;
   $73 = $r;
   $74 = (0 - ($72))|0;
   $75 = (($73) + ($74)|0);
   $r = $75;
   $76 = $r;
   $77 = $p;
   $78 = $clen;
   _memcpy(($76|0),($77|0),($78|0))|0;
   $79 = $clen;
   $80 = $p;
   $81 = (($80) + ($79)|0);
   $p = $81;
  }
  $82 = $0;
  $83 = $buf;
  _mrb_free($82,$83);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_rindex($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $argc = 0, $argv = 0, $cond = 0, $len = 0, $pos = 0, $str$byval_copy = 0, $str$byval_copy5 = 0, $str$byval_copy6 = 0, $str$byval_copy9 = 0, $sub = 0, $sub$byval_copy = 0, $sub$byval_copy10 = 0, $sub$byval_copy7 = 0, $sub$byval_copy8 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var $vpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sub$byval_copy10 = sp + 136|0;
 $str$byval_copy9 = sp + 128|0;
 $sub$byval_copy8 = sp + 120|0;
 $sub$byval_copy7 = sp + 112|0;
 $str$byval_copy6 = sp + 104|0;
 $str$byval_copy5 = sp + 96|0;
 $sub$byval_copy = sp + 88|0;
 $str$byval_copy = sp + 80|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $argv = sp + 68|0;
 $argc = sp + 64|0;
 $sub = sp + 56|0;
 $vpos = sp + 48|0;
 $1 = sp + 32|0;
 $tmp = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $3 = (_utf8_strlen($str$byval_copy,-1)|0);
 $len = $3;
 $4 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($4,68114,$vararg_buffer)|0);
 $5 = HEAP32[$argc>>2]|0;
 $6 = ($5|0)==(2);
 do {
  if ($6) {
   $7 = HEAP32[$argv>>2]|0;
   ;HEAP32[$sub>>2]=HEAP32[$7>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$7+4>>2]|0;
   $8 = HEAP32[$argv>>2]|0;
   $9 = ((($8)) + 8|0);
   ;HEAP32[$vpos>>2]=HEAP32[$9>>2]|0;HEAP32[$vpos+4>>2]=HEAP32[$9+4>>2]|0;
   $10 = HEAP32[$vpos>>2]|0;
   $pos = $10;
   $11 = $pos;
   $12 = ($11|0)<(0);
   if ($12) {
    $13 = $len;
    $14 = $pos;
    $15 = (($14) + ($13))|0;
    $pos = $15;
    $16 = $pos;
    $17 = ($16|0)<(0);
    if ($17) {
     $18 = $0;
     ;HEAP32[$sub$byval_copy>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy+4>>2]=HEAP32[$sub+4>>2]|0;
     _mrb_regexp_check($18,$sub$byval_copy);
     _mrb_nil_value_282($agg$result);
     STACKTOP = sp;return;
    }
   }
   $19 = $pos;
   $20 = $len;
   $21 = ($19|0)>($20|0);
   if ($21) {
    $22 = $len;
    $pos = $22;
   }
  } else {
   $23 = $len;
   $pos = $23;
   $24 = HEAP32[$argc>>2]|0;
   $25 = ($24|0)>(0);
   if ($25) {
    $26 = HEAP32[$argv>>2]|0;
    ;HEAP32[$sub>>2]=HEAP32[$26>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$26+4>>2]|0;
    break;
   } else {
    _mrb_nil_value_282($1);
    ;HEAP32[$sub>>2]=HEAP32[$1>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$1+4>>2]|0;
    break;
   }
  }
 } while(0);
 $27 = $pos;
 ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
 $28 = (_chars2bytes($str$byval_copy5,0,$27)|0);
 $pos = $28;
 $29 = $pos;
 $30 = $len;
 ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
 $31 = (_chars2bytes($str$byval_copy6,$29,$30)|0);
 $len = $31;
 $32 = $0;
 ;HEAP32[$sub$byval_copy7>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy7+4>>2]=HEAP32[$sub+4>>2]|0;
 _mrb_regexp_check($32,$sub$byval_copy7);
 $33 = ((($sub)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $cond = ($34|0)==(16);
 if (!($cond)) {
  $35 = $0;
  ;HEAP32[$sub$byval_copy8>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy8+4>>2]=HEAP32[$sub+4>>2]|0;
  _mrb_check_string_type($2,$35,$sub$byval_copy8);
  ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0;
  $36 = ((($tmp)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   $39 = HEAP32[$tmp>>2]|0;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = $0;
    $42 = $0;
    $43 = (_mrb_class_get($42,68905)|0);
    ;HEAP8[$vararg_buffer2>>0]=HEAP8[$sub>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$sub+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$sub+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$sub+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$sub+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$sub+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$sub+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$sub+7>>0]|0;
    _mrb_raisef($41,$43,56077,$vararg_buffer2);
    // unreachable;
   }
  }
  ;HEAP32[$sub>>2]=HEAP32[$tmp>>2]|0;HEAP32[$sub+4>>2]=HEAP32[$tmp+4>>2]|0;
 }
 $44 = $0;
 $45 = $pos;
 ;HEAP32[$str$byval_copy9>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy9+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$sub$byval_copy10>>2]=HEAP32[$sub>>2]|0;HEAP32[$sub$byval_copy10+4>>2]=HEAP32[$sub+4>>2]|0;
 $46 = (_str_rindex($44,$str$byval_copy9,$sub$byval_copy10,$45)|0);
 $pos = $46;
 $47 = $pos;
 $48 = ($47|0)>=(0);
 if (!($48)) {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$str>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 >>> 11;
 $52 = $51 & 8;
 $53 = ($52|0)!=(0);
 $54 = HEAP32[$str>>2]|0;
 $55 = ((($54)) + 12|0);
 if ($53) {
  $59 = $55;
 } else {
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $59 = $57;
 }
 $58 = $pos;
 $60 = (_bytes2chars($59,$58)|0);
 $pos = $60;
 $61 = $pos;
 _mrb_fixnum_value_289($agg$result,$61);
 STACKTOP = sp;return;
}
function _str_rindex($mrb,$str,$sub,$pos) {
 $mrb = $mrb|0;
 $str = $str|0;
 $sub = $sub|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $len = 0, $ps = 0, $s = 0, $sbeg = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $pos;
 $3 = HEAP32[$str>>2]|0;
 $ps = $3;
 $4 = HEAP32[$sub>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$sub>>2]|0;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $16 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 $len = $16;
 $17 = $ps;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 8;
 $21 = ($20|0)!=(0);
 $22 = $ps;
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> 11;
  $25 = $24 & 496;
  $26 = $25 >> 4;
  $30 = $26;
 } else {
  $27 = ((($22)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $30 = $28;
 }
 $29 = $len;
 $31 = ($30|0)<($29|0);
 if ($31) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $32 = $ps;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 11;
 $35 = $34 & 8;
 $36 = ($35|0)!=(0);
 $37 = $ps;
 if ($36) {
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 >>> 11;
  $40 = $39 & 496;
  $41 = $40 >> 4;
  $46 = $41;
 } else {
  $42 = ((($37)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $46 = $43;
 }
 $44 = $2;
 $45 = (($46) - ($44))|0;
 $47 = $len;
 $48 = ($45|0)<($47|0);
 if ($48) {
  $49 = $ps;
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 >>> 11;
  $52 = $51 & 8;
  $53 = ($52|0)!=(0);
  $54 = $ps;
  if ($53) {
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 >>> 11;
   $57 = $56 & 496;
   $58 = $57 >> 4;
   $63 = $58;
  } else {
   $59 = ((($54)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $63 = $60;
  }
  $61 = $len;
  $62 = (($63) - ($61))|0;
  $2 = $62;
 }
 $64 = $ps;
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 >>> 11;
 $67 = $66 & 8;
 $68 = ($67|0)!=(0);
 $69 = $ps;
 $70 = ((($69)) + 12|0);
 if ($68) {
  $73 = $70;
 } else {
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72;
 }
 $sbeg = $73;
 $74 = $ps;
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >>> 11;
 $77 = $76 & 8;
 $78 = ($77|0)!=(0);
 $79 = $ps;
 $80 = ((($79)) + 12|0);
 if ($78) {
  $85 = $80;
 } else {
  $81 = ((($80)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $85 = $82;
 }
 $83 = $2;
 $84 = (($85) + ($83)|0);
 $s = $84;
 $86 = HEAP32[$sub>>2]|0;
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 >>> 11;
 $89 = $88 & 8;
 $90 = ($89|0)!=(0);
 $91 = HEAP32[$sub>>2]|0;
 $92 = ((($91)) + 12|0);
 if ($90) {
  $95 = $92;
 } else {
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94;
 }
 $t = $95;
 $96 = $len;
 $97 = ($96|0)!=(0);
 if (!($97)) {
  $121 = $2;
  $0 = $121;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 while(1) {
  $98 = $sbeg;
  $99 = $s;
  $100 = ($98>>>0)<=($99>>>0);
  if (!($100)) {
   label = 34;
   break;
  }
  $101 = $s;
  $102 = $t;
  $103 = $len;
  $104 = (_memcmp($101,$102,$103)|0);
  $105 = ($104|0)==(0);
  $106 = $s;
  if ($105) {
   break;
  }
  $120 = ((($106)) + -1|0);
  $s = $120;
 }
 if ((label|0) == 34) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $107 = $ps;
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 >>> 11;
 $110 = $109 & 8;
 $111 = ($110|0)!=(0);
 $112 = $ps;
 $113 = ((($112)) + 12|0);
 if ($111) {
  $117 = $113;
 } else {
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $117 = $115;
 }
 $116 = $106;
 $118 = $117;
 $119 = (($116) - ($118))|0;
 $0 = $119;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _mrb_str_split_m($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $$byval_copy = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ai = 0, $ai3 = 0, $argc = 0, $beg = 0, $c = 0, $end = 0, $i = 0, $idx = 0, $idx2 = 0, $len = 0, $lim = 0, $lim_p = 0, $or$cond = 0, $or$cond3 = 0, $pat_len = 0, $result = 0, $result$byval_copy = 0, $result$byval_copy13 = 0;
 var $result$byval_copy14 = 0, $result$byval_copy8 = 0, $skip = 0, $spat = 0, $split_type = 0, $str$byval_copy = 0, $str$byval_copy10 = 0, $str$byval_copy11 = 0, $str$byval_copy12 = 0, $str$byval_copy5 = 0, $str$byval_copy6 = 0, $str$byval_copy7 = 0, $str_len = 0, $str_len1 = 0, $tmp = 0, $tmp$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result$byval_copy14 = sp + 256|0;
 $tmp$byval_copy = sp + 248|0;
 $result$byval_copy13 = sp + 240|0;
 $str$byval_copy12 = sp + 232|0;
 $str$byval_copy11 = sp + 224|0;
 $str$byval_copy10 = sp + 216|0;
 $$byval_copy9 = sp + 208|0;
 $result$byval_copy8 = sp + 200|0;
 $str$byval_copy7 = sp + 192|0;
 $str$byval_copy6 = sp + 184|0;
 $$byval_copy = sp + 176|0;
 $result$byval_copy = sp + 168|0;
 $str$byval_copy5 = sp + 160|0;
 $str$byval_copy = sp + 152|0;
 $vararg_buffer = sp;
 $spat = sp + 136|0;
 $lim = sp + 112|0;
 $result = sp + 104|0;
 $tmp = sp + 96|0;
 $1 = sp + 88|0;
 $2 = sp + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $0 = $mrb;
 _mrb_nil_value_282($spat);
 $split_type = 1;
 $i = 0;
 HEAP32[$lim>>2] = 0;
 $7 = $0;
 HEAP32[$vararg_buffer>>2] = $spat;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $lim;
 $8 = (_mrb_get_args($7,56107,$vararg_buffer)|0);
 $argc = $8;
 $9 = HEAP32[$lim>>2]|0;
 $10 = ($9|0)>(0);
 $11 = $argc;
 $12 = ($11|0)==(2);
 $13 = $10 ? $12 : 0;
 $14 = $13&1;
 $lim_p = $14;
 $15 = $argc;
 $16 = ($15|0)==(2);
 do {
  if ($16) {
   $17 = HEAP32[$lim>>2]|0;
   $18 = ($17|0)==(1);
   if (!($18)) {
    $i = 1;
    break;
   }
   $19 = HEAP32[$str>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 >>> 11;
   $22 = $21 & 8;
   $23 = ($22|0)!=(0);
   $24 = HEAP32[$str>>2]|0;
   if ($23) {
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 >>> 11;
    $27 = $26 & 496;
    $28 = $27 >> 4;
    $31 = $28;
   } else {
    $29 = ((($24)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30;
   }
   $32 = ($31|0)==(0);
   $33 = $0;
   if ($32) {
    _mrb_ary_new_capa($agg$result,$33,0);
    STACKTOP = sp;return;
   } else {
    _mrb_ary_new_from_values($agg$result,$33,1,$str);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $34 = $argc;
 $35 = ($34|0)==(0);
 do {
  if ($35) {
   label = 13;
  } else {
   $36 = ((($spat)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = HEAP32[$spat>>2]|0;
    $40 = ($39|0)!=(0);
    if (!($40)) {
     label = 13;
     break;
    }
   }
   $41 = ((($spat)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(16);
   if (!($43)) {
    $71 = $0;
    ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_noregexp($71,$str$byval_copy);
    break;
   }
   $split_type = 1;
   $44 = HEAP32[$spat>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 >>> 11;
   $47 = $46 & 8;
   $48 = ($47|0)!=(0);
   $49 = HEAP32[$spat>>2]|0;
   if ($48) {
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 >>> 11;
    $52 = $51 & 496;
    $53 = $52 >> 4;
    $56 = $53;
   } else {
    $54 = ((($49)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55;
   }
   $57 = ($56|0)==(1);
   if ($57) {
    $58 = HEAP32[$spat>>2]|0;
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 >>> 11;
    $61 = $60 & 8;
    $62 = ($61|0)!=(0);
    $63 = HEAP32[$spat>>2]|0;
    $64 = ((($63)) + 12|0);
    if ($62) {
     $68 = $64;
    } else {
     $65 = ((($64)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $68 = $66;
    }
    $67 = HEAP8[$68>>0]|0;
    $69 = $67 << 24 >> 24;
    $70 = ($69|0)==(32);
    if ($70) {
     $split_type = 0;
    }
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $split_type = 0;
 }
 $72 = $0;
 _mrb_ary_new($1,$72);
 ;HEAP32[$result>>2]=HEAP32[$1>>2]|0;HEAP32[$result+4>>2]=HEAP32[$1+4>>2]|0;
 $beg = 0;
 $73 = $split_type;
 $74 = ($73|0)==(0);
 L37: do {
  if ($74) {
   $skip = 1;
   $idx = 0;
   $75 = HEAP32[$str>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 >>> 11;
   $78 = $77 & 8;
   $79 = ($78|0)!=(0);
   $80 = HEAP32[$str>>2]|0;
   if ($79) {
    $81 = HEAP32[$80>>2]|0;
    $82 = $81 >>> 11;
    $83 = $82 & 496;
    $84 = $83 >> 4;
    $87 = $84;
   } else {
    $85 = ((($80)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86;
   }
   $str_len = $87;
   $88 = $0;
   $89 = (_mrb_gc_arena_save($88)|0);
   $ai = $89;
   $90 = $beg;
   $end = $90;
   $idx = $90;
   while(1) {
    $91 = $idx;
    $92 = $str_len;
    $93 = ($91|0)<($92|0);
    if (!($93)) {
     break L37;
    }
    $94 = $idx;
    $95 = (($94) + 1)|0;
    $idx = $95;
    $96 = HEAP32[$str>>2]|0;
    $97 = HEAP32[$96>>2]|0;
    $98 = $97 >>> 11;
    $99 = $98 & 8;
    $100 = ($99|0)!=(0);
    $101 = HEAP32[$str>>2]|0;
    $102 = ((($101)) + 12|0);
    if ($100) {
     $106 = $102;
    } else {
     $103 = ((($102)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $106 = $104;
    }
    $105 = (($106) + ($94)|0);
    $107 = HEAP8[$105>>0]|0;
    $108 = $107&255;
    $c = $108;
    $109 = $skip;
    $110 = ($109<<24>>24)!=(0);
    $111 = $c;
    $112 = ($111|0)==(32);
    if ($110) {
     if (!($112)) {
      $113 = $c;
      $114 = (($113) - 9)|0;
      $115 = ($114>>>0)<(5);
      if (!($115)) {
       $117 = $idx;
       $end = $117;
       $skip = 0;
       $118 = $lim_p;
       $119 = ($118|0)!=(0);
       if (!($119)) {
        continue;
       }
       $120 = HEAP32[$lim>>2]|0;
       $121 = $i;
       $122 = ($120|0)<=($121|0);
       if ($122) {
        break L37;
       } else {
        continue;
       }
      }
     }
     $116 = $idx;
     $beg = $116;
     continue;
    } else {
     if (!($112)) {
      $123 = $c;
      $124 = (($123) - 9)|0;
      $125 = ($124>>>0)<(5);
      if (!($125)) {
       $139 = $idx;
       $end = $139;
       continue;
      }
     }
     $126 = $0;
     $127 = $0;
     $128 = $beg;
     $129 = $end;
     $130 = $beg;
     $131 = (($129) - ($130))|0;
     ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
     _byte_subseq($2,$127,$str$byval_copy5,$128,$131);
     ;HEAP32[$result$byval_copy>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy+4>>2]=HEAP32[$result+4>>2]|0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
     _mrb_ary_push($126,$result$byval_copy,$$byval_copy);
     $132 = $0;
     $133 = $ai;
     _mrb_gc_arena_restore($132,$133);
     $skip = 1;
     $134 = $idx;
     $beg = $134;
     $135 = $lim_p;
     $136 = ($135|0)!=(0);
     if (!($136)) {
      continue;
     }
     $137 = $i;
     $138 = (($137) + 1)|0;
     $i = $138;
     continue;
    }
   }
  } else {
   $140 = $split_type;
   $141 = ($140|0)==(1);
   if (!($141)) {
    $224 = $0;
    ;HEAP32[$str$byval_copy10>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy10+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_noregexp($224,$str$byval_copy10);
    break;
   }
   $142 = HEAP32[$str>>2]|0;
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 >>> 11;
   $145 = $144 & 8;
   $146 = ($145|0)!=(0);
   $147 = HEAP32[$str>>2]|0;
   if ($146) {
    $148 = HEAP32[$147>>2]|0;
    $149 = $148 >>> 11;
    $150 = $149 & 496;
    $151 = $150 >> 4;
    $154 = $151;
   } else {
    $152 = ((($147)) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $153;
   }
   $str_len1 = $154;
   $155 = HEAP32[$spat>>2]|0;
   $156 = HEAP32[$155>>2]|0;
   $157 = $156 >>> 11;
   $158 = $157 & 8;
   $159 = ($158|0)!=(0);
   $160 = HEAP32[$spat>>2]|0;
   if ($159) {
    $161 = HEAP32[$160>>2]|0;
    $162 = $161 >>> 11;
    $163 = $162 & 496;
    $164 = $163 >> 4;
    $167 = $164;
   } else {
    $165 = ((($160)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $166;
   }
   $pat_len = $167;
   $idx2 = 0;
   $168 = $0;
   $169 = (_mrb_gc_arena_save($168)|0);
   $ai3 = $169;
   while(1) {
    $170 = $idx2;
    $171 = $str_len1;
    $172 = ($170|0)<($171|0);
    if (!($172)) {
     break;
    }
    $173 = $pat_len;
    $174 = ($173|0)>(0);
    if ($174) {
     $175 = HEAP32[$spat>>2]|0;
     $176 = HEAP32[$175>>2]|0;
     $177 = $176 >>> 11;
     $178 = $177 & 8;
     $179 = ($178|0)!=(0);
     $180 = HEAP32[$spat>>2]|0;
     $181 = ((($180)) + 12|0);
     if ($179) {
      $200 = $181;
     } else {
      $182 = ((($181)) + 8|0);
      $183 = HEAP32[$182>>2]|0;
      $200 = $183;
     }
     $184 = $pat_len;
     $185 = HEAP32[$str>>2]|0;
     $186 = HEAP32[$185>>2]|0;
     $187 = $186 >>> 11;
     $188 = $187 & 8;
     $189 = ($188|0)!=(0);
     $190 = HEAP32[$str>>2]|0;
     $191 = ((($190)) + 12|0);
     if ($189) {
      $196 = $191;
     } else {
      $192 = ((($191)) + 8|0);
      $193 = HEAP32[$192>>2]|0;
      $196 = $193;
     }
     $194 = $idx2;
     $195 = (($196) + ($194)|0);
     $197 = $str_len1;
     $198 = $idx2;
     $199 = (($197) - ($198))|0;
     $201 = (_mrb_memsearch($200,$184,$195,$199)|0);
     $end = $201;
     $202 = $end;
     $203 = ($202|0)<(0);
     if ($203) {
      break;
     }
    } else {
     $204 = $idx2;
     ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
     $205 = (_chars2bytes($str$byval_copy6,$204,1)|0);
     $end = $205;
    }
    $206 = $0;
    $207 = $0;
    $208 = $idx2;
    $209 = $end;
    ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
    _byte_subseq($3,$207,$str$byval_copy7,$208,$209);
    ;HEAP32[$result$byval_copy8>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy8+4>>2]=HEAP32[$result+4>>2]|0;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$3+4>>2]|0;
    _mrb_ary_push($206,$result$byval_copy8,$$byval_copy9);
    $210 = $0;
    $211 = $ai3;
    _mrb_gc_arena_restore($210,$211);
    $212 = $end;
    $213 = $pat_len;
    $214 = (($212) + ($213))|0;
    $215 = $idx2;
    $216 = (($215) + ($214))|0;
    $idx2 = $216;
    $217 = $lim_p;
    $218 = ($217|0)!=(0);
    if (!($218)) {
     continue;
    }
    $219 = HEAP32[$lim>>2]|0;
    $220 = $i;
    $221 = (($220) + 1)|0;
    $i = $221;
    $222 = ($219|0)<=($221|0);
    if ($222) {
     break;
    }
   }
   $223 = $idx2;
   $beg = $223;
  }
 } while(0);
 $225 = HEAP32[$str>>2]|0;
 $226 = HEAP32[$225>>2]|0;
 $227 = $226 >>> 11;
 $228 = $227 & 8;
 $229 = ($228|0)!=(0);
 $230 = HEAP32[$str>>2]|0;
 if ($229) {
  $231 = HEAP32[$230>>2]|0;
  $232 = $231 >>> 11;
  $233 = $232 & 496;
  $234 = $233 >> 4;
  $237 = $234;
 } else {
  $235 = ((($230)) + 12|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = $236;
 }
 $238 = ($237|0)>(0);
 do {
  if ($238) {
   $239 = $lim_p;
   $240 = ($239|0)!=(0);
   if (!($240)) {
    $241 = HEAP32[$str>>2]|0;
    $242 = HEAP32[$241>>2]|0;
    $243 = $242 >>> 11;
    $244 = $243 & 8;
    $245 = ($244|0)!=(0);
    $246 = HEAP32[$str>>2]|0;
    if ($245) {
     $247 = HEAP32[$246>>2]|0;
     $248 = $247 >>> 11;
     $249 = $248 & 496;
     $250 = $249 >> 4;
     $254 = $250;
    } else {
     $251 = ((($246)) + 12|0);
     $252 = HEAP32[$251>>2]|0;
     $254 = $252;
    }
    $253 = $beg;
    $255 = ($254|0)>($253|0);
    $256 = HEAP32[$lim>>2]|0;
    $257 = ($256|0)<(0);
    $or$cond = $255 | $257;
    if (!($or$cond)) {
     break;
    }
   }
   $258 = HEAP32[$str>>2]|0;
   $259 = HEAP32[$258>>2]|0;
   $260 = $259 >>> 11;
   $261 = $260 & 8;
   $262 = ($261|0)!=(0);
   $263 = HEAP32[$str>>2]|0;
   if ($262) {
    $264 = HEAP32[$263>>2]|0;
    $265 = $264 >>> 11;
    $266 = $265 & 496;
    $267 = $266 >> 4;
    $271 = $267;
   } else {
    $268 = ((($263)) + 12|0);
    $269 = HEAP32[$268>>2]|0;
    $271 = $269;
   }
   $270 = $beg;
   $272 = ($271|0)==($270|0);
   $273 = $0;
   if ($272) {
    ;HEAP32[$str$byval_copy11>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy11+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_str_new_empty($4,$273,$str$byval_copy11);
    ;HEAP32[$tmp>>2]=HEAP32[$4>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$4+4>>2]|0;
   } else {
    $274 = $beg;
    $275 = HEAP32[$str>>2]|0;
    $276 = HEAP32[$275>>2]|0;
    $277 = $276 >>> 11;
    $278 = $277 & 8;
    $279 = ($278|0)!=(0);
    $280 = HEAP32[$str>>2]|0;
    if ($279) {
     $281 = HEAP32[$280>>2]|0;
     $282 = $281 >>> 11;
     $283 = $282 & 496;
     $284 = $283 >> 4;
     $289 = $284;
    } else {
     $285 = ((($280)) + 12|0);
     $286 = HEAP32[$285>>2]|0;
     $289 = $286;
    }
    $287 = $beg;
    $288 = (($289) - ($287))|0;
    ;HEAP32[$str$byval_copy12>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy12+4>>2]=HEAP32[$str+4>>2]|0;
    _byte_subseq($5,$273,$str$byval_copy12,$274,$288);
    ;HEAP32[$tmp>>2]=HEAP32[$5>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$5+4>>2]|0;
   }
   $290 = $0;
   ;HEAP32[$result$byval_copy13>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy13+4>>2]=HEAP32[$result+4>>2]|0;
   ;HEAP32[$tmp$byval_copy>>2]=HEAP32[$tmp>>2]|0;HEAP32[$tmp$byval_copy+4>>2]=HEAP32[$tmp+4>>2]|0;
   _mrb_ary_push($290,$result$byval_copy13,$tmp$byval_copy);
  }
 } while(0);
 $291 = $lim_p;
 $292 = ($291|0)==(0);
 $293 = HEAP32[$lim>>2]|0;
 $294 = ($293|0)==(0);
 $or$cond3 = $292 & $294;
 L119: do {
  if ($or$cond3) {
   while(1) {
    $295 = HEAP32[$result>>2]|0;
    $296 = ((($295)) + 12|0);
    $297 = HEAP32[$296>>2]|0;
    $len = $297;
    $298 = ($297|0)>(0);
    if (!($298)) {
     break L119;
    }
    $299 = $len;
    $300 = (($299) - 1)|0;
    $301 = HEAP32[$result>>2]|0;
    $302 = ((($301)) + 20|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + ($300<<3)|0);
    ;HEAP32[$tmp>>2]=HEAP32[$304>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$304+4>>2]|0;
    $305 = HEAP32[$tmp>>2]|0;
    $306 = HEAP32[$305>>2]|0;
    $307 = $306 >>> 11;
    $308 = $307 & 8;
    $309 = ($308|0)!=(0);
    $310 = HEAP32[$tmp>>2]|0;
    if ($309) {
     $311 = HEAP32[$310>>2]|0;
     $312 = $311 >>> 11;
     $313 = $312 & 496;
     $314 = $313 >> 4;
     $317 = $314;
    } else {
     $315 = ((($310)) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $316;
    }
    $318 = ($317|0)==(0);
    if (!($318)) {
     break L119;
    }
    $319 = $0;
    ;HEAP32[$result$byval_copy14>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy14+4>>2]=HEAP32[$result+4>>2]|0;
    _mrb_ary_pop($6,$319,$result$byval_copy14);
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_new_empty($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $s = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = (_str_new($1,0,0)|0);
 $s = $2;
 $3 = $0;
 $4 = $s;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _str_with_class($3,$4,$str$byval_copy);
 $5 = $s;
 _mrb_obj_value_259($agg$result,$5);
 STACKTOP = sp;return;
}
function _mrb_str_to_f($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $3 = (+_mrb_str_to_dbl($2,$self$byval_copy,0));
 $4 = $3;
 _mrb_float_value_337($agg$result,$1,$4);
 STACKTOP = sp;return;
}
function _mrb_float_value_337($agg$result,$mrb,$f) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $f;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = 6;
 $3 = $1;
 HEAPF32[$v>>2] = $3;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_to_i($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $self$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $base = sp + 24|0;
 $1 = sp + 16|0;
 $0 = $mrb;
 HEAP32[$base>>2] = 10;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $base;
 (_mrb_get_args($2,64388,$vararg_buffer)|0);
 $3 = HEAP32[$base>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0;
 if ($4) {
  $6 = $0;
  $7 = (_mrb_class_get($6,68855)|0);
  $8 = HEAP32[$base>>2]|0;
  _mrb_fixnum_value_289($1,$8);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$1>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$1+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$1+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$1+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$1+7>>0]|0;
  _mrb_raisef($5,$7,55769,$vararg_buffer1);
  // unreachable;
 } else {
  $9 = HEAP32[$base>>2]|0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_str_to_inum($agg$result,$5,$self$byval_copy,$9,0);
  STACKTOP = sp;return;
 }
}
function _mrb_str_to_s($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $self$byval_copy = 0, $self$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy1 = sp + 16|0;
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $2 = (_mrb_obj_class($1,$self$byval_copy)|0);
 $3 = $0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)!=($5|0);
 if ($6) {
  $7 = $0;
  ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_str_dup($agg$result,$7,$self$byval_copy1);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_str_upcase($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $self$byval_copy = 0, $str = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $str = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_str_dup($1,$3,$self$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_upcase_bang($2,$4,$str$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_upcase_bang($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $modify = 0, $p = 0, $pend = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $modify = 0;
 $2 = $0;
 $3 = $s;
 _mrb_str_modify($2,$3);
 $4 = HEAP32[$str>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$str>>2]|0;
 $10 = ((($9)) + 12|0);
 if ($8) {
  $13 = $10;
 } else {
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $p = $13;
 $14 = HEAP32[$str>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 11;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$str>>2]|0;
 $20 = ((($19)) + 12|0);
 if ($18) {
  $36 = $20;
 } else {
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $36 = $22;
 }
 $23 = HEAP32[$str>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 11;
 $26 = $25 & 8;
 $27 = ($26|0)!=(0);
 $28 = HEAP32[$str>>2]|0;
 if ($27) {
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 >>> 11;
  $31 = $30 & 496;
  $32 = $31 >> 4;
  $37 = $32;
 } else {
  $33 = ((($28)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $37 = $34;
 }
 $35 = (($36) + ($37)|0);
 $pend = $35;
 while(1) {
  $38 = $p;
  $39 = $pend;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (($43) - 97)|0;
  $45 = ($44>>>0)<(26);
  if ($45) {
   $46 = $p;
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = (($48) - 97)|0;
   $50 = ($49>>>0)<(26);
   $51 = $p;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 << 24 >> 24;
   $54 = $53 & 95;
   $55 = $50 ? $54 : $53;
   $56 = $55&255;
   $57 = $p;
   HEAP8[$57>>0] = $56;
   $modify = 1;
  }
  $58 = $p;
  $59 = ((($58)) + 1|0);
  $p = $59;
 }
 $60 = $modify;
 $61 = ($60<<24>>24)!=(0);
 if ($61) {
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_282($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_str_bytes($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a$byval_copy = 0, $p = 0, $pend = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $a$byval_copy = sp + 32|0;
 $a = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = HEAP32[$str>>2]|0;
 $s = $2;
 $3 = $0;
 $4 = $s;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 8;
 $8 = ($7|0)!=(0);
 $9 = $s;
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 496;
  $13 = $12 >> 4;
  $16 = $13;
 } else {
  $14 = ((($9)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 _mrb_ary_new_capa($a,$3,$16);
 $17 = $s;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 8;
 $21 = ($20|0)!=(0);
 $22 = $s;
 $23 = ((($22)) + 12|0);
 if ($21) {
  $26 = $23;
 } else {
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25;
 }
 $p = $26;
 $27 = $p;
 $28 = $s;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 11;
 $31 = $30 & 8;
 $32 = ($31|0)!=(0);
 $33 = $s;
 if ($32) {
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 >>> 11;
  $36 = $35 & 496;
  $37 = $36 >> 4;
  $41 = $37;
 } else {
  $38 = ((($33)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $41 = $39;
 }
 $40 = (($27) + ($41)|0);
 $pend = $40;
 while(1) {
  $42 = $p;
  $43 = $pend;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $0;
  $46 = $p;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  _mrb_fixnum_value_289($1,$48);
  ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_ary_push($45,$a$byval_copy,$$byval_copy);
  $49 = $p;
  $50 = ((($49)) + 1|0);
  $p = $50;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$a>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$a+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_str_freeze($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 | 4;
 $6 = HEAP32[$2>>2]|0;
 $7 = $5 & 2097151;
 $8 = $7 << 11;
 $9 = $6 & 2047;
 $10 = $9 | $8;
 HEAP32[$2>>2] = $10;
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _kh_alloc_n2s($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $sz = $3;
 $len = 4;
 $4 = $0;
 $5 = $sz;
 $6 = $5;
 $7 = (($6>>>0) / 4)&-1;
 $8 = $len;
 $9 = $sz;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10))|0;
 $12 = (_mrb_malloc($4,$11)|0);
 $p = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = $p;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $p;
 $23 = $len;
 $24 = $sz;
 $25 = Math_imul($23, $24)|0;
 $26 = (($22) + ($25)|0);
 $27 = $1;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $sz;
 $33 = (($32>>>0) / 4)&-1;
 _kh_fill_flags_342($31,-86,$33);
 STACKTOP = sp;return;
}
function _kh_fill_flags_342($p,$c,$len) {
 $p = $p|0;
 $c = $c|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)|0;
  $2 = $4;
  $5 = ($3>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
  HEAP8[$7>>0] = $6;
 }
 STACKTOP = sp;return;
}
function _kh_init_n2s_size($mrb,$size) {
 $mrb = $mrb|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $0;
 $3 = (_mrb_calloc($2,1,24)|0);
 $h = $3;
 $4 = $1;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $1 = 8;
 }
 $6 = $1;
 $7 = (($6) + -1)|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 1;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 2;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 4;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = $1;
 $27 = $26 | $25;
 $1 = $27;
 $28 = $1;
 $29 = (($28) + 1)|0;
 $1 = $29;
 $30 = $1;
 $31 = $h;
 HEAP32[$31>>2] = $30;
 $32 = $0;
 $33 = $h;
 _kh_alloc_n2s($32,$33);
 $34 = $h;
 STACKTOP = sp;return ($34|0);
}
function _kh_init_n2s($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_kh_init_n2s_size($1,8)|0);
 STACKTOP = sp;return ($2|0);
}
function _kh_destroy_n2s($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _mrb_free($4,$7);
 $8 = $0;
 $9 = $1;
 _mrb_free($8,$9);
 STACKTOP = sp;return;
}
function _kh_get_n2s($mrb,$h,$key) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $h;
 $3 = $key;
 $4 = $1;
 $5 = $3;
 $6 = (_sym_hash_func($4,$5)|0);
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $10 = $6 & $9;
 $k = $10;
 $step = 0;
 while(1) {
  $11 = $k;
  $12 = (($11>>>0) / 4)&-1;
  $13 = $2;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $k;
  $20 = (($19>>>0) % 4)&-1;
  $21 = (56149 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $18 & $23;
  $25 = ($24|0)!=(0);
  $26 = $25 ^ 1;
  if (!($26)) {
   label = 8;
   break;
  }
  $27 = $k;
  $28 = (($27>>>0) / 4)&-1;
  $29 = $2;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $k;
  $36 = (($35>>>0) % 4)&-1;
  $37 = (56153 + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $34 & $39;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   $42 = $k;
   $43 = $2;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = ((($48)) + 560|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + (($47*6)|0)|0);
   $52 = HEAPU8[$51>>0]|(HEAPU8[$51+1>>0]<<8);
   $53 = ($52&65535) >>> 1;
   $54 = $53&65535;
   $55 = $3;
   $56 = $1;
   $57 = ((($56)) + 560|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + (($55*6)|0)|0);
   $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8);
   $61 = ($60&65535) >>> 1;
   $62 = $61&65535;
   $63 = ($54|0)==($62|0);
   if ($63) {
    $64 = $k;
    $65 = $2;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($64<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $1;
    $71 = ((($70)) + 560|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + (($69*6)|0)|0);
    $74 = ((($73)) + 2|0);
    $75 = HEAPU8[$74>>0]|(HEAPU8[$74+1>>0]<<8)|(HEAPU8[$74+2>>0]<<16)|(HEAPU8[$74+3>>0]<<24);
    $76 = $3;
    $77 = $1;
    $78 = ((($77)) + 560|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + (($76*6)|0)|0);
    $81 = ((($80)) + 2|0);
    $82 = HEAPU8[$81>>0]|(HEAPU8[$81+1>>0]<<8)|(HEAPU8[$81+2>>0]<<16)|(HEAPU8[$81+3>>0]<<24);
    $83 = $k;
    $84 = $2;
    $85 = ((($84)) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($83<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $1;
    $90 = ((($89)) + 560|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + (($88*6)|0)|0);
    $93 = HEAPU8[$92>>0]|(HEAPU8[$92+1>>0]<<8);
    $94 = ($93&65535) >>> 1;
    $95 = $94&65535;
    $96 = (_memcmp($75,$82,$95)|0);
    $97 = ($96|0)==(0);
    if ($97) {
     label = 6;
     break;
    }
   }
  }
  $99 = $k;
  $100 = $step;
  $101 = (($100) + 1)|0;
  $step = $101;
  $102 = (($99) + ($101))|0;
  $103 = $2;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) - 1)|0;
  $106 = $102 & $105;
  $k = $106;
 }
 if ((label|0) == 6) {
  $98 = $k;
  $0 = $98;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 else if ((label|0) == 8) {
  $107 = $2;
  $108 = HEAP32[$107>>2]|0;
  $0 = $108;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 return (0)|0;
}
function _sym_hash_func($mrb,$s) {
 $mrb = $mrb|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $i = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $s;
 $h = 0;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 560|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($2*6)|0)|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
 $8 = ($7&65535) >>> 1;
 $9 = $8&65535;
 $len = $9;
 $10 = $1;
 $11 = $0;
 $12 = ((($11)) + 560|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*6)|0)|0);
 $15 = ((($14)) + 2|0);
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $p = $16;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = $len;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $h;
  if (!($19)) {
   break;
  }
  $21 = $20 << 5;
  $22 = $h;
  $23 = (($21) - ($22))|0;
  $24 = $p;
  $25 = ((($24)) + 1|0);
  $p = $25;
  $26 = HEAP8[$24>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = (($23) + ($27))|0;
  $h = $28;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 STACKTOP = sp;return ($20|0);
}
function _kh_resize_n2s($mrb,$h,$new_n_buckets) {
 $mrb = $mrb|0;
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$new_n_buckets = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $hh = 0, $i = 0, $k = 0, $old_ed_flags = 0, $old_keys = 0, $old_n_buckets = 0, $old_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hh = sp + 24|0;
 $0 = $mrb;
 $1 = $h;
 $2 = $new_n_buckets;
 $3 = $2;
 $4 = ($3>>>0)<(8);
 $$new_n_buckets = $4 ? 8 : $new_n_buckets;
 $2 = $$new_n_buckets;
 $5 = $2;
 $6 = (($5) + -1)|0;
 $2 = $6;
 $7 = $2;
 $8 = $7 >>> 1;
 $9 = $2;
 $10 = $9 | $8;
 $2 = $10;
 $11 = $2;
 $12 = $11 >>> 2;
 $13 = $2;
 $14 = $13 | $12;
 $2 = $14;
 $15 = $2;
 $16 = $15 >>> 4;
 $17 = $2;
 $18 = $17 | $16;
 $2 = $18;
 $19 = $2;
 $20 = $19 >>> 8;
 $21 = $2;
 $22 = $21 | $20;
 $2 = $22;
 $23 = $2;
 $24 = $23 >>> 16;
 $25 = $2;
 $26 = $25 | $24;
 $2 = $26;
 $27 = $2;
 $28 = (($27) + 1)|0;
 $2 = $28;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $old_ed_flags = $31;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $old_keys = $34;
 $35 = $1;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $old_vals = $37;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $old_n_buckets = $39;
 $40 = $2;
 HEAP32[$hh>>2] = $40;
 $41 = $0;
 _kh_alloc_n2s($41,$hh);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $old_n_buckets;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  $46 = (($45>>>0) / 4)&-1;
  $47 = $old_ed_flags;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $i;
  $52 = (($51>>>0) % 4)&-1;
  $53 = (56157 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $50 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $0;
   $59 = $i;
   $60 = $old_keys;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_kh_put_n2s($58,$hh,$62,0)|0);
   $k = $63;
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 $66 = $1;
 ;HEAP32[$66>>2]=HEAP32[$hh>>2]|0;HEAP32[$66+4>>2]=HEAP32[$hh+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$hh+8>>2]|0;HEAP32[$66+12>>2]=HEAP32[$hh+12>>2]|0;HEAP32[$66+16>>2]=HEAP32[$hh+16>>2]|0;HEAP32[$66+20>>2]=HEAP32[$hh+20>>2]|0;
 $67 = $0;
 $68 = $old_keys;
 _mrb_free($67,$68);
 STACKTOP = sp;return;
}
function _kh_put_n2s($mrb,$h,$key,$ret) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $del_k = 0, $k = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $h;
 $3 = $key;
 $4 = $ret;
 $step = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 2;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 1;
 $14 = $10 | $13;
 $15 = ($7>>>0)>=($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = $2;
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<1;
  _kh_resize_n2s($16,$17,$20);
 }
 $21 = $1;
 $22 = $3;
 $23 = (_sym_hash_func($21,$22)|0);
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - 1)|0;
 $27 = $23 & $26;
 $k = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $del_k = $29;
 while(1) {
  $30 = $k;
  $31 = (($30>>>0) / 4)&-1;
  $32 = $2;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $k;
  $39 = (($38>>>0) % 4)&-1;
  $40 = (56149 + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $37 & $42;
  $44 = ($43|0)!=(0);
  $45 = $44 ^ 1;
  if (!($45)) {
   break;
  }
  $46 = $k;
  $47 = (($46>>>0) / 4)&-1;
  $48 = $2;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $k;
  $55 = (($54>>>0) % 4)&-1;
  $56 = (56153 + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $53 & $58;
  $60 = ($59|0)!=(0);
  if ($60) {
   $121 = $del_k;
   $122 = $2;
   $123 = HEAP32[$122>>2]|0;
   $124 = ($121|0)==($123|0);
   if ($124) {
    $125 = $k;
    $del_k = $125;
   }
  } else {
   $61 = $k;
   $62 = $2;
   $63 = ((($62)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($61<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $1;
   $68 = ((($67)) + 560|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + (($66*6)|0)|0);
   $71 = HEAPU8[$70>>0]|(HEAPU8[$70+1>>0]<<8);
   $72 = ($71&65535) >>> 1;
   $73 = $72&65535;
   $74 = $3;
   $75 = $1;
   $76 = ((($75)) + 560|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + (($74*6)|0)|0);
   $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8);
   $80 = ($79&65535) >>> 1;
   $81 = $80&65535;
   $82 = ($73|0)==($81|0);
   if ($82) {
    $83 = $k;
    $84 = $2;
    $85 = ((($84)) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($83<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $1;
    $90 = ((($89)) + 560|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + (($88*6)|0)|0);
    $93 = ((($92)) + 2|0);
    $94 = HEAPU8[$93>>0]|(HEAPU8[$93+1>>0]<<8)|(HEAPU8[$93+2>>0]<<16)|(HEAPU8[$93+3>>0]<<24);
    $95 = $3;
    $96 = $1;
    $97 = ((($96)) + 560|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + (($95*6)|0)|0);
    $100 = ((($99)) + 2|0);
    $101 = HEAPU8[$100>>0]|(HEAPU8[$100+1>>0]<<8)|(HEAPU8[$100+2>>0]<<16)|(HEAPU8[$100+3>>0]<<24);
    $102 = $k;
    $103 = $2;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $1;
    $109 = ((($108)) + 560|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + (($107*6)|0)|0);
    $112 = HEAPU8[$111>>0]|(HEAPU8[$111+1>>0]<<8);
    $113 = ($112&65535) >>> 1;
    $114 = $113&65535;
    $115 = (_memcmp($94,$101,$114)|0);
    $116 = ($115|0)==(0);
    if ($116) {
     label = 8;
     break;
    }
   }
  }
  $126 = $k;
  $127 = $step;
  $128 = (($127) + 1)|0;
  $step = $128;
  $129 = (($126) + ($128))|0;
  $130 = $2;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) - 1)|0;
  $133 = $129 & $132;
  $k = $133;
 }
 if ((label|0) == 8) {
  $117 = $4;
  $118 = ($117|0)!=(0|0);
  if ($118) {
   $119 = $4;
   HEAP32[$119>>2] = 0;
  }
  $120 = $k;
  $0 = $120;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $134 = $del_k;
 $135 = $2;
 $136 = HEAP32[$135>>2]|0;
 $137 = ($134|0)!=($136|0);
 $138 = $3;
 if ($137) {
  $139 = $del_k;
  $140 = $2;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + ($139<<2)|0);
  HEAP32[$143>>2] = $138;
  $144 = $del_k;
  $145 = (($144>>>0) % 4)&-1;
  $146 = (56153 + ($145)|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = $148 ^ -1;
  $150 = $del_k;
  $151 = (($150>>>0) / 4)&-1;
  $152 = $2;
  $153 = ((($152)) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + ($151)|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = $157 & $149;
  $159 = $158&255;
  HEAP8[$155>>0] = $159;
  $160 = $2;
  $161 = ((($160)) + 4|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + 1)|0;
  HEAP32[$161>>2] = $163;
  $164 = $4;
  $165 = ($164|0)!=(0|0);
  if ($165) {
   $166 = $4;
   HEAP32[$166>>2] = 2;
  }
  $167 = $del_k;
  $0 = $167;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 } else {
  $168 = $k;
  $169 = $2;
  $170 = ((($169)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + ($168<<2)|0);
  HEAP32[$172>>2] = $138;
  $173 = $k;
  $174 = (($173>>>0) % 4)&-1;
  $175 = (56149 + ($174)|0);
  $176 = HEAP8[$175>>0]|0;
  $177 = $176&255;
  $178 = $177 ^ -1;
  $179 = $k;
  $180 = (($179>>>0) / 4)&-1;
  $181 = $2;
  $182 = ((($181)) + 12|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + ($180)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = $186 & $178;
  $188 = $187&255;
  HEAP8[$184>>0] = $188;
  $189 = $2;
  $190 = ((($189)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (($191) + 1)|0;
  HEAP32[$190>>2] = $192;
  $193 = $2;
  $194 = ((($193)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + 1)|0;
  HEAP32[$194>>2] = $196;
  $197 = $4;
  $198 = ($197|0)!=(0|0);
  if ($198) {
   $199 = $4;
   HEAP32[$199>>2] = 1;
  }
  $200 = $k;
  $0 = $200;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 return (0)|0;
}
function _mrb_intern($mrb,$name,$len) {
 $mrb = $mrb|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $len;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_sym_intern($3,$4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _sym_intern($mrb,$name,$len,$lit) {
 $mrb = $mrb|0;
 $name = $name|0;
 $len = $len|0;
 $lit = $lit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $h = 0, $k = 0, $p = 0, $sname = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $name;
 $3 = $len;
 $4 = $lit;
 $5 = $1;
 $6 = ((($5)) + 556|0);
 $7 = HEAP32[$6>>2]|0;
 $h = $7;
 $8 = $1;
 $9 = ((($8)) + 560|0);
 $10 = HEAP32[$9>>2]|0;
 $sname = $10;
 $11 = $1;
 $12 = $3;
 _sym_validate_len($11,$12);
 $13 = $sname;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $4;
  $16 = $15&255;
  $17 = $sname;
  $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
  $19 = $16 & 1;
  $20 = $18 & -2;
  $21 = $20 | $19;
  HEAP8[$17>>0]=$21&255;HEAP8[$17+1>>0]=$21>>8;
  $22 = $3;
  $23 = $22&65535;
  $24 = $sname;
  $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
  $26 = $23 & 32767;
  $27 = ($26 << 1)&65535;
  $28 = $25 & 1;
  $29 = $28 | $27;
  HEAP8[$24>>0]=$29&255;HEAP8[$24+1>>0]=$29>>8;
  $30 = $2;
  $31 = $sname;
  $32 = ((($31)) + 2|0);
  HEAP8[$32>>0]=$30&255;HEAP8[$32+1>>0]=($30>>8)&255;HEAP8[$32+2>>0]=($30>>16)&255;HEAP8[$32+3>>0]=$30>>24;
  $33 = $1;
  $34 = $h;
  $35 = (_kh_get_n2s($33,$34,0)|0);
  $k = $35;
  $36 = $k;
  $37 = $h;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if ($39) {
   $40 = $k;
   $41 = $h;
   $42 = ((($41)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $0 = $45;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 $46 = $1;
 $47 = ((($46)) + 552|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[$47>>2] = $49;
 $sym = $49;
 $50 = $1;
 $51 = ((($50)) + 564|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $sym;
 $54 = ($52>>>0)<($53>>>0);
 if ($54) {
  $55 = $1;
  $56 = ((($55)) + 564|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0);
  $59 = $1;
  $60 = ((($59)) + 564|0);
  if ($58) {
   HEAP32[$60>>2] = 100;
  } else {
   $61 = HEAP32[$60>>2]|0;
   $62 = (+($61>>>0));
   $63 = $62 * 1.2;
   $64 = (~~(($63))>>>0);
   $65 = $1;
   $66 = ((($65)) + 564|0);
   HEAP32[$66>>2] = $64;
  }
  $67 = $1;
  $68 = $1;
  $69 = ((($68)) + 560|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $1;
  $72 = ((($71)) + 564|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 1)|0;
  $75 = ($74*6)|0;
  $76 = (_mrb_realloc($67,$70,$75)|0);
  $77 = $1;
  $78 = ((($77)) + 560|0);
  HEAP32[$78>>2] = $76;
 }
 $79 = $sym;
 $80 = $1;
 $81 = ((($80)) + 560|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + (($79*6)|0)|0);
 $sname = $83;
 $84 = $3;
 $85 = $84&65535;
 $86 = $sname;
 $87 = HEAPU8[$86>>0]|(HEAPU8[$86+1>>0]<<8);
 $88 = $85 & 32767;
 $89 = ($88 << 1)&65535;
 $90 = $87 & 1;
 $91 = $90 | $89;
 HEAP8[$86>>0]=$91&255;HEAP8[$86+1>>0]=$91>>8;
 $92 = $4;
 $93 = $92&255;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = $2;
  $96 = $sname;
  $97 = ((($96)) + 2|0);
  HEAP8[$97>>0]=$95&255;HEAP8[$97+1>>0]=($95>>8)&255;HEAP8[$97+2>>0]=($95>>16)&255;HEAP8[$97+3>>0]=$95>>24;
  $98 = $sname;
  $99 = HEAPU8[$98>>0]|(HEAPU8[$98+1>>0]<<8);
  $100 = $99 & -2;
  $101 = $100 | 1;
  HEAP8[$98>>0]=$101&255;HEAP8[$98+1>>0]=$101>>8;
 } else {
  $102 = $1;
  $103 = $3;
  $104 = (($103) + 1)|0;
  $105 = (_mrb_malloc($102,$104)|0);
  $p = $105;
  $106 = $p;
  $107 = $2;
  $108 = $3;
  _memcpy(($106|0),($107|0),($108|0))|0;
  $109 = $3;
  $110 = $p;
  $111 = (($110) + ($109)|0);
  HEAP8[$111>>0] = 0;
  $112 = $p;
  $113 = $sname;
  $114 = ((($113)) + 2|0);
  HEAP8[$114>>0]=$112&255;HEAP8[$114+1>>0]=($112>>8)&255;HEAP8[$114+2>>0]=($112>>16)&255;HEAP8[$114+3>>0]=$112>>24;
  $115 = $sname;
  $116 = HEAPU8[$115>>0]|(HEAPU8[$115+1>>0]<<8);
  $117 = $116 & -2;
  HEAP8[$115>>0]=$117&255;HEAP8[$115+1>>0]=$117>>8;
 }
 $118 = $1;
 $119 = $h;
 $120 = $sym;
 (_kh_put_n2s($118,$119,$120,0)|0);
 $121 = $sym;
 $0 = $121;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _sym_validate_len($mrb,$len) {
 $mrb = $mrb|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $len;
 $2 = $1;
 $3 = ($2>>>0)>=(65535);
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (_mrb_class_get($5,68855)|0);
  _mrb_raise($4,$6,56161);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _mrb_intern_static($mrb,$name,$len) {
 $mrb = $mrb|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $len;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_sym_intern($3,$4,$5,1)|0);
 STACKTOP = sp;return ($6|0);
}
function _mrb_intern_cstr($mrb,$name) {
 $mrb = $mrb|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen($4)|0);
 $6 = (_mrb_intern($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _mrb_intern_str($mrb,$str) {
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = HEAP32[$str>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str>>2]|0;
 $8 = ((($7)) + 12|0);
 if ($6) {
  $23 = $8;
 } else {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $11 = HEAP32[$str>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$str>>2]|0;
 if ($15) {
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 496;
  $20 = $19 >> 4;
  $24 = $20;
  $25 = (_mrb_intern($1,$23,$24)|0);
  STACKTOP = sp;return ($25|0);
 } else {
  $21 = ((($16)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $24 = $22;
  $25 = (_mrb_intern($1,$23,$24)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _mrb_check_intern($agg$result,$mrb,$name,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, $sname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 556|0);
 $5 = HEAP32[$4>>2]|0;
 $h = $5;
 $6 = $0;
 $7 = ((($6)) + 560|0);
 $8 = HEAP32[$7>>2]|0;
 $sname = $8;
 $9 = $0;
 $10 = $2;
 _sym_validate_len($9,$10);
 $11 = $2;
 $12 = $11&65535;
 $13 = $sname;
 $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
 $15 = $12 & 32767;
 $16 = ($15 << 1)&65535;
 $17 = $14 & 1;
 $18 = $17 | $16;
 HEAP8[$13>>0]=$18&255;HEAP8[$13+1>>0]=$18>>8;
 $19 = $1;
 $20 = $sname;
 $21 = ((($20)) + 2|0);
 HEAP8[$21>>0]=$19&255;HEAP8[$21+1>>0]=($19>>8)&255;HEAP8[$21+2>>0]=($19>>16)&255;HEAP8[$21+3>>0]=$19>>24;
 $22 = $0;
 $23 = $h;
 $24 = (_kh_get_n2s($22,$23,0)|0);
 $k = $24;
 $25 = $k;
 $26 = $h;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)!=($27|0);
 if ($28) {
  $29 = $k;
  $30 = $h;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  _mrb_symbol_value_354($agg$result,$34);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_355($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_symbol_value_354($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_nil_value_355($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_check_intern_cstr($agg$result,$mrb,$name) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen($4)|0);
 _mrb_check_intern($agg$result,$2,$3,$5);
 STACKTOP = sp;return;
}
function _mrb_check_intern_str($agg$result,$mrb,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = HEAP32[$str>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 8;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$str>>2]|0;
 $8 = ((($7)) + 12|0);
 if ($6) {
  $23 = $8;
 } else {
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $11 = HEAP32[$str>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$str>>2]|0;
 if ($15) {
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 496;
  $20 = $19 >> 4;
  $24 = $20;
  _mrb_check_intern($agg$result,$1,$23,$24);
  STACKTOP = sp;return;
 } else {
  $21 = ((($16)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $24 = $22;
  _mrb_check_intern($agg$result,$1,$23,$24);
  STACKTOP = sp;return;
 }
}
function _mrb_sym2name_len($mrb,$sym,$lenp) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $lenp = $lenp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $sym;
 $3 = $lenp;
 $4 = $2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $1;
  $7 = ((($6)) + 552|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   $14 = $3;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = $2;
    $17 = $1;
    $18 = ((($17)) + 560|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + (($16*6)|0)|0);
    $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8);
    $22 = ($21&65535) >>> 1;
    $23 = $22&65535;
    $24 = $3;
    HEAP32[$24>>2] = $23;
   }
   $25 = $2;
   $26 = $1;
   $27 = ((($26)) + 560|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + (($25*6)|0)|0);
   $30 = ((($29)) + 2|0);
   $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
   $0 = $31;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $3;
  HEAP32[$13>>2] = 0;
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _mrb_free_symtbl($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lim = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $i = 1;
 $1 = $0;
 $2 = ((($1)) + 552|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $lim = $4;
 while(1) {
  $5 = $i;
  $6 = $lim;
  $7 = ($5>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = ((($9)) + 560|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($8*6)|0)|0);
  $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8);
  $14 = $13 & 1;
  $15 = ($14<<16>>16)!=(0);
  if (!($15)) {
   $16 = $0;
   $17 = $i;
   $18 = $0;
   $19 = ((($18)) + 560|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + (($17*6)|0)|0);
   $22 = ((($21)) + 2|0);
   $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
   _mrb_free($16,$23);
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $0;
 $27 = $0;
 $28 = ((($27)) + 560|0);
 $29 = HEAP32[$28>>2]|0;
 _mrb_free($26,$29);
 $30 = $0;
 $31 = $0;
 $32 = ((($31)) + 556|0);
 $33 = HEAP32[$32>>2]|0;
 _kh_destroy_n2s($30,$33);
 STACKTOP = sp;return;
}
function _mrb_init_symtbl($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_kh_init_n2s($1)|0);
 $3 = $0;
 $4 = ((($3)) + 556|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _mrb_sym2str($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 4|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = (_mrb_sym2name_len($2,$3,$len)|0);
 $name = $4;
 $5 = $name;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = $name;
  $9 = HEAP32[$len>>2]|0;
  _mrb_str_new_static($agg$result,$7,$8,$9);
  STACKTOP = sp;return;
 } else {
  _mrb_undef_value($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_undef_value($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 5;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_sym2name($mrb,$sym) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $name = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $len = sp + 20|0;
 $str = sp + 8|0;
 $3 = sp;
 $1 = $mrb;
 $2 = $sym;
 $4 = $1;
 $5 = $2;
 $6 = (_mrb_sym2name_len($4,$5,$len)|0);
 $name = $6;
 $7 = $name;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $9 = $name;
 $10 = (_symname_p($9)|0);
 $11 = $10&255;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $name;
  $14 = (_strlen($13)|0);
  $15 = HEAP32[$len>>2]|0;
  $16 = ($14|0)==($15|0);
  if ($16) {
   $17 = $name;
   $0 = $17;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $18 = $1;
 $19 = $1;
 $20 = $name;
 $21 = HEAP32[$len>>2]|0;
 _mrb_str_new_static($3,$19,$20,$21);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_str_dump($str,$18,$$byval_copy);
 $22 = HEAP32[$str>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 11;
 $25 = $24 & 8;
 $26 = ($25|0)!=(0);
 $27 = HEAP32[$str>>2]|0;
 $28 = ((($27)) + 12|0);
 if ($26) {
  $31 = $28;
 } else {
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30;
 }
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _symname_p($name) {
 $name = $name|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $localid = 0, $m = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $m = $2;
 $localid = 0;
 $3 = $m;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $152 = $0;
  STACKTOP = sp;return ($152|0);
 }
 $5 = $m;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 L5: do {
  switch ($7|0) {
  case 0:  {
   $0 = 0;
   $152 = $0;
   STACKTOP = sp;return ($152|0);
   break;
  }
  case 36:  {
   $8 = $m;
   $9 = ((($8)) + 1|0);
   $m = $9;
   $10 = (_is_special_global_name($9)|0);
   $11 = ($10<<24>>24)!=(0);
   if ($11) {
    $0 = 1;
    $152 = $0;
    STACKTOP = sp;return ($152|0);
   } else {
    label = 36;
   }
   break;
  }
  case 64:  {
   $12 = $m;
   $13 = ((($12)) + 1|0);
   $m = $13;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)==(64);
   if ($16) {
    $17 = $m;
    $18 = ((($17)) + 1|0);
    $m = $18;
    label = 36;
   } else {
    label = 36;
   }
   break;
  }
  case 60:  {
   $19 = $m;
   $20 = ((($19)) + 1|0);
   $m = $20;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   switch ($22|0) {
   case 60:  {
    $23 = $m;
    $24 = ((($23)) + 1|0);
    $m = $24;
    break L5;
    break;
   }
   case 61:  {
    break;
   }
   default: {
    break L5;
   }
   }
   $25 = $m;
   $26 = ((($25)) + 1|0);
   $m = $26;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(62);
   if ($29) {
    $30 = $m;
    $31 = ((($30)) + 1|0);
    $m = $31;
   }
   break;
  }
  case 62:  {
   $32 = $m;
   $33 = ((($32)) + 1|0);
   $m = $33;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $$off = (($35) + -61)|0;
   $switch = ($$off>>>0)<(2);
   if ($switch) {
    $36 = $m;
    $37 = ((($36)) + 1|0);
    $m = $37;
   }
   break;
  }
  case 61:  {
   $38 = $m;
   $39 = ((($38)) + 1|0);
   $m = $39;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   switch ($41|0) {
   case 126:  {
    $42 = $m;
    $43 = ((($42)) + 1|0);
    $m = $43;
    break L5;
    break;
   }
   case 61:  {
    $44 = $m;
    $45 = ((($44)) + 1|0);
    $m = $45;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(61);
    if (!($48)) {
     break L5;
    }
    $49 = $m;
    $50 = ((($49)) + 1|0);
    $m = $50;
    break L5;
    break;
   }
   default: {
    $0 = 0;
    $152 = $0;
    STACKTOP = sp;return ($152|0);
   }
   }
   break;
  }
  case 42:  {
   $51 = $m;
   $52 = ((($51)) + 1|0);
   $m = $52;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = ($54|0)==(42);
   if ($55) {
    $56 = $m;
    $57 = ((($56)) + 1|0);
    $m = $57;
   }
   break;
  }
  case 33:  {
   $58 = $m;
   $59 = ((($58)) + 1|0);
   $m = $59;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ($61|0)==(61);
   if ($62) {
    $63 = $m;
    $64 = ((($63)) + 1|0);
    $m = $64;
   }
   break;
  }
  case 45: case 43:  {
   $65 = $m;
   $66 = ((($65)) + 1|0);
   $m = $66;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = ($68|0)==(64);
   if ($69) {
    $70 = $m;
    $71 = ((($70)) + 1|0);
    $m = $71;
   }
   break;
  }
  case 124:  {
   $72 = $m;
   $73 = ((($72)) + 1|0);
   $m = $73;
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = ($75|0)==(124);
   if ($76) {
    $77 = $m;
    $78 = ((($77)) + 1|0);
    $m = $78;
   }
   break;
  }
  case 38:  {
   $79 = $m;
   $80 = ((($79)) + 1|0);
   $m = $80;
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 << 24 >> 24;
   $83 = ($82|0)==(38);
   if ($83) {
    $84 = $m;
    $85 = ((($84)) + 1|0);
    $m = $85;
   }
   break;
  }
  case 96: case 126: case 37: case 47: case 94:  {
   $86 = $m;
   $87 = ((($86)) + 1|0);
   $m = $87;
   break;
  }
  case 91:  {
   $88 = $m;
   $89 = ((($88)) + 1|0);
   $m = $89;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90 << 24 >> 24;
   $92 = ($91|0)!=(93);
   if ($92) {
    $0 = 0;
    $152 = $0;
    STACKTOP = sp;return ($152|0);
   } else {
    $93 = $m;
    $94 = ((($93)) + 1|0);
    $m = $94;
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = ($96|0)==(61);
    if (!($97)) {
     break L5;
    }
    $98 = $m;
    $99 = ((($98)) + 1|0);
    $m = $99;
    break L5;
   }
   break;
  }
  default: {
   $100 = $m;
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 << 24 >> 24;
   $103 = (($102) - 65)|0;
   $104 = ($103>>>0)<(26);
   $105 = $104 ^ 1;
   $106 = $105&1;
   $107 = $106&255;
   $localid = $107;
   label = 36;
  }
  }
 } while(0);
 L45: do {
  if ((label|0) == 36) {
   $108 = $m;
   $109 = HEAP8[$108>>0]|0;
   $110 = $109 << 24 >> 24;
   $111 = ($110|0)!=(95);
   if ($111) {
    $112 = $m;
    $113 = HEAP8[$112>>0]|0;
    $114 = $113 << 24 >> 24;
    $115 = $114 | 32;
    $116 = (($115) - 97)|0;
    $117 = ($116>>>0)<(26);
    if (!($117)) {
     $0 = 0;
     $152 = $0;
     STACKTOP = sp;return ($152|0);
    }
   }
   while(1) {
    $118 = $m;
    $119 = HEAP8[$118>>0]|0;
    $120 = $119 << 24 >> 24;
    $121 = ($120|0)!=(-1);
    if (!($121)) {
     break;
    }
    $122 = $m;
    $123 = HEAP8[$122>>0]|0;
    $124 = $123 << 24 >> 24;
    $125 = $124 | 32;
    $126 = (($125) - 97)|0;
    $127 = ($126>>>0)<(26);
    if (!($127)) {
     $128 = $m;
     $129 = HEAP8[$128>>0]|0;
     $130 = $129 << 24 >> 24;
     $131 = (($130) - 48)|0;
     $132 = ($131>>>0)<(10);
     if (!($132)) {
      $133 = $m;
      $134 = HEAP8[$133>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = ($135|0)==(95);
      if (!($136)) {
       break;
      }
     }
    }
    $137 = $m;
    $138 = ((($137)) + 1|0);
    $m = $138;
   }
   $139 = $localid;
   $140 = ($139<<24>>24)!=(0);
   if ($140) {
    $141 = $m;
    $142 = HEAP8[$141>>0]|0;
    $143 = $142 << 24 >> 24;
    switch ($143|0) {
    case 61: case 63: case 33:  {
     break;
    }
    default: {
     break L45;
    }
    }
    $144 = $m;
    $145 = ((($144)) + 1|0);
    $m = $145;
   }
  }
 } while(0);
 $146 = $m;
 $147 = HEAP8[$146>>0]|0;
 $148 = $147 << 24 >> 24;
 $149 = ($148|0)!=(0);
 $150 = $149 ? 0 : 1;
 $151 = $150&255;
 $0 = $151;
 $152 = $0;
 STACKTOP = sp;return ($152|0);
}
function _is_special_global_name($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 L1: do {
  switch ($4|0) {
  case 48: case 43: case 39: case 96: case 38: case 34: case 62: case 60: case 58: case 61: case 46: case 44: case 59: case 92: case 47: case 64: case 33: case 63: case 36: case 42: case 126:  {
   $5 = $1;
   $6 = ((($5)) + 1|0);
   $1 = $6;
   break;
  }
  case 45:  {
   $7 = $1;
   $8 = ((($7)) + 1|0);
   $1 = $8;
   $9 = $1;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)!=(-1);
   if ($12) {
    $13 = $1;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = $15 | 32;
    $17 = (($16) - 97)|0;
    $18 = ($17>>>0)<(26);
    if (!($18)) {
     $19 = $1;
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = (($21) - 48)|0;
     $23 = ($22>>>0)<(10);
     if (!($23)) {
      $24 = $1;
      $25 = HEAP8[$24>>0]|0;
      $26 = $25 << 24 >> 24;
      $27 = ($26|0)==(95);
      if (!($27)) {
       break L1;
      }
     }
    }
    $28 = $1;
    $29 = ((($28)) + 1|0);
    $1 = $29;
   }
   break;
  }
  default: {
   $30 = $1;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = (($32) - 48)|0;
   $34 = ($33>>>0)<(10);
   if ($34) {
    while(1) {
     $35 = $1;
     $36 = ((($35)) + 1|0);
     $1 = $36;
     $37 = $1;
     $38 = HEAP8[$37>>0]|0;
     $39 = $38 << 24 >> 24;
     $40 = (($39) - 48)|0;
     $41 = ($40>>>0)<(10);
     if (!($41)) {
      break L1;
     }
    }
   }
   $0 = 0;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
  }
 } while(0);
 $42 = $1;
 $43 = HEAP8[$42>>0]|0;
 $44 = ($43<<24>>24)!=(0);
 $45 = $44 ^ 1;
 $46 = $45&1;
 $47 = $46&255;
 $0 = $47;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _mrb_init_symbol($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,56184,$4)|0);
 $sym = $5;
 $6 = $0;
 $7 = ((($6)) + 80|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = $sym;
 _mrb_define_method($8,$9,69450,119,262144);
 $10 = $0;
 $11 = $sym;
 _mrb_define_method($10,$11,56191,120,0);
 $12 = $0;
 $13 = $sym;
 _mrb_define_method($12,$13,68977,120,0);
 $14 = $0;
 $15 = $sym;
 _mrb_define_method($14,$15,56199,121,0);
 $16 = $0;
 $17 = $sym;
 _mrb_define_method($16,$17,68986,122,0);
 $18 = $0;
 $19 = $sym;
 _mrb_define_method($18,$19,68851,123,262144);
 STACKTOP = sp;return;
}
function _sym_equal($agg$result,$mrb,$sym1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym1 = $sym1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sym1$byval_copy = 0, $sym2 = 0, $sym2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sym2$byval_copy = sp + 32|0;
 $sym1$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $sym2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $sym2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$sym1$byval_copy>>2]=HEAP32[$sym1>>2]|0;HEAP32[$sym1$byval_copy+4>>2]=HEAP32[$sym1+4>>2]|0;
 ;HEAP32[$sym2$byval_copy>>2]=HEAP32[$sym2>>2]|0;HEAP32[$sym2$byval_copy+4>>2]=HEAP32[$sym2+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$sym1$byval_copy,$sym2$byval_copy)|0);
 _mrb_bool_value_363($agg$result,$3);
 STACKTOP = sp;return;
}
function _mrb_bool_value_363($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_sym_to_s($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $id = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $0 = $mrb;
 $1 = HEAP32[$sym>>2]|0;
 $id = $1;
 $2 = $0;
 $3 = $id;
 $4 = (_mrb_sym2name_len($2,$3,$len)|0);
 $p = $4;
 $5 = $0;
 $6 = $p;
 $7 = HEAP32[$len>>2]|0;
 _mrb_str_new_static($agg$result,$5,$6,$7);
 STACKTOP = sp;return;
}
function _sym_to_sym($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 ;HEAP32[$agg$result>>2]=HEAP32[$sym>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$sym+4>>2]|0;
 STACKTOP = sp;return;
}
function _sym_inspect($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $name = 0, $sp = 0, $str = 0;
 var $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 48|0;
 $str = sp + 32|0;
 $len = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = HEAP32[$sym>>2]|0;
 $id = $3;
 $4 = $0;
 $5 = $id;
 $6 = (_mrb_sym2name_len($4,$5,$len)|0);
 $name = $6;
 $7 = $0;
 $8 = HEAP32[$len>>2]|0;
 $9 = (($8) + 1)|0;
 _mrb_str_new($1,$7,0,$9);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $10 = HEAP32[$str>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 11;
 $13 = $12 & 8;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[$str>>2]|0;
 $16 = ((($15)) + 12|0);
 if ($14) {
  $19 = $16;
 } else {
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
 }
 $sp = $19;
 $20 = HEAP32[$str>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 11;
 $23 = $22 & 8;
 $24 = ($23|0)!=(0);
 $25 = HEAP32[$str>>2]|0;
 $26 = ((($25)) + 12|0);
 if ($24) {
  $29 = $26;
 } else {
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28;
 }
 HEAP8[$29>>0] = 58;
 $30 = $sp;
 $31 = ((($30)) + 1|0);
 $32 = $name;
 $33 = HEAP32[$len>>2]|0;
 _memcpy(($31|0),($32|0),($33|0))|0;
 $34 = $name;
 $35 = (_symname_p($34)|0);
 $36 = ($35<<24>>24)!=(0);
 if ($36) {
  $37 = $name;
  $38 = (_strlen($37)|0);
  $39 = HEAP32[$len>>2]|0;
  $40 = ($38|0)!=($39|0);
  if (!($40)) {
   ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $41 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_dump($2,$41,$str$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 $42 = HEAP32[$str>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 >>> 11;
 $45 = $44 & 8;
 $46 = ($45|0)!=(0);
 $47 = HEAP32[$str>>2]|0;
 $48 = ((($47)) + 12|0);
 if ($46) {
  $51 = $48;
 } else {
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
 }
 $sp = $51;
 $52 = $sp;
 HEAP8[$52>>0] = 58;
 $53 = $sp;
 $54 = ((($53)) + 1|0);
 HEAP8[$54>>0] = 34;
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _sym_cmp($agg$result,$mrb,$s1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $s1 = $s1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $len1 = 0, $len2 = 0, $p1 = 0;
 var $p2 = 0, $retval = 0, $s2 = 0, $sym1 = 0, $sym2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s2 = sp + 40|0;
 $len1 = sp + 8|0;
 $len2 = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $s2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($s2)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(4);
 if ($4) {
  _mrb_nil_value_355($agg$result);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$s1>>2]|0;
 $sym1 = $5;
 $6 = HEAP32[$s2>>2]|0;
 $sym2 = $6;
 $7 = $sym1;
 $8 = $sym2;
 $9 = ($7|0)==($8|0);
 if ($9) {
  _mrb_fixnum_value_369($agg$result,0);
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $sym1;
 $12 = (_mrb_sym2name_len($10,$11,$len1)|0);
 $p1 = $12;
 $13 = $0;
 $14 = $sym2;
 $15 = (_mrb_sym2name_len($13,$14,$len2)|0);
 $p2 = $15;
 $16 = HEAP32[$len1>>2]|0;
 $17 = HEAP32[$len2>>2]|0;
 $18 = ($16|0)>($17|0);
 $19 = HEAP32[$len2>>2]|0;
 $20 = HEAP32[$len1>>2]|0;
 $21 = $18 ? $19 : $20;
 $len = $21;
 $22 = $p1;
 $23 = $p2;
 $24 = $len;
 $25 = (_memcmp($22,$23,$24)|0);
 $retval = $25;
 $26 = $retval;
 $27 = ($26|0)==(0);
 if (!($27)) {
  $34 = $retval;
  $35 = ($34|0)>(0);
  if ($35) {
   _mrb_fixnum_value_369($agg$result,1);
   STACKTOP = sp;return;
  } else {
   _mrb_fixnum_value_369($agg$result,-1);
   STACKTOP = sp;return;
  }
 }
 $28 = HEAP32[$len1>>2]|0;
 $29 = HEAP32[$len2>>2]|0;
 $30 = ($28|0)==($29|0);
 if ($30) {
  _mrb_fixnum_value_369($agg$result,0);
  STACKTOP = sp;return;
 }
 $31 = HEAP32[$len1>>2]|0;
 $32 = HEAP32[$len2>>2]|0;
 $33 = ($31|0)>($32|0);
 if ($33) {
  _mrb_fixnum_value_369($agg$result,1);
  STACKTOP = sp;return;
 } else {
  _mrb_fixnum_value_369($agg$result,-1);
  STACKTOP = sp;return;
 }
}
function _mrb_fixnum_value_369($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_gc_mark_gv($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _mark_tbl($1,$4);
 STACKTOP = sp;return;
}
function _mark_tbl($mrb,$t) {
 $mrb = $mrb|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $t;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 (_iv_foreach($4,$5,124,0)|0);
 STACKTOP = sp;return;
}
function _iv_mark_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $3 = ((($v)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<(8);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = $0;
 $7 = HEAP32[$v>>2]|0;
 _mrb_gc_mark($6,$7);
 STACKTOP = sp;return 0;
}
function _iv_foreach($mrb,$t,$func,$p) {
 $mrb = $mrb|0;
 $t = $t|0;
 $func = $func|0;
 $p = $p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $key = 0, $n = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $1 = $mrb;
 $2 = $t;
 $3 = $func;
 $4 = $p;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $seg = $6;
 L1: while(1) {
  $7 = $seg;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 15;
   break;
  }
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = ($9>>>0)<(4);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $seg;
   $13 = (($12) + ($11<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $key = $14;
   $15 = $seg;
   $16 = ((($15)) + 48|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $19 = $i;
    $20 = $2;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19>>>0)>=($22>>>0);
    if ($23) {
     label = 7;
     break L1;
    }
   }
   $24 = $key;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $3;
    $27 = $1;
    $28 = $key;
    $29 = $i;
    $30 = $seg;
    $31 = ((($30)) + 16|0);
    $32 = (($31) + ($29<<3)|0);
    $33 = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$32+4>>2]|0;
    $34 = (FUNCTION_TABLE_iiiii[$26 & 255]($27,$28,$$byval_copy,$33)|0);
    $n = $34;
    $35 = $n;
    $36 = ($35|0)>(0);
    if ($36) {
     label = 10;
     break L1;
    }
    $37 = $n;
    $38 = ($37|0)<(0);
    if ($38) {
     $39 = $2;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + -1)|0;
     HEAP32[$40>>2] = $42;
     $43 = $i;
     $44 = $seg;
     $45 = (($44) + ($43<<2)|0);
     HEAP32[$45>>2] = 0;
    }
   }
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  $48 = $seg;
  $49 = ((($48)) + 48|0);
  $50 = HEAP32[$49>>2]|0;
  $seg = $50;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 15) {
  $0 = 1;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _mrb_gc_free_gv($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _iv_free($5,$8);
 STACKTOP = sp;return;
}
function _iv_free($mrb,$t) {
 $mrb = $mrb|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $t;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $seg = $3;
 while(1) {
  $4 = $seg;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $seg;
  $p = $6;
  $7 = $seg;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $seg = $9;
  $10 = $0;
  $11 = $p;
  _mrb_free($10,$11);
 }
 $12 = $0;
 $13 = $1;
 _mrb_free($12,$13);
 STACKTOP = sp;return;
}
function _mrb_gc_mark_iv($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _mark_tbl($2,$5);
 STACKTOP = sp;return;
}
function _mrb_gc_mark_iv_size($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_iv_size($2,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _iv_size($mrb,$t) {
 $mrb = $mrb|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $seg = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $t;
 $size = 0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(0);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $12 = HEAP32[$9>>2]|0;
 $seg = $12;
 while(1) {
  $13 = $seg;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 10;
   break;
  }
  $15 = $seg;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   label = 8;
   break;
  }
  $25 = $seg;
  $26 = ((($25)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $seg = $27;
  $28 = $size;
  $29 = (($28) + 4)|0;
  $size = $29;
 }
 if ((label|0) == 8) {
  $19 = $2;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $size;
  $23 = (($22) + ($21))|0;
  $size = $23;
  $24 = $size;
  $0 = $24;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _mrb_gc_free_iv($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $obj;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _iv_free($6,$9);
 STACKTOP = sp;return;
}
function _mrb_vm_special_get($agg$result,$mrb,$i) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $i;
 _mrb_fixnum_value_380($agg$result,0);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_380($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_vm_special_set($mrb,$i,$v) {
 $mrb = $mrb|0;
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $i;
 STACKTOP = sp;return;
}
function _mrb_obj_iv_get($agg$result,$mrb,$obj,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $obj;
 $2 = $sym;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = $1;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (_iv_get($7,$10,$11,$v)|0);
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  if ($14) {
   ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_381($agg$result);
 STACKTOP = sp;return;
}
function _iv_get($mrb,$t,$sym,$vp) {
 $mrb = $mrb|0;
 $t = $t|0;
 $sym = $sym|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $key = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $t;
 $3 = $sym;
 $4 = $vp;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $seg = $6;
 L1: while(1) {
  $7 = $seg;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 14;
   break;
  }
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = ($9>>>0)<(4);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $seg;
   $13 = (($12) + ($11<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $key = $14;
   $15 = $seg;
   $16 = ((($15)) + 48|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $19 = $i;
    $20 = $2;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19>>>0)>=($22>>>0);
    if ($23) {
     label = 7;
     break L1;
    }
   }
   $24 = $key;
   $25 = $3;
   $26 = ($24|0)==($25|0);
   if ($26) {
    label = 9;
    break L1;
   }
   $34 = $i;
   $35 = (($34) + 1)|0;
   $i = $35;
  }
  $36 = $seg;
  $37 = ((($36)) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $seg = $38;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 9) {
  $27 = $4;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $4;
   $30 = $i;
   $31 = $seg;
   $32 = ((($31)) + 16|0);
   $33 = (($32) + ($30<<3)|0);
   ;HEAP32[$29>>2]=HEAP32[$33>>2]|0;HEAP32[$29+4>>2]=HEAP32[$33+4>>2]|0;
  }
  $0 = 1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 14) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _mrb_nil_value_381($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_iv_get($agg$result,$mrb,$obj,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $2 = (_obj_iv_p($obj$byval_copy)|0);
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$obj>>2]|0;
  $6 = $1;
  _mrb_obj_iv_get($agg$result,$4,$5,$6);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_381($agg$result);
  STACKTOP = sp;return;
 }
}
function _obj_iv_p($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = ((($obj)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 18: case 21: case 15: case 12: case 10: case 9: case 8:  {
  $0 = 1;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _mrb_obj_iv_set($mrb,$obj,$sym,$v) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $v$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $obj;
 $2 = $sym;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $t = $5;
 $6 = $t;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $0;
  $9 = (_iv_new($8)|0);
  $10 = $1;
  $11 = ((($10)) + 12|0);
  HEAP32[$11>>2] = $9;
  $t = $9;
 }
 $12 = $0;
 $13 = $1;
 _mrb_write_barrier($12,$13);
 $14 = $0;
 $15 = $t;
 $16 = $2;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _iv_put($14,$15,$16,$v$byval_copy);
 STACKTOP = sp;return;
}
function _iv_new($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_malloc($1,12)|0);
 $t = $2;
 $3 = $t;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $t;
 HEAP32[$5>>2] = 0;
 $6 = $t;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $t;
 STACKTOP = sp;return ($8|0);
}
function _iv_put($mrb,$t,$sym,$val) {
 $mrb = $mrb|0;
 $t = $t|0;
 $sym = $sym|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $i = 0, $key = 0, $matched_idx = 0, $matched_seg = 0, $or$cond = 0, $prev = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $t;
 $2 = $sym;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $seg = $4;
 $prev = 0;
 $matched_seg = 0;
 $matched_idx = 0;
 L1: while(1) {
  $5 = $seg;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 14;
   break;
  }
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = ($7>>>0)<(4);
   if (!($8)) {
    break;
   }
   $9 = $i;
   $10 = $seg;
   $11 = (($10) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $key = $12;
   $13 = $seg;
   $14 = ((($13)) + 48|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    $17 = $i;
    $18 = $1;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($17>>>0)>=($20>>>0);
    if ($21) {
     label = 7;
     break L1;
    }
   }
   $38 = $matched_seg;
   $39 = ($38|0)==(0|0);
   $40 = $key;
   $41 = ($40|0)==(0);
   $or$cond = $39 & $41;
   if ($or$cond) {
    $42 = $seg;
    $matched_seg = $42;
    $43 = $i;
    $matched_idx = $43;
   } else {
    $44 = $key;
    $45 = $2;
    $46 = ($44|0)==($45|0);
    if ($46) {
     label = 11;
     break L1;
    }
   }
   $51 = $i;
   $52 = (($51) + 1)|0;
   $i = $52;
  }
  $53 = $seg;
  $prev = $53;
  $54 = $seg;
  $55 = ((($54)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  $seg = $56;
 }
 if ((label|0) == 7) {
  $22 = $2;
  $23 = $i;
  $24 = $seg;
  $25 = (($24) + ($23<<2)|0);
  HEAP32[$25>>2] = $22;
  $26 = $i;
  $27 = $seg;
  $28 = ((($27)) + 16|0);
  $29 = (($28) + ($26<<3)|0);
  ;HEAP32[$29>>2]=HEAP32[$val>>2]|0;HEAP32[$29+4>>2]=HEAP32[$val+4>>2]|0;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $32 = $1;
  $33 = ((($32)) + 8|0);
  HEAP32[$33>>2] = $31;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$35>>2] = $37;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $47 = $i;
  $48 = $seg;
  $49 = ((($48)) + 16|0);
  $50 = (($49) + ($47<<3)|0);
  ;HEAP32[$50>>2]=HEAP32[$val>>2]|0;HEAP32[$50+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $57 = $1;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = $matched_seg;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $2;
   $64 = $matched_idx;
   $65 = $matched_seg;
   $66 = (($65) + ($64<<2)|0);
   HEAP32[$66>>2] = $63;
   $67 = $matched_idx;
   $68 = $matched_seg;
   $69 = ((($68)) + 16|0);
   $70 = (($69) + ($67<<3)|0);
   ;HEAP32[$70>>2]=HEAP32[$val>>2]|0;HEAP32[$70+4>>2]=HEAP32[$val+4>>2]|0;
   STACKTOP = sp;return;
  }
  $71 = $0;
  $72 = (_mrb_malloc($71,52)|0);
  $seg = $72;
  $73 = $seg;
  $74 = ($73|0)!=(0|0);
  if (!($74)) {
   STACKTOP = sp;return;
  }
  $75 = $seg;
  $76 = ((($75)) + 48|0);
  HEAP32[$76>>2] = 0;
  $77 = $2;
  $78 = $seg;
  HEAP32[$78>>2] = $77;
  $79 = $seg;
  $80 = ((($79)) + 16|0);
  ;HEAP32[$80>>2]=HEAP32[$val>>2]|0;HEAP32[$80+4>>2]=HEAP32[$val+4>>2]|0;
  $81 = $1;
  $82 = ((($81)) + 8|0);
  HEAP32[$82>>2] = 1;
  $83 = $prev;
  $84 = ($83|0)!=(0|0);
  $85 = $seg;
  if ($84) {
   $86 = $prev;
   $87 = ((($86)) + 48|0);
   HEAP32[$87>>2] = $85;
   STACKTOP = sp;return;
  } else {
   $88 = $1;
   HEAP32[$88>>2] = $85;
   STACKTOP = sp;return;
  }
 }
}
function _mrb_obj_iv_ifnone($mrb,$obj,$sym,$v) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $t = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $obj;
 $2 = $sym;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $t = $5;
 $6 = $t;
 $7 = ($6|0)!=(0|0);
 $8 = $0;
 if ($7) {
  $12 = $t;
  $13 = $2;
  $14 = (_iv_get($8,$12,$13,$v)|0);
  $15 = ($14<<24>>24)!=(0);
  if ($15) {
   STACKTOP = sp;return;
  }
 } else {
  $9 = (_iv_new($8)|0);
  $10 = $1;
  $11 = ((($10)) + 12|0);
  HEAP32[$11>>2] = $9;
  $t = $9;
 }
 $16 = $0;
 $17 = $1;
 _mrb_write_barrier($16,$17);
 $18 = $0;
 $19 = $t;
 $20 = $2;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _iv_put($18,$19,$20,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_iv_set($mrb,$obj,$sym,$v) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $obj$byval_copy = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $2 = (_obj_iv_p($obj$byval_copy)|0);
 $3 = ($2<<24>>24)!=(0);
 $4 = $0;
 if ($3) {
  $5 = HEAP32[$obj>>2]|0;
  $6 = $1;
  ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
  _mrb_obj_iv_set($4,$5,$6,$v$byval_copy);
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = (_mrb_class_get($7,68855)|0);
  _mrb_raise($4,$8,56206);
  // unreachable;
 }
}
function _mrb_obj_iv_defined($mrb,$obj,$sym) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $obj;
 $3 = $sym;
 $4 = $2;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $t = $6;
 $7 = $t;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = $t;
  $11 = $3;
  $12 = (_iv_get($9,$10,$11,0)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _mrb_iv_defined($mrb,$obj,$sym) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $1 = $mrb;
 $2 = $sym;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $3 = (_obj_iv_p($obj$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$obj>>2]|0;
  $7 = $2;
  $8 = (_mrb_obj_iv_defined($5,$6,$7)|0);
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _mrb_iv_p($mrb,$iv_name) {
 $mrb = $mrb|0;
 $iv_name = $iv_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $1 = $mrb;
 $2 = $iv_name;
 $3 = $1;
 $4 = $2;
 $5 = (_mrb_sym2name_len($3,$4,$len)|0);
 $s = $5;
 $6 = HEAP32[$len>>2]|0;
 $7 = ($6|0)<(2);
 if ($7) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $8 = $s;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(64);
 if ($11) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $12 = $s;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(64);
 if ($16) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $i = 1;
 while(1) {
  $17 = $i;
  $18 = HEAP32[$len>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   label = 15;
   break;
  }
  $20 = $i;
  $21 = $s;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = $24 | 32;
  $26 = (($25) - 97)|0;
  $27 = ($26>>>0)<(26);
  if (!($27)) {
   $28 = $i;
   $29 = $s;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = (($32) - 48)|0;
   $34 = ($33>>>0)<(10);
   if (!($34)) {
    $35 = $i;
    $36 = $s;
    $37 = (($36) + ($35)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = ($39|0)==(95);
    if (!($40)) {
     $41 = $i;
     $42 = $s;
     $43 = (($42) + ($41)|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = ($45>>>0)<=(127);
     if ($46) {
      label = 13;
      break;
     }
    }
   }
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 if ((label|0) == 13) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 15) {
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _mrb_iv_check($mrb,$iv_name) {
 $mrb = $mrb|0;
 $iv_name = $iv_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $iv_name;
 $3 = $0;
 $4 = $1;
 $5 = (_mrb_iv_p($3,$4)|0);
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = $1;
  $9 = $0;
  $10 = $1;
  _mrb_sym2str($2,$9,$10);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_name_error($7,$8,56235,$vararg_buffer);
  // unreachable;
 }
}
function _mrb_iv_copy($mrb,$dest,$src) {
 $mrb = $mrb|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$dest>>2]|0;
 $d = $1;
 $2 = HEAP32[$src>>2]|0;
 $s = $2;
 $3 = $d;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = $d;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  _iv_free($7,$10);
  $11 = $d;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = $s;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = $d;
 _mrb_write_barrier($17,$18);
 $19 = $0;
 $20 = $s;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_iv_copy($19,$22)|0);
 $24 = $d;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _iv_copy($mrb,$t) {
 $mrb = $mrb|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $key = 0, $seg = 0, $t2 = 0, $val = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 40|0;
 $val = sp;
 $1 = $mrb;
 $2 = $t;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $seg = $4;
 $5 = $1;
 $6 = (_iv_new($5)|0);
 $t2 = $6;
 L1: while(1) {
  $7 = $seg;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 10;
   break;
  }
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = ($9>>>0)<(4);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $seg;
   $13 = (($12) + ($11<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $key = $14;
   $15 = $i;
   $16 = $seg;
   $17 = ((($16)) + 16|0);
   $18 = (($17) + ($15<<3)|0);
   ;HEAP32[$val>>2]=HEAP32[$18>>2]|0;HEAP32[$val+4>>2]=HEAP32[$18+4>>2]|0;
   $19 = $seg;
   $20 = ((($19)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $23 = $i;
    $24 = $2;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23>>>0)>=($26>>>0);
    if ($27) {
     label = 7;
     break L1;
    }
   }
   $29 = $1;
   $30 = $t2;
   $31 = $key;
   ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
   _iv_put($29,$30,$31,$val$byval_copy);
   $32 = $i;
   $33 = (($32) + 1)|0;
   $i = $33;
  }
  $34 = $seg;
  $35 = ((($34)) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $seg = $36;
 }
 if ((label|0) == 7) {
  $28 = $t2;
  $0 = $28;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 else if ((label|0) == 10) {
  $37 = $t2;
  $0 = $37;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _mrb_obj_iv_inspect($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cn = 0, $len = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, $str$byval_copy2 = 0;
 var $str$byval_copy3 = 0, $str$byval_copy5 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 144|0;
 $str$byval_copy5 = sp + 136|0;
 $$byval_copy4 = sp + 128|0;
 $str$byval_copy3 = sp + 120|0;
 $str$byval_copy2 = sp + 112|0;
 $str$byval_copy1 = sp + 104|0;
 $str$byval_copy = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $2 = sp + 56|0;
 $str = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $0 = $mrb;
 $1 = $obj;
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $t = $11;
 $12 = $0;
 $13 = $t;
 $14 = (_iv_size($12,$13)|0);
 $len = $14;
 $15 = $len;
 $16 = ($15>>>0)>(0);
 $17 = $0;
 $18 = $1;
 if ($16) {
  _mrb_obj_value_389($2,$18);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  $19 = (_mrb_obj_classname($17,$$byval_copy)|0);
  $cn = $19;
  $20 = $0;
  _mrb_str_buf_new($str,$20,30);
  $21 = $0;
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($3,$21,$str$byval_copy,56284,2);
  $22 = $0;
  $23 = $cn;
  ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat_cstr($4,$22,$str$byval_copy1,$23);
  $24 = $0;
  ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($5,$24,$str$byval_copy2,67713,1);
  $25 = $0;
  $26 = $0;
  $27 = $1;
  _mrb_ptr_to_str($6,$26,$27);
  ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$6+4>>2]|0;
  _mrb_str_concat($25,$str$byval_copy3,$$byval_copy4);
  $28 = $0;
  $29 = $t;
  (_iv_foreach($28,$29,125,$str)|0);
  $30 = $0;
  ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($7,$30,$str$byval_copy5,65241,1);
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _mrb_obj_value_389($8,$18);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$8+4>>2]|0;
  _mrb_any_to_s($agg$result,$17,$$byval_copy6);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_value_389($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _inspect_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ins = 0, $ins$byval_copy = 0, $len = 0, $s = 0, $sp = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $str$byval_copy5 = 0, $v$byval_copy = 0, $v$byval_copy4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ins$byval_copy = sp + 160|0;
 $str$byval_copy5 = sp + 152|0;
 $v$byval_copy4 = sp + 144|0;
 $v$byval_copy = sp + 136|0;
 $str$byval_copy3 = sp + 128|0;
 $str$byval_copy2 = sp + 120|0;
 $str$byval_copy1 = sp + 112|0;
 $str$byval_copy = sp + 104|0;
 $str = sp + 80|0;
 $len = sp + 72|0;
 $ins = sp + 64|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $10 = $2;
 ;HEAP32[$str>>2]=HEAP32[$10>>2]|0;HEAP32[$str+4>>2]=HEAP32[$10+4>>2]|0;
 $11 = HEAP32[$str>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$str>>2]|0;
 $17 = ((($16)) + 12|0);
 if ($15) {
  $20 = $17;
 } else {
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19;
 }
 $sp = $20;
 $21 = $sp;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(45);
 if ($24) {
  $25 = $sp;
  HEAP8[$25>>0] = 35;
  $26 = $0;
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($3,$26,$str$byval_copy,66205,1);
 } else {
  $27 = $0;
  ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($4,$27,$str$byval_copy1,63258,2);
 }
 $28 = $0;
 $29 = $1;
 $30 = (_mrb_sym2name_len($28,$29,$len)|0);
 $s = $30;
 $31 = $0;
 $32 = $s;
 $33 = HEAP32[$len>>2]|0;
 ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($5,$31,$str$byval_copy2,$32,$33);
 $34 = $0;
 ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($6,$34,$str$byval_copy3,65815,1);
 $35 = ((($v)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(8);
 $38 = $0;
 if ($37) {
  ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
  _mrb_any_to_s($7,$38,$v$byval_copy);
  ;HEAP32[$ins>>2]=HEAP32[$7>>2]|0;HEAP32[$ins+4>>2]=HEAP32[$7+4>>2]|0;
  $39 = $0;
  ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$ins$byval_copy>>2]=HEAP32[$ins>>2]|0;HEAP32[$ins$byval_copy+4>>2]=HEAP32[$ins+4>>2]|0;
  _mrb_str_cat_str($9,$39,$str$byval_copy5,$ins$byval_copy);
  STACKTOP = sp;return 0;
 } else {
  ;HEAP32[$v$byval_copy4>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy4+4>>2]=HEAP32[$v+4>>2]|0;
  _mrb_inspect($8,$38,$v$byval_copy4);
  ;HEAP32[$ins>>2]=HEAP32[$8>>2]|0;HEAP32[$ins+4>>2]=HEAP32[$8+4>>2]|0;
  $39 = $0;
  ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$ins$byval_copy>>2]=HEAP32[$ins>>2]|0;HEAP32[$ins$byval_copy+4>>2]=HEAP32[$ins+4>>2]|0;
  _mrb_str_cat_str($9,$39,$str$byval_copy5,$ins$byval_copy);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _mrb_iv_remove($agg$result,$mrb,$obj,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj$byval_copy = 0, $t = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 24|0;
 $val = sp;
 $0 = $mrb;
 $1 = $sym;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $2 = (_obj_iv_p($obj$byval_copy)|0);
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  $4 = HEAP32[$obj>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $t = $6;
  $7 = $t;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $0;
   $10 = $t;
   $11 = $1;
   $12 = (_iv_del($9,$10,$11,$val)|0);
   $13 = $12&255;
   $14 = ($13|0)!=(0);
   if ($14) {
    ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 _mrb_undef_value_396($agg$result);
 STACKTOP = sp;return;
}
function _iv_del($mrb,$t,$sym,$vp) {
 $mrb = $mrb|0;
 $t = $t|0;
 $sym = $sym|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $key = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $t;
 $3 = $sym;
 $4 = $vp;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $seg = $6;
 L1: while(1) {
  $7 = $seg;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 14;
   break;
  }
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = ($9>>>0)<(4);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $seg;
   $13 = (($12) + ($11<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $key = $14;
   $15 = $seg;
   $16 = ((($15)) + 48|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $19 = $i;
    $20 = $2;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19>>>0)>=($22>>>0);
    if ($23) {
     label = 7;
     break L1;
    }
   }
   $24 = $key;
   $25 = $3;
   $26 = ($24|0)==($25|0);
   if ($26) {
    label = 9;
    break L1;
   }
   $41 = $i;
   $42 = (($41) + 1)|0;
   $i = $42;
  }
  $43 = $seg;
  $44 = ((($43)) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $seg = $45;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 9) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$28>>2] = $30;
  $31 = $i;
  $32 = $seg;
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = $4;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $4;
   $37 = $i;
   $38 = $seg;
   $39 = ((($38)) + 16|0);
   $40 = (($39) + ($37<<3)|0);
   ;HEAP32[$36>>2]=HEAP32[$40>>2]|0;HEAP32[$36+4>>2]=HEAP32[$40+4>>2]|0;
  }
  $0 = 1;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 14) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _mrb_undef_value_396($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 5;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_vm_iv_get($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 _mrb_iv_get($agg$result,$2,$$byval_copy,$8);
 STACKTOP = sp;return;
}
function _mrb_vm_iv_set($mrb,$sym,$v) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_iv_set($2,$$byval_copy,$8,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_obj_instance_variables($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ary = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 24|0;
 $ary = sp + 8|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 _mrb_ary_new($1,$2);
 ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $3 = (_obj_iv_p($self$byval_copy)|0);
 $4 = $3&255;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$self>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $0;
   $11 = HEAP32[$self>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   (_iv_foreach($10,$13,126,$ary)|0);
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _iv_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0, $len = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $ary$byval_copy = sp + 40|0;
 $ary = sp + 16|0;
 $len = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $4 = $2;
 ;HEAP32[$ary>>2]=HEAP32[$4>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = $0;
 $6 = $1;
 $7 = (_mrb_sym2name_len($5,$6,$len)|0);
 $s = $7;
 $8 = HEAP32[$len>>2]|0;
 $9 = ($8|0)>(1);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = $s;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(64);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $s;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)!=(64);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $0;
 $20 = $1;
 _mrb_symbol_value_397($3,$20);
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_ary_push($19,$ary$byval_copy,$$byval_copy);
 STACKTOP = sp;return 0;
}
function _mrb_symbol_value_397($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_class_variables($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ary = 0, $c = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ary = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 _mrb_ary_new($1,$2);
 ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
 $3 = HEAP32[$mod>>2]|0;
 $c = $3;
 while(1) {
  $4 = $c;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $c;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $0;
   $11 = $c;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   (_iv_foreach($10,$13,127,$ary)|0);
  }
  $14 = $c;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $c = $16;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _cv_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0, $len = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $ary$byval_copy = sp + 40|0;
 $ary = sp + 16|0;
 $len = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $4 = $2;
 ;HEAP32[$ary>>2]=HEAP32[$4>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = $0;
 $6 = $1;
 $7 = (_mrb_sym2name_len($5,$6,$len)|0);
 $s = $7;
 $8 = HEAP32[$len>>2]|0;
 $9 = ($8|0)>(2);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = $s;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(64);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $s;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(64);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $0;
 $20 = $1;
 _mrb_symbol_value_397($3,$20);
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_ary_push($19,$ary$byval_copy,$$byval_copy);
 STACKTOP = sp;return 0;
}
function _mrb_mod_cv_get($agg$result,$mrb,$c,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 $sym = $sym|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cls = 0, $klass = 0, $or$cond = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $v = sp + 48|0;
 $klass = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $0 = $mrb;
 $1 = $c;
 $2 = $sym;
 $6 = $1;
 $cls = $6;
 while(1) {
  $7 = $1;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $0;
   $14 = $1;
   $15 = ((($14)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $2;
   $18 = (_iv_get($13,$16,$17,$v)|0);
   $19 = $18&255;
   $20 = ($19|0)!=(0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $21 = $1;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $1 = $23;
 }
 if ((label|0) == 5) {
  ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
  STACKTOP = sp;return;
 }
 $24 = $cls;
 $25 = ($24|0)!=(0|0);
 L11: do {
  if ($25) {
   $26 = $cls;
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 & 255;
   $29 = ($28|0)==(12);
   if ($29) {
    $30 = $0;
    $31 = $cls;
    $32 = $0;
    $33 = (_mrb_intern_static($32,67899,12)|0);
    _mrb_obj_iv_get($3,$30,$31,$33);
    ;HEAP32[$klass>>2]=HEAP32[$3>>2]|0;HEAP32[$klass+4>>2]=HEAP32[$3+4>>2]|0;
    $34 = HEAP32[$klass>>2]|0;
    $1 = $34;
    $35 = $1;
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 & 255;
    $38 = ($37|0)==(9);
    $39 = $1;
    $40 = ($39|0)!=(0|0);
    $or$cond = $38 & $40;
    if ($or$cond) {
     while(1) {
      $41 = $1;
      $42 = ((($41)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)!=(0|0);
      if ($44) {
       $45 = $0;
       $46 = $1;
       $47 = ((($46)) + 12|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = $2;
       $50 = (_iv_get($45,$48,$49,$v)|0);
       $51 = $50&255;
       $52 = ($51|0)!=(0);
       if ($52) {
        break;
       }
      }
      $53 = $1;
      $54 = ((($53)) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      $1 = $55;
      $$old = $1;
      $$old1 = ($$old|0)!=(0|0);
      if (!($$old1)) {
       break L11;
      }
     }
     ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $56 = $0;
 $57 = $2;
 $58 = $0;
 $59 = $2;
 _mrb_sym2str($4,$58,$59);
 $60 = $cls;
 _mrb_obj_value_389($5,$60);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 ;HEAP8[$vararg_ptr2>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$5+7>>0]|0;
 _mrb_name_error($56,$57,56287,$vararg_buffer);
 // unreachable;
}
function _mrb_cv_get($agg$result,$mrb,$mod,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = HEAP32[$mod>>2]|0;
 $4 = $1;
 _mrb_mod_cv_get($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function _mrb_mod_cv_set($mrb,$c,$sym,$v) {
 $mrb = $mrb|0;
 $c = $c|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cls = 0, $t = 0, $v$byval_copy = 0, $v$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy1 = sp + 32|0;
 $v$byval_copy = sp + 24|0;
 $0 = $mrb;
 $1 = $c;
 $2 = $sym;
 $3 = $1;
 $cls = $3;
 while(1) {
  $4 = $1;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $1;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $t = $12;
   $13 = $0;
   $14 = $t;
   $15 = $2;
   $16 = (_iv_get($13,$14,$15,0)|0);
   $17 = ($16<<24>>24)!=(0);
   if ($17) {
    label = 5;
    break;
   }
  }
  $23 = $1;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $1 = $25;
 }
 if ((label|0) == 5) {
  $18 = $0;
  $19 = $1;
  _mrb_write_barrier($18,$19);
  $20 = $0;
  $21 = $t;
  $22 = $2;
  ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
  _iv_put($20,$21,$22,$v$byval_copy);
  STACKTOP = sp;return;
 }
 $26 = $cls;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $30 = $0;
  $31 = (_iv_new($30)|0);
  $32 = $cls;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $31;
 }
 $34 = $0;
 $35 = $cls;
 _mrb_write_barrier($34,$35);
 $36 = $0;
 $37 = $cls;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $2;
 ;HEAP32[$v$byval_copy1>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy1+4>>2]=HEAP32[$v+4>>2]|0;
 _iv_put($36,$39,$40,$v$byval_copy1);
 STACKTOP = sp;return;
}
function _mrb_cv_set($mrb,$mod,$sym,$v) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = HEAP32[$mod>>2]|0;
 $4 = $1;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_mod_cv_set($2,$3,$4,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_mod_cv_defined($mrb,$c,$sym) {
 $mrb = $mrb|0;
 $c = $c|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $c;
 $3 = $sym;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $2;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $2;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $t = $12;
   $13 = $1;
   $14 = $t;
   $15 = $3;
   $16 = (_iv_get($13,$14,$15,0)|0);
   $17 = ($16<<24>>24)!=(0);
   if ($17) {
    label = 5;
    break;
   }
  }
  $18 = $2;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $2 = $20;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _mrb_cv_defined($mrb,$mod,$sym) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = HEAP32[$mod>>2]|0;
 $4 = $1;
 $5 = (_mrb_mod_cv_defined($2,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _mrb_vm_cv_get($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $c = $10;
 $11 = $c;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $20 = $0;
  $21 = $c;
  $22 = $1;
  _mrb_mod_cv_get($agg$result,$20,$21,$22);
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $c = $19;
 $20 = $0;
 $21 = $c;
 $22 = $1;
 _mrb_mod_cv_get($agg$result,$20,$21,$22);
 STACKTOP = sp;return;
}
function _mrb_vm_cv_set($mrb,$sym,$v) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $c = $10;
 $11 = $c;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $c = $19;
 }
 $20 = $0;
 $21 = $c;
 $22 = $1;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_mod_cv_set($20,$21,$22,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_const_get($agg$result,$mrb,$mod,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $mod$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mod_const_check($2,$mod$byval_copy);
 $3 = $0;
 $4 = HEAP32[$mod>>2]|0;
 $5 = $1;
 _const_get($agg$result,$3,$4,$5);
 STACKTOP = sp;return;
}
function _mod_const_check($mrb,$mod) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = ((($mod)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 12: case 10: case 9:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $3 = $0;
  $4 = $0;
  $5 = (_mrb_class_get($4,68905)|0);
  _mrb_raise($3,$5,56325);
  // unreachable;
 }
 }
}
function _const_get($agg$result,$mrb,$base,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $base = $base|0;
 $sym = $sym|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c = 0, $name = 0, $or$cond = 0, $retry = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $v = sp + 32|0;
 $name = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $base;
 $2 = $sym;
 $5 = $1;
 $c = $5;
 $retry = 0;
 while(1) {
  $6 = $c;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $c;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = $c;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $t = $14;
    $15 = $0;
    $16 = $t;
    $17 = $2;
    $18 = (_iv_get($15,$16,$17,$v)|0);
    $19 = ($18<<24>>24)!=(0);
    if ($19) {
     label = 5;
     break;
    }
   }
   $20 = $c;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $c = $22;
   continue;
  } else {
   $23 = $retry;
   $24 = ($23<<24>>24)==(0);
   $25 = $1;
   $26 = ($25|0)!=(0|0);
   $or$cond = $24 & $26;
   if (!($or$cond)) {
    label = 10;
    break;
   }
   $27 = $1;
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 255;
   $30 = ($29|0)==(10);
   if (!($30)) {
    label = 10;
    break;
   }
   $31 = $0;
   $32 = ((($31)) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $c = $33;
   $retry = 1;
   continue;
  }
 }
 if ((label|0) == 5) {
  ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $34 = $2;
  _mrb_symbol_value_397($3,$34);
  ;HEAP32[$name>>2]=HEAP32[$3>>2]|0;HEAP32[$name+4>>2]=HEAP32[$3+4>>2]|0;
  $35 = $0;
  $36 = $1;
  _mrb_obj_value_389($4,$36);
  $37 = $0;
  $38 = (_mrb_intern_static($37,65959,13)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
  _mrb_funcall_argv($agg$result,$35,$$byval_copy,$38,1,$name);
  STACKTOP = sp;return;
 }
}
function _mrb_vm_const_get($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $c2 = 0, $klass = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 16|0;
 $klass = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $sym;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $c = $11;
 $12 = $c;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = $0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $c = $20;
 }
 $21 = $c;
 $22 = ($21|0)!=(0|0);
 L4: do {
  if ($22) {
   $23 = $c;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = $0;
    $28 = $c;
    $29 = ((($28)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = (_iv_get($27,$30,$31,$v)|0);
    $33 = $32&255;
    $34 = ($33|0)!=(0);
    if ($34) {
     ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
     STACKTOP = sp;return;
    }
   }
   $35 = $c;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 255;
   $38 = ($37|0)==(12);
   if ($38) {
    $39 = $0;
    $40 = $c;
    $41 = $0;
    $42 = (_mrb_intern_static($41,67899,12)|0);
    _mrb_obj_iv_get($2,$39,$40,$42);
    ;HEAP32[$klass>>2]=HEAP32[$2>>2]|0;HEAP32[$klass+4>>2]=HEAP32[$2+4>>2]|0;
    $43 = HEAP32[$klass>>2]|0;
    $c2 = $43;
    $44 = $c2;
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 & 255;
    $47 = ($46|0)==(9);
    if ($47) {
     $48 = $c2;
     $c = $48;
    }
   }
   $49 = $c;
   $c2 = $49;
   while(1) {
    $50 = $0;
    $51 = $c2;
    $52 = (_mrb_class_outer_module($50,$51)|0);
    $c2 = $52;
    $53 = $c2;
    $54 = ($53|0)!=(0|0);
    if (!($54)) {
     break L4;
    }
    $55 = $c2;
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)!=(0|0);
    if (!($58)) {
     continue;
    }
    $59 = $0;
    $60 = $c2;
    $61 = ((($60)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $1;
    $64 = (_iv_get($59,$62,$63,$v)|0);
    $65 = $64&255;
    $66 = ($65|0)!=(0);
    if ($66) {
     break;
    }
   }
   ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $67 = $0;
 $68 = $c;
 $69 = $1;
 _const_get($agg$result,$67,$68,$69);
 STACKTOP = sp;return;
}
function _mrb_const_set($mrb,$mod,$sym,$v) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $mod$byval_copy = 0, $mod$byval_copy1 = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 24|0;
 $mod$byval_copy1 = sp + 16|0;
 $mod$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mod_const_check($2,$mod$byval_copy);
 $3 = $0;
 $4 = $1;
 ;HEAP32[$mod$byval_copy1>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy1+4>>2]=HEAP32[$mod+4>>2]|0;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_iv_set($3,$mod$byval_copy1,$4,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_vm_const_set($mrb,$sym,$v) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $c = $10;
 $11 = $c;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $c = $19;
 }
 $20 = $0;
 $21 = $c;
 $22 = $1;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_obj_iv_set($20,$21,$22,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_define_const($mrb,$mod,$name,$v) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $name = $name|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $mod;
 $2 = $name;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $2;
 $7 = (_mrb_intern_cstr($5,$6)|0);
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _mrb_obj_iv_set($3,$4,$7,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_define_global_const($mrb,$name,$val) {
 $mrb = $mrb|0;
 $name = $name|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $name;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_define_const($2,$5,$6,$val$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_mod_constants($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ary = 0, $c = 0, $inherit = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ary = sp + 24|0;
 $inherit = sp + 36|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 HEAP8[$inherit>>0] = 1;
 $2 = HEAP32[$mod>>2]|0;
 $c = $2;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $inherit;
 (_mrb_get_args($3,68376,$vararg_buffer)|0);
 $4 = $0;
 _mrb_ary_new($1,$4);
 ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
 $$old = $c;
 $$old1 = ($$old|0)!=(0|0);
 L1: do {
  if ($$old1) {
   while(1) {
    $5 = $c;
    $6 = ((($5)) + 12|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)!=(0|0);
    if ($8) {
     $9 = $0;
     $10 = $c;
     $11 = ((($10)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     (_iv_foreach($9,$12,128,$ary)|0);
    }
    $13 = HEAP8[$inherit>>0]|0;
    $14 = ($13<<24>>24)!=(0);
    if (!($14)) {
     break L1;
    }
    $15 = $c;
    $16 = ((($15)) + 20|0);
    $17 = HEAP32[$16>>2]|0;
    $c = $17;
    $18 = $c;
    $19 = $0;
    $20 = ((($19)) + 32|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)!=($21|0);
    $23 = $c;
    $24 = ($23|0)!=(0|0);
    $or$cond = $22 & $24;
    if (!($or$cond)) {
     break;
    }
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _const_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0;
 var $len = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $ary$byval_copy = sp + 40|0;
 $ary = sp + 16|0;
 $len = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $4 = $2;
 ;HEAP32[$ary>>2]=HEAP32[$4>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = $0;
 $6 = $1;
 $7 = (_mrb_sym2name_len($5,$6,$len)|0);
 $s = $7;
 $8 = HEAP32[$len>>2]|0;
 $9 = ($8|0)>=(1);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = $s;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) - 65)|0;
 $14 = ($13>>>0)<(26);
 if (!($14)) {
  STACKTOP = sp;return 0;
 }
 $15 = $0;
 $16 = $1;
 _mrb_symbol_value_397($3,$16);
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_ary_push($15,$ary$byval_copy,$$byval_copy);
 STACKTOP = sp;return 0;
}
function _mrb_gv_get($agg$result,$mrb,$sym) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _mrb_nil_value_381($agg$result);
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (_iv_get($6,$9,$10,$v)|0);
 $12 = ($11<<24>>24)!=(0);
 if ($12) {
  ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_381($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_gv_set($mrb,$sym,$v) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $0;
 if ($5) {
  $10 = ((($6)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $t = $11;
 } else {
  $7 = (_iv_new($6)|0);
  $8 = $0;
  $9 = ((($8)) + 24|0);
  HEAP32[$9>>2] = $7;
  $t = $7;
 }
 $12 = $0;
 $13 = $t;
 $14 = $1;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 _iv_put($12,$13,$14,$v$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_f_global_variables($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0, $buf = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $ary$byval_copy = sp + 32|0;
 $ary = sp + 16|0;
 $buf = sp + 48|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $t = $4;
 $5 = $0;
 _mrb_ary_new($ary,$5);
 $6 = $t;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = $t;
  (_iv_foreach($8,$9,129,$ary)|0);
 }
 HEAP8[$buf>>0] = 36;
 $10 = ((($buf)) + 2|0);
 HEAP8[$10>>0] = 0;
 $i = 1;
 while(1) {
  $11 = $i;
  $12 = ($11>>>0)<=(9);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = (($13) + 48)|0;
  $15 = $14&255;
  $16 = ((($buf)) + 1|0);
  HEAP8[$16>>0] = $15;
  $17 = $0;
  $18 = $0;
  $19 = (_mrb_intern($18,$buf,2)|0);
  _mrb_symbol_value_397($1,$19);
  ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_ary_push($17,$ary$byval_copy,$$byval_copy);
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _gv_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ary = 0, $ary$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $ary$byval_copy = sp + 32|0;
 $ary = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $sym;
 $2 = $p;
 $4 = $2;
 ;HEAP32[$ary>>2]=HEAP32[$4>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = $0;
 $6 = $1;
 _mrb_symbol_value_397($3,$6);
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_ary_push($5,$ary$byval_copy,$$byval_copy);
 STACKTOP = sp;return 0;
}
function _mrb_const_defined($mrb,$mod,$id) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $mod$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 $4 = (_mrb_const_defined_0($2,$mod$byval_copy,$3,1,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _mrb_const_defined_0($mrb,$mod,$id,$exclude,$recurse) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $id = $id|0;
 $exclude = $exclude|0;
 $recurse = $recurse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $klass = 0, $mod_retry = 0, $or$cond = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $id;
 $3 = $exclude;
 $4 = $recurse;
 $5 = HEAP32[$mod>>2]|0;
 $klass = $5;
 $mod_retry = 0;
 $6 = $klass;
 $tmp = $6;
 L1: while(1) {
  $7 = $tmp;
  $8 = ($7|0)!=(0|0);
  do {
   if ($8) {
    $9 = $tmp;
    $10 = ((($9)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(0|0);
    if ($12) {
     $13 = $1;
     $14 = $tmp;
     $15 = ((($14)) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $2;
     $18 = (_iv_get($13,$16,$17,0)|0);
     $19 = $18&255;
     $20 = ($19|0)!=(0);
     if ($20) {
      label = 5;
      break L1;
     }
    }
    $21 = $4;
    $22 = ($21<<24>>24)!=(0);
    if (!($22)) {
     $23 = $klass;
     $24 = $1;
     $25 = ((($24)) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($23|0)!=($26|0);
     if ($27) {
      break;
     }
    }
    $28 = $tmp;
    $29 = ((($28)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $tmp = $30;
    continue L1;
   }
  } while(0);
  $31 = $3;
  $32 = ($31<<24>>24)!=(0);
  $33 = $mod_retry;
  $34 = ($33<<24>>24)!=(0);
  $or$cond = $32 | $34;
  if ($or$cond) {
   label = 12;
   break;
  }
  $35 = $klass;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 255;
  $38 = ($37|0)==(10);
  if (!($38)) {
   label = 12;
   break;
  }
  $mod_retry = 1;
  $39 = $1;
  $40 = ((($39)) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $tmp = $41;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _mrb_const_defined_at($mrb,$mod,$id) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $mod$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 $4 = (_mrb_const_defined_0($2,$mod$byval_copy,$3,1,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _mrb_attr_get($agg$result,$mrb,$obj,$id) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_iv_get($agg$result,$2,$obj$byval_copy,$3);
 STACKTOP = sp;return;
}
function _mrb_class_sym($mrb,$c,$outer) {
 $mrb = $mrb|0;
 $c = $c|0;
 $outer = $outer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 16|0;
 $4 = sp + 8|0;
 $arg = sp;
 $1 = $mrb;
 $2 = $c;
 $3 = $outer;
 $5 = $1;
 $6 = $2;
 $7 = $1;
 $8 = (_mrb_intern_static($7,64571,11)|0);
 _mrb_obj_iv_get($4,$5,$6,$8);
 ;HEAP32[$name>>2]=HEAP32[$4>>2]|0;HEAP32[$name+4>>2]=HEAP32[$4+4>>2]|0;
 $9 = ((($name)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$name>>2]|0;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $3;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = $2;
    HEAP32[$arg>>2] = $16;
    $17 = ((($arg)) + 4|0);
    HEAP32[$17>>2] = 0;
    $18 = $1;
    $19 = $3;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    (_iv_foreach($18,$21,130,$arg)|0);
    $22 = ((($arg)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $0 = $23;
    $25 = $0;
    STACKTOP = sp;return ($25|0);
   } else {
    $0 = 0;
    $25 = $0;
    STACKTOP = sp;return ($25|0);
   }
  }
 }
 $24 = HEAP32[$name>>2]|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _csym_i($mrb,$sym,$v,$p) {
 $mrb = $mrb|0;
 $sym = $sym|0;
 $v = $v|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $sym;
 $3 = $p;
 $4 = $3;
 $a = $4;
 $5 = $a;
 $6 = HEAP32[$5>>2]|0;
 $c = $6;
 $7 = ((($v)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $c;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 255;
 $12 = ($8|0)==($11|0);
 if ($12) {
  $13 = HEAP32[$v>>2]|0;
  $14 = $c;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = $2;
   $17 = $a;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = $16;
   $0 = 1;
   $19 = $0;
   STACKTOP = sp;return ($19|0);
  }
 }
 $0 = 0;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _mrb_funcall($agg$result,$mrb,$self,$name,$argc,$varargs) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 $name = $name|0;
 $argc = $argc|0;
 $varargs = $varargs|0;
 var $$field$field = 0.0, $$field3 = 0, $$index2 = 0, $$index6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $argv = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded7 = 0, $expanded9 = 0;
 var $i = 0, $mid = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 104|0;
 $argv = sp + 24|0;
 $ap = sp + 8|0;
 $0 = $mrb;
 $1 = $name;
 $2 = $argc;
 $3 = $0;
 $4 = $1;
 $5 = (_mrb_intern_cstr($3,$4)|0);
 $mid = $5;
 $6 = $2;
 $7 = ($6|0)>(8);
 if ($7) {
  $8 = $0;
  $9 = $0;
  $10 = (_mrb_class_get($9,68855)|0);
  _mrb_raise($8,$10,56363);
  // unreachable;
 }
 HEAP32[$ap>>2] = $varargs;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $2;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = (($argv) + ($14<<3)|0);
  $arglist_current = HEAP32[$ap>>2]|0;
  $16 = $arglist_current;
  $17 = ((0) + 4|0);
  $expanded7 = $17;
  $expanded = (($expanded7) - 1)|0;
  $18 = (($16) + ($expanded))|0;
  $19 = ((0) + 4|0);
  $expanded11 = $19;
  $expanded10 = (($expanded11) - 1)|0;
  $expanded9 = $expanded10 ^ -1;
  $20 = $18 & $expanded9;
  $21 = $20;
  $$field$field = +HEAPF32[$21>>2];
  $$index2 = ((($21)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  $arglist_next = ((($21)) + 8|0);
  HEAP32[$ap>>2] = $arglist_next;
  HEAPF32[$15>>2] = $$field$field;
  $$index6 = ((($15)) + 4|0);
  HEAP32[$$index6>>2] = $$field3;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $0;
 $25 = $mid;
 $26 = $2;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_funcall_argv($agg$result,$24,$self$byval_copy,$25,$26,$argv);
 STACKTOP = sp;return;
}
function _mrb_funcall_argv($agg$result,$mrb,$self,$mid,$argc,$argv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 $mid = $mid|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $mid;
 $2 = $argc;
 $3 = $argv;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _mrb_nil_value_419($4);
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_funcall_with_block($agg$result,$5,$self$byval_copy,$6,$7,$8,$$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_nil_value_419($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_funcall_with_block($agg$result,$mrb,$self,$mid,$argc,$argv,$blk) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 $mid = $mid|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $blk = $blk|0;
 var $$0 = 0, $$0$phi = 0, $$088 = 0, $$088$phi = 0, $$091 = 0, $$091$phi = 0, $$1 = 0, $$189 = 0, $$192 = 0, $$2 = 0, $$290 = 0, $$293 = 0, $$reg2mem86$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blk$byval_copy = 0, $c = 0, $c_jmp = 0;
 var $cond = 0, $cond102 = 0, $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $cond110 = 0, $cond111 = 0, $cond112 = 0, $cond113 = 0, $cond114 = 0, $cond115 = 0, $cond116 = 0, $cond117 = 0, $cond118 = 0, $cond119 = 0, $cond120 = 0;
 var $cond121 = 0, $cond122 = 0, $cond123 = 0, $n$0 = 0, $nth_ci$0 = 0, $nth_ci$0$phi = 0, $nth_ci$1 = 0, $p$0 = 0, $self$byval_copy = 0, $self$byval_copy94 = 0, $self$byval_copy95 = 0, $self$byval_copy96 = 0, $undef$0 = 0, $val = 0, $val$byval_copy = 0, $vararg_buffer = 0, $voff$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 272|0;
 $self$byval_copy96 = sp + 264|0;
 $self$byval_copy95 = sp + 256|0;
 $self$byval_copy94 = sp + 248|0;
 $blk$byval_copy = sp + 240|0;
 $self$byval_copy = sp + 232|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $val = sp + 224|0;
 $c_jmp = sp + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 48|0;
 $c = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = HEAP32[$mrb>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $57 = ((($mrb)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   if (!($61)) {
    __THREW__ = 0;
    invoke_vi(134,($mrb|0));
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = (threwValue); } else { $63 = -1; };
    $64 = tempRet0;
    $cond106 = ($63|0)==(1);
    if ($cond106) {
     $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $64;$nth_ci$0 = 0;
     break;
    }
   }
   $65 = ((($mrb)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($66)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($argc|0)<(0);
   if ($71) {
    __THREW__ = 0;
    $72 = (invoke_iii(135,($mrb|0),(68855|0))|0);
    $73 = __THREW__; __THREW__ = 0;
    if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = (threwValue); } else { $74 = -1; };
    $75 = tempRet0;
    $cond122 = ($74|0)==(1);
    if ($cond122) {
     $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $75;$nth_ci$0 = 0;
     break;
    }
    __THREW__ = 0;
    invoke_vii(136,($2|0),($argc|0));
    $76 = __THREW__; __THREW__ = 0;
    if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = (threwValue); } else { $77 = -1; };
    $78 = tempRet0;
    $cond123 = ($77|0)==(1);
    if ($cond123) {
     $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $78;$nth_ci$0 = 0;
     break;
    }
    __THREW__ = 0;
    ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
    invoke_viiii(137,($mrb|0),($72|0),(56393|0),($vararg_buffer|0));
    $79 = __THREW__; __THREW__ = 0;
    if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } tempRet0 = (threwValue); } else { $80 = -1; };
    $81 = tempRet0;
    $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $81;$nth_ci$0 = 0;
    break;
   }
   __THREW__ = 0;
   ;HEAP32[$self$byval_copy94>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy94+4>>2]=HEAP32[$self+4>>2]|0;
   $82 = (invoke_iii(138,($mrb|0),($self$byval_copy94|0))|0);
   $83 = __THREW__; __THREW__ = 0;
   if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = (threwValue); } else { $84 = -1; };
   $85 = tempRet0;
   $cond107 = ($84|0)==(1);
   if ($cond107) {
    $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $85;$nth_ci$0 = 0;
   } else {
    HEAP32[$c>>2] = $82;
    __THREW__ = 0;
    $86 = (invoke_iiii(139,($mrb|0),($c|0),($mid|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    if ((($87|0) != 0) & ((threwValue|0) != 0)) { $88 = _testSetjmp(HEAP32[$87>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($88|0) == 0) { _longjmp($87|0, threwValue|0); } tempRet0 = (threwValue); } else { $88 = -1; };
    $89 = tempRet0;
    $cond108 = ($88|0)==(1);
    if ($cond108) {
     $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $89;$nth_ci$0 = 0;
    } else {
     $90 = ($86|0)!=(0|0);
     if ($90) {
      $$189 = $argc;$$192 = $mid;$n$0 = $70;$p$0 = $86;$undef$0 = 0;
     } else {
      __THREW__ = 0;
      $91 = (invoke_iiii(140,($mrb|0),(65322|0),14)|0);
      $92 = __THREW__; __THREW__ = 0;
      if ((($92|0) != 0) & ((threwValue|0) != 0)) { $93 = _testSetjmp(HEAP32[$92>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($93|0) == 0) { _longjmp($92|0, threwValue|0); } tempRet0 = (threwValue); } else { $93 = -1; };
      $94 = tempRet0;
      $cond109 = ($93|0)==(1);
      if ($cond109) {
       $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $94;$nth_ci$0 = 0;
       break;
      }
      __THREW__ = 0;
      $95 = (invoke_iiii(139,($mrb|0),($c|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      if ((($96|0) != 0) & ((threwValue|0) != 0)) { $97 = _testSetjmp(HEAP32[$96>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($97|0) == 0) { _longjmp($96|0, threwValue|0); } tempRet0 = (threwValue); } else { $97 = -1; };
      $98 = tempRet0;
      $cond110 = ($97|0)==(1);
      if ($cond110) {
       $$0 = $argv;$$088 = $argc;$$091 = $91;$$reg2mem86$0 = $98;$nth_ci$0 = 0;
       break;
      }
      $99 = (($70) + 1)|0;
      $100 = (($argc) + 1)|0;
      $$189 = $100;$$192 = $91;$n$0 = $99;$p$0 = $95;$undef$0 = $mid;
     }
     __THREW__ = 0;
     $101 = (invoke_ii(141,($mrb|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     if ((($102|0) != 0) & ((threwValue|0) != 0)) { $103 = _testSetjmp(HEAP32[$102>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($103|0) == 0) { _longjmp($102|0, threwValue|0); } tempRet0 = (threwValue); } else { $103 = -1; };
     $104 = tempRet0;
     $cond111 = ($103|0)==(1);
     if ($cond111) {
      $$0 = $argv;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $104;$nth_ci$0 = 0;
     } else {
      HEAP32[$101>>2] = $$192;
      $105 = ((($101)) + 4|0);
      HEAP32[$105>>2] = $p$0;
      $106 = ((($mrb)) + 12|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ((($107)) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ((($101)) + 8|0);
      HEAP32[$110>>2] = $109;
      $111 = ((($101)) + 36|0);
      HEAP32[$111>>2] = $$189;
      $112 = HEAP32[$c>>2]|0;
      $113 = ((($101)) + 44|0);
      HEAP32[$113>>2] = $112;
      $114 = ((($mrb)) + 12|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($115)) + 4|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + ($n$0<<3)|0);
      $119 = ((($mrb)) + 12|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ((($120)) + 4|0);
      HEAP32[$121>>2] = $118;
      $122 = ((($mrb)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($123)) + 8|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125>>>0)<=($argv>>>0);
      if ($126) {
       $127 = ((($mrb)) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ((($128)) + 12|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = ($argv>>>0)<($130>>>0);
       if ($131) {
        $132 = ((($mrb)) + 12|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = ((($133)) + 8|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $argv;
        $137 = $135;
        $138 = (($136) - ($137))|0;
        $139 = (($138|0) / 8)&-1;
        $voff$0 = $139;
       } else {
        $voff$0 = -1;
       }
      } else {
       $voff$0 = -1;
      }
      $140 = HEAP32[$p$0>>2]|0;
      $141 = $140 >>> 11;
      $142 = $141 & 128;
      $143 = ($142|0)!=(0);
      if ($143) {
       $144 = (($$189) + 2)|0;
       $145 = ((($101)) + 12|0);
       HEAP32[$145>>2] = $144;
       $146 = ((($101)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($147|0),0);
       $148 = __THREW__; __THREW__ = 0;
       if ((($148|0) != 0) & ((threwValue|0) != 0)) { $149 = _testSetjmp(HEAP32[$148>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($149|0) == 0) { _longjmp($148|0, threwValue|0); } tempRet0 = (threwValue); } else { $149 = -1; };
       $150 = tempRet0;
       $cond121 = ($149|0)==(1);
       if ($cond121) {
        $$0 = $argv;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $150;$nth_ci$0 = 0;
        break;
       }
      } else {
       $151 = ((($p$0)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($152)) + 2|0);
       $154 = HEAP16[$153>>1]|0;
       $155 = $154&65535;
       $156 = (($155) + ($n$0))|0;
       $157 = ((($101)) + 12|0);
       HEAP32[$157>>2] = $156;
       $158 = ((($101)) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = (($$189) + 2)|0;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($159|0),($160|0));
       $161 = __THREW__; __THREW__ = 0;
       if ((($161|0) != 0) & ((threwValue|0) != 0)) { $162 = _testSetjmp(HEAP32[$161>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($162|0) == 0) { _longjmp($161|0, threwValue|0); } tempRet0 = (threwValue); } else { $162 = -1; };
       $163 = tempRet0;
       $cond112 = ($162|0)==(1);
       if ($cond112) {
        $$0 = $argv;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $163;$nth_ci$0 = 0;
        break;
       }
      }
      $164 = ($voff$0|0)>=(0);
      if ($164) {
       $165 = ((($mrb)) + 12|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ((($166)) + 8|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (($168) + ($voff$0<<3)|0);
       $$1 = $169;
      } else {
       $$1 = $argv;
      }
      $170 = ((($mrb)) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ((($171)) + 4|0);
      $173 = HEAP32[$172>>2]|0;
      ;HEAP32[$173>>2]=HEAP32[$self>>2]|0;HEAP32[$173+4>>2]=HEAP32[$self+4>>2]|0;
      $174 = ($undef$0|0)!=(0);
      if ($174) {
       $175 = ((($mrb)) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ((($176)) + 4|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ((($178)) + 8|0);
       __THREW__ = 0;
       invoke_vii(143,($3|0),($undef$0|0));
       $180 = __THREW__; __THREW__ = 0;
       if ((($180|0) != 0) & ((threwValue|0) != 0)) { $181 = _testSetjmp(HEAP32[$180>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($181|0) == 0) { _longjmp($180|0, threwValue|0); } tempRet0 = (threwValue); } else { $181 = -1; };
       $182 = tempRet0;
       $cond119 = ($181|0)==(1);
       if ($cond119) {
        $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $182;$nth_ci$0 = 0;
        break;
       }
       ;HEAP32[$179>>2]=HEAP32[$3>>2]|0;HEAP32[$179+4>>2]=HEAP32[$3+4>>2]|0;
       $183 = ($$189|0)>(1);
       if ($183) {
        $184 = ((($mrb)) + 12|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ((($185)) + 4|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = ((($187)) + 16|0);
        $189 = (($$189) - 1)|0;
        __THREW__ = 0;
        invoke_viii(144,($188|0),($$1|0),($189|0));
        $190 = __THREW__; __THREW__ = 0;
        if ((($190|0) != 0) & ((threwValue|0) != 0)) { $191 = _testSetjmp(HEAP32[$190>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($191|0) == 0) { _longjmp($190|0, threwValue|0); } tempRet0 = (threwValue); } else { $191 = -1; };
        $192 = tempRet0;
        $cond120 = ($191|0)==(1);
        if ($cond120) {
         $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $192;$nth_ci$0 = 0;
         break;
        }
       }
      } else {
       $193 = ($$189|0)>(0);
       if ($193) {
        $194 = ((($mrb)) + 12|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ((($195)) + 4|0);
        $197 = HEAP32[$196>>2]|0;
        $198 = ((($197)) + 8|0);
        __THREW__ = 0;
        invoke_viii(144,($198|0),($$1|0),($$189|0));
        $199 = __THREW__; __THREW__ = 0;
        if ((($199|0) != 0) & ((threwValue|0) != 0)) { $200 = _testSetjmp(HEAP32[$199>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($200|0) == 0) { _longjmp($199|0, threwValue|0); } tempRet0 = (threwValue); } else { $200 = -1; };
        $201 = tempRet0;
        $cond118 = ($200|0)==(1);
        if ($cond118) {
         $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $201;$nth_ci$0 = 0;
         break;
        }
       }
      }
      $202 = (($$189) + 1)|0;
      $203 = ((($mrb)) + 12|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ((($204)) + 4|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (($206) + ($202<<3)|0);
      ;HEAP32[$207>>2]=HEAP32[$blk>>2]|0;HEAP32[$207+4>>2]=HEAP32[$blk+4>>2]|0;
      $208 = HEAP32[$p$0>>2]|0;
      $209 = $208 >>> 11;
      $210 = $209 & 128;
      $211 = ($210|0)!=(0);
      if (!($211)) {
       $237 = ((($101)) + 40|0);
       HEAP32[$237>>2] = -1;
       __THREW__ = 0;
       ;HEAP32[$self$byval_copy96>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy96+4>>2]=HEAP32[$self+4>>2]|0;
       invoke_viiii(147,($5|0),($mrb|0),($p$0|0),($self$byval_copy96|0));
       $238 = __THREW__; __THREW__ = 0;
       if ((($238|0) != 0) & ((threwValue|0) != 0)) { $239 = _testSetjmp(HEAP32[$238>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($239|0) == 0) { _longjmp($238|0, threwValue|0); } tempRet0 = (threwValue); } else { $239 = -1; };
       $240 = tempRet0;
       $cond113 = ($239|0)==(1);
       if ($cond113) {
        $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $240;$nth_ci$0 = 0;
        break;
       }
       ;HEAP32[$val>>2]=HEAP32[$5>>2]|0;HEAP32[$val+4>>2]=HEAP32[$5+4>>2]|0;
       $$2 = $$1;$$290 = $$189;$$293 = $$192;$nth_ci$1 = 0;
       label = 52;
       break;
      }
      __THREW__ = 0;
      $212 = (invoke_ii(145,($mrb|0))|0);
      $213 = __THREW__; __THREW__ = 0;
      if ((($213|0) != 0) & ((threwValue|0) != 0)) { $214 = _testSetjmp(HEAP32[$213>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($214|0) == 0) { _longjmp($213|0, threwValue|0); } tempRet0 = (threwValue); } else { $214 = -1; };
      $215 = tempRet0;
      $cond114 = ($214|0)==(1);
      if ($cond114) {
       $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $215;$nth_ci$0 = 0;
      } else {
       $216 = ((($101)) + 40|0);
       HEAP32[$216>>2] = -2;
       $217 = ((($p$0)) + 12|0);
       $218 = HEAP32[$217>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$self$byval_copy95>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy95+4>>2]=HEAP32[$self+4>>2]|0;
       invoke_viii($218|0,($4|0),($mrb|0),($self$byval_copy95|0));
       $219 = __THREW__; __THREW__ = 0;
       if ((($219|0) != 0) & ((threwValue|0) != 0)) { $220 = _testSetjmp(HEAP32[$219>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($220|0) == 0) { _longjmp($219|0, threwValue|0); } tempRet0 = (threwValue); } else { $220 = -1; };
       $221 = tempRet0;
       $cond115 = ($220|0)==(1);
       if ($cond115) {
        $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $221;$nth_ci$0 = 0;
       } else {
        ;HEAP32[$val>>2]=HEAP32[$4>>2]|0;HEAP32[$val+4>>2]=HEAP32[$4+4>>2]|0;
        $222 = ((($mrb)) + 12|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = ((($223)) + 16|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = ((($225)) + 8|0);
        $227 = HEAP32[$226>>2]|0;
        $228 = ((($mrb)) + 12|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ((($229)) + 4|0);
        HEAP32[$230>>2] = $227;
        __THREW__ = 0;
        invoke_vi(132,($mrb|0));
        $231 = __THREW__; __THREW__ = 0;
        if ((($231|0) != 0) & ((threwValue|0) != 0)) { $232 = _testSetjmp(HEAP32[$231>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($232|0) == 0) { _longjmp($231|0, threwValue|0); } tempRet0 = (threwValue); } else { $232 = -1; };
        $233 = tempRet0;
        $cond116 = ($232|0)==(1);
        if ($cond116) {
         $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $233;$nth_ci$0 = 0;
        } else {
         __THREW__ = 0;
         invoke_vii(146,($mrb|0),($212|0));
         $234 = __THREW__; __THREW__ = 0;
         if ((($234|0) != 0) & ((threwValue|0) != 0)) { $235 = _testSetjmp(HEAP32[$234>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($235|0) == 0) { _longjmp($234|0, threwValue|0); } tempRet0 = (threwValue); } else { $235 = -1; };
         $236 = tempRet0;
         $cond117 = ($235|0)==(1);
         if ($cond117) {
          $$0 = $$1;$$088 = $$189;$$091 = $$192;$$reg2mem86$0 = $236;$nth_ci$0 = 0;
         } else {
          $$2 = $$1;$$290 = $$189;$$293 = $$192;$nth_ci$1 = 0;
          label = 52;
         }
        }
       }
      }
     }
    }
   }
  } else {
   $8 = ((($mrb)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($mrb)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $11;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = (($18|0) / 48)&-1;
   _setjmpTable = _saveSetjmp($c_jmp,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $20 = __THREW__; __THREW__ = 0;
   if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = (threwValue); } else { $21 = -1; };
   $22 = tempRet0;
   $cond = ($21|0)==(1);
   if ($cond) {
    $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = $22;$nth_ci$0 = $19;
   } else {
    $$0 = $argv;$$088 = $argc;$$091 = $mid;$$reg2mem86$0 = 0;$nth_ci$0 = $19;
   }
  }
 } while(0);
 L52: while(1) {
  if ((label|0) == 52) {
   label = 0;
   __THREW__ = 0;
   ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
   invoke_vii(148,($mrb|0),($val$byval_copy|0));
   $241 = __THREW__; __THREW__ = 0;
   if ((($241|0) != 0) & ((threwValue|0) != 0)) { $242 = _testSetjmp(HEAP32[$241>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($242|0) == 0) { _longjmp($241|0, threwValue|0); } tempRet0 = (threwValue); } else { $242 = -1; };
   $243 = tempRet0;
   $cond103 = ($242|0)==(1);
   if ($cond103) {
    $$0 = $$2;$$088 = $$290;$$091 = $$293;$$reg2mem86$0 = $243;$nth_ci$0 = $nth_ci$1;
   } else {
    break;
   }
  }
  $23 = ($$reg2mem86$0|0)==(0);
  if ($23) {
   HEAP32[$mrb>>2] = $c_jmp;
   __THREW__ = 0;
   ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
   ;HEAP32[$blk$byval_copy>>2]=HEAP32[$blk>>2]|0;HEAP32[$blk$byval_copy+4>>2]=HEAP32[$blk+4>>2]|0;
   invoke_viiiiiii(131,($0|0),($mrb|0),($self$byval_copy|0),($$091|0),($$088|0),($$0|0),($blk$byval_copy|0));
   $24 = __THREW__; __THREW__ = 0;
   if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } tempRet0 = (threwValue); } else { $25 = -1; };
   $26 = tempRet0;
   $cond105 = ($25|0)==(1);
   if ($cond105) {
    $nth_ci$0$phi = $nth_ci$0;$$091$phi = $$091;$$088$phi = $$088;$$0$phi = $$0;$$reg2mem86$0 = $26;$nth_ci$0 = $nth_ci$0$phi;$$091 = $$091$phi;$$088 = $$088$phi;$$0 = $$0$phi;
    continue;
   }
   ;HEAP32[$val>>2]=HEAP32[$0>>2]|0;HEAP32[$val+4>>2]=HEAP32[$0+4>>2]|0;
   HEAP32[$mrb>>2] = 0;
   $$2 = $$0;$$290 = $$088;$$293 = $$091;$nth_ci$1 = $nth_ci$0;
   label = 52;
   continue;
  }
  while(1) {
   $27 = ((($mrb)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($mrb)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $30;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 48)&-1;
   $39 = ($nth_ci$0|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = ((($mrb)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($mrb)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $45;
   __THREW__ = 0;
   invoke_vi(132,($mrb|0));
   $49 = __THREW__; __THREW__ = 0;
   if ((($49|0) != 0) & ((threwValue|0) != 0)) { $50 = _testSetjmp(HEAP32[$49>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($50|0) == 0) { _longjmp($49|0, threwValue|0); } tempRet0 = (threwValue); } else { $50 = -1; };
   $51 = tempRet0;
   $cond104 = ($50|0)==(1);
   if ($cond104) {
    $nth_ci$0$phi = $nth_ci$0;$$091$phi = $$091;$$088$phi = $$088;$$0$phi = $$0;$$reg2mem86$0 = $51;$nth_ci$0 = $nth_ci$0$phi;$$091 = $$091$phi;$$088 = $$088$phi;$$0 = $$0$phi;
    continue L52;
   }
  }
  HEAP32[$mrb>>2] = 0;
  $52 = ((($mrb)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  __THREW__ = 0;
  invoke_vii(133,($1|0),($53|0));
  $54 = __THREW__; __THREW__ = 0;
  if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = (threwValue); } else { $55 = -1; };
  $56 = tempRet0;
  $cond102 = ($55|0)==(1);
  if ($cond102) {
   $nth_ci$0$phi = $nth_ci$0;$$091$phi = $$091;$$088$phi = $$088;$$0$phi = $$0;$$reg2mem86$0 = $56;$nth_ci$0 = $nth_ci$0$phi;$$091 = $$091$phi;$$088 = $$088$phi;$$0 = $$0$phi;
   continue;
  }
  ;HEAP32[$val>>2]=HEAP32[$1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$1+4>>2]|0;
  $$2 = $$0;$$290 = $$088;$$293 = $$091;$nth_ci$1 = $nth_ci$0;
  label = 52;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _cipop($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c = 0, $e = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $c = $3;
 $4 = $c;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $36 = $c;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + -48|0);
  HEAP32[$37>>2] = $39;
  STACKTOP = sp;return;
 }
 $10 = $c;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $e = $14;
 $15 = $e;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $len = $17;
 $18 = $0;
 $19 = $len;
 $20 = $19<<3;
 $21 = (_mrb_malloc($18,$20)|0);
 $p = $21;
 $22 = $e;
 $23 = ((($22)) + 20|0);
 HEAP32[$23>>2] = -1;
 $24 = $len;
 $25 = ($24>>>0)>(0);
 if ($25) {
  $26 = $p;
  $27 = $e;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $len;
  _stack_copy($26,$29,$30);
 }
 $31 = $p;
 $32 = $e;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = $0;
 $35 = $e;
 _mrb_write_barrier($34,$35);
 $36 = $c;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + -48|0);
 HEAP32[$37>>2] = $39;
 STACKTOP = sp;return;
}
function _stack_copy($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $src;
 $2 = $size;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)|0;
  $2 = $4;
  $5 = ($3>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = ((($6)) + 8|0);
  $0 = $7;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $1 = $9;
  ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;
 }
 STACKTOP = sp;return;
}
function _mrb_obj_value_420($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _stack_init($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $c = $3;
 $4 = $0;
 $5 = (_mrb_calloc($4,128,8)|0);
 $6 = $c;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = $c;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1024|0);
 $12 = $c;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $c;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $c;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = (_mrb_calloc($19,32,48)|0);
 $21 = $c;
 $22 = ((($21)) + 20|0);
 HEAP32[$22>>2] = $20;
 $23 = $c;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 1536|0);
 $27 = $c;
 $28 = ((($27)) + 24|0);
 HEAP32[$28>>2] = $26;
 $29 = $c;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $c;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = $31;
 $34 = $0;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $c;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 44|0);
 HEAP32[$40>>2] = $36;
 $41 = $c;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $c;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 8|0);
 HEAP32[$47>>2] = $43;
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_421($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_class_423($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = HEAP32[$v>>2]|0;
   $5 = ($4|0)!=(0);
   $6 = $1;
   if ($5) {
    $7 = ((($6)) + 72|0);
    $8 = HEAP32[$7>>2]|0;
    $0 = $8;
    break L1;
   } else {
    $9 = ((($6)) + 76|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break L1;
   }
   break;
  }
  case 2:  {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   break;
  }
  case 4:  {
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   break;
  }
  case 3:  {
   $17 = $1;
   $18 = ((($17)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $0 = $19;
   break;
  }
  case 6:  {
   $20 = $1;
   $21 = ((($20)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $0 = $22;
   break;
  }
  case 7:  {
   $23 = $1;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $0 = $25;
   break;
  }
  case 20:  {
   $0 = 0;
   break;
  }
  default: {
   $26 = HEAP32[$v>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
  }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _cipush($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $c = 0, $ci = 0, $eidx = 0, $ridx = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $c = $3;
 $4 = $c;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $ci = $6;
 $7 = $ci;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $eidx = $9;
 $10 = $ci;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $ridx = $12;
 $13 = $ci;
 $14 = ((($13)) + 48|0);
 $15 = $c;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)==($17|0);
 if ($18) {
  $19 = $ci;
  $20 = $c;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $19;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = (($25|0) / 48)&-1;
  $size = $26;
  $27 = $0;
  $28 = $c;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $size;
  $32 = ($31*48)|0;
  $33 = $32<<1;
  $34 = (_mrb_realloc($27,$30,$33)|0);
  $35 = $c;
  $36 = ((($35)) + 20|0);
  HEAP32[$36>>2] = $34;
  $37 = $c;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $size;
  $41 = (($39) + (($40*48)|0)|0);
  $42 = $c;
  $43 = ((($42)) + 16|0);
  HEAP32[$43>>2] = $41;
  $44 = $c;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $size;
  $48 = $47<<1;
  $49 = (($46) + (($48*48)|0)|0);
  $50 = $c;
  $51 = ((($50)) + 24|0);
  HEAP32[$51>>2] = $49;
 }
 $52 = $c;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 48|0);
 HEAP32[$53>>2] = $55;
 $ci = $55;
 $56 = $eidx;
 $57 = $ci;
 $58 = ((($57)) + 20|0);
 HEAP32[$58>>2] = $56;
 $59 = $ridx;
 $60 = $ci;
 $61 = ((($60)) + 16|0);
 HEAP32[$61>>2] = $59;
 $62 = $ci;
 $63 = ((($62)) + 24|0);
 HEAP32[$63>>2] = 0;
 $64 = $ci;
 $65 = ((($64)) + 28|0);
 HEAP32[$65>>2] = 0;
 $66 = $ci;
 $67 = ((($66)) + 32|0);
 HEAP32[$67>>2] = 0;
 $68 = $ci;
 $69 = ((($68)) + 4|0);
 HEAP32[$69>>2] = 0;
 $70 = $ci;
 STACKTOP = sp;return ($70|0);
}
function _stack_extend($mrb,$room,$keep) {
 $mrb = $mrb|0;
 $room = $room|0;
 $keep = $keep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $room;
 $2 = $keep;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (($7) + ($8<<3)|0);
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($9>>>0)>=($14>>>0);
 if (!($15)) {
  $19 = $0;
  $20 = $1;
  $21 = $2;
  _init_new_stack_space($19,$20,$21);
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = $1;
 $18 = $2;
 _stack_extend_alloc($16,$17,$18);
 $19 = $0;
 $20 = $1;
 $21 = $2;
 _init_new_stack_space($19,$20,$21);
 STACKTOP = sp;return;
}
function _stack_extend_alloc($mrb,$room,$keep) {
 $mrb = $mrb|0;
 $room = $room|0;
 $keep = $keep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $off = 0, $oldbase = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $room;
 $2 = $keep;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $oldbase = $7;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $12;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (($20|0) / 8)&-1;
 $size = $21;
 $22 = $0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $26;
 $33 = $31;
 $34 = (($32) - ($33))|0;
 $35 = (($34|0) / 8)&-1;
 $off = $35;
 $36 = $1;
 $37 = ($36|0)<=(128);
 if ($37) {
  $38 = $size;
  $39 = (($38) + 128)|0;
  $size = $39;
 } else {
  $40 = $1;
  $41 = $size;
  $42 = (($41) + ($40))|0;
  $size = $42;
 }
 $43 = $0;
 $44 = $0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $size;
 $50 = $49<<3;
 $51 = (_mrb_realloc($43,$48,$50)|0);
 $52 = $0;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 8|0);
 HEAP32[$55>>2] = $51;
 $56 = $0;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $off;
 $62 = (($60) + ($61<<3)|0);
 $63 = $0;
 $64 = ((($63)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 4|0);
 HEAP32[$66>>2] = $62;
 $67 = $0;
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $size;
 $73 = (($71) + ($72<<3)|0);
 $74 = $0;
 $75 = ((($74)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 12|0);
 HEAP32[$77>>2] = $73;
 $78 = $0;
 $79 = $oldbase;
 $80 = $0;
 $81 = ((($80)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 _envadjust($78,$79,$84);
 $85 = $size;
 $86 = ($85|0)>(262016);
 if ($86) {
  $87 = $0;
  $88 = $1;
  $89 = $2;
  _init_new_stack_space($87,$88,$89);
  $90 = $0;
  $91 = $0;
  $92 = (_mrb_class_get($91,67771)|0);
  _mrb_raise($90,$92,56424);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _envadjust($mrb,$oldbase,$newbase) {
 $mrb = $mrb|0;
 $oldbase = $oldbase|0;
 $newbase = $newbase|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $e = 0, $off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $oldbase;
 $2 = $newbase;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $ci = $7;
 $8 = $2;
 $9 = $1;
 $10 = ($8|0)==($9|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 while(1) {
  $11 = $ci;
  $12 = $0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($11>>>0)<=($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $ci;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $e = $20;
  $21 = $e;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $e;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)>=(0);
   if ($26) {
    $27 = $e;
    $28 = ((($27)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $1;
    $31 = $29;
    $32 = $30;
    $33 = (($31) - ($32))|0;
    $34 = (($33|0) / 8)&-1;
    $off = $34;
    $35 = $2;
    $36 = $off;
    $37 = (($35) + ($36<<3)|0);
    $38 = $e;
    $39 = ((($38)) + 12|0);
    HEAP32[$39>>2] = $37;
   }
  }
  $40 = $2;
  $41 = $ci;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = $43;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = (($47|0) / 8)&-1;
  $49 = (($40) + ($48<<3)|0);
  $50 = $ci;
  $51 = ((($50)) + 8|0);
  HEAP32[$51>>2] = $49;
  $52 = $ci;
  $53 = ((($52)) + 48|0);
  $ci = $53;
 }
 STACKTOP = sp;return;
}
function _init_new_stack_space($mrb,$room,$keep) {
 $mrb = $mrb|0;
 $room = $room|0;
 $keep = $keep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $room;
 $2 = $keep;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)>($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($6<<3)|0);
 $13 = $1;
 $14 = $2;
 $15 = (($13) - ($14))|0;
 _stack_clear($12,$15);
 STACKTOP = sp;return;
}
function _stack_clear($from,$count) {
 $from = $from|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $from;
 $1 = $count;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2>>>0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $0 = $6;
  ;HEAP32[$5>>2]=HEAP32[73152>>2]|0;HEAP32[$5+4>>2]=HEAP32[73152+4>>2]|0;
 }
 STACKTOP = sp;return;
}
function _mrb_symbol_value_427($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_run($agg$result,$mrb,$proc,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $proc = $proc|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $proc;
 $2 = $0;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 2)|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_context_run($agg$result,$2,$3,$self$byval_copy,$11);
 STACKTOP = sp;return;
}
function _mrb_context_run($agg$result,$mrb,$proc,$self,$stack_keep) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $proc = $proc|0;
 $self = $self|0;
 $stack_keep = $stack_keep|0;
 var $$0 = 0, $$1 = 0, $$1$phi = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$phi = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$8$phi = 0, $$byval_copy = 0, $$byval_copy903 = 0, $$byval_copy904 = 0, $$byval_copy905 = 0, $$byval_copy906 = 0, $$byval_copy907 = 0, $$byval_copy908 = 0, $$byval_copy909 = 0;
 var $$byval_copy911 = 0, $$byval_copy913 = 0, $$byval_copy914 = 0, $$byval_copy915 = 0, $$byval_copy916 = 0, $$byval_copy917 = 0, $$byval_copy918 = 0, $$byval_copy919 = 0, $$byval_copy920 = 0, $$byval_copy921 = 0, $$byval_copy922 = 0, $$byval_copy923 = 0, $$byval_copy925 = 0, $$byval_copy926 = 0, $$byval_copy927 = 0, $$byval_copy928 = 0, $$byval_copy929 = 0, $$byval_copy930 = 0, $$byval_copy931 = 0, $$byval_copy932 = 0;
 var $$byval_copy933 = 0, $$byval_copy934 = 0, $$byval_copy935 = 0, $$byval_copy936 = 0, $$byval_copy937 = 0, $$byval_copy938 = 0, $$byval_copy939 = 0, $$byval_copy940 = 0, $$byval_copy941 = 0, $$byval_copy942 = 0, $$byval_copy943 = 0, $$byval_copy944 = 0, $$byval_copy945 = 0, $$byval_copy946 = 0, $$byval_copy947 = 0, $$reg2mem887$0 = 0, $$reg2mem889$0 = 0, $$reg2mem891$0 = 0, $$reg2mem893$0 = 0, $$reg2mem895$0 = 0;
 var $$reg2mem897$0 = 0, $$reg2mem899$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
 var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
 var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
 var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
 var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
 var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
 var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
 var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
 var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
 var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0;
 var $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0;
 var $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0;
 var $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0;
 var $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0;
 var $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0;
 var $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0;
 var $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0;
 var $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0;
 var $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0;
 var $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0;
 var $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0;
 var $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0;
 var $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0;
 var $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0;
 var $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0;
 var $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0;
 var $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0;
 var $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0;
 var $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0;
 var $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0;
 var $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0;
 var $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0;
 var $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0;
 var $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0;
 var $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0;
 var $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0;
 var $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0;
 var $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0;
 var $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0;
 var $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0;
 var $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0;
 var $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0;
 var $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0;
 var $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0;
 var $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0;
 var $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0;
 var $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0;
 var $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0;
 var $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0;
 var $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0;
 var $204 = 0, $2040 = 0, $2041 = 0.0, $2042 = 0.0, $2043 = 0.0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0.0, $2053 = 0, $2054 = 0, $2055 = 0.0, $2056 = 0.0, $2057 = 0;
 var $2058 = 0, $2059 = 0.0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0.0, $2064 = 0.0, $2065 = 0, $2066 = 0, $2067 = 0.0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0.0, $2071 = 0.0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0;
 var $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0;
 var $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0;
 var $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0.0, $2116 = 0.0, $2117 = 0.0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0.0, $2126 = 0, $2127 = 0, $2128 = 0.0, $2129 = 0.0;
 var $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0.0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0.0, $2137 = 0.0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0.0, $2141 = 0, $2142 = 0, $2143 = 0.0, $2144 = 0.0, $2145 = 0, $2146 = 0, $2147 = 0;
 var $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0;
 var $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0.0, $2182 = 0, $2183 = 0;
 var $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0.0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0.0, $2191 = 0.0, $2192 = 0, $2193 = 0, $2194 = 0.0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0.0, $2199 = 0.0, $22 = 0, $220 = 0, $2200 = 0;
 var $2201 = 0, $2202 = 0.0, $2203 = 0, $2204 = 0, $2205 = 0.0, $2206 = 0.0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0;
 var $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0.0, $2237 = 0.0;
 var $2238 = 0.0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0.0, $2245 = 0, $2246 = 0, $2247 = 0.0, $2248 = 0.0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0.0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0.0;
 var $2256 = 0.0, $2257 = 0, $2258 = 0, $2259 = 0.0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0.0, $2263 = 0.0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0;
 var $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0.0, $2287 = 0.0, $2288 = 0.0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0;
 var $2292 = 0, $2293 = 0, $2294 = 0.0, $2295 = 0, $2296 = 0.0, $2297 = 0.0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0;
 var $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0;
 var $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0.0, $2334 = 0.0, $2335 = 0.0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0.0, $234 = 0, $2340 = 0.0, $2341 = 0.0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0;
 var $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0;
 var $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0;
 var $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0.0, $2396 = 0, $2397 = 0, $2398 = 0.0, $2399 = 0, $24 = 0;
 var $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0.0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0.0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0.0, $2411 = 0, $2412 = 0, $2413 = 0.0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0;
 var $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0;
 var $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0.0, $2452 = 0, $2453 = 0;
 var $2454 = 0.0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0.0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0.0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0.0, $2467 = 0, $2468 = 0, $2469 = 0.0, $247 = 0, $2470 = 0, $2471 = 0;
 var $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0;
 var $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0.0;
 var $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0.0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0.0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0.0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0.0, $2523 = 0, $2524 = 0, $2525 = 0.0;
 var $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0;
 var $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0;
 var $2562 = 0, $2563 = 0.0, $2564 = 0, $2565 = 0, $2566 = 0.0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0.0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0.0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0.0, $2579 = 0, $258 = 0;
 var $2580 = 0, $2581 = 0.0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0;
 var $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0;
 var $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0.0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0.0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0.0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0.0, $2631 = 0, $2632 = 0, $2633 = 0;
 var $2634 = 0.0, $2635 = 0, $2636 = 0, $2637 = 0.0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0;
 var $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0;
 var $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0;
 var $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0;
 var $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0;
 var $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0;
 var $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0;
 var $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0;
 var $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0;
 var $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0;
 var $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0;
 var $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0;
 var $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0;
 var $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0;
 var $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0;
 var $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0;
 var $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0;
 var $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0;
 var $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0;
 var $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0;
 var $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0;
 var $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0;
 var $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0;
 var $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0;
 var $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0;
 var $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0;
 var $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0;
 var $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0;
 var $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0;
 var $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0;
 var $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0;
 var $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0;
 var $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0;
 var $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0;
 var $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0;
 var $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a7$0 = 0, $a96$0 = 0, $ai$0 = 0, $ai$1 = 0;
 var $ai$1$phi = 0, $argc$0 = 0, $argc$1 = 0, $args = 0, $args$byval_copy = 0, $argv$0 = 0, $argv$1 = 0, $b$0 = 0, $base = 0, $base$byval_copy = 0, $base108 = 0, $base108$byval_copy = 0, $c = 0, $c19 = 0, $c42 = 0, $c_jmp = 0, $ci31$0 = 0, $ci31$1 = 0, $ci34$0 = 0, $ci34$1 = 0;
 var $ci34$1$phi = 0, $cond = 0, $cond1000 = 0, $cond1001 = 0, $cond1002 = 0, $cond1003 = 0, $cond1004 = 0, $cond1005 = 0, $cond1006 = 0, $cond1007 = 0, $cond1008 = 0, $cond1009 = 0, $cond1010 = 0, $cond1011 = 0, $cond1012 = 0, $cond1013 = 0, $cond1014 = 0, $cond1015 = 0, $cond1016 = 0, $cond1017 = 0;
 var $cond1018 = 0, $cond1019 = 0, $cond1020 = 0, $cond1021 = 0, $cond1022 = 0, $cond1023 = 0, $cond1024 = 0, $cond1025 = 0, $cond1026 = 0, $cond1027 = 0, $cond1028 = 0, $cond1029 = 0, $cond1030 = 0, $cond1031 = 0, $cond1032 = 0, $cond1033 = 0, $cond1034 = 0, $cond1035 = 0, $cond1036 = 0, $cond1037 = 0;
 var $cond1038 = 0, $cond1039 = 0, $cond1040 = 0, $cond1041 = 0, $cond1042 = 0, $cond1043 = 0, $cond1044 = 0, $cond1045 = 0, $cond1046 = 0, $cond1047 = 0, $cond1048 = 0, $cond1049 = 0, $cond1050 = 0, $cond1051 = 0, $cond1052 = 0, $cond1053 = 0, $cond1054 = 0, $cond1055 = 0, $cond1056 = 0, $cond1057 = 0;
 var $cond1058 = 0, $cond1059 = 0, $cond1060 = 0, $cond1061 = 0, $cond1062 = 0, $cond1063 = 0, $cond1064 = 0, $cond1065 = 0, $cond1066 = 0, $cond1067 = 0, $cond1068 = 0, $cond1069 = 0, $cond1070 = 0, $cond1071 = 0, $cond1072 = 0, $cond1073 = 0, $cond1074 = 0, $cond1075 = 0, $cond1076 = 0, $cond1077 = 0;
 var $cond1078 = 0, $cond1079 = 0, $cond1080 = 0, $cond1081 = 0, $cond1082 = 0, $cond1083 = 0, $cond1084 = 0, $cond1085 = 0, $cond1086 = 0, $cond1087 = 0, $cond1088 = 0, $cond1089 = 0, $cond1090 = 0, $cond1091 = 0, $cond1092 = 0, $cond1093 = 0, $cond1094 = 0, $cond1095 = 0, $cond1096 = 0, $cond1097 = 0;
 var $cond1098 = 0, $cond1099 = 0, $cond1100 = 0, $cond1101 = 0, $cond1102 = 0, $cond1103 = 0, $cond1104 = 0, $cond1105 = 0, $cond1106 = 0, $cond1107 = 0, $cond1108 = 0, $cond1109 = 0, $cond1110 = 0, $cond1111 = 0, $cond1112 = 0, $cond1113 = 0, $cond1114 = 0, $cond1115 = 0, $cond1116 = 0, $cond1117 = 0;
 var $cond1118 = 0, $cond1119 = 0, $cond1120 = 0, $cond1121 = 0, $cond1122 = 0, $cond1123 = 0, $cond1124 = 0, $cond1125 = 0, $cond1126 = 0, $cond1127 = 0, $cond1128 = 0, $cond1129 = 0, $cond1130 = 0, $cond1131 = 0, $cond1132 = 0, $cond1133 = 0, $cond1134 = 0, $cond1135 = 0, $cond1136 = 0, $cond1137 = 0;
 var $cond1138 = 0, $cond1139 = 0, $cond1140 = 0, $cond1141 = 0, $cond1142 = 0, $cond1143 = 0, $cond1144 = 0, $cond1145 = 0, $cond1146 = 0, $cond1147 = 0, $cond1148 = 0, $cond1149 = 0, $cond1150 = 0, $cond1151 = 0, $cond1152 = 0, $cond1153 = 0, $cond1154 = 0, $cond1155 = 0, $cond1156 = 0, $cond1157 = 0;
 var $cond1158 = 0, $cond1159 = 0, $cond1160 = 0, $cond999 = 0, $eidx$0 = 0, $eidx119$0 = 0, $eidx32$0 = 0, $eidx32$0$phi = 0, $eidx32$1 = 0, $eidx32$2 = 0, $eidx35$0 = 0, $exc = 0, $exc117 = 0, $exc120 = 0, $exc25 = 0, $exc37 = 0, $exc_catched$0 = 0, $exc_catched$1 = 0, $exc_catched$1$phi = 0, $exc_catched$2 = 0;
 var $exc_catched$2$phi = 0, $exc_catched$3 = 0, $exc_catched$4 = 0, $exc_catched$5 = 0, $exc_catched$5$phi = 0, $hash = 0, $hash$byval_copy = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $idx100$0 = 0, $idx100$1 = 0, $indirectbr_cast = 0, $irep$0 = 0, $irep$1 = 0, $irep$1$phi = 0, $irep$2 = 0, $irep$3 = 0, $irep$4 = 0, $irep$5 = 0;
 var $irep$5$phi = 0, $irep$6 = 0, $irep$7 = 0, $irep$8 = 0, $irep$8$phi = 0, $len$0 = 0, $m$0 = 0, $m18$0 = 0, $m41$0 = 0, $mid$0 = 0, $mid20$0 = 0, $mid45$0 = 0, $mlen$0 = 0, $msg = 0, $msg$byval_copy = 0, $msg$byval_copy948 = 0, $n$0 = 0, $n11$0 = 0, $n22$0 = 0, $n40$0 = 0;
 var $or$cond = 0, $or$cond4 = 0, $p102$0 = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$2 = 0, $pc$3 = 0, $pc$3$phi = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pool$0 = 0, $pool$1 = 0, $pool$1$phi = 0, $pool$2 = 0, $pool$3 = 0, $pool$3$phi = 0, $pool$4 = 0, $pool$5 = 0;
 var $pool$6 = 0, $pool$6$phi = 0, $post$0 = 0, $pp$0 = 0, $prev_jmp$0 = 0, $prev_jmp$1 = 0, $prev_jmp$1$phi = 0, $recv = 0, $recv$byval_copy = 0, $recv$byval_copy910 = 0, $recv$byval_copy912 = 0, $recv112 = 0, $recv112$byval_copy = 0, $recv14 = 0, $recv14$byval_copy = 0, $recv16 = 0, $recv16$byval_copy = 0, $recv44 = 0, $recv44$byval_copy = 0, $recv44$byval_copy924 = 0;
 var $regs$0 = 0, $regs$1 = 0, $regs$1$phi = 0, $regs$2 = 0, $regs$2$phi = 0, $regs$3 = 0, $regs$4 = 0, $regs$5 = 0, $regs$5$phi = 0, $result = 0, $result84$0 = 0, $result86$0 = 0, $result88$0 = 0, $result90$0 = 0, $result92$0 = 0, $rnum$0 = 0, $stack$0 = 0, $stack53$0 = 0, $super = 0, $super$byval_copy = 0;
 var $sym = 0, $sym$byval_copy = 0, $sym46 = 0, $sym46$byval_copy = 0, $syms$0 = 0, $syms$1 = 0, $syms$1$phi = 0, $syms$2 = 0, $syms$3 = 0, $syms$3$phi = 0, $syms$4 = 0, $syms$5 = 0, $syms$6 = 0, $syms$6$phi = 0, $v = 0, $v95 = 0, $v95$byval_copy = 0, $v97 = 0, $val = 0, $val1 = 0;
 var $vararg_buffer = 0, $vararg_ptr901 = 0, $vararg_ptr902 = 0, $z = 0, $z62 = 0, $z66 = 0, $z77 = 0, $z82 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg$byval_copy948 = sp + 1312|0;
 $msg$byval_copy = sp + 1304|0;
 $$byval_copy947 = sp + 1296|0;
 $$byval_copy946 = sp + 1288|0;
 $$byval_copy945 = sp + 1280|0;
 $$byval_copy944 = sp + 1272|0;
 $$byval_copy943 = sp + 1264|0;
 $recv112$byval_copy = sp + 1256|0;
 $base108$byval_copy = sp + 1248|0;
 $super$byval_copy = sp + 1240|0;
 $base$byval_copy = sp + 1232|0;
 $$byval_copy942 = sp + 1224|0;
 $$byval_copy941 = sp + 1216|0;
 $hash$byval_copy = sp + 1208|0;
 $$byval_copy940 = sp + 1200|0;
 $$byval_copy939 = sp + 1192|0;
 $$byval_copy938 = sp + 1184|0;
 $$byval_copy937 = sp + 1176|0;
 $$byval_copy936 = sp + 1168|0;
 $v95$byval_copy = sp + 1160|0;
 $$byval_copy935 = sp + 1152|0;
 $$byval_copy934 = sp + 1144|0;
 $$byval_copy933 = sp + 1136|0;
 $$byval_copy932 = sp + 1128|0;
 $$byval_copy931 = sp + 1120|0;
 $$byval_copy930 = sp + 1112|0;
 $$byval_copy929 = sp + 1104|0;
 $$byval_copy928 = sp + 1096|0;
 $$byval_copy927 = sp + 1088|0;
 $$byval_copy926 = sp + 1080|0;
 $$byval_copy925 = sp + 1072|0;
 $recv44$byval_copy924 = sp + 1064|0;
 $sym46$byval_copy = sp + 1056|0;
 $$byval_copy923 = sp + 1048|0;
 $recv44$byval_copy = sp + 1040|0;
 $$byval_copy922 = sp + 1032|0;
 $$byval_copy921 = sp + 1024|0;
 $$byval_copy920 = sp + 1016|0;
 $$byval_copy919 = sp + 1008|0;
 $$byval_copy918 = sp + 1000|0;
 $$byval_copy917 = sp + 992|0;
 $$byval_copy916 = sp + 984|0;
 $recv16$byval_copy = sp + 976|0;
 $$byval_copy915 = sp + 968|0;
 $$byval_copy914 = sp + 960|0;
 $$byval_copy913 = sp + 952|0;
 $recv14$byval_copy = sp + 944|0;
 $recv$byval_copy912 = sp + 936|0;
 $sym$byval_copy = sp + 928|0;
 $$byval_copy911 = sp + 920|0;
 $args$byval_copy = sp + 912|0;
 $recv$byval_copy910 = sp + 904|0;
 $recv$byval_copy = sp + 896|0;
 $$byval_copy909 = sp + 888|0;
 $$byval_copy908 = sp + 880|0;
 $$byval_copy907 = sp + 872|0;
 $$byval_copy906 = sp + 864|0;
 $$byval_copy905 = sp + 856|0;
 $$byval_copy904 = sp + 848|0;
 $$byval_copy903 = sp + 840|0;
 $$byval_copy = sp + 832|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $c_jmp = sp + 672|0;
 $0 = sp + 664|0;
 $1 = sp + 656|0;
 $2 = sp + 648|0;
 $3 = sp + 640|0;
 $val = sp + 632|0;
 $4 = sp + 624|0;
 $val1 = sp + 616|0;
 $5 = sp + 608|0;
 $6 = sp + 600|0;
 $c = sp + 592|0;
 $recv = sp + 584|0;
 $result = sp + 576|0;
 $sym = sp + 568|0;
 $args = sp + 560|0;
 $7 = sp + 552|0;
 $8 = sp + 544|0;
 $9 = sp + 536|0;
 $recv14 = sp + 528|0;
 $10 = sp + 520|0;
 $11 = sp + 512|0;
 $recv16 = sp + 504|0;
 $c19 = sp + 496|0;
 $exc = sp + 488|0;
 $12 = sp + 480|0;
 $13 = sp + 472|0;
 $14 = sp + 464|0;
 $15 = sp + 456|0;
 $16 = sp + 448|0;
 $exc25 = sp + 440|0;
 $17 = sp + 432|0;
 $18 = sp + 424|0;
 $19 = sp + 416|0;
 $20 = sp + 408|0;
 $21 = sp + 400|0;
 $22 = sp + 392|0;
 $23 = sp + 384|0;
 $24 = sp + 376|0;
 $25 = sp + 368|0;
 $v = sp + 360|0;
 $exc37 = sp + 352|0;
 $26 = sp + 344|0;
 $c42 = sp + 336|0;
 $recv44 = sp + 328|0;
 $sym46 = sp + 320|0;
 $27 = sp + 312|0;
 $28 = sp + 304|0;
 $z = sp + 296|0;
 $29 = sp + 288|0;
 $z62 = sp + 280|0;
 $z66 = sp + 272|0;
 $30 = sp + 264|0;
 $z77 = sp + 260|0;
 $z82 = sp + 256|0;
 $31 = sp + 248|0;
 $32 = sp + 240|0;
 $v95 = sp + 232|0;
 $33 = sp + 224|0;
 $v97 = sp + 216|0;
 $34 = sp + 208|0;
 $35 = sp + 200|0;
 $36 = sp + 192|0;
 $37 = sp + 184|0;
 $hash = sp + 176|0;
 $38 = sp + 168|0;
 $39 = sp + 160|0;
 $base = sp + 152|0;
 $super = sp + 144|0;
 $40 = sp + 136|0;
 $41 = sp + 128|0;
 $base108 = sp + 120|0;
 $42 = sp + 112|0;
 $43 = sp + 104|0;
 $recv112 = sp + 96|0;
 $44 = sp + 88|0;
 $45 = sp + 80|0;
 $exc117 = sp + 72|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $msg = sp + 40|0;
 $exc120 = sp + 32|0;
 $49 = sp + 24|0;
 $50 = sp + 16|0;
 $51 = ((($proc)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($52)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($52)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 __THREW__ = 0;
 $59 = (invoke_ii(145,($mrb|0))|0);
 $60 = __THREW__; __THREW__ = 0;
 if ((($60|0) != 0) & ((threwValue|0) != 0)) { $61 = _testSetjmp(HEAP32[$60>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($61|0) == 0) { _longjmp($60|0, threwValue|0); } tempRet0 = (threwValue); } else { $61 = -1; };
 $62 = tempRet0;
 $cond = ($61|0)==(1);
 if ($cond) {
  $$1 = $proc;$$reg2mem899$0 = $62;$ai$1 = 0;$exc_catched$1 = 0;$irep$1 = $52;$pc$1 = $54;$pool$1 = $56;$prev_jmp$1 = 0;$regs$1 = 0;$syms$1 = $58;
 } else {
  $63 = HEAP32[$mrb>>2]|0;
  $$0 = $proc;$ai$0 = $59;$exc_catched$0 = 0;$irep$0 = $52;$pc$0 = $54;$pool$0 = $56;$prev_jmp$0 = $63;$regs$0 = 0;$syms$0 = $58;
  label = 3;
 }
 L3: while(1) {
  if ((label|0) == 3) {
   label = 0;
   _setjmpTable = _saveSetjmp($c_jmp,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $64 = __THREW__; __THREW__ = 0;
   if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = (threwValue); } else { $65 = -1; };
   $66 = tempRet0;
   $cond999 = ($65|0)==(1);
   if ($cond999) {
    $$1 = $$0;$$reg2mem899$0 = $66;$ai$1 = $ai$0;$exc_catched$1 = $exc_catched$0;$irep$1 = $irep$0;$pc$1 = $pc$0;$pool$1 = $pool$0;$prev_jmp$1 = $prev_jmp$0;$regs$1 = $regs$0;$syms$1 = $syms$0;
    continue;
   }
   $$1 = $$0;$$reg2mem899$0 = 0;$ai$1 = $ai$0;$exc_catched$1 = $exc_catched$0;$irep$1 = $irep$0;$pc$1 = $pc$0;$pool$1 = $pool$0;$prev_jmp$1 = $prev_jmp$0;$regs$1 = $regs$0;$syms$1 = $syms$0;
  }
  $67 = ($$reg2mem899$0|0)==(0);
  if (!($67)) {
   $$0 = $$1;$ai$0 = $ai$1;$exc_catched$0 = 1;$irep$0 = $irep$1;$pc$0 = $pc$1;$pool$0 = $pool$1;$prev_jmp$0 = $prev_jmp$1;$regs$0 = $regs$1;$syms$0 = $syms$1;
   label = 3;
   continue;
  }
  $68 = ($exc_catched$1<<24>>24)!=(0);
  if ($68) {
   $$5 = $$1;$exc_catched$2 = 0;$irep$5 = $irep$1;$pc$3 = $pc$1;$pool$3 = $pool$1;$regs$2 = $regs$1;$syms$3 = $syms$1;
   label = 276;
  } else {
   HEAP32[$mrb>>2] = $c_jmp;
   $69 = ((($mrb)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0|0);
   if (!($73)) {
    __THREW__ = 0;
    invoke_vi(134,($mrb|0));
    $74 = __THREW__; __THREW__ = 0;
    if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = (threwValue); } else { $75 = -1; };
    $76 = tempRet0;
    $cond1000 = ($75|0)==(1);
    if ($cond1000) {
     $syms$1$phi = $syms$1;$regs$1$phi = $regs$1;$prev_jmp$1$phi = $prev_jmp$1;$pool$1$phi = $pool$1;$pc$1$phi = $pc$1;$irep$1$phi = $irep$1;$exc_catched$1$phi = $exc_catched$1;$ai$1$phi = $ai$1;$$1$phi = $$1;$$reg2mem899$0 = $76;$syms$1 = $syms$1$phi;$regs$1 = $regs$1$phi;$prev_jmp$1 = $prev_jmp$1$phi;$pool$1 = $pool$1$phi;$pc$1 = $pc$1$phi;$irep$1 = $irep$1$phi;$exc_catched$1 = $exc_catched$1$phi;$ai$1 = $ai$1$phi;$$1 = $$1$phi;
     continue;
    }
   }
   $77 = ((($irep$1)) + 2|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   __THREW__ = 0;
   invoke_viii(142,($mrb|0),($79|0),($stack_keep|0));
   $80 = __THREW__; __THREW__ = 0;
   if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = (threwValue); } else { $81 = -1; };
   $82 = tempRet0;
   $cond1001 = ($81|0)==(1);
   if ($cond1001) {
    $syms$1$phi = $syms$1;$regs$1$phi = $regs$1;$prev_jmp$1$phi = $prev_jmp$1;$pool$1$phi = $pool$1;$pc$1$phi = $pc$1;$irep$1$phi = $irep$1;$exc_catched$1$phi = $exc_catched$1;$ai$1$phi = $ai$1;$$1$phi = $$1;$$reg2mem899$0 = $82;$syms$1 = $syms$1$phi;$regs$1 = $regs$1$phi;$prev_jmp$1 = $prev_jmp$1$phi;$pool$1 = $pool$1$phi;$pc$1 = $pc$1$phi;$irep$1 = $irep$1$phi;$exc_catched$1 = $exc_catched$1$phi;$ai$1 = $ai$1$phi;$$1 = $$1$phi;
    continue;
   }
   $83 = ((($mrb)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 4|0);
   HEAP32[$87>>2] = $$1;
   $88 = ((($irep$1)) + 2|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $91 = ((($mrb)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 16|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($94)) + 12|0);
   HEAP32[$95>>2] = $90;
   $96 = ((($mrb)) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   ;HEAP32[$99>>2]=HEAP32[$self>>2]|0;HEAP32[$99+4>>2]=HEAP32[$self+4>>2]|0;
   $100 = HEAP32[$pc$1>>2]|0;
   $101 = $100 & 127;
   $102 = (200 + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $$8 = $$1;$$reg2mem887$0 = $103;$exc_catched$5 = $exc_catched$1;$i$2 = $100;$irep$8 = $irep$1;$pc$6 = $pc$1;$pool$6 = $pool$1;$regs$5 = $99;$syms$6 = $syms$1;
   label = 590;
  }
  L19: while(1) {
   if ((label|0) == 276) {
    label = 0;
    $1508 = ((($mrb)) + 12|0);
    $1509 = HEAP32[$1508>>2]|0;
    $1510 = ((($1509)) + 16|0);
    $1511 = HEAP32[$1510>>2]|0;
    $1512 = ((($mrb)) + 20|0);
    $1513 = HEAP32[$1512>>2]|0;
    __THREW__ = 0;
    $1514 = (invoke_iiii(140,($mrb|0),(67980|0),6)|0);
    $1515 = __THREW__; __THREW__ = 0;
    if ((($1515|0) != 0) & ((threwValue|0) != 0)) { $1516 = _testSetjmp(HEAP32[$1515>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1516|0) == 0) { _longjmp($1515|0, threwValue|0); } tempRet0 = (threwValue); } else { $1516 = -1; };
    $1517 = tempRet0;
    $cond1008 = ($1516|0)==(1);
    if ($cond1008) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1517;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    __THREW__ = 0;
    invoke_viii(176,($24|0),($mrb|0),($pc$3|0));
    $1518 = __THREW__; __THREW__ = 0;
    if ((($1518|0) != 0) & ((threwValue|0) != 0)) { $1519 = _testSetjmp(HEAP32[$1518>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1519|0) == 0) { _longjmp($1518|0, threwValue|0); } tempRet0 = (threwValue); } else { $1519 = -1; };
    $1520 = tempRet0;
    $cond1009 = ($1519|0)==(1);
    if ($cond1009) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1520;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    __THREW__ = 0;
    ;HEAP32[$$byval_copy920>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy920+4>>2]=HEAP32[$24+4>>2]|0;
    invoke_viiii(177,($mrb|0),($1513|0),($1514|0),($$byval_copy920|0));
    $1521 = __THREW__; __THREW__ = 0;
    if ((($1521|0) != 0) & ((threwValue|0) != 0)) { $1522 = _testSetjmp(HEAP32[$1521>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1522|0) == 0) { _longjmp($1521|0, threwValue|0); } tempRet0 = (threwValue); } else { $1522 = -1; };
    $1523 = tempRet0;
    $cond1010 = ($1522|0)==(1);
    if ($cond1010) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1523;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    $1524 = ((($mrb)) + 20|0);
    $1525 = HEAP32[$1524>>2]|0;
    __THREW__ = 0;
    $1526 = (invoke_iiii(140,($mrb|0),(67505|0),5)|0);
    $1527 = __THREW__; __THREW__ = 0;
    if ((($1527|0) != 0) & ((threwValue|0) != 0)) { $1528 = _testSetjmp(HEAP32[$1527>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1528|0) == 0) { _longjmp($1527|0, threwValue|0); } tempRet0 = (threwValue); } else { $1528 = -1; };
    $1529 = tempRet0;
    $cond1011 = ($1528|0)==(1);
    if ($cond1011) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1529;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    $1530 = ((($mrb)) + 12|0);
    $1531 = HEAP32[$1530>>2]|0;
    $1532 = ((($1531)) + 20|0);
    $1533 = HEAP32[$1532>>2]|0;
    $1534 = $1511;
    $1535 = $1533;
    $1536 = (($1534) - ($1535))|0;
    $1537 = (($1536|0) / 48)&-1;
    __THREW__ = 0;
    invoke_vii(136,($25|0),($1537|0));
    $1538 = __THREW__; __THREW__ = 0;
    if ((($1538|0) != 0) & ((threwValue|0) != 0)) { $1539 = _testSetjmp(HEAP32[$1538>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1539|0) == 0) { _longjmp($1538|0, threwValue|0); } tempRet0 = (threwValue); } else { $1539 = -1; };
    $1540 = tempRet0;
    $cond1012 = ($1539|0)==(1);
    if ($cond1012) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1540;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    __THREW__ = 0;
    ;HEAP32[$$byval_copy921>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy921+4>>2]=HEAP32[$25+4>>2]|0;
    invoke_viiii(177,($mrb|0),($1525|0),($1526|0),($$byval_copy921|0));
    $1541 = __THREW__; __THREW__ = 0;
    if ((($1541|0) != 0) & ((threwValue|0) != 0)) { $1542 = _testSetjmp(HEAP32[$1541>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1542|0) == 0) { _longjmp($1541|0, threwValue|0); } tempRet0 = (threwValue); } else { $1542 = -1; };
    $1543 = tempRet0;
    $cond1013 = ($1542|0)==(1);
    if ($cond1013) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1543;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    $1544 = ((($1511)) + 20|0);
    $1545 = HEAP32[$1544>>2]|0;
    $1546 = ((($mrb)) + 12|0);
    $1547 = HEAP32[$1546>>2]|0;
    $1548 = ((($1547)) + 20|0);
    $1549 = HEAP32[$1548>>2]|0;
    $1550 = ($1511|0)==($1549|0);
    L28: do {
     if ($1550) {
      $1551 = ((($1511)) + 16|0);
      $1552 = HEAP32[$1551>>2]|0;
      $1553 = ($1552|0)==(0);
      if ($1553) {
       $$7 = $$5;$exc_catched$4 = $exc_catched$2;$irep$7 = $irep$5;$pc$5 = $pc$3;$pool$5 = $pool$3;$regs$4 = $regs$2;$syms$5 = $syms$3;
       break L19;
      } else {
       $ci31$1 = $1511;
      }
     } else {
      $ci31$0 = $1511;$eidx32$0 = $1545;
      L30: while(1) {
       $1554 = ((($ci31$0)) + 16|0);
       $1555 = HEAP32[$1554>>2]|0;
       $1556 = ((($ci31$0)) + -48|0);
       $1557 = ((($1556)) + 16|0);
       $1558 = HEAP32[$1557>>2]|0;
       $1559 = ($1555|0)==($1558|0);
       if (!($1559)) {
        $ci31$1 = $ci31$0;
        break L28;
       }
       __THREW__ = 0;
       invoke_vi(132,($mrb|0));
       $1560 = __THREW__; __THREW__ = 0;
       if ((($1560|0) != 0) & ((threwValue|0) != 0)) { $1561 = _testSetjmp(HEAP32[$1560>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1561|0) == 0) { _longjmp($1560|0, threwValue|0); } tempRet0 = (threwValue); } else { $1561 = -1; };
       $1562 = tempRet0;
       $cond1014 = ($1561|0)==(1);
       if ($cond1014) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1562;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $1563 = ((($mrb)) + 12|0);
       $1564 = HEAP32[$1563>>2]|0;
       $1565 = ((($1564)) + 16|0);
       $1566 = HEAP32[$1565>>2]|0;
       $1567 = ((($1566)) + 48|0);
       $1568 = ((($1567)) + 8|0);
       $1569 = HEAP32[$1568>>2]|0;
       $1570 = ((($mrb)) + 12|0);
       $1571 = HEAP32[$1570>>2]|0;
       $1572 = ((($1571)) + 4|0);
       HEAP32[$1572>>2] = $1569;
       $1573 = ((($1566)) + 48|0);
       $1574 = ((($1573)) + 40|0);
       $1575 = HEAP32[$1574>>2]|0;
       $1576 = ($1575|0)==(-1);
       $1577 = ($prev_jmp$1|0)!=(0|0);
       $or$cond4 = $1576 & $1577;
       if ($or$cond4) {
        label = 287;
        break L19;
       }
       $1581 = ((($mrb)) + 12|0);
       $1582 = HEAP32[$1581>>2]|0;
       $1583 = ((($1582)) + 20|0);
       $1584 = HEAP32[$1583>>2]|0;
       $1585 = ($1566|0)==($1584|0);
       if ($1585) {
        $eidx32$1 = $eidx32$0;
        break;
       }
       $1608 = ((($1566)) + 16|0);
       $1609 = HEAP32[$1608>>2]|0;
       $1610 = ((($1566)) + -48|0);
       $1611 = ((($1610)) + 16|0);
       $1612 = HEAP32[$1611>>2]|0;
       $1613 = ($1609|0)==($1612|0);
       if ($1613) {
        $eidx32$2 = $eidx32$0;
       } else {
        $eidx32$0$phi = $eidx32$0;$ci31$0 = $1566;$eidx32$0 = $eidx32$0$phi;
        continue;
       }
       while(1) {
        $1614 = ((($1566)) + -48|0);
        $1615 = ((($1614)) + 20|0);
        $1616 = HEAP32[$1615>>2]|0;
        $1617 = ($eidx32$2|0)>($1616|0);
        if (!($1617)) {
         $ci31$0 = $1566;$eidx32$0 = $eidx32$2;
         continue L30;
        }
        $1618 = (($eidx32$2) + -1)|0;
        __THREW__ = 0;
        invoke_vii(166,($mrb|0),($1618|0));
        $1619 = __THREW__; __THREW__ = 0;
        if ((($1619|0) != 0) & ((threwValue|0) != 0)) { $1620 = _testSetjmp(HEAP32[$1619>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1620|0) == 0) { _longjmp($1619|0, threwValue|0); } tempRet0 = (threwValue); } else { $1620 = -1; };
        $1621 = tempRet0;
        $cond1015 = ($1620|0)==(1);
        if ($cond1015) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1621;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $eidx32$2 = $1618;
       }
      }
      while(1) {
       $1586 = ($eidx32$1|0)>(0);
       if (!($1586)) {
        break;
       }
       $1587 = (($eidx32$1) + -1)|0;
       __THREW__ = 0;
       invoke_vii(166,($mrb|0),($1587|0));
       $1588 = __THREW__; __THREW__ = 0;
       if ((($1588|0) != 0) & ((threwValue|0) != 0)) { $1589 = _testSetjmp(HEAP32[$1588>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1589|0) == 0) { _longjmp($1588|0, threwValue|0); } tempRet0 = (threwValue); } else { $1589 = -1; };
       $1590 = tempRet0;
       $cond1016 = ($1589|0)==(1);
       if ($cond1016) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1590;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $eidx32$1 = $1587;
      }
      $1591 = ((($1566)) + 16|0);
      $1592 = HEAP32[$1591>>2]|0;
      $1593 = ($1592|0)==(0);
      if ($1593) {
       $1594 = ((($mrb)) + 12|0);
       $1595 = HEAP32[$1594>>2]|0;
       $1596 = ((($mrb)) + 16|0);
       $1597 = HEAP32[$1596>>2]|0;
       $1598 = ($1595|0)==($1597|0);
       $1599 = ((($mrb)) + 12|0);
       $1600 = HEAP32[$1599>>2]|0;
       if ($1598) {
        label = 294;
        break L19;
       }
       $1606 = HEAP32[$1600>>2]|0;
       $1607 = ((($mrb)) + 12|0);
       HEAP32[$1607>>2] = $1606;
       HEAP32[$1600>>2] = 0;
       $syms$3$phi = $syms$3;$regs$2$phi = $regs$2;$pool$3$phi = $pool$3;$pc$3$phi = $pc$3;$irep$5$phi = $irep$5;$exc_catched$2$phi = $exc_catched$2;$$5$phi = $$5;$syms$3 = $syms$3$phi;$regs$2 = $regs$2$phi;$pool$3 = $pool$3$phi;$pc$3 = $pc$3$phi;$irep$5 = $irep$5$phi;$exc_catched$2 = $exc_catched$2$phi;$$5 = $$5$phi;
       label = 276;
       continue L19;
      } else {
       $ci31$1 = $1566;
      }
     }
    } while(0);
    $1622 = ((($ci31$1)) + 16|0);
    $1623 = HEAP32[$1622>>2]|0;
    $1624 = ($1623|0)==(0);
    if ($1624) {
     $$7 = $$5;$exc_catched$4 = $exc_catched$2;$irep$7 = $irep$5;$pc$5 = $pc$3;$pool$5 = $pool$3;$regs$4 = $regs$2;$syms$5 = $syms$3;
     break;
    }
    $1625 = ((($ci31$1)) + 4|0);
    $1626 = HEAP32[$1625>>2]|0;
    $1627 = ((($1626)) + 12|0);
    $1628 = HEAP32[$1627>>2]|0;
    $1629 = ((($1628)) + 12|0);
    $1630 = HEAP32[$1629>>2]|0;
    $1631 = ((($1628)) + 16|0);
    $1632 = HEAP32[$1631>>2]|0;
    $1633 = ((($ci31$1)) + 48|0);
    $1634 = ((($1633)) + 8|0);
    $1635 = HEAP32[$1634>>2]|0;
    $1636 = ((($mrb)) + 12|0);
    $1637 = HEAP32[$1636>>2]|0;
    $1638 = ((($1637)) + 4|0);
    HEAP32[$1638>>2] = $1635;
    $1639 = ((($ci31$1)) + 16|0);
    $1640 = HEAP32[$1639>>2]|0;
    $1641 = (($1640) + -1)|0;
    HEAP32[$1639>>2] = $1641;
    $1642 = ((($mrb)) + 12|0);
    $1643 = HEAP32[$1642>>2]|0;
    $1644 = ((($1643)) + 28|0);
    $1645 = HEAP32[$1644>>2]|0;
    $1646 = (($1645) + ($1641<<2)|0);
    $1647 = HEAP32[$1646>>2]|0;
    $$6 = $1626;$exc_catched$3 = $exc_catched$2;$irep$6 = $1628;$pc$4 = $1647;$pool$4 = $1630;$regs$3 = $1635;$syms$4 = $1632;
   }
   else if ((label|0) == 590) {
    label = 0;
    $indirectbr_cast = $$reg2mem887$0;
    L50: do {
     switch ($indirectbr_cast|0) {
     case 75:  {
      $$7 = $$8;$exc_catched$4 = $exc_catched$5;$irep$7 = $irep$8;$pc$5 = $pc$6;$pool$5 = $pool$6;$regs$4 = $regs$5;$syms$5 = $syms$6;
      break L19;
      break;
     }
     case 1:  {
      $104 = ((($pc$6)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $105 & 127;
      $107 = (200 + ($106<<2)|0);
      $108 = HEAP32[$107>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $108;$i$2 = $105;$pc$6 = $104;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 2:  {
      $109 = $i$2 >>> 23;
      $110 = $109 & 511;
      $111 = (($regs$5) + ($110<<3)|0);
      $112 = $i$2 >>> 14;
      $113 = $112 & 511;
      $114 = (($regs$5) + ($113<<3)|0);
      ;HEAP32[$111>>2]=HEAP32[$114>>2]|0;HEAP32[$111+4>>2]=HEAP32[$114+4>>2]|0;
      $115 = ((($pc$6)) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $116 & 127;
      $118 = (200 + ($117<<2)|0);
      $119 = HEAP32[$118>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $119;$i$2 = $116;$pc$6 = $115;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 3:  {
      $120 = $i$2 >>> 23;
      $121 = $120 & 511;
      $122 = (($regs$5) + ($121<<3)|0);
      $123 = $i$2 >>> 7;
      $124 = $123 & 65535;
      $125 = (($pool$6) + ($124<<3)|0);
      ;HEAP32[$122>>2]=HEAP32[$125>>2]|0;HEAP32[$122+4>>2]=HEAP32[$125+4>>2]|0;
      $126 = ((($pc$6)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $127 & 127;
      $129 = (200 + ($128<<2)|0);
      $130 = HEAP32[$129>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $130;$i$2 = $127;$pc$6 = $126;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 4:  {
      $131 = $i$2 >>> 23;
      $132 = $131 & 511;
      $133 = (($regs$5) + ($132<<3)|0);
      $134 = ((($133)) + 4|0);
      HEAP32[$134>>2] = 3;
      $135 = $i$2 >>> 7;
      $136 = $135 & 65535;
      $137 = (($136) - 32767)|0;
      $138 = $i$2 >>> 23;
      $139 = $138 & 511;
      $140 = (($regs$5) + ($139<<3)|0);
      HEAP32[$140>>2] = $137;
      $141 = ((($pc$6)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $142 & 127;
      $144 = (200 + ($143<<2)|0);
      $145 = HEAP32[$144>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $145;$i$2 = $142;$pc$6 = $141;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 5:  {
      $146 = $i$2 >>> 23;
      $147 = $146 & 511;
      $148 = (($regs$5) + ($147<<3)|0);
      $149 = ((($148)) + 4|0);
      HEAP32[$149>>2] = 4;
      $150 = $i$2 >>> 7;
      $151 = $150 & 65535;
      $152 = (($syms$6) + ($151<<2)|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $i$2 >>> 23;
      $155 = $154 & 511;
      $156 = (($regs$5) + ($155<<3)|0);
      HEAP32[$156>>2] = $153;
      $157 = ((($pc$6)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $158 & 127;
      $160 = (200 + ($159<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $161;$i$2 = $158;$pc$6 = $157;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 6:  {
      $697 = $i$2 >>> 23;
      $698 = $697 & 511;
      $699 = (($regs$5) + ($698<<3)|0);
      $700 = ((($699)) + 4|0);
      HEAP32[$700>>2] = 0;
      $701 = (($regs$5) + ($698<<3)|0);
      HEAP32[$701>>2] = 0;
      $702 = ((($pc$6)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = $703 & 127;
      $705 = (200 + ($704<<2)|0);
      $706 = HEAP32[$705>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $706;$i$2 = $703;$pc$6 = $702;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 7:  {
      $162 = $i$2 >>> 23;
      $163 = $162 & 511;
      $164 = (($regs$5) + ($163<<3)|0);
      ;HEAP32[$164>>2]=HEAP32[$regs$5>>2]|0;HEAP32[$164+4>>2]=HEAP32[$regs$5+4>>2]|0;
      $165 = ((($pc$6)) + 4|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = $166 & 127;
      $168 = (200 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $169;$i$2 = $166;$pc$6 = $165;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 8:  {
      $170 = $i$2 >>> 23;
      $171 = $170 & 511;
      $172 = (($regs$5) + ($171<<3)|0);
      $173 = ((($172)) + 4|0);
      HEAP32[$173>>2] = 2;
      $174 = $i$2 >>> 23;
      $175 = $174 & 511;
      $176 = (($regs$5) + ($175<<3)|0);
      HEAP32[$176>>2] = 1;
      $177 = ((($pc$6)) + 4|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 & 127;
      $180 = (200 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $181;$i$2 = $178;$pc$6 = $177;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 9:  {
      $182 = $i$2 >>> 23;
      $183 = $182 & 511;
      $184 = (($regs$5) + ($183<<3)|0);
      $185 = ((($184)) + 4|0);
      HEAP32[$185>>2] = 0;
      $186 = $i$2 >>> 23;
      $187 = $186 & 511;
      $188 = (($regs$5) + ($187<<3)|0);
      HEAP32[$188>>2] = 1;
      $189 = ((($pc$6)) + 4|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = $190 & 127;
      $192 = (200 + ($191<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $193;$i$2 = $190;$pc$6 = $189;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 10:  {
      $194 = $i$2 >>> 23;
      $195 = $194 & 511;
      $196 = (($regs$5) + ($195<<3)|0);
      $197 = $i$2 >>> 7;
      $198 = $197 & 65535;
      $199 = (($syms$6) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      __THREW__ = 0;
      invoke_viii(149,($0|0),($mrb|0),($200|0));
      $201 = __THREW__; __THREW__ = 0;
      if ((($201|0) != 0) & ((threwValue|0) != 0)) { $202 = _testSetjmp(HEAP32[$201>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($202|0) == 0) { _longjmp($201|0, threwValue|0); } tempRet0 = (threwValue); } else { $202 = -1; };
      $203 = tempRet0;
      $cond1160 = ($202|0)==(1);
      if ($cond1160) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $203;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$196>>2]=HEAP32[$0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$0+4>>2]|0;
      $204 = ((($pc$6)) + 4|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = $205 & 127;
      $207 = (200 + ($206<<2)|0);
      $208 = HEAP32[$207>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $208;$i$2 = $205;$pc$6 = $204;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 11:  {
      $209 = $i$2 >>> 7;
      $210 = $209 & 65535;
      $211 = (($syms$6) + ($210<<2)|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $i$2 >>> 23;
      $214 = $213 & 511;
      $215 = (($regs$5) + ($214<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$215>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$215+4>>2]|0;
      invoke_viii(150,($mrb|0),($212|0),($$byval_copy|0));
      $216 = __THREW__; __THREW__ = 0;
      if ((($216|0) != 0) & ((threwValue|0) != 0)) { $217 = _testSetjmp(HEAP32[$216>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($217|0) == 0) { _longjmp($216|0, threwValue|0); } tempRet0 = (threwValue); } else { $217 = -1; };
      $218 = tempRet0;
      $cond1159 = ($217|0)==(1);
      if ($cond1159) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $218;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $219 = ((($pc$6)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 & 127;
      $222 = (200 + ($221<<2)|0);
      $223 = HEAP32[$222>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $223;$i$2 = $220;$pc$6 = $219;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 12:  {
      $224 = $i$2 >>> 23;
      $225 = $224 & 511;
      $226 = (($regs$5) + ($225<<3)|0);
      $227 = $i$2 >>> 7;
      $228 = $227 & 65535;
      __THREW__ = 0;
      invoke_viii(151,($1|0),($mrb|0),($228|0));
      $229 = __THREW__; __THREW__ = 0;
      if ((($229|0) != 0) & ((threwValue|0) != 0)) { $230 = _testSetjmp(HEAP32[$229>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($230|0) == 0) { _longjmp($229|0, threwValue|0); } tempRet0 = (threwValue); } else { $230 = -1; };
      $231 = tempRet0;
      $cond1158 = ($230|0)==(1);
      if ($cond1158) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $231;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$226>>2]=HEAP32[$1>>2]|0;HEAP32[$226+4>>2]=HEAP32[$1+4>>2]|0;
      $232 = ((($pc$6)) + 4|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233 & 127;
      $235 = (200 + ($234<<2)|0);
      $236 = HEAP32[$235>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $236;$i$2 = $233;$pc$6 = $232;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 13:  {
      $237 = $i$2 >>> 7;
      $238 = $237 & 65535;
      $239 = $i$2 >>> 23;
      $240 = $239 & 511;
      $241 = (($regs$5) + ($240<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy903>>2]=HEAP32[$241>>2]|0;HEAP32[$$byval_copy903+4>>2]=HEAP32[$241+4>>2]|0;
      invoke_viii(152,($mrb|0),($238|0),($$byval_copy903|0));
      $242 = __THREW__; __THREW__ = 0;
      if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = (threwValue); } else { $243 = -1; };
      $244 = tempRet0;
      $cond1157 = ($243|0)==(1);
      if ($cond1157) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $244;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $245 = ((($pc$6)) + 4|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = $246 & 127;
      $248 = (200 + ($247<<2)|0);
      $249 = HEAP32[$248>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $249;$i$2 = $246;$pc$6 = $245;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 14:  {
      $250 = $i$2 >>> 23;
      $251 = $250 & 511;
      $252 = (($regs$5) + ($251<<3)|0);
      $253 = $i$2 >>> 7;
      $254 = $253 & 65535;
      $255 = (($syms$6) + ($254<<2)|0);
      $256 = HEAP32[$255>>2]|0;
      __THREW__ = 0;
      invoke_viii(153,($2|0),($mrb|0),($256|0));
      $257 = __THREW__; __THREW__ = 0;
      if ((($257|0) != 0) & ((threwValue|0) != 0)) { $258 = _testSetjmp(HEAP32[$257>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($258|0) == 0) { _longjmp($257|0, threwValue|0); } tempRet0 = (threwValue); } else { $258 = -1; };
      $259 = tempRet0;
      $cond1156 = ($258|0)==(1);
      if ($cond1156) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $259;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$252>>2]=HEAP32[$2>>2]|0;HEAP32[$252+4>>2]=HEAP32[$2+4>>2]|0;
      $260 = ((($pc$6)) + 4|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = $261 & 127;
      $263 = (200 + ($262<<2)|0);
      $264 = HEAP32[$263>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $264;$i$2 = $261;$pc$6 = $260;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 15:  {
      $265 = $i$2 >>> 7;
      $266 = $265 & 65535;
      $267 = (($syms$6) + ($266<<2)|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $i$2 >>> 23;
      $270 = $269 & 511;
      $271 = (($regs$5) + ($270<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy904>>2]=HEAP32[$271>>2]|0;HEAP32[$$byval_copy904+4>>2]=HEAP32[$271+4>>2]|0;
      invoke_viii(154,($mrb|0),($268|0),($$byval_copy904|0));
      $272 = __THREW__; __THREW__ = 0;
      if ((($272|0) != 0) & ((threwValue|0) != 0)) { $273 = _testSetjmp(HEAP32[$272>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($273|0) == 0) { _longjmp($272|0, threwValue|0); } tempRet0 = (threwValue); } else { $273 = -1; };
      $274 = tempRet0;
      $cond1155 = ($273|0)==(1);
      if ($cond1155) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $274;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $275 = ((($pc$6)) + 4|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $276 & 127;
      $278 = (200 + ($277<<2)|0);
      $279 = HEAP32[$278>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $279;$i$2 = $276;$pc$6 = $275;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 16:  {
      $280 = ((($mrb)) + 12|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ((($281)) + 16|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ((($283)) + 32|0);
      HEAP32[$284>>2] = $pc$6;
      $285 = $i$2 >>> 23;
      $286 = $285 & 511;
      $287 = (($regs$5) + ($286<<3)|0);
      $288 = $i$2 >>> 7;
      $289 = $288 & 65535;
      $290 = (($syms$6) + ($289<<2)|0);
      $291 = HEAP32[$290>>2]|0;
      __THREW__ = 0;
      invoke_viii(155,($3|0),($mrb|0),($291|0));
      $292 = __THREW__; __THREW__ = 0;
      if ((($292|0) != 0) & ((threwValue|0) != 0)) { $293 = _testSetjmp(HEAP32[$292>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($293|0) == 0) { _longjmp($292|0, threwValue|0); } tempRet0 = (threwValue); } else { $293 = -1; };
      $294 = tempRet0;
      $cond1154 = ($293|0)==(1);
      if ($cond1154) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $294;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$287>>2]=HEAP32[$3>>2]|0;HEAP32[$287+4>>2]=HEAP32[$3+4>>2]|0;
      $295 = ((($mrb)) + 12|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($296)) + 16|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ((($298)) + 32|0);
      HEAP32[$299>>2] = 0;
      $300 = ((($pc$6)) + 4|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = $301 & 127;
      $303 = (200 + ($302<<2)|0);
      $304 = HEAP32[$303>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $304;$i$2 = $301;$pc$6 = $300;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 17:  {
      $305 = $i$2 >>> 7;
      $306 = $305 & 65535;
      $307 = (($syms$6) + ($306<<2)|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = $i$2 >>> 23;
      $310 = $309 & 511;
      $311 = (($regs$5) + ($310<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy905>>2]=HEAP32[$311>>2]|0;HEAP32[$$byval_copy905+4>>2]=HEAP32[$311+4>>2]|0;
      invoke_viii(156,($mrb|0),($308|0),($$byval_copy905|0));
      $312 = __THREW__; __THREW__ = 0;
      if ((($312|0) != 0) & ((threwValue|0) != 0)) { $313 = _testSetjmp(HEAP32[$312>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($313|0) == 0) { _longjmp($312|0, threwValue|0); } tempRet0 = (threwValue); } else { $313 = -1; };
      $314 = tempRet0;
      $cond1153 = ($313|0)==(1);
      if ($cond1153) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $314;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $315 = ((($pc$6)) + 4|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = $316 & 127;
      $318 = (200 + ($317<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $319;$i$2 = $316;$pc$6 = $315;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 18:  {
      $320 = ((($mrb)) + 12|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ((($321)) + 16|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ((($323)) + 32|0);
      HEAP32[$324>>2] = $pc$6;
      $325 = $i$2 >>> 7;
      $326 = $325 & 65535;
      $327 = (($syms$6) + ($326<<2)|0);
      $328 = HEAP32[$327>>2]|0;
      __THREW__ = 0;
      invoke_viii(157,($4|0),($mrb|0),($328|0));
      $329 = __THREW__; __THREW__ = 0;
      if ((($329|0) != 0) & ((threwValue|0) != 0)) { $330 = _testSetjmp(HEAP32[$329>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($330|0) == 0) { _longjmp($329|0, threwValue|0); } tempRet0 = (threwValue); } else { $330 = -1; };
      $331 = tempRet0;
      $cond1152 = ($330|0)==(1);
      if ($cond1152) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $331;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$val>>2]=HEAP32[$4>>2]|0;HEAP32[$val+4>>2]=HEAP32[$4+4>>2]|0;
      $332 = ((($mrb)) + 12|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = ((($333)) + 16|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = ((($335)) + 32|0);
      HEAP32[$336>>2] = 0;
      $337 = ((($mrb)) + 12|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = ((($338)) + 4|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = $i$2 >>> 23;
      $342 = $341 & 511;
      $343 = (($340) + ($342<<3)|0);
      ;HEAP32[$343>>2]=HEAP32[$val>>2]|0;HEAP32[$343+4>>2]=HEAP32[$val+4>>2]|0;
      $344 = ((($pc$6)) + 4|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $345 & 127;
      $347 = (200 + ($346<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $syms$6$phi = $syms$6;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $348;$i$2 = $345;$pc$6 = $344;$regs$5 = $340;$syms$6 = $syms$6$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 19:  {
      $349 = $i$2 >>> 7;
      $350 = $349 & 65535;
      $351 = (($syms$6) + ($350<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = $i$2 >>> 23;
      $354 = $353 & 511;
      $355 = (($regs$5) + ($354<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy906>>2]=HEAP32[$355>>2]|0;HEAP32[$$byval_copy906+4>>2]=HEAP32[$355+4>>2]|0;
      invoke_viii(158,($mrb|0),($352|0),($$byval_copy906|0));
      $356 = __THREW__; __THREW__ = 0;
      if ((($356|0) != 0) & ((threwValue|0) != 0)) { $357 = _testSetjmp(HEAP32[$356>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($357|0) == 0) { _longjmp($356|0, threwValue|0); } tempRet0 = (threwValue); } else { $357 = -1; };
      $358 = tempRet0;
      $cond1151 = ($357|0)==(1);
      if ($cond1151) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $358;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $359 = ((($pc$6)) + 4|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $360 & 127;
      $362 = (200 + ($361<<2)|0);
      $363 = HEAP32[$362>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $363;$i$2 = $360;$pc$6 = $359;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 20:  {
      $364 = $i$2 >>> 23;
      $365 = $364 & 511;
      $366 = ((($mrb)) + 12|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ((($367)) + 16|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ((($369)) + 32|0);
      HEAP32[$370>>2] = $pc$6;
      $371 = (($regs$5) + ($365<<3)|0);
      $372 = $i$2 >>> 7;
      $373 = $372 & 65535;
      $374 = (($syms$6) + ($373<<2)|0);
      $375 = HEAP32[$374>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy907>>2]=HEAP32[$371>>2]|0;HEAP32[$$byval_copy907+4>>2]=HEAP32[$371+4>>2]|0;
      invoke_viiii(159,($5|0),($mrb|0),($$byval_copy907|0),($375|0));
      $376 = __THREW__; __THREW__ = 0;
      if ((($376|0) != 0) & ((threwValue|0) != 0)) { $377 = _testSetjmp(HEAP32[$376>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($377|0) == 0) { _longjmp($376|0, threwValue|0); } tempRet0 = (threwValue); } else { $377 = -1; };
      $378 = tempRet0;
      $cond1150 = ($377|0)==(1);
      if ($cond1150) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $378;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$val1>>2]=HEAP32[$5>>2]|0;HEAP32[$val1+4>>2]=HEAP32[$5+4>>2]|0;
      $379 = ((($mrb)) + 12|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ((($380)) + 16|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ((($382)) + 32|0);
      HEAP32[$383>>2] = 0;
      $384 = ((($mrb)) + 12|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = ((($385)) + 4|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = (($387) + ($365<<3)|0);
      ;HEAP32[$388>>2]=HEAP32[$val1>>2]|0;HEAP32[$388+4>>2]=HEAP32[$val1+4>>2]|0;
      $389 = ((($pc$6)) + 4|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = $390 & 127;
      $392 = (200 + ($391<<2)|0);
      $393 = HEAP32[$392>>2]|0;
      $syms$6$phi = $syms$6;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $393;$i$2 = $390;$pc$6 = $389;$regs$5 = $387;$syms$6 = $syms$6$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 21:  {
      $394 = $i$2 >>> 23;
      $395 = $394 & 511;
      $396 = (($395) + 1)|0;
      $397 = (($regs$5) + ($396<<3)|0);
      $398 = $i$2 >>> 7;
      $399 = $398 & 65535;
      $400 = (($syms$6) + ($399<<2)|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = (($regs$5) + ($395<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy908>>2]=HEAP32[$397>>2]|0;HEAP32[$$byval_copy908+4>>2]=HEAP32[$397+4>>2]|0;
      ;HEAP32[$$byval_copy909>>2]=HEAP32[$402>>2]|0;HEAP32[$$byval_copy909+4>>2]=HEAP32[$402+4>>2]|0;
      invoke_viiii(160,($mrb|0),($$byval_copy908|0),($401|0),($$byval_copy909|0));
      $403 = __THREW__; __THREW__ = 0;
      if ((($403|0) != 0) & ((threwValue|0) != 0)) { $404 = _testSetjmp(HEAP32[$403>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($404|0) == 0) { _longjmp($403|0, threwValue|0); } tempRet0 = (threwValue); } else { $404 = -1; };
      $405 = tempRet0;
      $cond1149 = ($404|0)==(1);
      if ($cond1149) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $405;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $406 = ((($pc$6)) + 4|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = $407 & 127;
      $409 = (200 + ($408<<2)|0);
      $410 = HEAP32[$409>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $410;$i$2 = $407;$pc$6 = $406;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 22:  {
      $411 = $i$2 >>> 23;
      $412 = $411 & 511;
      $413 = (($regs$5) + ($412<<3)|0);
      $414 = $i$2 >>> 7;
      $415 = $414 & 127;
      __THREW__ = 0;
      $416 = (invoke_iii(161,($mrb|0),($415|0))|0);
      $417 = __THREW__; __THREW__ = 0;
      if ((($417|0) != 0) & ((threwValue|0) != 0)) { $418 = _testSetjmp(HEAP32[$417>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($418|0) == 0) { _longjmp($417|0, threwValue|0); } tempRet0 = (threwValue); } else { $418 = -1; };
      $419 = tempRet0;
      $cond1147 = ($418|0)==(1);
      if ($cond1147) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $419;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $420 = ($416|0)!=(0|0);
      if ($420) {
       $424 = $i$2 >>> 14;
       $425 = $424 & 511;
       $426 = ((($416)) + 12|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = (($427) + ($425<<3)|0);
       ;HEAP32[$413>>2]=HEAP32[$428>>2]|0;HEAP32[$413+4>>2]=HEAP32[$428+4>>2]|0;
      } else {
       __THREW__ = 0;
       invoke_vi(162,($6|0));
       $421 = __THREW__; __THREW__ = 0;
       if ((($421|0) != 0) & ((threwValue|0) != 0)) { $422 = _testSetjmp(HEAP32[$421>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($422|0) == 0) { _longjmp($421|0, threwValue|0); } tempRet0 = (threwValue); } else { $422 = -1; };
       $423 = tempRet0;
       $cond1148 = ($422|0)==(1);
       if ($cond1148) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $423;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$413>>2]=HEAP32[$6>>2]|0;HEAP32[$413+4>>2]=HEAP32[$6+4>>2]|0;
      }
      $429 = ((($pc$6)) + 4|0);
      $430 = HEAP32[$429>>2]|0;
      $431 = $430 & 127;
      $432 = (200 + ($431<<2)|0);
      $433 = HEAP32[$432>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $433;$i$2 = $430;$pc$6 = $429;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 23:  {
      $434 = $i$2 >>> 7;
      $435 = $434 & 127;
      __THREW__ = 0;
      $436 = (invoke_iii(161,($mrb|0),($435|0))|0);
      $437 = __THREW__; __THREW__ = 0;
      if ((($437|0) != 0) & ((threwValue|0) != 0)) { $438 = _testSetjmp(HEAP32[$437>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($438|0) == 0) { _longjmp($437|0, threwValue|0); } tempRet0 = (threwValue); } else { $438 = -1; };
      $439 = tempRet0;
      $cond1145 = ($438|0)==(1);
      if ($cond1145) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $439;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $440 = ($436|0)!=(0|0);
      if ($440) {
       $441 = $i$2 >>> 23;
       $442 = $441 & 511;
       $443 = (($regs$5) + ($442<<3)|0);
       $444 = $i$2 >>> 14;
       $445 = $444 & 511;
       $446 = ((($436)) + 12|0);
       $447 = HEAP32[$446>>2]|0;
       $448 = (($447) + ($445<<3)|0);
       ;HEAP32[$448>>2]=HEAP32[$443>>2]|0;HEAP32[$448+4>>2]=HEAP32[$443+4>>2]|0;
       __THREW__ = 0;
       invoke_vii(163,($mrb|0),($436|0));
       $449 = __THREW__; __THREW__ = 0;
       if ((($449|0) != 0) & ((threwValue|0) != 0)) { $450 = _testSetjmp(HEAP32[$449>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($450|0) == 0) { _longjmp($449|0, threwValue|0); } tempRet0 = (threwValue); } else { $450 = -1; };
       $451 = tempRet0;
       $cond1146 = ($450|0)==(1);
       if ($cond1146) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $451;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      }
      $452 = ((($pc$6)) + 4|0);
      $453 = HEAP32[$452>>2]|0;
      $454 = $453 & 127;
      $455 = (200 + ($454<<2)|0);
      $456 = HEAP32[$455>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $456;$i$2 = $453;$pc$6 = $452;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 24:  {
      $457 = $i$2 >>> 7;
      $458 = $457 & 65535;
      $459 = (($458) - 32767)|0;
      $460 = (($pc$6) + ($459<<2)|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $461 & 127;
      $463 = (200 + ($462<<2)|0);
      $464 = HEAP32[$463>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $464;$i$2 = $461;$pc$6 = $460;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 25:  {
      $465 = $i$2 >>> 23;
      $466 = $465 & 511;
      $467 = (($regs$5) + ($466<<3)|0);
      $468 = ((($467)) + 4|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ($469|0)!=(0);
      if ($470) {
       $471 = $i$2 >>> 7;
       $472 = $471 & 65535;
       $473 = (($472) - 32767)|0;
       $474 = (($pc$6) + ($473<<2)|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = $475 & 127;
       $477 = (200 + ($476<<2)|0);
       $478 = HEAP32[$477>>2]|0;
       $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $478;$i$2 = $475;$pc$6 = $474;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      } else {
       $479 = ((($pc$6)) + 4|0);
       $480 = HEAP32[$479>>2]|0;
       $481 = $480 & 127;
       $482 = (200 + ($481<<2)|0);
       $483 = HEAP32[$482>>2]|0;
       $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $483;$i$2 = $480;$pc$6 = $479;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      break;
     }
     case 26:  {
      $484 = $i$2 >>> 23;
      $485 = $484 & 511;
      $486 = (($regs$5) + ($485<<3)|0);
      $487 = ((($486)) + 4|0);
      $488 = HEAP32[$487>>2]|0;
      $489 = ($488|0)!=(0);
      if ($489) {
       $498 = ((($pc$6)) + 4|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = $499 & 127;
       $501 = (200 + ($500<<2)|0);
       $502 = HEAP32[$501>>2]|0;
       $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $502;$i$2 = $499;$pc$6 = $498;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      } else {
       $490 = $i$2 >>> 7;
       $491 = $490 & 65535;
       $492 = (($491) - 32767)|0;
       $493 = (($pc$6) + ($492<<2)|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = $494 & 127;
       $496 = (200 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $497;$i$2 = $494;$pc$6 = $493;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      break;
     }
     case 27:  {
      $503 = ((($mrb)) + 12|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = ((($504)) + 32|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = ((($mrb)) + 12|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ((($508)) + 16|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = ((($510)) + 16|0);
      $512 = HEAP32[$511>>2]|0;
      $513 = ($506|0)<=($512|0);
      if ($513) {
       $514 = ((($mrb)) + 12|0);
       $515 = HEAP32[$514>>2]|0;
       $516 = ((($515)) + 32|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = ($517|0)==(0);
       $519 = ((($mrb)) + 12|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = ((($520)) + 32|0);
       if ($518) {
        HEAP32[$521>>2] = 16;
       } else {
        $522 = HEAP32[$521>>2]|0;
        $523 = $522<<1;
        HEAP32[$521>>2] = $523;
       }
       $524 = ((($mrb)) + 12|0);
       $525 = HEAP32[$524>>2]|0;
       $526 = ((($525)) + 28|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = ((($mrb)) + 12|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = ((($529)) + 32|0);
       $531 = HEAP32[$530>>2]|0;
       $532 = $531<<2;
       __THREW__ = 0;
       $533 = (invoke_iiii(164,($mrb|0),($527|0),($532|0))|0);
       $534 = __THREW__; __THREW__ = 0;
       if ((($534|0) != 0) & ((threwValue|0) != 0)) { $535 = _testSetjmp(HEAP32[$534>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($535|0) == 0) { _longjmp($534|0, threwValue|0); } tempRet0 = (threwValue); } else { $535 = -1; };
       $536 = tempRet0;
       $cond1144 = ($535|0)==(1);
       if ($cond1144) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $536;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $537 = ((($mrb)) + 12|0);
       $538 = HEAP32[$537>>2]|0;
       $539 = ((($538)) + 28|0);
       HEAP32[$539>>2] = $533;
      }
      $540 = $i$2 >>> 7;
      $541 = $540 & 65535;
      $542 = (($541) - 32767)|0;
      $543 = (($pc$6) + ($542<<2)|0);
      $544 = ((($mrb)) + 12|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ((($545)) + 16|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ((($547)) + 16|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = (($549) + 1)|0;
      HEAP32[$548>>2] = $550;
      $551 = ((($mrb)) + 12|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = ((($552)) + 28|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = (($554) + ($549<<2)|0);
      HEAP32[$555>>2] = $543;
      $556 = ((($pc$6)) + 4|0);
      $557 = HEAP32[$556>>2]|0;
      $558 = $557 & 127;
      $559 = (200 + ($558<<2)|0);
      $560 = HEAP32[$559>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $560;$i$2 = $557;$pc$6 = $556;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 28:  {
      $561 = ((($mrb)) + 20|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = HEAP32[$562>>2]|0;
      $564 = $563 & 255;
      $565 = $i$2 >>> 23;
      $566 = $565 & 511;
      $567 = (($regs$5) + ($566<<3)|0);
      $568 = ((($567)) + 4|0);
      HEAP32[$568>>2] = $564;
      $569 = ((($mrb)) + 20|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = $i$2 >>> 23;
      $572 = $571 & 511;
      $573 = (($regs$5) + ($572<<3)|0);
      HEAP32[$573>>2] = $570;
      $574 = ((($mrb)) + 20|0);
      HEAP32[$574>>2] = 0;
      $575 = ((($pc$6)) + 4|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = $576 & 127;
      $578 = (200 + ($577<<2)|0);
      $579 = HEAP32[$578>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $579;$i$2 = $576;$pc$6 = $575;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 29:  {
      $580 = $i$2 >>> 23;
      $581 = $580 & 511;
      $a7$0 = $581;
      while(1) {
       $582 = (($a7$0) + -1)|0;
       $583 = ($a7$0|0)!=(0);
       if (!($583)) {
        break;
       }
       $584 = ((($mrb)) + 12|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ((($585)) + 16|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = ((($587)) + 16|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = (($589) + -1)|0;
       HEAP32[$588>>2] = $590;
       $a7$0 = $582;
      }
      $591 = ((($pc$6)) + 4|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = $592 & 127;
      $594 = (200 + ($593<<2)|0);
      $595 = HEAP32[$594>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $595;$i$2 = $592;$pc$6 = $591;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 30:  {
      $596 = $i$2 >>> 23;
      $597 = $596 & 511;
      $598 = (($regs$5) + ($597<<3)|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = ((($mrb)) + 20|0);
      HEAP32[$600>>2] = $599;
      $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
      label = 276;
      continue L19;
      break;
     }
     case 31:  {
      $601 = $i$2 >>> 7;
      $602 = $601 & 65535;
      $603 = ((($irep$8)) + 20|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = (($604) + ($602<<2)|0);
      $606 = HEAP32[$605>>2]|0;
      __THREW__ = 0;
      $607 = (invoke_iii(165,($mrb|0),($606|0))|0);
      $608 = __THREW__; __THREW__ = 0;
      if ((($608|0) != 0) & ((threwValue|0) != 0)) { $609 = _testSetjmp(HEAP32[$608>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($609|0) == 0) { _longjmp($608|0, threwValue|0); } tempRet0 = (threwValue); } else { $609 = -1; };
      $610 = tempRet0;
      $cond1142 = ($609|0)==(1);
      if ($cond1142) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $610;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $611 = ((($mrb)) + 12|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = ((($612)) + 40|0);
      $614 = HEAP32[$613>>2]|0;
      $615 = ((($mrb)) + 12|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = ((($616)) + 16|0);
      $618 = HEAP32[$617>>2]|0;
      $619 = ((($618)) + 20|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = ($614|0)<=($620|0);
      if ($621) {
       $622 = ((($mrb)) + 12|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ((($623)) + 40|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = ($625|0)==(0);
       $627 = ((($mrb)) + 12|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ((($628)) + 40|0);
       if ($626) {
        HEAP32[$629>>2] = 16;
       } else {
        $630 = HEAP32[$629>>2]|0;
        $631 = $630<<1;
        HEAP32[$629>>2] = $631;
       }
       $632 = ((($mrb)) + 12|0);
       $633 = HEAP32[$632>>2]|0;
       $634 = ((($633)) + 36|0);
       $635 = HEAP32[$634>>2]|0;
       $636 = ((($mrb)) + 12|0);
       $637 = HEAP32[$636>>2]|0;
       $638 = ((($637)) + 40|0);
       $639 = HEAP32[$638>>2]|0;
       $640 = $639<<2;
       __THREW__ = 0;
       $641 = (invoke_iiii(164,($mrb|0),($635|0),($640|0))|0);
       $642 = __THREW__; __THREW__ = 0;
       if ((($642|0) != 0) & ((threwValue|0) != 0)) { $643 = _testSetjmp(HEAP32[$642>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($643|0) == 0) { _longjmp($642|0, threwValue|0); } tempRet0 = (threwValue); } else { $643 = -1; };
       $644 = tempRet0;
       $cond1143 = ($643|0)==(1);
       if ($cond1143) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $644;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $645 = ((($mrb)) + 12|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ((($646)) + 36|0);
       HEAP32[$647>>2] = $641;
      }
      $648 = ((($mrb)) + 12|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = ((($649)) + 16|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = ((($651)) + 20|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = (($653) + 1)|0;
      HEAP32[$652>>2] = $654;
      $655 = ((($mrb)) + 12|0);
      $656 = HEAP32[$655>>2]|0;
      $657 = ((($656)) + 36|0);
      $658 = HEAP32[$657>>2]|0;
      $659 = (($658) + ($653<<2)|0);
      HEAP32[$659>>2] = $607;
      $660 = ((($mrb)) + 92|0);
      $661 = ((($660)) + 416|0);
      HEAP32[$661>>2] = $ai$1;
      $662 = ((($pc$6)) + 4|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = $663 & 127;
      $665 = (200 + ($664<<2)|0);
      $666 = HEAP32[$665>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $666;$i$2 = $663;$pc$6 = $662;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 32:  {
      $667 = $i$2 >>> 23;
      $668 = $667 & 511;
      $669 = ((($mrb)) + 12|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = ((($670)) + 16|0);
      $672 = HEAP32[$671>>2]|0;
      $673 = ((($672)) + 20|0);
      $674 = HEAP32[$673>>2]|0;
      $eidx$0 = $674;$n$0 = 0;
      while(1) {
       $675 = ($n$0|0)<($668|0);
       if (!($675)) {
        break;
       }
       $676 = ((($mrb)) + 12|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = ((($677)) + 20|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = ($672|0)==($679|0);
       if (!($680)) {
        $681 = ((($672)) + -48|0);
        $682 = ((($681)) + 20|0);
        $683 = HEAP32[$682>>2]|0;
        $684 = ($eidx$0|0)>($683|0);
        if (!($684)) {
         break;
        }
       }
       $685 = (($eidx$0) + -1)|0;
       __THREW__ = 0;
       invoke_vii(166,($mrb|0),($685|0));
       $686 = __THREW__; __THREW__ = 0;
       if ((($686|0) != 0) & ((threwValue|0) != 0)) { $687 = _testSetjmp(HEAP32[$686>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($687|0) == 0) { _longjmp($686|0, threwValue|0); } tempRet0 = (threwValue); } else { $687 = -1; };
       $688 = tempRet0;
       $cond1141 = ($687|0)==(1);
       if ($cond1141) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $688;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $689 = ((($mrb)) + 92|0);
       $690 = ((($689)) + 416|0);
       HEAP32[$690>>2] = $ai$1;
       $691 = (($n$0) + 1)|0;
       $eidx$0 = $685;$n$0 = $691;
      }
      $692 = ((($pc$6)) + 4|0);
      $693 = HEAP32[$692>>2]|0;
      $694 = $693 & 127;
      $695 = (200 + ($694<<2)|0);
      $696 = HEAP32[$695>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $696;$i$2 = $693;$pc$6 = $692;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 33:  {
      $i$0 = $i$2;
      label = 92;
      break;
     }
     case 34:  {
      $3249 = $i$2 >>> 7;
      $3250 = $3249 & 65535;
      $3251 = (($pool$6) + ($3250<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy947>>2]=HEAP32[$3251>>2]|0;HEAP32[$$byval_copy947+4>>2]=HEAP32[$3251+4>>2]|0;
      invoke_viii(191,($msg|0),($mrb|0),($$byval_copy947|0));
      $3252 = __THREW__; __THREW__ = 0;
      if ((($3252|0) != 0) & ((threwValue|0) != 0)) { $3253 = _testSetjmp(HEAP32[$3252>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3253|0) == 0) { _longjmp($3252|0, threwValue|0); } tempRet0 = (threwValue); } else { $3253 = -1; };
      $3254 = tempRet0;
      $cond1121 = ($3253|0)==(1);
      if ($cond1121) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3254;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3255 = $i$2 >>> 23;
      $3256 = $3255 & 511;
      $3257 = ($3256|0)==(0);
      if ($3257) {
       __THREW__ = 0;
       $3258 = (invoke_iii(135,($mrb|0),(67967|0))|0);
       $3259 = __THREW__; __THREW__ = 0;
       if ((($3259|0) != 0) & ((threwValue|0) != 0)) { $3260 = _testSetjmp(HEAP32[$3259>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3260|0) == 0) { _longjmp($3259|0, threwValue|0); } tempRet0 = (threwValue); } else { $3260 = -1; };
       $3261 = tempRet0;
       $cond1124 = ($3260|0)==(1);
       if ($cond1124) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3261;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       ;HEAP32[$msg$byval_copy>>2]=HEAP32[$msg>>2]|0;HEAP32[$msg$byval_copy+4>>2]=HEAP32[$msg+4>>2]|0;
       invoke_viiii(172,($49|0),($mrb|0),($3258|0),($msg$byval_copy|0));
       $3262 = __THREW__; __THREW__ = 0;
       if ((($3262|0) != 0) & ((threwValue|0) != 0)) { $3263 = _testSetjmp(HEAP32[$3262>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3263|0) == 0) { _longjmp($3262|0, threwValue|0); } tempRet0 = (threwValue); } else { $3263 = -1; };
       $3264 = tempRet0;
       $cond1125 = ($3263|0)==(1);
       if ($cond1125) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3264;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$exc120>>2]=HEAP32[$49>>2]|0;HEAP32[$exc120+4>>2]=HEAP32[$49+4>>2]|0;
      } else {
       __THREW__ = 0;
       $3265 = (invoke_iii(135,($mrb|0),(56627|0))|0);
       $3266 = __THREW__; __THREW__ = 0;
       if ((($3266|0) != 0) & ((threwValue|0) != 0)) { $3267 = _testSetjmp(HEAP32[$3266>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3267|0) == 0) { _longjmp($3266|0, threwValue|0); } tempRet0 = (threwValue); } else { $3267 = -1; };
       $3268 = tempRet0;
       $cond1122 = ($3267|0)==(1);
       if ($cond1122) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3268;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       ;HEAP32[$msg$byval_copy948>>2]=HEAP32[$msg>>2]|0;HEAP32[$msg$byval_copy948+4>>2]=HEAP32[$msg+4>>2]|0;
       invoke_viiii(172,($50|0),($mrb|0),($3265|0),($msg$byval_copy948|0));
       $3269 = __THREW__; __THREW__ = 0;
       if ((($3269|0) != 0) & ((threwValue|0) != 0)) { $3270 = _testSetjmp(HEAP32[$3269>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3270|0) == 0) { _longjmp($3269|0, threwValue|0); } tempRet0 = (threwValue); } else { $3270 = -1; };
       $3271 = tempRet0;
       $cond1123 = ($3270|0)==(1);
       if ($cond1123) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3271;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$exc120>>2]=HEAP32[$50>>2]|0;HEAP32[$exc120+4>>2]=HEAP32[$50+4>>2]|0;
      }
      $3272 = HEAP32[$exc120>>2]|0;
      $3273 = ((($mrb)) + 20|0);
      HEAP32[$3273>>2] = $3272;
      $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
      label = 276;
      continue L19;
      break;
     }
     case 35:  {
      $906 = ((($pc$6)) + 4|0);
      $907 = HEAP32[$906>>2]|0;
      $908 = $907 & 127;
      $909 = (200 + ($908<<2)|0);
      $910 = HEAP32[$909>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $910;$i$2 = $907;$pc$6 = $906;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 36:  {
      $911 = ((($mrb)) + 12|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = ((($912)) + 4|0);
      $914 = HEAP32[$913>>2]|0;
      ;HEAP32[$recv14>>2]=HEAP32[$914>>2]|0;HEAP32[$recv14+4>>2]=HEAP32[$914+4>>2]|0;
      $915 = HEAP32[$recv14>>2]|0;
      $916 = ((($mrb)) + 12|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = ((($917)) + 16|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = ((($915)) + 16|0);
      $921 = HEAP32[$920>>2]|0;
      $922 = ((($919)) + 44|0);
      HEAP32[$922>>2] = $921;
      $923 = ((($919)) + 4|0);
      HEAP32[$923>>2] = $915;
      $924 = ((($915)) + 20|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = ($925|0)!=(0|0);
      if ($926) {
       $927 = ((($915)) + 20|0);
       $928 = HEAP32[$927>>2]|0;
       $929 = ((($928)) + 16|0);
       $930 = HEAP32[$929>>2]|0;
       $931 = ($930|0)!=(0);
       if ($931) {
        $932 = ((($915)) + 20|0);
        $933 = HEAP32[$932>>2]|0;
        $934 = ((($933)) + 16|0);
        $935 = HEAP32[$934>>2]|0;
        HEAP32[$919>>2] = $935;
       }
       $936 = ((($915)) + 20|0);
       $937 = HEAP32[$936>>2]|0;
       $938 = ((($937)) + 12|0);
       $939 = HEAP32[$938>>2]|0;
       $940 = ($939|0)!=(0|0);
       if (!($940)) {
        $941 = ((($mrb)) + 12|0);
        $942 = HEAP32[$941>>2]|0;
        $943 = ((($942)) + 4|0);
        $944 = HEAP32[$943>>2]|0;
        $945 = ((($915)) + 20|0);
        $946 = HEAP32[$945>>2]|0;
        $947 = ((($946)) + 12|0);
        HEAP32[$947>>2] = $944;
       }
      }
      $948 = HEAP32[$915>>2]|0;
      $949 = $948 >>> 11;
      $950 = $949 & 128;
      $951 = ($950|0)!=(0);
      if ($951) {
       $952 = ((($915)) + 12|0);
       $953 = HEAP32[$952>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$recv14$byval_copy>>2]=HEAP32[$recv14>>2]|0;HEAP32[$recv14$byval_copy+4>>2]=HEAP32[$recv14+4>>2]|0;
       invoke_viii($953|0,($10|0),($mrb|0),($recv14$byval_copy|0));
       $954 = __THREW__; __THREW__ = 0;
       if ((($954|0) != 0) & ((threwValue|0) != 0)) { $955 = _testSetjmp(HEAP32[$954>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($955|0) == 0) { _longjmp($954|0, threwValue|0); } tempRet0 = (threwValue); } else { $955 = -1; };
       $956 = tempRet0;
       $cond1118 = ($955|0)==(1);
       if ($cond1118) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $956;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$recv14>>2]=HEAP32[$10>>2]|0;HEAP32[$recv14+4>>2]=HEAP32[$10+4>>2]|0;
       __THREW__ = 0;
       invoke_vii(146,($mrb|0),($ai$1|0));
       $957 = __THREW__; __THREW__ = 0;
       if ((($957|0) != 0) & ((threwValue|0) != 0)) { $958 = _testSetjmp(HEAP32[$957>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($958|0) == 0) { _longjmp($957|0, threwValue|0); } tempRet0 = (threwValue); } else { $958 = -1; };
       $959 = tempRet0;
       $cond1119 = ($958|0)==(1);
       if ($cond1119) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $959;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $960 = ((($mrb)) + 20|0);
       $961 = HEAP32[$960>>2]|0;
       $962 = ($961|0)!=(0|0);
       if ($962) {
        $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
       $963 = ((($mrb)) + 12|0);
       $964 = HEAP32[$963>>2]|0;
       $965 = ((($964)) + 16|0);
       $966 = HEAP32[$965>>2]|0;
       $967 = ((($966)) + 8|0);
       $968 = HEAP32[$967>>2]|0;
       $969 = ((($mrb)) + 12|0);
       $970 = HEAP32[$969>>2]|0;
       $971 = ((($970)) + 4|0);
       HEAP32[$971>>2] = $968;
       $972 = ((($966)) + 40|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = (($968) + ($973<<3)|0);
       ;HEAP32[$974>>2]=HEAP32[$recv14>>2]|0;HEAP32[$974+4>>2]=HEAP32[$recv14+4>>2]|0;
       $975 = ((($966)) + 28|0);
       $976 = HEAP32[$975>>2]|0;
       __THREW__ = 0;
       invoke_vi(132,($mrb|0));
       $977 = __THREW__; __THREW__ = 0;
       if ((($977|0) != 0) & ((threwValue|0) != 0)) { $978 = _testSetjmp(HEAP32[$977>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($978|0) == 0) { _longjmp($977|0, threwValue|0); } tempRet0 = (threwValue); } else { $978 = -1; };
       $979 = tempRet0;
       $cond1120 = ($978|0)==(1);
       if ($cond1120) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $979;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $976;$pool$1 = $pool$6;$regs$1 = $968;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $980 = ((($mrb)) + 12|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = ((($981)) + 16|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = ((($983)) + 4|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = ((($985)) + 12|0);
       $987 = HEAP32[$986>>2]|0;
       $988 = ((($987)) + 12|0);
       $989 = HEAP32[$988>>2]|0;
       $990 = ((($987)) + 16|0);
       $991 = HEAP32[$990>>2]|0;
       $992 = HEAP32[$976>>2]|0;
       $993 = $992 & 127;
       $994 = (200 + ($993<<2)|0);
       $995 = HEAP32[$994>>2]|0;
       $exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $995;$i$2 = $992;$irep$8 = $987;$pc$6 = $976;$pool$6 = $989;$regs$5 = $968;$syms$6 = $991;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      $996 = ((($915)) + 12|0);
      $997 = HEAP32[$996>>2]|0;
      $998 = ($997|0)!=(0|0);
      if (!($998)) {
       $999 = ((($mrb)) + 12|0);
       $1000 = HEAP32[$999>>2]|0;
       $1001 = ((($1000)) + 4|0);
       $1002 = HEAP32[$1001>>2]|0;
       __THREW__ = 0;
       invoke_vi(162,($11|0));
       $1003 = __THREW__; __THREW__ = 0;
       if ((($1003|0) != 0) & ((threwValue|0) != 0)) { $1004 = _testSetjmp(HEAP32[$1003>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1004|0) == 0) { _longjmp($1003|0, threwValue|0); } tempRet0 = (threwValue); } else { $1004 = -1; };
       $1005 = tempRet0;
       $cond1115 = ($1004|0)==(1);
       if ($cond1115) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $915;$$reg2mem899$0 = $1005;$exc_catched$1 = $exc_catched$5;$irep$1 = $997;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$1002>>2]=HEAP32[$11>>2]|0;HEAP32[$1002+4>>2]=HEAP32[$11+4>>2]|0;
       $$3 = $915;$irep$3 = $997;
       label = 274;
       break L50;
      }
      $1006 = ((($997)) + 12|0);
      $1007 = HEAP32[$1006>>2]|0;
      $1008 = ((($997)) + 16|0);
      $1009 = HEAP32[$1008>>2]|0;
      $1010 = ((($997)) + 2|0);
      $1011 = HEAP16[$1010>>1]|0;
      $1012 = $1011&65535;
      $1013 = ((($919)) + 12|0);
      HEAP32[$1013>>2] = $1012;
      $1014 = ((($919)) + 36|0);
      $1015 = HEAP32[$1014>>2]|0;
      $1016 = ($1015|0)<(0);
      $1017 = ((($997)) + 2|0);
      $1018 = HEAP16[$1017>>1]|0;
      $1019 = $1018&65535;
      if ($1016) {
       $1020 = ($1019|0)<(3);
       if ($1020) {
        $$reg2mem895$0 = 3;
       } else {
        $1021 = ((($997)) + 2|0);
        $1022 = HEAP16[$1021>>1]|0;
        $1023 = $1022&65535;
        $$reg2mem895$0 = $1023;
       }
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($$reg2mem895$0|0),3);
       $1024 = __THREW__; __THREW__ = 0;
       if ((($1024|0) != 0) & ((threwValue|0) != 0)) { $1025 = _testSetjmp(HEAP32[$1024>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1025|0) == 0) { _longjmp($1024|0, threwValue|0); } tempRet0 = (threwValue); } else { $1025 = -1; };
       $1026 = tempRet0;
       $cond1117 = ($1025|0)==(1);
       if ($cond1117) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $915;$$reg2mem899$0 = $1026;$exc_catched$1 = $exc_catched$5;$irep$1 = $997;$pc$1 = $pc$6;$pool$1 = $1007;$regs$1 = $regs$5;$syms$1 = $1009;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      } else {
       $1027 = ((($919)) + 36|0);
       $1028 = HEAP32[$1027>>2]|0;
       $1029 = (($1028) + 2)|0;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($1019|0),($1029|0));
       $1030 = __THREW__; __THREW__ = 0;
       if ((($1030|0) != 0) & ((threwValue|0) != 0)) { $1031 = _testSetjmp(HEAP32[$1030>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1031|0) == 0) { _longjmp($1030|0, threwValue|0); } tempRet0 = (threwValue); } else { $1031 = -1; };
       $1032 = tempRet0;
       $cond1116 = ($1031|0)==(1);
       if ($cond1116) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $915;$$reg2mem899$0 = $1032;$exc_catched$1 = $exc_catched$5;$irep$1 = $997;$pc$1 = $pc$6;$pool$1 = $1007;$regs$1 = $regs$5;$syms$1 = $1009;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      }
      $1033 = ((($mrb)) + 12|0);
      $1034 = HEAP32[$1033>>2]|0;
      $1035 = ((($1034)) + 4|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = ((($915)) + 20|0);
      $1038 = HEAP32[$1037>>2]|0;
      $1039 = ((($1038)) + 12|0);
      $1040 = HEAP32[$1039>>2]|0;
      ;HEAP32[$1036>>2]=HEAP32[$1040>>2]|0;HEAP32[$1036+4>>2]=HEAP32[$1040+4>>2]|0;
      $1041 = ((($997)) + 8|0);
      $1042 = HEAP32[$1041>>2]|0;
      $1043 = HEAP32[$1042>>2]|0;
      $1044 = $1043 & 127;
      $1045 = (200 + ($1044<<2)|0);
      $1046 = HEAP32[$1045>>2]|0;
      $exc_catched$5$phi = $exc_catched$5;$$8 = $915;$$reg2mem887$0 = $1046;$i$2 = $1043;$irep$8 = $997;$pc$6 = $1042;$pool$6 = $1007;$regs$5 = $1036;$syms$6 = $1009;$exc_catched$5 = $exc_catched$5$phi;
      label = 590;
      continue L19;
      break;
     }
     case 37:  {
      $1047 = ((($mrb)) + 12|0);
      $1048 = HEAP32[$1047>>2]|0;
      $1049 = ((($1048)) + 16|0);
      $1050 = HEAP32[$1049>>2]|0;
      $1051 = HEAP32[$1050>>2]|0;
      $1052 = $i$2 >>> 23;
      $1053 = $1052 & 511;
      $1054 = $i$2 >>> 7;
      $1055 = $1054 & 127;
      $1056 = ($1051|0)==(0);
      if ($1056) {
       __THREW__ = 0;
       $1057 = (invoke_iii(135,($mrb|0),(67669|0))|0);
       $1058 = __THREW__; __THREW__ = 0;
       if ((($1058|0) != 0) & ((threwValue|0) != 0)) { $1059 = _testSetjmp(HEAP32[$1058>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1059|0) == 0) { _longjmp($1058|0, threwValue|0); } tempRet0 = (threwValue); } else { $1059 = -1; };
       $1060 = tempRet0;
       $cond1112 = ($1059|0)==(1);
       if ($cond1112) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1060;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       invoke_viiii(171,($12|0),($mrb|0),(56470|0),30);
       $1061 = __THREW__; __THREW__ = 0;
       if ((($1061|0) != 0) & ((threwValue|0) != 0)) { $1062 = _testSetjmp(HEAP32[$1061>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1062|0) == 0) { _longjmp($1061|0, threwValue|0); } tempRet0 = (threwValue); } else { $1062 = -1; };
       $1063 = tempRet0;
       $cond1113 = ($1062|0)==(1);
       if ($cond1113) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1063;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       ;HEAP32[$$byval_copy913>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy913+4>>2]=HEAP32[$12+4>>2]|0;
       invoke_viiii(172,($13|0),($mrb|0),($1057|0),($$byval_copy913|0));
       $1064 = __THREW__; __THREW__ = 0;
       if ((($1064|0) != 0) & ((threwValue|0) != 0)) { $1065 = _testSetjmp(HEAP32[$1064>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1065|0) == 0) { _longjmp($1064|0, threwValue|0); } tempRet0 = (threwValue); } else { $1065 = -1; };
       $1066 = tempRet0;
       $cond1114 = ($1065|0)==(1);
       if ($cond1114) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1066;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$exc>>2]=HEAP32[$13>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$13+4>>2]|0;
       $1067 = HEAP32[$exc>>2]|0;
       $1068 = ((($mrb)) + 20|0);
       HEAP32[$1068>>2] = $1067;
       $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
       label = 276;
       continue L19;
      }
      ;HEAP32[$recv16>>2]=HEAP32[$regs$5>>2]|0;HEAP32[$recv16+4>>2]=HEAP32[$regs$5+4>>2]|0;
      $1069 = ((($mrb)) + 12|0);
      $1070 = HEAP32[$1069>>2]|0;
      $1071 = ((($1070)) + 16|0);
      $1072 = HEAP32[$1071>>2]|0;
      $1073 = ((($1072)) + 44|0);
      $1074 = HEAP32[$1073>>2]|0;
      $1075 = ((($1074)) + 20|0);
      $1076 = HEAP32[$1075>>2]|0;
      HEAP32[$c19>>2] = $1076;
      __THREW__ = 0;
      $1077 = (invoke_iiii(139,($mrb|0),($c19|0),($1051|0))|0);
      $1078 = __THREW__; __THREW__ = 0;
      if ((($1078|0) != 0) & ((threwValue|0) != 0)) { $1079 = _testSetjmp(HEAP32[$1078>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1079|0) == 0) { _longjmp($1078|0, threwValue|0); } tempRet0 = (threwValue); } else { $1079 = -1; };
      $1080 = tempRet0;
      $cond1100 = ($1079|0)==(1);
      if ($cond1100) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1080;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $1081 = ($1077|0)!=(0|0);
      do {
       if ($1081) {
        $m18$0 = $1077;$mid20$0 = $1051;$n22$0 = $1055;
       } else {
        __THREW__ = 0;
        $1082 = (invoke_iiii(140,($mrb|0),(65322|0),14)|0);
        $1083 = __THREW__; __THREW__ = 0;
        if ((($1083|0) != 0) & ((threwValue|0) != 0)) { $1084 = _testSetjmp(HEAP32[$1083>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1084|0) == 0) { _longjmp($1083|0, threwValue|0); } tempRet0 = (threwValue); } else { $1084 = -1; };
        $1085 = tempRet0;
        $cond1101 = ($1084|0)==(1);
        if ($cond1101) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1085;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        $1086 = (invoke_iiii(139,($mrb|0),($c19|0),($1082|0))|0);
        $1087 = __THREW__; __THREW__ = 0;
        if ((($1087|0) != 0) & ((threwValue|0) != 0)) { $1088 = _testSetjmp(HEAP32[$1087>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1088|0) == 0) { _longjmp($1087|0, threwValue|0); } tempRet0 = (threwValue); } else { $1088 = -1; };
        $1089 = tempRet0;
        $cond1102 = ($1088|0)==(1);
        if ($cond1102) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1089;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $1090 = ($1055|0)==(127);
        if (!($1090)) {
         $1100 = (($regs$5) + ($1053<<3)|0);
         $1101 = ((($1100)) + 16|0);
         $1102 = (($regs$5) + ($1053<<3)|0);
         $1103 = ((($1102)) + 8|0);
         $1104 = (($1055) + 1)|0;
         __THREW__ = 0;
         invoke_viii(170,($1101|0),($1103|0),($1104|0));
         $1105 = __THREW__; __THREW__ = 0;
         if ((($1105|0) != 0) & ((threwValue|0) != 0)) { $1106 = _testSetjmp(HEAP32[$1105>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1106|0) == 0) { _longjmp($1105|0, threwValue|0); } tempRet0 = (threwValue); } else { $1106 = -1; };
         $1107 = tempRet0;
         $cond1103 = ($1106|0)==(1);
         if ($cond1103) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1107;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         $1108 = (($1053) + 1)|0;
         $1109 = (($regs$5) + ($1108<<3)|0);
         $1110 = ((($1109)) + 4|0);
         HEAP32[$1110>>2] = 4;
         $1111 = HEAP32[$1050>>2]|0;
         $1112 = (($1053) + 1)|0;
         $1113 = (($regs$5) + ($1112<<3)|0);
         HEAP32[$1113>>2] = $1111;
         $m18$0 = $1086;$mid20$0 = $1082;$n22$0 = $1104;
         break;
        }
        $1091 = (($1053) + 1)|0;
        $1092 = (($regs$5) + ($1091<<3)|0);
        $1093 = HEAP32[$1050>>2]|0;
        __THREW__ = 0;
        invoke_vii(143,($14|0),($1093|0));
        $1094 = __THREW__; __THREW__ = 0;
        if ((($1094|0) != 0) & ((threwValue|0) != 0)) { $1095 = _testSetjmp(HEAP32[$1094>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1095|0) == 0) { _longjmp($1094|0, threwValue|0); } tempRet0 = (threwValue); } else { $1095 = -1; };
        $1096 = tempRet0;
        $cond1104 = ($1095|0)==(1);
        if ($cond1104) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1096;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        ;HEAP32[$$byval_copy914>>2]=HEAP32[$1092>>2]|0;HEAP32[$$byval_copy914+4>>2]=HEAP32[$1092+4>>2]|0;
        ;HEAP32[$$byval_copy915>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy915+4>>2]=HEAP32[$14+4>>2]|0;
        invoke_viiii(169,($15|0),($mrb|0),($$byval_copy914|0),($$byval_copy915|0));
        $1097 = __THREW__; __THREW__ = 0;
        if ((($1097|0) != 0) & ((threwValue|0) != 0)) { $1098 = _testSetjmp(HEAP32[$1097>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1098|0) == 0) { _longjmp($1097|0, threwValue|0); } tempRet0 = (threwValue); } else { $1098 = -1; };
        $1099 = tempRet0;
        $cond1105 = ($1098|0)==(1);
        if ($cond1105) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1099;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $m18$0 = $1086;$mid20$0 = $1082;$n22$0 = $1055;
       }
      } while(0);
      __THREW__ = 0;
      $1114 = (invoke_ii(141,($mrb|0))|0);
      $1115 = __THREW__; __THREW__ = 0;
      if ((($1115|0) != 0) & ((threwValue|0) != 0)) { $1116 = _testSetjmp(HEAP32[$1115>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1116|0) == 0) { _longjmp($1115|0, threwValue|0); } tempRet0 = (threwValue); } else { $1116 = -1; };
      $1117 = tempRet0;
      $cond1106 = ($1116|0)==(1);
      if ($cond1106) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1117;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      HEAP32[$1114>>2] = $mid20$0;
      $1118 = ((($1114)) + 4|0);
      HEAP32[$1118>>2] = $m18$0;
      $1119 = ((($mrb)) + 12|0);
      $1120 = HEAP32[$1119>>2]|0;
      $1121 = ((($1120)) + 4|0);
      $1122 = HEAP32[$1121>>2]|0;
      $1123 = ((($1114)) + 8|0);
      HEAP32[$1123>>2] = $1122;
      $1124 = ($n22$0|0)==(127);
      if ($1124) {
       $1125 = ((($1114)) + 36|0);
       HEAP32[$1125>>2] = -1;
      } else {
       $1126 = ((($1114)) + 36|0);
       HEAP32[$1126>>2] = $n22$0;
      }
      $1127 = HEAP32[$c19>>2]|0;
      $1128 = ((($1114)) + 44|0);
      HEAP32[$1128>>2] = $1127;
      $1129 = ((($pc$6)) + 4|0);
      $1130 = ((($1114)) + 28|0);
      HEAP32[$1130>>2] = $1129;
      $1131 = ((($mrb)) + 12|0);
      $1132 = HEAP32[$1131>>2]|0;
      $1133 = ((($1132)) + 4|0);
      $1134 = HEAP32[$1133>>2]|0;
      $1135 = (($1134) + ($1053<<3)|0);
      HEAP32[$1133>>2] = $1135;
      $1136 = ((($mrb)) + 12|0);
      $1137 = HEAP32[$1136>>2]|0;
      $1138 = ((($1137)) + 4|0);
      $1139 = HEAP32[$1138>>2]|0;
      ;HEAP32[$1139>>2]=HEAP32[$recv16>>2]|0;HEAP32[$1139+4>>2]=HEAP32[$recv16+4>>2]|0;
      $1140 = HEAP32[$m18$0>>2]|0;
      $1141 = $1140 >>> 11;
      $1142 = $1141 & 128;
      $1143 = ($1142|0)!=(0);
      if ($1143) {
       $1144 = ($n22$0|0)==(127);
       if ($1144) {
        $1145 = ((($1114)) + 12|0);
        HEAP32[$1145>>2] = 3;
       } else {
        $1146 = (($n22$0) + 2)|0;
        $1147 = ((($1114)) + 12|0);
        HEAP32[$1147>>2] = $1146;
       }
       $1148 = ((($mrb)) + 12|0);
       $1149 = HEAP32[$1148>>2]|0;
       $1150 = ((($1149)) + 4|0);
       $1151 = HEAP32[$1150>>2]|0;
       $1152 = ((($m18$0)) + 12|0);
       $1153 = HEAP32[$1152>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$recv16$byval_copy>>2]=HEAP32[$recv16>>2]|0;HEAP32[$recv16$byval_copy+4>>2]=HEAP32[$recv16+4>>2]|0;
       invoke_viii($1153|0,($16|0),($mrb|0),($recv16$byval_copy|0));
       $1154 = __THREW__; __THREW__ = 0;
       if ((($1154|0) != 0) & ((threwValue|0) != 0)) { $1155 = _testSetjmp(HEAP32[$1154>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1155|0) == 0) { _longjmp($1154|0, threwValue|0); } tempRet0 = (threwValue); } else { $1155 = -1; };
       $1156 = tempRet0;
       $cond1109 = ($1155|0)==(1);
       if ($cond1109) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1156;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$1151>>2]=HEAP32[$16>>2]|0;HEAP32[$1151+4>>2]=HEAP32[$16+4>>2]|0;
       __THREW__ = 0;
       invoke_vii(146,($mrb|0),($ai$1|0));
       $1157 = __THREW__; __THREW__ = 0;
       if ((($1157|0) != 0) & ((threwValue|0) != 0)) { $1158 = _testSetjmp(HEAP32[$1157>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1158|0) == 0) { _longjmp($1157|0, threwValue|0); } tempRet0 = (threwValue); } else { $1158 = -1; };
       $1159 = tempRet0;
       $cond1110 = ($1158|0)==(1);
       if ($cond1110) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1159;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $1160 = ((($mrb)) + 20|0);
       $1161 = HEAP32[$1160>>2]|0;
       $1162 = ($1161|0)!=(0|0);
       if ($1162) {
        $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
       $1163 = ((($mrb)) + 12|0);
       $1164 = HEAP32[$1163>>2]|0;
       $1165 = ((($1164)) + 16|0);
       $1166 = HEAP32[$1165>>2]|0;
       $1167 = ((($1166)) + 8|0);
       $1168 = HEAP32[$1167>>2]|0;
       $1169 = ((($mrb)) + 12|0);
       $1170 = HEAP32[$1169>>2]|0;
       $1171 = ((($1170)) + 4|0);
       HEAP32[$1171>>2] = $1168;
       __THREW__ = 0;
       invoke_vi(132,($mrb|0));
       $1172 = __THREW__; __THREW__ = 0;
       if ((($1172|0) != 0) & ((threwValue|0) != 0)) { $1173 = _testSetjmp(HEAP32[$1172>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1173|0) == 0) { _longjmp($1172|0, threwValue|0); } tempRet0 = (threwValue); } else { $1173 = -1; };
       $1174 = tempRet0;
       $cond1111 = ($1173|0)==(1);
       if ($cond1111) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1174;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $1168;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $1175 = ((($pc$6)) + 4|0);
       $1176 = HEAP32[$1175>>2]|0;
       $1177 = $1176 & 127;
       $1178 = (200 + ($1177<<2)|0);
       $1179 = HEAP32[$1178>>2]|0;
       $syms$6$phi = $syms$6;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1179;$i$2 = $1176;$pc$6 = $1175;$regs$5 = $1168;$syms$6 = $syms$6$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      } else {
       $1180 = ((($1114)) + 40|0);
       HEAP32[$1180>>2] = $1053;
       $1181 = ((($1114)) + 4|0);
       HEAP32[$1181>>2] = $m18$0;
       $1182 = ((($m18$0)) + 12|0);
       $1183 = HEAP32[$1182>>2]|0;
       $1184 = ((($1183)) + 12|0);
       $1185 = HEAP32[$1184>>2]|0;
       $1186 = ((($1183)) + 16|0);
       $1187 = HEAP32[$1186>>2]|0;
       $1188 = ((($1183)) + 2|0);
       $1189 = HEAP16[$1188>>1]|0;
       $1190 = $1189&65535;
       $1191 = ((($1114)) + 12|0);
       HEAP32[$1191>>2] = $1190;
       $1192 = ($n22$0|0)==(127);
       $1193 = ((($1183)) + 2|0);
       $1194 = HEAP16[$1193>>1]|0;
       $1195 = $1194&65535;
       if ($1192) {
        $1196 = ($1195|0)<(3);
        if ($1196) {
         $$reg2mem893$0 = 3;
        } else {
         $1197 = ((($1183)) + 2|0);
         $1198 = HEAP16[$1197>>1]|0;
         $1199 = $1198&65535;
         $$reg2mem893$0 = $1199;
        }
        __THREW__ = 0;
        invoke_viii(142,($mrb|0),($$reg2mem893$0|0),3);
        $1200 = __THREW__; __THREW__ = 0;
        if ((($1200|0) != 0) & ((threwValue|0) != 0)) { $1201 = _testSetjmp(HEAP32[$1200>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1201|0) == 0) { _longjmp($1200|0, threwValue|0); } tempRet0 = (threwValue); } else { $1201 = -1; };
        $1202 = tempRet0;
        $cond1108 = ($1201|0)==(1);
        if ($cond1108) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1202;$exc_catched$1 = $exc_catched$5;$irep$1 = $1183;$pc$1 = $pc$6;$pool$1 = $1185;$regs$1 = $regs$5;$syms$1 = $1187;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       } else {
        $1203 = ((($1114)) + 36|0);
        $1204 = HEAP32[$1203>>2]|0;
        $1205 = (($1204) + 2)|0;
        __THREW__ = 0;
        invoke_viii(142,($mrb|0),($1195|0),($1205|0));
        $1206 = __THREW__; __THREW__ = 0;
        if ((($1206|0) != 0) & ((threwValue|0) != 0)) { $1207 = _testSetjmp(HEAP32[$1206>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1207|0) == 0) { _longjmp($1206|0, threwValue|0); } tempRet0 = (threwValue); } else { $1207 = -1; };
        $1208 = tempRet0;
        $cond1107 = ($1207|0)==(1);
        if ($cond1107) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1208;$exc_catched$1 = $exc_catched$5;$irep$1 = $1183;$pc$1 = $pc$6;$pool$1 = $1185;$regs$1 = $regs$5;$syms$1 = $1187;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       }
       $1209 = ((($mrb)) + 12|0);
       $1210 = HEAP32[$1209>>2]|0;
       $1211 = ((($1210)) + 4|0);
       $1212 = HEAP32[$1211>>2]|0;
       $1213 = ((($1183)) + 8|0);
       $1214 = HEAP32[$1213>>2]|0;
       $1215 = HEAP32[$1214>>2]|0;
       $1216 = $1215 & 127;
       $1217 = (200 + ($1216<<2)|0);
       $1218 = HEAP32[$1217>>2]|0;
       $exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1218;$i$2 = $1215;$irep$8 = $1183;$pc$6 = $1214;$pool$6 = $1185;$regs$5 = $1212;$syms$6 = $1187;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      break;
     }
     case 38:  {
      $1219 = $i$2 >>> 23;
      $1220 = $1219 & 511;
      $1221 = $i$2 >>> 7;
      $1222 = $1221 & 65535;
      $1223 = $1222 >> 10;
      $1224 = $1223 & 63;
      $1225 = $1222 >> 9;
      $1226 = $1225 & 1;
      $1227 = $1222 >> 4;
      $1228 = $1227 & 31;
      $1229 = $1222 >> 0;
      $1230 = $1229 & 15;
      $1231 = ($1230|0)==(0);
      do {
       if ($1231) {
        $1232 = ((($regs$5)) + 8|0);
        $stack$0 = $1232;
       } else {
        $1233 = (($1230) - 1)|0;
        __THREW__ = 0;
        $1234 = (invoke_iii(161,($mrb|0),($1233|0))|0);
        $1235 = __THREW__; __THREW__ = 0;
        if ((($1235|0) != 0) & ((threwValue|0) != 0)) { $1236 = _testSetjmp(HEAP32[$1235>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1236|0) == 0) { _longjmp($1235|0, threwValue|0); } tempRet0 = (threwValue); } else { $1236 = -1; };
        $1237 = tempRet0;
        $cond1091 = ($1236|0)==(1);
        if ($cond1091) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1237;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $1238 = ($1234|0)!=(0|0);
        if ($1238) {
         $1251 = ((($1234)) + 12|0);
         $1252 = HEAP32[$1251>>2]|0;
         $1253 = ((($1252)) + 8|0);
         $stack$0 = $1253;
         break;
        }
        __THREW__ = 0;
        $1239 = (invoke_iii(135,($mrb|0),(67669|0))|0);
        $1240 = __THREW__; __THREW__ = 0;
        if ((($1240|0) != 0) & ((threwValue|0) != 0)) { $1241 = _testSetjmp(HEAP32[$1240>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1241|0) == 0) { _longjmp($1240|0, threwValue|0); } tempRet0 = (threwValue); } else { $1241 = -1; };
        $1242 = tempRet0;
        $cond1092 = ($1241|0)==(1);
        if ($cond1092) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1242;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        invoke_viiii(171,($17|0),($mrb|0),(56470|0),30);
        $1243 = __THREW__; __THREW__ = 0;
        if ((($1243|0) != 0) & ((threwValue|0) != 0)) { $1244 = _testSetjmp(HEAP32[$1243>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1244|0) == 0) { _longjmp($1243|0, threwValue|0); } tempRet0 = (threwValue); } else { $1244 = -1; };
        $1245 = tempRet0;
        $cond1093 = ($1244|0)==(1);
        if ($cond1093) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1245;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        ;HEAP32[$$byval_copy916>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy916+4>>2]=HEAP32[$17+4>>2]|0;
        invoke_viiii(172,($18|0),($mrb|0),($1239|0),($$byval_copy916|0));
        $1246 = __THREW__; __THREW__ = 0;
        if ((($1246|0) != 0) & ((threwValue|0) != 0)) { $1247 = _testSetjmp(HEAP32[$1246>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1247|0) == 0) { _longjmp($1246|0, threwValue|0); } tempRet0 = (threwValue); } else { $1247 = -1; };
        $1248 = tempRet0;
        $cond1094 = ($1247|0)==(1);
        if ($cond1094) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1248;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$exc25>>2]=HEAP32[$18>>2]|0;HEAP32[$exc25+4>>2]=HEAP32[$18+4>>2]|0;
        $1249 = HEAP32[$exc25>>2]|0;
        $1250 = ((($mrb)) + 20|0);
        HEAP32[$1250>>2] = $1249;
        $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
      } while(0);
      $1254 = ($1226|0)==(0);
      if ($1254) {
       $1255 = (($regs$5) + ($1220<<3)|0);
       $1256 = (($1224) + ($1228))|0;
       __THREW__ = 0;
       invoke_viiii(167,($19|0),($mrb|0),($1256|0),($stack$0|0));
       $1257 = __THREW__; __THREW__ = 0;
       if ((($1257|0) != 0) & ((threwValue|0) != 0)) { $1258 = _testSetjmp(HEAP32[$1257>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1258|0) == 0) { _longjmp($1257|0, threwValue|0); } tempRet0 = (threwValue); } else { $1258 = -1; };
       $1259 = tempRet0;
       $cond1099 = ($1258|0)==(1);
       if ($cond1099) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1259;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$1255>>2]=HEAP32[$19>>2]|0;HEAP32[$1255+4>>2]=HEAP32[$19+4>>2]|0;
      } else {
       $1260 = (($stack$0) + ($1224<<3)|0);
       $1261 = ((($1260)) + 4|0);
       $1262 = HEAP32[$1261>>2]|0;
       $1263 = ($1262|0)==(14);
       if ($1263) {
        $1264 = (($stack$0) + ($1224<<3)|0);
        $1265 = HEAP32[$1264>>2]|0;
        $1266 = ((($1265)) + 20|0);
        $1267 = HEAP32[$1266>>2]|0;
        $1268 = ((($1265)) + 12|0);
        $1269 = HEAP32[$1268>>2]|0;
        $len$0 = $1269;$pp$0 = $1267;
       } else {
        $len$0 = 0;$pp$0 = 0;
       }
       $1270 = (($regs$5) + ($1220<<3)|0);
       $1271 = (($1224) + ($len$0))|0;
       $1272 = (($1271) + ($1228))|0;
       __THREW__ = 0;
       invoke_viii(173,($20|0),($mrb|0),($1272|0));
       $1273 = __THREW__; __THREW__ = 0;
       if ((($1273|0) != 0) & ((threwValue|0) != 0)) { $1274 = _testSetjmp(HEAP32[$1273>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1274|0) == 0) { _longjmp($1273|0, threwValue|0); } tempRet0 = (threwValue); } else { $1274 = -1; };
       $1275 = tempRet0;
       $cond1095 = ($1274|0)==(1);
       if ($cond1095) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1275;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$1270>>2]=HEAP32[$20>>2]|0;HEAP32[$1270+4>>2]=HEAP32[$20+4>>2]|0;
       $1276 = (($regs$5) + ($1220<<3)|0);
       $1277 = HEAP32[$1276>>2]|0;
       $1278 = ($1224|0)>(0);
       if ($1278) {
        $1279 = ((($1277)) + 20|0);
        $1280 = HEAP32[$1279>>2]|0;
        __THREW__ = 0;
        invoke_viii(144,($1280|0),($stack$0|0),($1224|0));
        $1281 = __THREW__; __THREW__ = 0;
        if ((($1281|0) != 0) & ((threwValue|0) != 0)) { $1282 = _testSetjmp(HEAP32[$1281>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1282|0) == 0) { _longjmp($1281|0, threwValue|0); } tempRet0 = (threwValue); } else { $1282 = -1; };
        $1283 = tempRet0;
        $cond1098 = ($1282|0)==(1);
        if ($cond1098) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1283;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       }
       $1284 = ($len$0|0)>(0);
       if ($1284) {
        $1285 = ((($1277)) + 20|0);
        $1286 = HEAP32[$1285>>2]|0;
        $1287 = (($1286) + ($1224<<3)|0);
        __THREW__ = 0;
        invoke_viii(144,($1287|0),($pp$0|0),($len$0|0));
        $1288 = __THREW__; __THREW__ = 0;
        if ((($1288|0) != 0) & ((threwValue|0) != 0)) { $1289 = _testSetjmp(HEAP32[$1288>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1289|0) == 0) { _longjmp($1288|0, threwValue|0); } tempRet0 = (threwValue); } else { $1289 = -1; };
        $1290 = tempRet0;
        $cond1097 = ($1289|0)==(1);
        if ($cond1097) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1290;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       }
       $1291 = ($1228|0)>(0);
       if ($1291) {
        $1292 = ((($1277)) + 20|0);
        $1293 = HEAP32[$1292>>2]|0;
        $1294 = (($1293) + ($1224<<3)|0);
        $1295 = (($1294) + ($len$0<<3)|0);
        $1296 = (($stack$0) + ($1224<<3)|0);
        $1297 = ((($1296)) + 8|0);
        __THREW__ = 0;
        invoke_viii(144,($1295|0),($1297|0),($1228|0));
        $1298 = __THREW__; __THREW__ = 0;
        if ((($1298|0) != 0) & ((threwValue|0) != 0)) { $1299 = _testSetjmp(HEAP32[$1298>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1299|0) == 0) { _longjmp($1298|0, threwValue|0); } tempRet0 = (threwValue); } else { $1299 = -1; };
        $1300 = tempRet0;
        $cond1096 = ($1299|0)==(1);
        if ($cond1096) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1300;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       }
       $1301 = (($1224) + ($len$0))|0;
       $1302 = (($1301) + ($1228))|0;
       $1303 = ((($1277)) + 12|0);
       HEAP32[$1303>>2] = $1302;
      }
      $1304 = (($1220) + 1)|0;
      $1305 = (($regs$5) + ($1304<<3)|0);
      $1306 = (($1224) + ($1226))|0;
      $1307 = (($1306) + ($1228))|0;
      $1308 = (($stack$0) + ($1307<<3)|0);
      ;HEAP32[$1305>>2]=HEAP32[$1308>>2]|0;HEAP32[$1305+4>>2]=HEAP32[$1308+4>>2]|0;
      $1309 = ((($mrb)) + 92|0);
      $1310 = ((($1309)) + 416|0);
      HEAP32[$1310>>2] = $ai$1;
      $1311 = ((($pc$6)) + 4|0);
      $1312 = HEAP32[$1311>>2]|0;
      $1313 = $1312 & 127;
      $1314 = (200 + ($1313<<2)|0);
      $1315 = HEAP32[$1314>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1315;$i$2 = $1312;$pc$6 = $1311;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 39:  {
      $1316 = $i$2 >>> 7;
      $1317 = $1316 & 33554431;
      $1318 = $1317 >>> 18;
      $1319 = $1318 & 31;
      $1320 = $1317 >>> 13;
      $1321 = $1320 & 31;
      $1322 = $1317 >>> 12;
      $1323 = $1322 & 1;
      $1324 = $1317 >>> 7;
      $1325 = $1324 & 31;
      $1326 = ((($mrb)) + 12|0);
      $1327 = HEAP32[$1326>>2]|0;
      $1328 = ((($1327)) + 16|0);
      $1329 = HEAP32[$1328>>2]|0;
      $1330 = ((($1329)) + 36|0);
      $1331 = HEAP32[$1330>>2]|0;
      $1332 = ((($regs$5)) + 8|0);
      $1333 = (($1319) + ($1321))|0;
      $1334 = (($1333) + ($1323))|0;
      $1335 = (($1334) + ($1325))|0;
      $1336 = ($1331|0)<(0);
      $1337 = $1336 ? 1 : $1331;
      $1338 = (($1332) + ($1337<<3)|0);
      $1339 = ((($1338)) + 4|0);
      $1340 = HEAP32[$1339>>2]|0;
      $1341 = ($1340|0)==(0);
      if ($1341) {
       $1342 = HEAP32[$1338>>2]|0;
       $1343 = ($1342|0)!=(0);
       if ($1343) {
        label = 222;
       }
      } else {
       label = 222;
      }
      if ((label|0) == 222) {
       label = 0;
       $1344 = ((($1338)) + 4|0);
       $1345 = HEAP32[$1344>>2]|0;
       $1346 = ($1345|0)!=(13);
       if ($1346) {
        __THREW__ = 0;
        ;HEAP32[$$byval_copy917>>2]=HEAP32[$1338>>2]|0;HEAP32[$$byval_copy917+4>>2]=HEAP32[$1338+4>>2]|0;
        invoke_viiiiii(174,($21|0),($mrb|0),($$byval_copy917|0),13,(65315|0),(56501|0));
        $1347 = __THREW__; __THREW__ = 0;
        if ((($1347|0) != 0) & ((threwValue|0) != 0)) { $1348 = _testSetjmp(HEAP32[$1347>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1348|0) == 0) { _longjmp($1347|0, threwValue|0); } tempRet0 = (threwValue); } else { $1348 = -1; };
        $1349 = tempRet0;
        $cond1090 = ($1348|0)==(1);
        if ($cond1090) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1349;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$1338>>2]=HEAP32[$21>>2]|0;HEAP32[$1338+4>>2]=HEAP32[$21+4>>2]|0;
       }
      }
      $1350 = ($1331|0)<(0);
      if ($1350) {
       $1351 = ((($regs$5)) + 8|0);
       $1352 = HEAP32[$1351>>2]|0;
       $1353 = ((($1352)) + 20|0);
       $1354 = HEAP32[$1353>>2]|0;
       $1355 = ((($1352)) + 12|0);
       $1356 = HEAP32[$1355>>2]|0;
       $1357 = ((($regs$5)) + 8|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy918>>2]=HEAP32[$1357>>2]|0;HEAP32[$$byval_copy918+4>>2]=HEAP32[$1357+4>>2]|0;
       invoke_vii(148,($mrb|0),($$byval_copy918|0));
       $1358 = __THREW__; __THREW__ = 0;
       if ((($1358|0) != 0) & ((threwValue|0) != 0)) { $1359 = _testSetjmp(HEAP32[$1358>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1359|0) == 0) { _longjmp($1358|0, threwValue|0); } tempRet0 = (threwValue); } else { $1359 = -1; };
       $1360 = tempRet0;
       $cond1089 = ($1359|0)==(1);
       if ($cond1089) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1360;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $argc$0 = $1356;$argv$0 = $1354;
      } else {
       $argc$0 = $1331;$argv$0 = $1332;
      }
      $1361 = ((($mrb)) + 12|0);
      $1362 = HEAP32[$1361>>2]|0;
      $1363 = ((($1362)) + 16|0);
      $1364 = HEAP32[$1363>>2]|0;
      $1365 = ((($1364)) + 4|0);
      $1366 = HEAP32[$1365>>2]|0;
      $1367 = ($1366|0)!=(0|0);
      do {
       if ($1367) {
        $1368 = ((($mrb)) + 12|0);
        $1369 = HEAP32[$1368>>2]|0;
        $1370 = ((($1369)) + 16|0);
        $1371 = HEAP32[$1370>>2]|0;
        $1372 = ((($1371)) + 4|0);
        $1373 = HEAP32[$1372>>2]|0;
        $1374 = HEAP32[$1373>>2]|0;
        $1375 = $1374 >>> 11;
        $1376 = $1375 & 256;
        $1377 = ($1376|0)!=(0);
        if ($1377) {
         $1378 = ($argc$0|0)>=(0);
         if ($1378) {
          $1379 = (($1319) + ($1325))|0;
          $1380 = ($argc$0|0)<($1379|0);
          if (!($1380)) {
           $1381 = ($1323|0)==(0);
           if (!($1381)) {
            $argc$1 = $argc$0;$argv$1 = $argv$0;
            break;
           }
           $1382 = ($argc$0|0)>($1335|0);
           if (!($1382)) {
            $argc$1 = $argc$0;$argv$1 = $argv$0;
            break;
           }
          }
          $1383 = (($1319) + ($1325))|0;
          __THREW__ = 0;
          invoke_vii(175,($mrb|0),($1383|0));
          $1384 = __THREW__; __THREW__ = 0;
          if ((($1384|0) != 0) & ((threwValue|0) != 0)) { $1385 = _testSetjmp(HEAP32[$1384>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1385|0) == 0) { _longjmp($1384|0, threwValue|0); } tempRet0 = (threwValue); } else { $1385 = -1; };
          $1386 = tempRet0;
          $cond1088 = ($1385|0)==(1);
          if ($cond1088) {
           $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1386;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
           continue L3;
          }
          $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
          label = 276;
          continue L19;
         } else {
          $argc$1 = $argc$0;$argv$1 = $argv$0;
         }
        } else {
         label = 236;
        }
       } else {
        label = 236;
       }
      } while(0);
      if ((label|0) == 236) {
       label = 0;
       $1387 = ($1335|0)>(1);
       $1388 = ($argc$0|0)==(1);
       $or$cond = $1387 & $1388;
       if ($or$cond) {
        $1389 = ((($argv$0)) + 4|0);
        $1390 = HEAP32[$1389>>2]|0;
        $1391 = ($1390|0)==(14);
        if ($1391) {
         __THREW__ = 0;
         ;HEAP32[$$byval_copy919>>2]=HEAP32[$argv$0>>2]|0;HEAP32[$$byval_copy919+4>>2]=HEAP32[$argv$0+4>>2]|0;
         invoke_vii(148,($mrb|0),($$byval_copy919|0));
         $1392 = __THREW__; __THREW__ = 0;
         if ((($1392|0) != 0) & ((threwValue|0) != 0)) { $1393 = _testSetjmp(HEAP32[$1392>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1393|0) == 0) { _longjmp($1392|0, threwValue|0); } tempRet0 = (threwValue); } else { $1393 = -1; };
         $1394 = tempRet0;
         $cond1087 = ($1393|0)==(1);
         if ($cond1087) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1394;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         $1395 = HEAP32[$argv$0>>2]|0;
         $1396 = ((($1395)) + 12|0);
         $1397 = HEAP32[$1396>>2]|0;
         $1398 = HEAP32[$argv$0>>2]|0;
         $1399 = ((($1398)) + 20|0);
         $1400 = HEAP32[$1399>>2]|0;
         $argc$1 = $1397;$argv$1 = $1400;
        } else {
         $argc$1 = $argc$0;$argv$1 = $argv$0;
        }
       } else {
        $argc$1 = $argc$0;$argv$1 = $argv$0;
       }
      }
      $1401 = ((($mrb)) + 12|0);
      $1402 = HEAP32[$1401>>2]|0;
      $1403 = ((($1402)) + 16|0);
      $1404 = HEAP32[$1403>>2]|0;
      $1405 = ((($1404)) + 36|0);
      HEAP32[$1405>>2] = $1335;
      $1406 = ($argc$1|0)<($1335|0);
      do {
       if ($1406) {
        $1407 = (($1319) + ($1325))|0;
        $1408 = ($argc$1|0)<($1407|0);
        do {
         if ($1408) {
          $1409 = ($1319|0)<($argc$1|0);
          if ($1409) {
           $1410 = (($argc$1) - ($1319))|0;
           $mlen$0 = $1410;
           break;
          } else {
           $mlen$0 = 0;
           break;
          }
         } else {
          $mlen$0 = $1325;
         }
        } while(0);
        $1411 = (($1335) + 1)|0;
        $1412 = (($regs$5) + ($1411<<3)|0);
        ;HEAP32[$1412>>2]=HEAP32[$1338>>2]|0;HEAP32[$1412+4>>2]=HEAP32[$1338+4>>2]|0;
        $1413 = (($argc$1) + 1)|0;
        $1414 = (($regs$5) + ($1413<<3)|0);
        $1415 = ((($1414)) + 4|0);
        HEAP32[$1415>>2] = 0;
        $1416 = (($argc$1) + 1)|0;
        $1417 = (($regs$5) + ($1416<<3)|0);
        HEAP32[$1417>>2] = 0;
        $1418 = ($1332|0)!=($argv$1|0);
        if ($1418) {
         $1419 = ((($regs$5)) + 8|0);
         $1420 = (($argc$1) - ($mlen$0))|0;
         __THREW__ = 0;
         invoke_viii(170,($1419|0),($argv$1|0),($1420|0));
         $1421 = __THREW__; __THREW__ = 0;
         if ((($1421|0) != 0) & ((threwValue|0) != 0)) { $1422 = _testSetjmp(HEAP32[$1421>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1422|0) == 0) { _longjmp($1421|0, threwValue|0); } tempRet0 = (threwValue); } else { $1422 = -1; };
         $1423 = tempRet0;
         $cond1086 = ($1422|0)==(1);
         if ($cond1086) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1423;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
        }
        $1424 = ($mlen$0|0)!=(0);
        if ($1424) {
         $1425 = (($1335) - ($1325))|0;
         $1426 = (($1425) + 1)|0;
         $1427 = (($regs$5) + ($1426<<3)|0);
         $1428 = (($argc$1) - ($mlen$0))|0;
         $1429 = (($argv$1) + ($1428<<3)|0);
         __THREW__ = 0;
         invoke_viii(170,($1427|0),($1429|0),($mlen$0|0));
         $1430 = __THREW__; __THREW__ = 0;
         if ((($1430|0) != 0) & ((threwValue|0) != 0)) { $1431 = _testSetjmp(HEAP32[$1430>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1431|0) == 0) { _longjmp($1430|0, threwValue|0); } tempRet0 = (threwValue); } else { $1431 = -1; };
         $1432 = tempRet0;
         $cond1085 = ($1431|0)==(1);
         if ($cond1085) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1432;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
        }
        $1433 = ($1323|0)!=(0);
        if ($1433) {
         $1434 = (($1319) + ($1321))|0;
         $1435 = (($1434) + 1)|0;
         $1436 = (($regs$5) + ($1435<<3)|0);
         __THREW__ = 0;
         invoke_viii(173,($22|0),($mrb|0),0);
         $1437 = __THREW__; __THREW__ = 0;
         if ((($1437|0) != 0) & ((threwValue|0) != 0)) { $1438 = _testSetjmp(HEAP32[$1437>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1438|0) == 0) { _longjmp($1437|0, threwValue|0); } tempRet0 = (threwValue); } else { $1438 = -1; };
         $1439 = tempRet0;
         $cond1084 = ($1438|0)==(1);
         if ($cond1084) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1439;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         ;HEAP32[$1436>>2]=HEAP32[$22>>2]|0;HEAP32[$1436+4>>2]=HEAP32[$22+4>>2]|0;
        }
        $1440 = ($1321|0)==(0);
        if (!($1440)) {
         $1441 = (($1319) + ($1325))|0;
         $1442 = ($argc$1|0)<($1441|0);
         if (!($1442)) {
          $1444 = (($argc$1) - ($1319))|0;
          $1445 = (($1444) - ($1325))|0;
          $1446 = (($1445) + 1)|0;
          $1447 = (($pc$6) + ($1446<<2)|0);
          $pc$2 = $1447;
          break;
         }
        }
        $1443 = ((($pc$6)) + 4|0);
        $pc$2 = $1443;
       } else {
        $1448 = ($1332|0)!=($argv$1|0);
        if ($1448) {
         $1449 = (($1335) + 1)|0;
         $1450 = (($regs$5) + ($1449<<3)|0);
         ;HEAP32[$1450>>2]=HEAP32[$1338>>2]|0;HEAP32[$1450+4>>2]=HEAP32[$1338+4>>2]|0;
         $1451 = ((($regs$5)) + 8|0);
         $1452 = (($1319) + ($1321))|0;
         __THREW__ = 0;
         invoke_viii(170,($1451|0),($argv$1|0),($1452|0));
         $1453 = __THREW__; __THREW__ = 0;
         if ((($1453|0) != 0) & ((threwValue|0) != 0)) { $1454 = _testSetjmp(HEAP32[$1453>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1454|0) == 0) { _longjmp($1453|0, threwValue|0); } tempRet0 = (threwValue); } else { $1454 = -1; };
         $1455 = tempRet0;
         $cond1083 = ($1454|0)==(1);
         if ($cond1083) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1455;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
        }
        $1456 = ($1323|0)!=(0);
        if ($1456) {
         $1457 = (($argc$1) - ($1319))|0;
         $1458 = (($1457) - ($1321))|0;
         $1459 = (($1458) - ($1325))|0;
         $1460 = (($1319) + ($1321))|0;
         $1461 = (($1460) + 1)|0;
         $1462 = (($regs$5) + ($1461<<3)|0);
         $1463 = (($argv$1) + ($1319<<3)|0);
         $1464 = (($1463) + ($1321<<3)|0);
         __THREW__ = 0;
         invoke_viiii(167,($23|0),($mrb|0),($1459|0),($1464|0));
         $1465 = __THREW__; __THREW__ = 0;
         if ((($1465|0) != 0) & ((threwValue|0) != 0)) { $1466 = _testSetjmp(HEAP32[$1465>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1466|0) == 0) { _longjmp($1465|0, threwValue|0); } tempRet0 = (threwValue); } else { $1466 = -1; };
         $1467 = tempRet0;
         $cond1082 = ($1466|0)==(1);
         if ($cond1082) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1467;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         ;HEAP32[$1462>>2]=HEAP32[$23>>2]|0;HEAP32[$1462+4>>2]=HEAP32[$23+4>>2]|0;
         $rnum$0 = $1459;
        } else {
         $rnum$0 = 0;
        }
        $1468 = ($1325|0)!=(0);
        if ($1468) {
         $1469 = (($argc$1) - ($1325))|0;
         $1470 = ($1469|0)>($1319|0);
         if ($1470) {
          $1471 = (($1319) + ($1321))|0;
          $1472 = (($1471) + ($1323))|0;
          $1473 = (($1472) + 1)|0;
          $1474 = (($regs$5) + ($1473<<3)|0);
          $1475 = (($1319) + ($1321))|0;
          $1476 = (($1475) + ($rnum$0))|0;
          $1477 = (($argv$1) + ($1476<<3)|0);
          __THREW__ = 0;
          invoke_viii(170,($1474|0),($1477|0),($1325|0));
          $1478 = __THREW__; __THREW__ = 0;
          if ((($1478|0) != 0) & ((threwValue|0) != 0)) { $1479 = _testSetjmp(HEAP32[$1478>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1479|0) == 0) { _longjmp($1478|0, threwValue|0); } tempRet0 = (threwValue); } else { $1479 = -1; };
          $1480 = tempRet0;
          $cond1081 = ($1479|0)==(1);
          if ($cond1081) {
           $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1480;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
           continue L3;
          }
         }
        }
        $1481 = ($1332|0)==($argv$1|0);
        if ($1481) {
         $1482 = (($1335) + 1)|0;
         $1483 = (($regs$5) + ($1482<<3)|0);
         ;HEAP32[$1483>>2]=HEAP32[$1338>>2]|0;HEAP32[$1483+4>>2]=HEAP32[$1338+4>>2]|0;
        }
        $1484 = (($1321) + 1)|0;
        $1485 = (($pc$6) + ($1484<<2)|0);
        $pc$2 = $1485;
       }
      } while(0);
      $1486 = HEAP32[$pc$2>>2]|0;
      $1487 = $1486 & 127;
      $1488 = (200 + ($1487<<2)|0);
      $1489 = HEAP32[$1488>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1489;$i$2 = $1486;$pc$6 = $pc$2;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 40:  {
      $1490 = ((($pc$6)) + 4|0);
      $1491 = HEAP32[$1490>>2]|0;
      $1492 = $1491 & 127;
      $1493 = (200 + ($1492<<2)|0);
      $1494 = HEAP32[$1493>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1494;$i$2 = $1491;$pc$6 = $1490;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 41:  {
      $1495 = ((($pc$6)) + 4|0);
      $1496 = HEAP32[$1495>>2]|0;
      $1497 = $1496 & 127;
      $1498 = (200 + ($1497<<2)|0);
      $1499 = HEAP32[$1498>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1499;$i$2 = $1496;$pc$6 = $1495;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 42:  {
      $$4 = $$8;$i$1 = $i$2;$irep$4 = $irep$8;
      break;
     }
     case 43:  {
      $1864 = $i$2 >>> 23;
      $1865 = $1864 & 511;
      $1866 = $i$2 >>> 7;
      $1867 = $1866 & 127;
      $1868 = $i$2 >>> 14;
      $1869 = $1868 & 511;
      $1870 = (($syms$6) + ($1869<<2)|0);
      $1871 = HEAP32[$1870>>2]|0;
      $1872 = (($regs$5) + ($1865<<3)|0);
      ;HEAP32[$recv44>>2]=HEAP32[$1872>>2]|0;HEAP32[$recv44+4>>2]=HEAP32[$1872+4>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$recv44$byval_copy>>2]=HEAP32[$recv44>>2]|0;HEAP32[$recv44$byval_copy+4>>2]=HEAP32[$recv44+4>>2]|0;
      $1873 = (invoke_iii(138,($mrb|0),($recv44$byval_copy|0))|0);
      $1874 = __THREW__; __THREW__ = 0;
      if ((($1874|0) != 0) & ((threwValue|0) != 0)) { $1875 = _testSetjmp(HEAP32[$1874>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1875|0) == 0) { _longjmp($1874|0, threwValue|0); } tempRet0 = (threwValue); } else { $1875 = -1; };
      $1876 = tempRet0;
      $cond1059 = ($1875|0)==(1);
      if ($cond1059) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1876;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      HEAP32[$c42>>2] = $1873;
      __THREW__ = 0;
      $1877 = (invoke_iiii(139,($mrb|0),($c42|0),($1871|0))|0);
      $1878 = __THREW__; __THREW__ = 0;
      if ((($1878|0) != 0) & ((threwValue|0) != 0)) { $1879 = _testSetjmp(HEAP32[$1878>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1879|0) == 0) { _longjmp($1878|0, threwValue|0); } tempRet0 = (threwValue); } else { $1879 = -1; };
      $1880 = tempRet0;
      $cond1060 = ($1879|0)==(1);
      if ($cond1060) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1880;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $1881 = ($1877|0)!=(0|0);
      do {
       if ($1881) {
        $m41$0 = $1877;$mid45$0 = $1871;$n40$0 = $1867;
       } else {
        __THREW__ = 0;
        invoke_vii(143,($sym46|0),($1871|0));
        $1882 = __THREW__; __THREW__ = 0;
        if ((($1882|0) != 0) & ((threwValue|0) != 0)) { $1883 = _testSetjmp(HEAP32[$1882>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1883|0) == 0) { _longjmp($1882|0, threwValue|0); } tempRet0 = (threwValue); } else { $1883 = -1; };
        $1884 = tempRet0;
        $cond1061 = ($1883|0)==(1);
        if ($cond1061) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1884;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        $1885 = (invoke_iiii(140,($mrb|0),(65322|0),14)|0);
        $1886 = __THREW__; __THREW__ = 0;
        if ((($1886|0) != 0) & ((threwValue|0) != 0)) { $1887 = _testSetjmp(HEAP32[$1886>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1887|0) == 0) { _longjmp($1886|0, threwValue|0); } tempRet0 = (threwValue); } else { $1887 = -1; };
        $1888 = tempRet0;
        $cond1062 = ($1887|0)==(1);
        if ($cond1062) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1888;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        __THREW__ = 0;
        $1889 = (invoke_iiii(139,($mrb|0),($c42|0),($1885|0))|0);
        $1890 = __THREW__; __THREW__ = 0;
        if ((($1890|0) != 0) & ((threwValue|0) != 0)) { $1891 = _testSetjmp(HEAP32[$1890>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1891|0) == 0) { _longjmp($1890|0, threwValue|0); } tempRet0 = (threwValue); } else { $1891 = -1; };
        $1892 = tempRet0;
        $cond1063 = ($1891|0)==(1);
        if ($cond1063) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1892;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $1893 = ($1867|0)==(127);
        if ($1893) {
         $1894 = (($1865) + 1)|0;
         $1895 = (($regs$5) + ($1894<<3)|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy923>>2]=HEAP32[$1895>>2]|0;HEAP32[$$byval_copy923+4>>2]=HEAP32[$1895+4>>2]|0;
         ;HEAP32[$sym46$byval_copy>>2]=HEAP32[$sym46>>2]|0;HEAP32[$sym46$byval_copy+4>>2]=HEAP32[$sym46+4>>2]|0;
         invoke_viiii(169,($27|0),($mrb|0),($$byval_copy923|0),($sym46$byval_copy|0));
         $1896 = __THREW__; __THREW__ = 0;
         if ((($1896|0) != 0) & ((threwValue|0) != 0)) { $1897 = _testSetjmp(HEAP32[$1896>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1897|0) == 0) { _longjmp($1896|0, threwValue|0); } tempRet0 = (threwValue); } else { $1897 = -1; };
         $1898 = tempRet0;
         $cond1065 = ($1897|0)==(1);
         if ($cond1065) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1898;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         $m41$0 = $1889;$mid45$0 = $1885;$n40$0 = $1867;
         break;
        } else {
         $1899 = (($regs$5) + ($1865<<3)|0);
         $1900 = ((($1899)) + 16|0);
         $1901 = (($regs$5) + ($1865<<3)|0);
         $1902 = ((($1901)) + 8|0);
         $1903 = (($1867) + 1)|0;
         __THREW__ = 0;
         invoke_viii(170,($1900|0),($1902|0),($1903|0));
         $1904 = __THREW__; __THREW__ = 0;
         if ((($1904|0) != 0) & ((threwValue|0) != 0)) { $1905 = _testSetjmp(HEAP32[$1904>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1905|0) == 0) { _longjmp($1904|0, threwValue|0); } tempRet0 = (threwValue); } else { $1905 = -1; };
         $1906 = tempRet0;
         $cond1064 = ($1905|0)==(1);
         if ($cond1064) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1906;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         $1907 = (($1865) + 1)|0;
         $1908 = (($regs$5) + ($1907<<3)|0);
         ;HEAP32[$1908>>2]=HEAP32[$sym46>>2]|0;HEAP32[$1908+4>>2]=HEAP32[$sym46+4>>2]|0;
         $m41$0 = $1889;$mid45$0 = $1885;$n40$0 = $1903;
         break;
        }
       }
      } while(0);
      $1909 = ((($mrb)) + 12|0);
      $1910 = HEAP32[$1909>>2]|0;
      $1911 = ((($1910)) + 16|0);
      $1912 = HEAP32[$1911>>2]|0;
      HEAP32[$1912>>2] = $mid45$0;
      $1913 = HEAP32[$c42>>2]|0;
      $1914 = ((($1912)) + 44|0);
      HEAP32[$1914>>2] = $1913;
      $1915 = ($n40$0|0)==(127);
      if ($1915) {
       $1916 = ((($1912)) + 36|0);
       HEAP32[$1916>>2] = -1;
      } else {
       $1917 = ((($1912)) + 36|0);
       HEAP32[$1917>>2] = $n40$0;
      }
      $1918 = ((($mrb)) + 12|0);
      $1919 = HEAP32[$1918>>2]|0;
      $1920 = ((($1919)) + 4|0);
      $1921 = HEAP32[$1920>>2]|0;
      $1922 = (($regs$5) + ($1865<<3)|0);
      $1923 = ((($1912)) + 36|0);
      $1924 = HEAP32[$1923>>2]|0;
      $1925 = (($1924) + 1)|0;
      __THREW__ = 0;
      invoke_viii(170,($1921|0),($1922|0),($1925|0));
      $1926 = __THREW__; __THREW__ = 0;
      if ((($1926|0) != 0) & ((threwValue|0) != 0)) { $1927 = _testSetjmp(HEAP32[$1926>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1927|0) == 0) { _longjmp($1926|0, threwValue|0); } tempRet0 = (threwValue); } else { $1927 = -1; };
      $1928 = tempRet0;
      $cond1066 = ($1927|0)==(1);
      if ($cond1066) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1928;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $1929 = HEAP32[$m41$0>>2]|0;
      $1930 = $1929 >>> 11;
      $1931 = $1930 & 128;
      $1932 = ($1931|0)!=(0);
      if ($1932) {
       $1933 = ((($mrb)) + 12|0);
       $1934 = HEAP32[$1933>>2]|0;
       $1935 = ((($1934)) + 4|0);
       $1936 = HEAP32[$1935>>2]|0;
       $1937 = ((($m41$0)) + 12|0);
       $1938 = HEAP32[$1937>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$recv44$byval_copy924>>2]=HEAP32[$recv44>>2]|0;HEAP32[$recv44$byval_copy924+4>>2]=HEAP32[$recv44+4>>2]|0;
       invoke_viii($1938|0,($28|0),($mrb|0),($recv44$byval_copy924|0));
       $1939 = __THREW__; __THREW__ = 0;
       if ((($1939|0) != 0) & ((threwValue|0) != 0)) { $1940 = _testSetjmp(HEAP32[$1939>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1940|0) == 0) { _longjmp($1939|0, threwValue|0); } tempRet0 = (threwValue); } else { $1940 = -1; };
       $1941 = tempRet0;
       $cond1069 = ($1940|0)==(1);
       if ($cond1069) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1941;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$1936>>2]=HEAP32[$28>>2]|0;HEAP32[$1936+4>>2]=HEAP32[$28+4>>2]|0;
       __THREW__ = 0;
       invoke_vii(146,($mrb|0),($ai$1|0));
       $1942 = __THREW__; __THREW__ = 0;
       if ((($1942|0) != 0) & ((threwValue|0) != 0)) { $1943 = _testSetjmp(HEAP32[$1942>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1943|0) == 0) { _longjmp($1942|0, threwValue|0); } tempRet0 = (threwValue); } else { $1943 = -1; };
       $1944 = tempRet0;
       $cond1070 = ($1943|0)==(1);
       if ($cond1070) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1944;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $$3 = $$8;$irep$3 = $irep$8;
       label = 274;
       break L50;
      }
      $1945 = ((($m41$0)) + 12|0);
      $1946 = HEAP32[$1945>>2]|0;
      $1947 = ((($1946)) + 12|0);
      $1948 = HEAP32[$1947>>2]|0;
      $1949 = ((($1946)) + 16|0);
      $1950 = HEAP32[$1949>>2]|0;
      $1951 = ((($1912)) + 36|0);
      $1952 = HEAP32[$1951>>2]|0;
      $1953 = ($1952|0)<(0);
      $1954 = ((($1946)) + 2|0);
      $1955 = HEAP16[$1954>>1]|0;
      $1956 = $1955&65535;
      if ($1953) {
       $1957 = ($1956|0)<(3);
       if ($1957) {
        $$reg2mem891$0 = 3;
       } else {
        $1958 = ((($1946)) + 2|0);
        $1959 = HEAP16[$1958>>1]|0;
        $1960 = $1959&65535;
        $$reg2mem891$0 = $1960;
       }
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($$reg2mem891$0|0),3);
       $1961 = __THREW__; __THREW__ = 0;
       if ((($1961|0) != 0) & ((threwValue|0) != 0)) { $1962 = _testSetjmp(HEAP32[$1961>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1962|0) == 0) { _longjmp($1961|0, threwValue|0); } tempRet0 = (threwValue); } else { $1962 = -1; };
       $1963 = tempRet0;
       $cond1068 = ($1962|0)==(1);
       if ($cond1068) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1963;$exc_catched$1 = $exc_catched$5;$irep$1 = $1946;$pc$1 = $pc$6;$pool$1 = $1948;$regs$1 = $regs$5;$syms$1 = $1950;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      } else {
       $1964 = ((($1912)) + 36|0);
       $1965 = HEAP32[$1964>>2]|0;
       $1966 = (($1965) + 2)|0;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($1956|0),($1966|0));
       $1967 = __THREW__; __THREW__ = 0;
       if ((($1967|0) != 0) & ((threwValue|0) != 0)) { $1968 = _testSetjmp(HEAP32[$1967>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1968|0) == 0) { _longjmp($1967|0, threwValue|0); } tempRet0 = (threwValue); } else { $1968 = -1; };
       $1969 = tempRet0;
       $cond1067 = ($1968|0)==(1);
       if ($cond1067) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1969;$exc_catched$1 = $exc_catched$5;$irep$1 = $1946;$pc$1 = $pc$6;$pool$1 = $1948;$regs$1 = $regs$5;$syms$1 = $1950;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      }
      $1970 = ((($mrb)) + 12|0);
      $1971 = HEAP32[$1970>>2]|0;
      $1972 = ((($1971)) + 4|0);
      $1973 = HEAP32[$1972>>2]|0;
      $1974 = ((($1946)) + 8|0);
      $1975 = HEAP32[$1974>>2]|0;
      $1976 = HEAP32[$1975>>2]|0;
      $1977 = $1976 & 127;
      $1978 = (200 + ($1977<<2)|0);
      $1979 = HEAP32[$1978>>2]|0;
      $exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $1979;$i$2 = $1976;$irep$8 = $1946;$pc$6 = $1975;$pool$6 = $1948;$regs$5 = $1973;$syms$6 = $1950;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 44:  {
      $1980 = $i$2 >>> 23;
      $1981 = $1980 & 511;
      $1982 = $i$2 >>> 7;
      $1983 = $1982 & 65535;
      $1984 = $1983 >> 10;
      $1985 = $1984 & 63;
      $1986 = $1983 >> 9;
      $1987 = $1986 & 1;
      $1988 = $1983 >> 4;
      $1989 = $1988 & 31;
      $1990 = $1983 >> 0;
      $1991 = $1990 & 15;
      $1992 = ($1991|0)==(0);
      do {
       if ($1992) {
        $1993 = ((($regs$5)) + 8|0);
        $stack53$0 = $1993;
       } else {
        $1994 = (($1991) - 1)|0;
        __THREW__ = 0;
        $1995 = (invoke_iii(161,($mrb|0),($1994|0))|0);
        $1996 = __THREW__; __THREW__ = 0;
        if ((($1996|0) != 0) & ((threwValue|0) != 0)) { $1997 = _testSetjmp(HEAP32[$1996>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1997|0) == 0) { _longjmp($1996|0, threwValue|0); } tempRet0 = (threwValue); } else { $1997 = -1; };
        $1998 = tempRet0;
        $cond1057 = ($1997|0)==(1);
        if ($cond1057) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $1998;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $1999 = ($1995|0)!=(0|0);
        if ($1999) {
         $2003 = ((($1995)) + 12|0);
         $2004 = HEAP32[$2003>>2]|0;
         $2005 = ((($2004)) + 8|0);
         $stack53$0 = $2005;
         break;
        }
        __THREW__ = 0;
        invoke_vii(180,($mrb|0),2);
        $2000 = __THREW__; __THREW__ = 0;
        if ((($2000|0) != 0) & ((threwValue|0) != 0)) { $2001 = _testSetjmp(HEAP32[$2000>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2001|0) == 0) { _longjmp($2000|0, threwValue|0); } tempRet0 = (threwValue); } else { $2001 = -1; };
        $2002 = tempRet0;
        $cond1058 = ($2001|0)==(1);
        if ($cond1058) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2002;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
      } while(0);
      $2006 = (($regs$5) + ($1981<<3)|0);
      $2007 = (($1985) + ($1987))|0;
      $2008 = (($2007) + ($1989))|0;
      $2009 = (($stack53$0) + ($2008<<3)|0);
      ;HEAP32[$2006>>2]=HEAP32[$2009>>2]|0;HEAP32[$2006+4>>2]=HEAP32[$2009+4>>2]|0;
      $2010 = ((($pc$6)) + 4|0);
      $2011 = HEAP32[$2010>>2]|0;
      $2012 = $2011 & 127;
      $2013 = (200 + ($2012<<2)|0);
      $2014 = HEAP32[$2013>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2014;$i$2 = $2011;$pc$6 = $2010;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 45:  {
      $2015 = $i$2 >>> 23;
      $2016 = $2015 & 511;
      $2017 = (($regs$5) + ($2016<<3)|0);
      $2018 = ((($2017)) + 4|0);
      $2019 = HEAP32[$2018>>2]|0;
      $2020 = $2019&65535;
      $2021 = $2020&65535;
      $2022 = $2021 << 8;
      $2023 = (($2016) + 1)|0;
      $2024 = (($regs$5) + ($2023<<3)|0);
      $2025 = ((($2024)) + 4|0);
      $2026 = HEAP32[$2025>>2]|0;
      $2027 = $2026&65535;
      $2028 = $2027&65535;
      $2029 = $2028 & 255;
      $2030 = $2022 | $2029;
      L372: do {
       switch ($2030|0) {
       case 771:  {
        $2031 = (($regs$5) + ($2016<<3)|0);
        $2032 = HEAP32[$2031>>2]|0;
        $2033 = ((($2031)) + 8|0);
        $2034 = HEAP32[$2033>>2]|0;
        __THREW__ = 0;
        $2035 = (invoke_iiii(181,($2032|0),($2034|0),($z|0))|0);
        $2036 = __THREW__; __THREW__ = 0;
        if ((($2036|0) != 0) & ((threwValue|0) != 0)) { $2037 = _testSetjmp(HEAP32[$2036>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2037|0) == 0) { _longjmp($2036|0, threwValue|0); } tempRet0 = (threwValue); } else { $2037 = -1; };
        $2038 = tempRet0;
        $cond1056 = ($2037|0)==(1);
        if ($cond1056) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2038;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $2039 = ($2035<<24>>24)!=(0);
        if ($2039) {
         $2040 = ((($2031)) + 4|0);
         HEAP32[$2040>>2] = 6;
         $2041 = (+($2032|0));
         $2042 = (+($2034|0));
         $2043 = $2041 + $2042;
         HEAPF32[$2031>>2] = $2043;
         break L372;
        } else {
         $2044 = (($regs$5) + ($2016<<3)|0);
         $2045 = ((($2044)) + 4|0);
         HEAP32[$2045>>2] = 3;
         $2046 = HEAP32[$z>>2]|0;
         $2047 = (($regs$5) + ($2016<<3)|0);
         HEAP32[$2047>>2] = $2046;
         break L372;
        }
        break;
       }
       case 774:  {
        $2048 = (($regs$5) + ($2016<<3)|0);
        $2049 = HEAP32[$2048>>2]|0;
        $2050 = (($2016) + 1)|0;
        $2051 = (($regs$5) + ($2050<<3)|0);
        $2052 = +HEAPF32[$2051>>2];
        $2053 = (($regs$5) + ($2016<<3)|0);
        $2054 = ((($2053)) + 4|0);
        HEAP32[$2054>>2] = 6;
        $2055 = (+($2049|0));
        $2056 = $2055 + $2052;
        $2057 = (($regs$5) + ($2016<<3)|0);
        HEAPF32[$2057>>2] = $2056;
        break;
       }
       case 1539:  {
        $2058 = (($regs$5) + ($2016<<3)|0);
        $2059 = +HEAPF32[$2058>>2];
        $2060 = (($2016) + 1)|0;
        $2061 = (($regs$5) + ($2060<<3)|0);
        $2062 = HEAP32[$2061>>2]|0;
        $2063 = (+($2062|0));
        $2064 = $2059 + $2063;
        $2065 = (($regs$5) + ($2016<<3)|0);
        HEAPF32[$2065>>2] = $2064;
        break;
       }
       case 1542:  {
        $2066 = (($regs$5) + ($2016<<3)|0);
        $2067 = +HEAPF32[$2066>>2];
        $2068 = (($2016) + 1)|0;
        $2069 = (($regs$5) + ($2068<<3)|0);
        $2070 = +HEAPF32[$2069>>2];
        $2071 = $2067 + $2070;
        $2072 = (($regs$5) + ($2016<<3)|0);
        HEAPF32[$2072>>2] = $2071;
        break;
       }
       case 4112:  {
        $2073 = (($regs$5) + ($2016<<3)|0);
        $2074 = (($regs$5) + ($2016<<3)|0);
        $2075 = (($2016) + 1)|0;
        $2076 = (($regs$5) + ($2075<<3)|0);
        __THREW__ = 0;
        ;HEAP32[$$byval_copy925>>2]=HEAP32[$2074>>2]|0;HEAP32[$$byval_copy925+4>>2]=HEAP32[$2074+4>>2]|0;
        ;HEAP32[$$byval_copy926>>2]=HEAP32[$2076>>2]|0;HEAP32[$$byval_copy926+4>>2]=HEAP32[$2076+4>>2]|0;
        invoke_viiii(182,($29|0),($mrb|0),($$byval_copy925|0),($$byval_copy926|0));
        $2077 = __THREW__; __THREW__ = 0;
        if ((($2077|0) != 0) & ((threwValue|0) != 0)) { $2078 = _testSetjmp(HEAP32[$2077>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2078|0) == 0) { _longjmp($2077|0, threwValue|0); } tempRet0 = (threwValue); } else { $2078 = -1; };
        $2079 = tempRet0;
        $cond1055 = ($2078|0)==(1);
        if ($cond1055) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2079;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$2073>>2]=HEAP32[$29>>2]|0;HEAP32[$2073+4>>2]=HEAP32[$29+4>>2]|0;
        break;
       }
       default: {
        $i$0 = $i$2;
        label = 92;
        break L50;
       }
       }
      } while(0);
      $2080 = ((($mrb)) + 92|0);
      $2081 = ((($2080)) + 416|0);
      HEAP32[$2081>>2] = $ai$1;
      $2082 = ((($pc$6)) + 4|0);
      $2083 = HEAP32[$2082>>2]|0;
      $2084 = $2083 & 127;
      $2085 = (200 + ($2084<<2)|0);
      $2086 = HEAP32[$2085>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2086;$i$2 = $2083;$pc$6 = $2082;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 46:  {
      $2270 = $i$2 >>> 23;
      $2271 = $2270 & 511;
      $2272 = (($regs$5) + ($2271<<3)|0);
      $2273 = ((($2272)) + 4|0);
      $2274 = HEAP32[$2273>>2]|0;
      L385: do {
       switch ($2274|0) {
       case 3:  {
        $2275 = (($regs$5) + ($2271<<3)|0);
        $2276 = HEAP32[$2275>>2]|0;
        $2277 = $i$2 >>> 7;
        $2278 = $2277 & 127;
        __THREW__ = 0;
        $2279 = (invoke_iiii(181,($2276|0),($2278|0),($z77|0))|0);
        $2280 = __THREW__; __THREW__ = 0;
        if ((($2280|0) != 0) & ((threwValue|0) != 0)) { $2281 = _testSetjmp(HEAP32[$2280>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2281|0) == 0) { _longjmp($2280|0, threwValue|0); } tempRet0 = (threwValue); } else { $2281 = -1; };
        $2282 = tempRet0;
        $cond1054 = ($2281|0)==(1);
        if ($cond1054) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2282;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $2283 = ($2279<<24>>24)!=(0);
        $2284 = (($regs$5) + ($2271<<3)|0);
        $2285 = ((($2284)) + 4|0);
        if ($2283) {
         HEAP32[$2285>>2] = 6;
         $2286 = (+($2276|0));
         $2287 = (+($2278|0));
         $2288 = $2286 + $2287;
         $2289 = (($regs$5) + ($2271<<3)|0);
         HEAPF32[$2289>>2] = $2288;
         break L385;
        } else {
         HEAP32[$2285>>2] = 3;
         $2290 = HEAP32[$z77>>2]|0;
         $2291 = (($regs$5) + ($2271<<3)|0);
         HEAP32[$2291>>2] = $2290;
         break L385;
        }
        break;
       }
       case 6:  {
        $2292 = $i$2 >>> 7;
        $2293 = $2292 & 127;
        $2294 = (+($2293|0));
        $2295 = (($regs$5) + ($2271<<3)|0);
        $2296 = +HEAPF32[$2295>>2];
        $2297 = $2296 + $2294;
        HEAPF32[$2295>>2] = $2297;
        break;
       }
       default: {
        $2298 = (($2271) + 1)|0;
        $2299 = (($regs$5) + ($2298<<3)|0);
        $2300 = ((($2299)) + 4|0);
        HEAP32[$2300>>2] = 3;
        $2301 = $i$2 >>> 7;
        $2302 = $2301 & 127;
        $2303 = (($2271) + 1)|0;
        $2304 = (($regs$5) + ($2303<<3)|0);
        HEAP32[$2304>>2] = $2302;
        $2305 = $2271 & 511;
        $2306 = $2305 << 23;
        $2307 = 32 | $2306;
        $2308 = $i$2 >>> 14;
        $2309 = $2308 & 511;
        $2310 = $2309 & 511;
        $2311 = $2310 << 14;
        $2312 = $2307 | $2311;
        $2313 = $2312 | 128;
        $i$0 = $2313;
        label = 92;
        break L50;
       }
       }
      } while(0);
      $2314 = ((($pc$6)) + 4|0);
      $2315 = HEAP32[$2314>>2]|0;
      $2316 = $2315 & 127;
      $2317 = (200 + ($2316<<2)|0);
      $2318 = HEAP32[$2317>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2318;$i$2 = $2315;$pc$6 = $2314;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 47:  {
      $2087 = $i$2 >>> 23;
      $2088 = $2087 & 511;
      $2089 = (($regs$5) + ($2088<<3)|0);
      $2090 = ((($2089)) + 4|0);
      $2091 = HEAP32[$2090>>2]|0;
      $2092 = $2091&65535;
      $2093 = $2092&65535;
      $2094 = $2093 << 8;
      $2095 = (($2088) + 1)|0;
      $2096 = (($regs$5) + ($2095<<3)|0);
      $2097 = ((($2096)) + 4|0);
      $2098 = HEAP32[$2097>>2]|0;
      $2099 = $2098&65535;
      $2100 = $2099&65535;
      $2101 = $2100 & 255;
      $2102 = $2094 | $2101;
      L395: do {
       switch ($2102|0) {
       case 771:  {
        $2103 = (($regs$5) + ($2088<<3)|0);
        $2104 = HEAP32[$2103>>2]|0;
        $2105 = (($2088) + 1)|0;
        $2106 = (($regs$5) + ($2105<<3)|0);
        $2107 = HEAP32[$2106>>2]|0;
        __THREW__ = 0;
        $2108 = (invoke_iiii(183,($2104|0),($2107|0),($z62|0))|0);
        $2109 = __THREW__; __THREW__ = 0;
        if ((($2109|0) != 0) & ((threwValue|0) != 0)) { $2110 = _testSetjmp(HEAP32[$2109>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2110|0) == 0) { _longjmp($2109|0, threwValue|0); } tempRet0 = (threwValue); } else { $2110 = -1; };
        $2111 = tempRet0;
        $cond1053 = ($2110|0)==(1);
        if ($cond1053) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2111;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $2112 = ($2108<<24>>24)!=(0);
        $2113 = (($regs$5) + ($2088<<3)|0);
        $2114 = ((($2113)) + 4|0);
        if ($2112) {
         HEAP32[$2114>>2] = 6;
         $2115 = (+($2104|0));
         $2116 = (+($2107|0));
         $2117 = $2115 - $2116;
         $2118 = (($regs$5) + ($2088<<3)|0);
         HEAPF32[$2118>>2] = $2117;
         break L395;
        } else {
         HEAP32[$2114>>2] = 3;
         $2119 = HEAP32[$z62>>2]|0;
         $2120 = (($regs$5) + ($2088<<3)|0);
         HEAP32[$2120>>2] = $2119;
         break L395;
        }
        break;
       }
       case 774:  {
        $2121 = (($regs$5) + ($2088<<3)|0);
        $2122 = HEAP32[$2121>>2]|0;
        $2123 = (($2088) + 1)|0;
        $2124 = (($regs$5) + ($2123<<3)|0);
        $2125 = +HEAPF32[$2124>>2];
        $2126 = (($regs$5) + ($2088<<3)|0);
        $2127 = ((($2126)) + 4|0);
        HEAP32[$2127>>2] = 6;
        $2128 = (+($2122|0));
        $2129 = $2128 - $2125;
        $2130 = (($regs$5) + ($2088<<3)|0);
        HEAPF32[$2130>>2] = $2129;
        break;
       }
       case 1539:  {
        $2131 = (($regs$5) + ($2088<<3)|0);
        $2132 = +HEAPF32[$2131>>2];
        $2133 = (($2088) + 1)|0;
        $2134 = (($regs$5) + ($2133<<3)|0);
        $2135 = HEAP32[$2134>>2]|0;
        $2136 = (+($2135|0));
        $2137 = $2132 - $2136;
        $2138 = (($regs$5) + ($2088<<3)|0);
        HEAPF32[$2138>>2] = $2137;
        break;
       }
       case 1542:  {
        $2139 = (($regs$5) + ($2088<<3)|0);
        $2140 = +HEAPF32[$2139>>2];
        $2141 = (($2088) + 1)|0;
        $2142 = (($regs$5) + ($2141<<3)|0);
        $2143 = +HEAPF32[$2142>>2];
        $2144 = $2140 - $2143;
        $2145 = (($regs$5) + ($2088<<3)|0);
        HEAPF32[$2145>>2] = $2144;
        break;
       }
       default: {
        $i$0 = $i$2;
        label = 92;
        break L50;
       }
       }
      } while(0);
      $2146 = ((($pc$6)) + 4|0);
      $2147 = HEAP32[$2146>>2]|0;
      $2148 = $2147 & 127;
      $2149 = (200 + ($2148<<2)|0);
      $2150 = HEAP32[$2149>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2150;$i$2 = $2147;$pc$6 = $2146;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 48:  {
      $2319 = $i$2 >>> 23;
      $2320 = $2319 & 511;
      $2321 = (($regs$5) + ($2320<<3)|0);
      $2322 = ((($2321)) + 4|0);
      $2323 = HEAP32[$2322>>2]|0;
      L406: do {
       switch ($2323|0) {
       case 3:  {
        $2324 = HEAP32[$2321>>2]|0;
        $2325 = $i$2 >>> 7;
        $2326 = $2325 & 127;
        __THREW__ = 0;
        $2327 = (invoke_iiii(183,($2324|0),($2326|0),($z82|0))|0);
        $2328 = __THREW__; __THREW__ = 0;
        if ((($2328|0) != 0) & ((threwValue|0) != 0)) { $2329 = _testSetjmp(HEAP32[$2328>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2329|0) == 0) { _longjmp($2328|0, threwValue|0); } tempRet0 = (threwValue); } else { $2329 = -1; };
        $2330 = tempRet0;
        $cond1052 = ($2329|0)==(1);
        if ($cond1052) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2330;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $2331 = ($2327<<24>>24)!=(0);
        $2332 = ((($2321)) + 4|0);
        if ($2331) {
         HEAP32[$2332>>2] = 6;
         $2333 = (+($2324|0));
         $2334 = (+($2326|0));
         $2335 = $2333 - $2334;
         HEAPF32[$2321>>2] = $2335;
         break L406;
        } else {
         HEAP32[$2332>>2] = 3;
         $2336 = HEAP32[$z82>>2]|0;
         HEAP32[$2321>>2] = $2336;
         break L406;
        }
        break;
       }
       case 6:  {
        $2337 = $i$2 >>> 7;
        $2338 = $2337 & 127;
        $2339 = (+($2338|0));
        $2340 = +HEAPF32[$2321>>2];
        $2341 = $2340 - $2339;
        HEAPF32[$2321>>2] = $2341;
        break;
       }
       default: {
        $2342 = ((($2321)) + 8|0);
        $2343 = ((($2342)) + 4|0);
        HEAP32[$2343>>2] = 3;
        $2344 = $i$2 >>> 7;
        $2345 = $2344 & 127;
        $2346 = ((($2321)) + 8|0);
        HEAP32[$2346>>2] = $2345;
        $2347 = $2320 & 511;
        $2348 = $2347 << 23;
        $2349 = 32 | $2348;
        $2350 = $i$2 >>> 14;
        $2351 = $2350 & 511;
        $2352 = $2351 & 511;
        $2353 = $2352 << 14;
        $2354 = $2349 | $2353;
        $2355 = $2354 | 128;
        $i$0 = $2355;
        label = 92;
        break L50;
       }
       }
      } while(0);
      $2356 = ((($pc$6)) + 4|0);
      $2357 = HEAP32[$2356>>2]|0;
      $2358 = $2357 & 127;
      $2359 = (200 + ($2358<<2)|0);
      $2360 = HEAP32[$2359>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2360;$i$2 = $2357;$pc$6 = $2356;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 49:  {
      $2151 = $i$2 >>> 23;
      $2152 = $2151 & 511;
      $2153 = (($regs$5) + ($2152<<3)|0);
      $2154 = ((($2153)) + 4|0);
      $2155 = HEAP32[$2154>>2]|0;
      $2156 = $2155&65535;
      $2157 = $2156&65535;
      $2158 = $2157 << 8;
      $2159 = (($2152) + 1)|0;
      $2160 = (($regs$5) + ($2159<<3)|0);
      $2161 = ((($2160)) + 4|0);
      $2162 = HEAP32[$2161>>2]|0;
      $2163 = $2162&65535;
      $2164 = $2163&65535;
      $2165 = $2164 & 255;
      $2166 = $2158 | $2165;
      L416: do {
       switch ($2166|0) {
       case 771:  {
        $2167 = (($regs$5) + ($2152<<3)|0);
        $2168 = (($2152) + 1)|0;
        $2169 = (($regs$5) + ($2168<<3)|0);
        __THREW__ = 0;
        ;HEAP32[$$byval_copy927>>2]=HEAP32[$2167>>2]|0;HEAP32[$$byval_copy927+4>>2]=HEAP32[$2167+4>>2]|0;
        ;HEAP32[$$byval_copy928>>2]=HEAP32[$2169>>2]|0;HEAP32[$$byval_copy928+4>>2]=HEAP32[$2169+4>>2]|0;
        invoke_viiii(184,($30|0),($mrb|0),($$byval_copy927|0),($$byval_copy928|0));
        $2170 = __THREW__; __THREW__ = 0;
        if ((($2170|0) != 0) & ((threwValue|0) != 0)) { $2171 = _testSetjmp(HEAP32[$2170>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2171|0) == 0) { _longjmp($2170|0, threwValue|0); } tempRet0 = (threwValue); } else { $2171 = -1; };
        $2172 = tempRet0;
        $cond1051 = ($2171|0)==(1);
        if ($cond1051) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2172;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$z66>>2]=HEAP32[$30>>2]|0;HEAP32[$z66+4>>2]=HEAP32[$30+4>>2]|0;
        $2173 = ((($z66)) + 4|0);
        $2174 = HEAP32[$2173>>2]|0;
        switch ($2174|0) {
        case 3:  {
         $2175 = (($regs$5) + ($2152<<3)|0);
         $2176 = ((($2175)) + 4|0);
         HEAP32[$2176>>2] = 3;
         $2177 = HEAP32[$z66>>2]|0;
         $2178 = (($regs$5) + ($2152<<3)|0);
         HEAP32[$2178>>2] = $2177;
         break L416;
         break;
        }
        case 6:  {
         $2179 = (($regs$5) + ($2152<<3)|0);
         $2180 = ((($2179)) + 4|0);
         HEAP32[$2180>>2] = 6;
         $2181 = +HEAPF32[$z66>>2];
         $2182 = (($regs$5) + ($2152<<3)|0);
         HEAPF32[$2182>>2] = $2181;
         break L416;
         break;
        }
        default: {
         break L416;
        }
        }
        break;
       }
       case 774:  {
        $2183 = (($regs$5) + ($2152<<3)|0);
        $2184 = HEAP32[$2183>>2]|0;
        $2185 = (($2152) + 1)|0;
        $2186 = (($regs$5) + ($2185<<3)|0);
        $2187 = +HEAPF32[$2186>>2];
        $2188 = (($regs$5) + ($2152<<3)|0);
        $2189 = ((($2188)) + 4|0);
        HEAP32[$2189>>2] = 6;
        $2190 = (+($2184|0));
        $2191 = $2190 * $2187;
        $2192 = (($regs$5) + ($2152<<3)|0);
        HEAPF32[$2192>>2] = $2191;
        break;
       }
       case 1539:  {
        $2193 = (($regs$5) + ($2152<<3)|0);
        $2194 = +HEAPF32[$2193>>2];
        $2195 = (($2152) + 1)|0;
        $2196 = (($regs$5) + ($2195<<3)|0);
        $2197 = HEAP32[$2196>>2]|0;
        $2198 = (+($2197|0));
        $2199 = $2194 * $2198;
        $2200 = (($regs$5) + ($2152<<3)|0);
        HEAPF32[$2200>>2] = $2199;
        break;
       }
       case 1542:  {
        $2201 = (($regs$5) + ($2152<<3)|0);
        $2202 = +HEAPF32[$2201>>2];
        $2203 = (($2152) + 1)|0;
        $2204 = (($regs$5) + ($2203<<3)|0);
        $2205 = +HEAPF32[$2204>>2];
        $2206 = $2202 * $2205;
        $2207 = (($regs$5) + ($2152<<3)|0);
        HEAPF32[$2207>>2] = $2206;
        break;
       }
       default: {
        $i$0 = $i$2;
        label = 92;
        break L50;
       }
       }
      } while(0);
      $2208 = ((($pc$6)) + 4|0);
      $2209 = HEAP32[$2208>>2]|0;
      $2210 = $2209 & 127;
      $2211 = (200 + ($2210<<2)|0);
      $2212 = HEAP32[$2211>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2212;$i$2 = $2209;$pc$6 = $2208;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 50:  {
      $2213 = $i$2 >>> 23;
      $2214 = $2213 & 511;
      $2215 = (($regs$5) + ($2214<<3)|0);
      $2216 = ((($2215)) + 4|0);
      $2217 = HEAP32[$2216>>2]|0;
      $2218 = $2217&65535;
      $2219 = $2218&65535;
      $2220 = $2219 << 8;
      $2221 = (($2214) + 1)|0;
      $2222 = (($regs$5) + ($2221<<3)|0);
      $2223 = ((($2222)) + 4|0);
      $2224 = HEAP32[$2223>>2]|0;
      $2225 = $2224&65535;
      $2226 = $2225&65535;
      $2227 = $2226 & 255;
      $2228 = $2220 | $2227;
      switch ($2228|0) {
      case 771:  {
       $2229 = (($regs$5) + ($2214<<3)|0);
       $2230 = HEAP32[$2229>>2]|0;
       $2231 = (($2214) + 1)|0;
       $2232 = (($regs$5) + ($2231<<3)|0);
       $2233 = HEAP32[$2232>>2]|0;
       $2234 = (($regs$5) + ($2214<<3)|0);
       $2235 = ((($2234)) + 4|0);
       HEAP32[$2235>>2] = 6;
       $2236 = (+($2230|0));
       $2237 = (+($2233|0));
       $2238 = $2236 / $2237;
       $2239 = (($regs$5) + ($2214<<3)|0);
       HEAPF32[$2239>>2] = $2238;
       break;
      }
      case 774:  {
       $2240 = (($regs$5) + ($2214<<3)|0);
       $2241 = HEAP32[$2240>>2]|0;
       $2242 = (($2214) + 1)|0;
       $2243 = (($regs$5) + ($2242<<3)|0);
       $2244 = +HEAPF32[$2243>>2];
       $2245 = (($regs$5) + ($2214<<3)|0);
       $2246 = ((($2245)) + 4|0);
       HEAP32[$2246>>2] = 6;
       $2247 = (+($2241|0));
       $2248 = $2247 / $2244;
       $2249 = (($regs$5) + ($2214<<3)|0);
       HEAPF32[$2249>>2] = $2248;
       break;
      }
      case 1539:  {
       $2250 = (($regs$5) + ($2214<<3)|0);
       $2251 = +HEAPF32[$2250>>2];
       $2252 = (($2214) + 1)|0;
       $2253 = (($regs$5) + ($2252<<3)|0);
       $2254 = HEAP32[$2253>>2]|0;
       $2255 = (+($2254|0));
       $2256 = $2251 / $2255;
       $2257 = (($regs$5) + ($2214<<3)|0);
       HEAPF32[$2257>>2] = $2256;
       break;
      }
      case 1542:  {
       $2258 = (($regs$5) + ($2214<<3)|0);
       $2259 = +HEAPF32[$2258>>2];
       $2260 = (($2214) + 1)|0;
       $2261 = (($regs$5) + ($2260<<3)|0);
       $2262 = +HEAPF32[$2261>>2];
       $2263 = $2259 / $2262;
       $2264 = (($regs$5) + ($2214<<3)|0);
       HEAPF32[$2264>>2] = $2263;
       break;
      }
      default: {
       $i$0 = $i$2;
       label = 92;
       break L50;
      }
      }
      $2265 = ((($pc$6)) + 4|0);
      $2266 = HEAP32[$2265>>2]|0;
      $2267 = $2266 & 127;
      $2268 = (200 + ($2267<<2)|0);
      $2269 = HEAP32[$2268>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2269;$i$2 = $2266;$pc$6 = $2265;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 51:  {
      $2361 = $i$2 >>> 23;
      $2362 = $2361 & 511;
      $2363 = (($regs$5) + ($2362<<3)|0);
      $2364 = (($2362) + 1)|0;
      $2365 = (($regs$5) + ($2364<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy929>>2]=HEAP32[$2363>>2]|0;HEAP32[$$byval_copy929+4>>2]=HEAP32[$2363+4>>2]|0;
      ;HEAP32[$$byval_copy930>>2]=HEAP32[$2365>>2]|0;HEAP32[$$byval_copy930+4>>2]=HEAP32[$2365+4>>2]|0;
      $2366 = (invoke_iiii(185,($mrb|0),($$byval_copy929|0),($$byval_copy930|0))|0);
      $2367 = __THREW__; __THREW__ = 0;
      if ((($2367|0) != 0) & ((threwValue|0) != 0)) { $2368 = _testSetjmp(HEAP32[$2367>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2368|0) == 0) { _longjmp($2367|0, threwValue|0); } tempRet0 = (threwValue); } else { $2368 = -1; };
      $2369 = tempRet0;
      $cond1050 = ($2368|0)==(1);
      if ($cond1050) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2369;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2370 = ($2366<<24>>24)!=(0);
      $2371 = (($regs$5) + ($2362<<3)|0);
      $2372 = ((($2371)) + 4|0);
      do {
       if ($2370) {
        HEAP32[$2372>>2] = 2;
        $2373 = (($regs$5) + ($2362<<3)|0);
        HEAP32[$2373>>2] = 1;
       } else {
        $2374 = HEAP32[$2372>>2]|0;
        $2375 = $2374&65535;
        $2376 = $2375&65535;
        $2377 = $2376 << 8;
        $2378 = (($2362) + 1)|0;
        $2379 = (($regs$5) + ($2378<<3)|0);
        $2380 = ((($2379)) + 4|0);
        $2381 = HEAP32[$2380>>2]|0;
        $2382 = $2381&65535;
        $2383 = $2382&65535;
        $2384 = $2383 & 255;
        $2385 = $2377 | $2384;
        switch ($2385|0) {
        case 771:  {
         $2386 = (($regs$5) + ($2362<<3)|0);
         $2387 = HEAP32[$2386>>2]|0;
         $2388 = (($2362) + 1)|0;
         $2389 = (($regs$5) + ($2388<<3)|0);
         $2390 = HEAP32[$2389>>2]|0;
         $2391 = ($2387|0)==($2390|0);
         $2392 = $2391&1;
         $result84$0 = $2392;
         break;
        }
        case 774:  {
         $2393 = (($regs$5) + ($2362<<3)|0);
         $2394 = HEAP32[$2393>>2]|0;
         $2395 = (+($2394|0));
         $2396 = (($2362) + 1)|0;
         $2397 = (($regs$5) + ($2396<<3)|0);
         $2398 = +HEAPF32[$2397>>2];
         $2399 = $2395 == $2398;
         $2400 = $2399&1;
         $result84$0 = $2400;
         break;
        }
        case 1539:  {
         $2401 = (($regs$5) + ($2362<<3)|0);
         $2402 = +HEAPF32[$2401>>2];
         $2403 = (($2362) + 1)|0;
         $2404 = (($regs$5) + ($2403<<3)|0);
         $2405 = HEAP32[$2404>>2]|0;
         $2406 = (+($2405|0));
         $2407 = $2402 == $2406;
         $2408 = $2407&1;
         $result84$0 = $2408;
         break;
        }
        case 1542:  {
         $2409 = (($regs$5) + ($2362<<3)|0);
         $2410 = +HEAPF32[$2409>>2];
         $2411 = (($2362) + 1)|0;
         $2412 = (($regs$5) + ($2411<<3)|0);
         $2413 = +HEAPF32[$2412>>2];
         $2414 = $2410 == $2413;
         $2415 = $2414&1;
         $result84$0 = $2415;
         break;
        }
        default: {
         $i$0 = $i$2;
         label = 92;
         break L50;
        }
        }
        $2416 = ($result84$0|0)!=(0);
        $2417 = (($regs$5) + ($2362<<3)|0);
        $2418 = ((($2417)) + 4|0);
        if ($2416) {
         HEAP32[$2418>>2] = 2;
         $2419 = (($regs$5) + ($2362<<3)|0);
         HEAP32[$2419>>2] = 1;
         break;
        } else {
         HEAP32[$2418>>2] = 0;
         $2420 = (($regs$5) + ($2362<<3)|0);
         HEAP32[$2420>>2] = 1;
         break;
        }
       }
      } while(0);
      $2421 = ((($pc$6)) + 4|0);
      $2422 = HEAP32[$2421>>2]|0;
      $2423 = $2422 & 127;
      $2424 = (200 + ($2423<<2)|0);
      $2425 = HEAP32[$2424>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2425;$i$2 = $2422;$pc$6 = $2421;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 52:  {
      $2426 = $i$2 >>> 23;
      $2427 = $2426 & 511;
      $2428 = (($regs$5) + ($2427<<3)|0);
      $2429 = ((($2428)) + 4|0);
      $2430 = HEAP32[$2429>>2]|0;
      $2431 = $2430&65535;
      $2432 = $2431&65535;
      $2433 = $2432 << 8;
      $2434 = (($2427) + 1)|0;
      $2435 = (($regs$5) + ($2434<<3)|0);
      $2436 = ((($2435)) + 4|0);
      $2437 = HEAP32[$2436>>2]|0;
      $2438 = $2437&65535;
      $2439 = $2438&65535;
      $2440 = $2439 & 255;
      $2441 = $2433 | $2440;
      switch ($2441|0) {
      case 771:  {
       $2442 = (($regs$5) + ($2427<<3)|0);
       $2443 = HEAP32[$2442>>2]|0;
       $2444 = (($2427) + 1)|0;
       $2445 = (($regs$5) + ($2444<<3)|0);
       $2446 = HEAP32[$2445>>2]|0;
       $2447 = ($2443|0)<($2446|0);
       $2448 = $2447&1;
       $result86$0 = $2448;
       break;
      }
      case 774:  {
       $2449 = (($regs$5) + ($2427<<3)|0);
       $2450 = HEAP32[$2449>>2]|0;
       $2451 = (+($2450|0));
       $2452 = (($2427) + 1)|0;
       $2453 = (($regs$5) + ($2452<<3)|0);
       $2454 = +HEAPF32[$2453>>2];
       $2455 = $2451 < $2454;
       $2456 = $2455&1;
       $result86$0 = $2456;
       break;
      }
      case 1539:  {
       $2457 = (($regs$5) + ($2427<<3)|0);
       $2458 = +HEAPF32[$2457>>2];
       $2459 = (($2427) + 1)|0;
       $2460 = (($regs$5) + ($2459<<3)|0);
       $2461 = HEAP32[$2460>>2]|0;
       $2462 = (+($2461|0));
       $2463 = $2458 < $2462;
       $2464 = $2463&1;
       $result86$0 = $2464;
       break;
      }
      case 1542:  {
       $2465 = (($regs$5) + ($2427<<3)|0);
       $2466 = +HEAPF32[$2465>>2];
       $2467 = (($2427) + 1)|0;
       $2468 = (($regs$5) + ($2467<<3)|0);
       $2469 = +HEAPF32[$2468>>2];
       $2470 = $2466 < $2469;
       $2471 = $2470&1;
       $result86$0 = $2471;
       break;
      }
      default: {
       $i$0 = $i$2;
       label = 92;
       break L50;
      }
      }
      $2472 = ($result86$0|0)!=(0);
      $2473 = (($regs$5) + ($2427<<3)|0);
      $2474 = ((($2473)) + 4|0);
      if ($2472) {
       HEAP32[$2474>>2] = 2;
       $2475 = (($regs$5) + ($2427<<3)|0);
       HEAP32[$2475>>2] = 1;
      } else {
       HEAP32[$2474>>2] = 0;
       $2476 = (($regs$5) + ($2427<<3)|0);
       HEAP32[$2476>>2] = 1;
      }
      $2477 = ((($pc$6)) + 4|0);
      $2478 = HEAP32[$2477>>2]|0;
      $2479 = $2478 & 127;
      $2480 = (200 + ($2479<<2)|0);
      $2481 = HEAP32[$2480>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2481;$i$2 = $2478;$pc$6 = $2477;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 53:  {
      $2482 = $i$2 >>> 23;
      $2483 = $2482 & 511;
      $2484 = (($regs$5) + ($2483<<3)|0);
      $2485 = ((($2484)) + 4|0);
      $2486 = HEAP32[$2485>>2]|0;
      $2487 = $2486&65535;
      $2488 = $2487&65535;
      $2489 = $2488 << 8;
      $2490 = (($2483) + 1)|0;
      $2491 = (($regs$5) + ($2490<<3)|0);
      $2492 = ((($2491)) + 4|0);
      $2493 = HEAP32[$2492>>2]|0;
      $2494 = $2493&65535;
      $2495 = $2494&65535;
      $2496 = $2495 & 255;
      $2497 = $2489 | $2496;
      switch ($2497|0) {
      case 771:  {
       $2498 = (($regs$5) + ($2483<<3)|0);
       $2499 = HEAP32[$2498>>2]|0;
       $2500 = (($2483) + 1)|0;
       $2501 = (($regs$5) + ($2500<<3)|0);
       $2502 = HEAP32[$2501>>2]|0;
       $2503 = ($2499|0)<=($2502|0);
       $2504 = $2503&1;
       $result88$0 = $2504;
       break;
      }
      case 774:  {
       $2505 = (($regs$5) + ($2483<<3)|0);
       $2506 = HEAP32[$2505>>2]|0;
       $2507 = (+($2506|0));
       $2508 = (($2483) + 1)|0;
       $2509 = (($regs$5) + ($2508<<3)|0);
       $2510 = +HEAPF32[$2509>>2];
       $2511 = $2507 <= $2510;
       $2512 = $2511&1;
       $result88$0 = $2512;
       break;
      }
      case 1539:  {
       $2513 = (($regs$5) + ($2483<<3)|0);
       $2514 = +HEAPF32[$2513>>2];
       $2515 = (($2483) + 1)|0;
       $2516 = (($regs$5) + ($2515<<3)|0);
       $2517 = HEAP32[$2516>>2]|0;
       $2518 = (+($2517|0));
       $2519 = $2514 <= $2518;
       $2520 = $2519&1;
       $result88$0 = $2520;
       break;
      }
      case 1542:  {
       $2521 = (($regs$5) + ($2483<<3)|0);
       $2522 = +HEAPF32[$2521>>2];
       $2523 = (($2483) + 1)|0;
       $2524 = (($regs$5) + ($2523<<3)|0);
       $2525 = +HEAPF32[$2524>>2];
       $2526 = $2522 <= $2525;
       $2527 = $2526&1;
       $result88$0 = $2527;
       break;
      }
      default: {
       $i$0 = $i$2;
       label = 92;
       break L50;
      }
      }
      $2528 = ($result88$0|0)!=(0);
      $2529 = (($regs$5) + ($2483<<3)|0);
      $2530 = ((($2529)) + 4|0);
      if ($2528) {
       HEAP32[$2530>>2] = 2;
       $2531 = (($regs$5) + ($2483<<3)|0);
       HEAP32[$2531>>2] = 1;
      } else {
       HEAP32[$2530>>2] = 0;
       $2532 = (($regs$5) + ($2483<<3)|0);
       HEAP32[$2532>>2] = 1;
      }
      $2533 = ((($pc$6)) + 4|0);
      $2534 = HEAP32[$2533>>2]|0;
      $2535 = $2534 & 127;
      $2536 = (200 + ($2535<<2)|0);
      $2537 = HEAP32[$2536>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2537;$i$2 = $2534;$pc$6 = $2533;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 54:  {
      $2538 = $i$2 >>> 23;
      $2539 = $2538 & 511;
      $2540 = (($regs$5) + ($2539<<3)|0);
      $2541 = ((($2540)) + 4|0);
      $2542 = HEAP32[$2541>>2]|0;
      $2543 = $2542&65535;
      $2544 = $2543&65535;
      $2545 = $2544 << 8;
      $2546 = (($2539) + 1)|0;
      $2547 = (($regs$5) + ($2546<<3)|0);
      $2548 = ((($2547)) + 4|0);
      $2549 = HEAP32[$2548>>2]|0;
      $2550 = $2549&65535;
      $2551 = $2550&65535;
      $2552 = $2551 & 255;
      $2553 = $2545 | $2552;
      switch ($2553|0) {
      case 771:  {
       $2554 = (($regs$5) + ($2539<<3)|0);
       $2555 = HEAP32[$2554>>2]|0;
       $2556 = (($2539) + 1)|0;
       $2557 = (($regs$5) + ($2556<<3)|0);
       $2558 = HEAP32[$2557>>2]|0;
       $2559 = ($2555|0)>($2558|0);
       $2560 = $2559&1;
       $result90$0 = $2560;
       break;
      }
      case 774:  {
       $2561 = (($regs$5) + ($2539<<3)|0);
       $2562 = HEAP32[$2561>>2]|0;
       $2563 = (+($2562|0));
       $2564 = (($2539) + 1)|0;
       $2565 = (($regs$5) + ($2564<<3)|0);
       $2566 = +HEAPF32[$2565>>2];
       $2567 = $2563 > $2566;
       $2568 = $2567&1;
       $result90$0 = $2568;
       break;
      }
      case 1539:  {
       $2569 = (($regs$5) + ($2539<<3)|0);
       $2570 = +HEAPF32[$2569>>2];
       $2571 = (($2539) + 1)|0;
       $2572 = (($regs$5) + ($2571<<3)|0);
       $2573 = HEAP32[$2572>>2]|0;
       $2574 = (+($2573|0));
       $2575 = $2570 > $2574;
       $2576 = $2575&1;
       $result90$0 = $2576;
       break;
      }
      case 1542:  {
       $2577 = (($regs$5) + ($2539<<3)|0);
       $2578 = +HEAPF32[$2577>>2];
       $2579 = (($2539) + 1)|0;
       $2580 = (($regs$5) + ($2579<<3)|0);
       $2581 = +HEAPF32[$2580>>2];
       $2582 = $2578 > $2581;
       $2583 = $2582&1;
       $result90$0 = $2583;
       break;
      }
      default: {
       $i$0 = $i$2;
       label = 92;
       break L50;
      }
      }
      $2584 = ($result90$0|0)!=(0);
      $2585 = (($regs$5) + ($2539<<3)|0);
      $2586 = ((($2585)) + 4|0);
      if ($2584) {
       HEAP32[$2586>>2] = 2;
       $2587 = (($regs$5) + ($2539<<3)|0);
       HEAP32[$2587>>2] = 1;
      } else {
       HEAP32[$2586>>2] = 0;
       $2588 = (($regs$5) + ($2539<<3)|0);
       HEAP32[$2588>>2] = 1;
      }
      $2589 = ((($pc$6)) + 4|0);
      $2590 = HEAP32[$2589>>2]|0;
      $2591 = $2590 & 127;
      $2592 = (200 + ($2591<<2)|0);
      $2593 = HEAP32[$2592>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2593;$i$2 = $2590;$pc$6 = $2589;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 55:  {
      $2594 = $i$2 >>> 23;
      $2595 = $2594 & 511;
      $2596 = (($regs$5) + ($2595<<3)|0);
      $2597 = ((($2596)) + 4|0);
      $2598 = HEAP32[$2597>>2]|0;
      $2599 = $2598&65535;
      $2600 = $2599&65535;
      $2601 = $2600 << 8;
      $2602 = (($2595) + 1)|0;
      $2603 = (($regs$5) + ($2602<<3)|0);
      $2604 = ((($2603)) + 4|0);
      $2605 = HEAP32[$2604>>2]|0;
      $2606 = $2605&65535;
      $2607 = $2606&65535;
      $2608 = $2607 & 255;
      $2609 = $2601 | $2608;
      switch ($2609|0) {
      case 771:  {
       $2610 = (($regs$5) + ($2595<<3)|0);
       $2611 = HEAP32[$2610>>2]|0;
       $2612 = (($2595) + 1)|0;
       $2613 = (($regs$5) + ($2612<<3)|0);
       $2614 = HEAP32[$2613>>2]|0;
       $2615 = ($2611|0)>=($2614|0);
       $2616 = $2615&1;
       $result92$0 = $2616;
       break;
      }
      case 774:  {
       $2617 = (($regs$5) + ($2595<<3)|0);
       $2618 = HEAP32[$2617>>2]|0;
       $2619 = (+($2618|0));
       $2620 = (($2595) + 1)|0;
       $2621 = (($regs$5) + ($2620<<3)|0);
       $2622 = +HEAPF32[$2621>>2];
       $2623 = $2619 >= $2622;
       $2624 = $2623&1;
       $result92$0 = $2624;
       break;
      }
      case 1539:  {
       $2625 = (($regs$5) + ($2595<<3)|0);
       $2626 = +HEAPF32[$2625>>2];
       $2627 = (($2595) + 1)|0;
       $2628 = (($regs$5) + ($2627<<3)|0);
       $2629 = HEAP32[$2628>>2]|0;
       $2630 = (+($2629|0));
       $2631 = $2626 >= $2630;
       $2632 = $2631&1;
       $result92$0 = $2632;
       break;
      }
      case 1542:  {
       $2633 = (($regs$5) + ($2595<<3)|0);
       $2634 = +HEAPF32[$2633>>2];
       $2635 = (($2595) + 1)|0;
       $2636 = (($regs$5) + ($2635<<3)|0);
       $2637 = +HEAPF32[$2636>>2];
       $2638 = $2634 >= $2637;
       $2639 = $2638&1;
       $result92$0 = $2639;
       break;
      }
      default: {
       $i$0 = $i$2;
       label = 92;
       break L50;
      }
      }
      $2640 = ($result92$0|0)!=(0);
      $2641 = (($regs$5) + ($2595<<3)|0);
      $2642 = ((($2641)) + 4|0);
      if ($2640) {
       HEAP32[$2642>>2] = 2;
       $2643 = (($regs$5) + ($2595<<3)|0);
       HEAP32[$2643>>2] = 1;
      } else {
       HEAP32[$2642>>2] = 0;
       $2644 = (($regs$5) + ($2595<<3)|0);
       HEAP32[$2644>>2] = 1;
      }
      $2645 = ((($pc$6)) + 4|0);
      $2646 = HEAP32[$2645>>2]|0;
      $2647 = $2646 & 127;
      $2648 = (200 + ($2647<<2)|0);
      $2649 = HEAP32[$2648>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2649;$i$2 = $2646;$pc$6 = $2645;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 56:  {
      $2650 = $i$2 >>> 23;
      $2651 = $2650 & 511;
      $2652 = (($regs$5) + ($2651<<3)|0);
      $2653 = $i$2 >>> 7;
      $2654 = $2653 & 127;
      $2655 = $i$2 >>> 14;
      $2656 = $2655 & 511;
      $2657 = (($regs$5) + ($2656<<3)|0);
      __THREW__ = 0;
      invoke_viiii(167,($31|0),($mrb|0),($2654|0),($2657|0));
      $2658 = __THREW__; __THREW__ = 0;
      if ((($2658|0) != 0) & ((threwValue|0) != 0)) { $2659 = _testSetjmp(HEAP32[$2658>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2659|0) == 0) { _longjmp($2658|0, threwValue|0); } tempRet0 = (threwValue); } else { $2659 = -1; };
      $2660 = tempRet0;
      $cond1049 = ($2659|0)==(1);
      if ($cond1049) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2660;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2652>>2]=HEAP32[$31>>2]|0;HEAP32[$2652+4>>2]=HEAP32[$31+4>>2]|0;
      $2661 = ((($mrb)) + 92|0);
      $2662 = ((($2661)) + 416|0);
      HEAP32[$2662>>2] = $ai$1;
      $2663 = ((($pc$6)) + 4|0);
      $2664 = HEAP32[$2663>>2]|0;
      $2665 = $2664 & 127;
      $2666 = (200 + ($2665<<2)|0);
      $2667 = HEAP32[$2666>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2667;$i$2 = $2664;$pc$6 = $2663;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 57:  {
      $2668 = $i$2 >>> 23;
      $2669 = $2668 & 511;
      $2670 = (($regs$5) + ($2669<<3)|0);
      $2671 = $i$2 >>> 14;
      $2672 = $2671 & 511;
      $2673 = (($regs$5) + ($2672<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy931>>2]=HEAP32[$2673>>2]|0;HEAP32[$$byval_copy931+4>>2]=HEAP32[$2673+4>>2]|0;
      invoke_viii(186,($32|0),($mrb|0),($$byval_copy931|0));
      $2674 = __THREW__; __THREW__ = 0;
      if ((($2674|0) != 0) & ((threwValue|0) != 0)) { $2675 = _testSetjmp(HEAP32[$2674>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2675|0) == 0) { _longjmp($2674|0, threwValue|0); } tempRet0 = (threwValue); } else { $2675 = -1; };
      $2676 = tempRet0;
      $cond1047 = ($2675|0)==(1);
      if ($cond1047) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2676;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      __THREW__ = 0;
      ;HEAP32[$$byval_copy932>>2]=HEAP32[$2670>>2]|0;HEAP32[$$byval_copy932+4>>2]=HEAP32[$2670+4>>2]|0;
      ;HEAP32[$$byval_copy933>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy933+4>>2]=HEAP32[$32+4>>2]|0;
      invoke_viii(187,($mrb|0),($$byval_copy932|0),($$byval_copy933|0));
      $2677 = __THREW__; __THREW__ = 0;
      if ((($2677|0) != 0) & ((threwValue|0) != 0)) { $2678 = _testSetjmp(HEAP32[$2677>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2678|0) == 0) { _longjmp($2677|0, threwValue|0); } tempRet0 = (threwValue); } else { $2678 = -1; };
      $2679 = tempRet0;
      $cond1048 = ($2678|0)==(1);
      if ($cond1048) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2679;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2680 = ((($mrb)) + 92|0);
      $2681 = ((($2680)) + 416|0);
      HEAP32[$2681>>2] = $ai$1;
      $2682 = ((($pc$6)) + 4|0);
      $2683 = HEAP32[$2682>>2]|0;
      $2684 = $2683 & 127;
      $2685 = (200 + ($2684<<2)|0);
      $2686 = HEAP32[$2685>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2686;$i$2 = $2683;$pc$6 = $2682;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 58:  {
      $2687 = $i$2 >>> 23;
      $2688 = $2687 & 511;
      $2689 = (($regs$5) + ($2688<<3)|0);
      $2690 = $i$2 >>> 14;
      $2691 = $2690 & 511;
      $2692 = (($regs$5) + ($2691<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy934>>2]=HEAP32[$2689>>2]|0;HEAP32[$$byval_copy934+4>>2]=HEAP32[$2689+4>>2]|0;
      ;HEAP32[$$byval_copy935>>2]=HEAP32[$2692>>2]|0;HEAP32[$$byval_copy935+4>>2]=HEAP32[$2692+4>>2]|0;
      invoke_viii(188,($mrb|0),($$byval_copy934|0),($$byval_copy935|0));
      $2693 = __THREW__; __THREW__ = 0;
      if ((($2693|0) != 0) & ((threwValue|0) != 0)) { $2694 = _testSetjmp(HEAP32[$2693>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2694|0) == 0) { _longjmp($2693|0, threwValue|0); } tempRet0 = (threwValue); } else { $2694 = -1; };
      $2695 = tempRet0;
      $cond1046 = ($2694|0)==(1);
      if ($cond1046) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2695;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2696 = ((($pc$6)) + 4|0);
      $2697 = HEAP32[$2696>>2]|0;
      $2698 = $2697 & 127;
      $2699 = (200 + ($2698<<2)|0);
      $2700 = HEAP32[$2699>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2700;$i$2 = $2697;$pc$6 = $2696;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 59:  {
      $2701 = $i$2 >>> 23;
      $2702 = $2701 & 511;
      $2703 = $i$2 >>> 7;
      $2704 = $2703 & 127;
      $2705 = $i$2 >>> 14;
      $2706 = $2705 & 511;
      $2707 = (($regs$5) + ($2706<<3)|0);
      ;HEAP32[$v95>>2]=HEAP32[$2707>>2]|0;HEAP32[$v95+4>>2]=HEAP32[$2707+4>>2]|0;
      $2708 = ((($v95)) + 4|0);
      $2709 = HEAP32[$2708>>2]|0;
      $2710 = ($2709|0)==(14);
      do {
       if ($2710) {
        $2718 = $i$2 >>> 23;
        $2719 = $2718 & 511;
        $2720 = (($regs$5) + ($2719<<3)|0);
        __THREW__ = 0;
        ;HEAP32[$v95$byval_copy>>2]=HEAP32[$v95>>2]|0;HEAP32[$v95$byval_copy+4>>2]=HEAP32[$v95+4>>2]|0;
        invoke_viiii(189,($33|0),($mrb|0),($v95$byval_copy|0),($2704|0));
        $2721 = __THREW__; __THREW__ = 0;
        if ((($2721|0) != 0) & ((threwValue|0) != 0)) { $2722 = _testSetjmp(HEAP32[$2721>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2722|0) == 0) { _longjmp($2721|0, threwValue|0); } tempRet0 = (threwValue); } else { $2722 = -1; };
        $2723 = tempRet0;
        $cond1045 = ($2722|0)==(1);
        if ($cond1045) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2723;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$2720>>2]=HEAP32[$33>>2]|0;HEAP32[$2720+4>>2]=HEAP32[$33+4>>2]|0;
       } else {
        $2711 = ($2704|0)==(0);
        if ($2711) {
         $2712 = $i$2 >>> 23;
         $2713 = $2712 & 511;
         $2714 = (($regs$5) + ($2713<<3)|0);
         ;HEAP32[$2714>>2]=HEAP32[$v95>>2]|0;HEAP32[$2714+4>>2]=HEAP32[$v95+4>>2]|0;
         break;
        } else {
         $2715 = (($regs$5) + ($2702<<3)|0);
         $2716 = ((($2715)) + 4|0);
         HEAP32[$2716>>2] = 0;
         $2717 = (($regs$5) + ($2702<<3)|0);
         HEAP32[$2717>>2] = 0;
         break;
        }
       }
      } while(0);
      $2724 = ((($pc$6)) + 4|0);
      $2725 = HEAP32[$2724>>2]|0;
      $2726 = $2725 & 127;
      $2727 = (200 + ($2726<<2)|0);
      $2728 = HEAP32[$2727>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2728;$i$2 = $2725;$pc$6 = $2724;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 60:  {
      $2729 = $i$2 >>> 14;
      $2730 = $2729 & 511;
      $2731 = (($regs$5) + ($2730<<3)|0);
      $2732 = $i$2 >>> 7;
      $2733 = $2732 & 127;
      $2734 = $i$2 >>> 23;
      $2735 = $2734 & 511;
      $2736 = (($regs$5) + ($2735<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy936>>2]=HEAP32[$2731>>2]|0;HEAP32[$$byval_copy936+4>>2]=HEAP32[$2731+4>>2]|0;
      ;HEAP32[$$byval_copy937>>2]=HEAP32[$2736>>2]|0;HEAP32[$$byval_copy937+4>>2]=HEAP32[$2736+4>>2]|0;
      invoke_viiii(190,($mrb|0),($$byval_copy936|0),($2733|0),($$byval_copy937|0));
      $2737 = __THREW__; __THREW__ = 0;
      if ((($2737|0) != 0) & ((threwValue|0) != 0)) { $2738 = _testSetjmp(HEAP32[$2737>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2738|0) == 0) { _longjmp($2737|0, threwValue|0); } tempRet0 = (threwValue); } else { $2738 = -1; };
      $2739 = tempRet0;
      $cond1044 = ($2738|0)==(1);
      if ($cond1044) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2739;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2740 = ((($pc$6)) + 4|0);
      $2741 = HEAP32[$2740>>2]|0;
      $2742 = $2741 & 127;
      $2743 = (200 + ($2742<<2)|0);
      $2744 = HEAP32[$2743>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2744;$i$2 = $2741;$pc$6 = $2740;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 61:  {
      $2745 = $i$2 >>> 23;
      $2746 = $2745 & 511;
      $2747 = (($regs$5) + ($2746<<3)|0);
      ;HEAP32[$v97>>2]=HEAP32[$2747>>2]|0;HEAP32[$v97+4>>2]=HEAP32[$2747+4>>2]|0;
      $2748 = $i$2 >>> 14;
      $2749 = $2748 & 511;
      $2750 = $i$2 >>> 7;
      $2751 = $2750 & 127;
      $2752 = ((($v97)) + 4|0);
      $2753 = HEAP32[$2752>>2]|0;
      $2754 = ($2753|0)==(14);
      if (!($2754)) {
       $2755 = (($regs$5) + ($2746<<3)|0);
       __THREW__ = 0;
       invoke_viiii(167,($34|0),($mrb|0),1,($2755|0));
       $2756 = __THREW__; __THREW__ = 0;
       if ((($2756|0) != 0) & ((threwValue|0) != 0)) { $2757 = _testSetjmp(HEAP32[$2756>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2757|0) == 0) { _longjmp($2756|0, threwValue|0); } tempRet0 = (threwValue); } else { $2757 = -1; };
       $2758 = tempRet0;
       $cond1041 = ($2757|0)==(1);
       if ($cond1041) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2758;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$v97>>2]=HEAP32[$34>>2]|0;HEAP32[$v97+4>>2]=HEAP32[$34+4>>2]|0;
      }
      $2759 = HEAP32[$v97>>2]|0;
      $2760 = ((($2759)) + 12|0);
      $2761 = HEAP32[$2760>>2]|0;
      $2762 = (($2749) + ($2751))|0;
      $2763 = ($2761|0)>($2762|0);
      $2764 = (($2746) + 1)|0;
      $2765 = (($regs$5) + ($2746<<3)|0);
      L515: do {
       if ($2763) {
        $2766 = (($2761) - ($2749))|0;
        $2767 = (($2766) - ($2751))|0;
        $2768 = ((($2759)) + 20|0);
        $2769 = HEAP32[$2768>>2]|0;
        $2770 = (($2769) + ($2749<<3)|0);
        __THREW__ = 0;
        invoke_viiii(167,($35|0),($mrb|0),($2767|0),($2770|0));
        $2771 = __THREW__; __THREW__ = 0;
        if ((($2771|0) != 0) & ((threwValue|0) != 0)) { $2772 = _testSetjmp(HEAP32[$2771>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2772|0) == 0) { _longjmp($2771|0, threwValue|0); } tempRet0 = (threwValue); } else { $2772 = -1; };
        $2773 = tempRet0;
        $cond1043 = ($2772|0)==(1);
        if ($cond1043) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2773;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$2765>>2]=HEAP32[$35>>2]|0;HEAP32[$2765+4>>2]=HEAP32[$35+4>>2]|0;
        $a96$0 = $2764;$post$0 = $2751;
        while(1) {
         $2774 = (($post$0) + -1)|0;
         $2775 = ($post$0|0)!=(0);
         if (!($2775)) {
          break L515;
         }
         $2776 = (($a96$0) + 1)|0;
         $2777 = (($regs$5) + ($a96$0<<3)|0);
         $2778 = (($2761) - ($2774))|0;
         $2779 = (($2778) - 1)|0;
         $2780 = ((($2759)) + 20|0);
         $2781 = HEAP32[$2780>>2]|0;
         $2782 = (($2781) + ($2779<<3)|0);
         ;HEAP32[$2777>>2]=HEAP32[$2782>>2]|0;HEAP32[$2777+4>>2]=HEAP32[$2782+4>>2]|0;
         $a96$0 = $2776;$post$0 = $2774;
        }
       } else {
        __THREW__ = 0;
        invoke_viii(173,($36|0),($mrb|0),0);
        $2783 = __THREW__; __THREW__ = 0;
        if ((($2783|0) != 0) & ((threwValue|0) != 0)) { $2784 = _testSetjmp(HEAP32[$2783>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2784|0) == 0) { _longjmp($2783|0, threwValue|0); } tempRet0 = (threwValue); } else { $2784 = -1; };
        $2785 = tempRet0;
        $cond1042 = ($2784|0)==(1);
        if ($cond1042) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2785;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$2765>>2]=HEAP32[$36>>2]|0;HEAP32[$2765+4>>2]=HEAP32[$36+4>>2]|0;
        $idx100$0 = 0;
        while(1) {
         $2786 = (($idx100$0) + ($2749))|0;
         $2787 = ($2786|0)<($2761|0);
         if (!($2787)) {
          $idx100$1 = $idx100$0;
          break;
         }
         $2788 = (($2764) + ($idx100$0))|0;
         $2789 = (($regs$5) + ($2788<<3)|0);
         $2790 = (($2749) + ($idx100$0))|0;
         $2791 = ((($2759)) + 20|0);
         $2792 = HEAP32[$2791>>2]|0;
         $2793 = (($2792) + ($2790<<3)|0);
         ;HEAP32[$2789>>2]=HEAP32[$2793>>2]|0;HEAP32[$2789+4>>2]=HEAP32[$2793+4>>2]|0;
         $2794 = (($idx100$0) + 1)|0;
         $idx100$0 = $2794;
        }
        while(1) {
         $2795 = ($idx100$1|0)<($2751|0);
         if (!($2795)) {
          break L515;
         }
         $2796 = (($2764) + ($idx100$1))|0;
         $2797 = (($regs$5) + ($2796<<3)|0);
         $2798 = ((($2797)) + 4|0);
         HEAP32[$2798>>2] = 0;
         $2799 = (($2764) + ($idx100$1))|0;
         $2800 = (($regs$5) + ($2799<<3)|0);
         HEAP32[$2800>>2] = 0;
         $2801 = (($idx100$1) + 1)|0;
         $idx100$1 = $2801;
        }
       }
      } while(0);
      $2802 = ((($mrb)) + 92|0);
      $2803 = ((($2802)) + 416|0);
      HEAP32[$2803>>2] = $ai$1;
      $2804 = ((($pc$6)) + 4|0);
      $2805 = HEAP32[$2804>>2]|0;
      $2806 = $2805 & 127;
      $2807 = (200 + ($2806<<2)|0);
      $2808 = HEAP32[$2807>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2808;$i$2 = $2805;$pc$6 = $2804;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 62:  {
      $2809 = $i$2 >>> 23;
      $2810 = $2809 & 511;
      $2811 = (($regs$5) + ($2810<<3)|0);
      $2812 = $i$2 >>> 7;
      $2813 = $2812 & 65535;
      $2814 = (($pool$6) + ($2813<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy938>>2]=HEAP32[$2814>>2]|0;HEAP32[$$byval_copy938+4>>2]=HEAP32[$2814+4>>2]|0;
      invoke_viii(191,($37|0),($mrb|0),($$byval_copy938|0));
      $2815 = __THREW__; __THREW__ = 0;
      if ((($2815|0) != 0) & ((threwValue|0) != 0)) { $2816 = _testSetjmp(HEAP32[$2815>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2816|0) == 0) { _longjmp($2815|0, threwValue|0); } tempRet0 = (threwValue); } else { $2816 = -1; };
      $2817 = tempRet0;
      $cond1040 = ($2816|0)==(1);
      if ($cond1040) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2817;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2811>>2]=HEAP32[$37>>2]|0;HEAP32[$2811+4>>2]=HEAP32[$37+4>>2]|0;
      $2818 = ((($mrb)) + 92|0);
      $2819 = ((($2818)) + 416|0);
      HEAP32[$2819>>2] = $ai$1;
      $2820 = ((($pc$6)) + 4|0);
      $2821 = HEAP32[$2820>>2]|0;
      $2822 = $2821 & 127;
      $2823 = (200 + ($2822<<2)|0);
      $2824 = HEAP32[$2823>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2824;$i$2 = $2821;$pc$6 = $2820;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 63:  {
      $2825 = $i$2 >>> 23;
      $2826 = $2825 & 511;
      $2827 = (($regs$5) + ($2826<<3)|0);
      $2828 = $i$2 >>> 14;
      $2829 = $2828 & 511;
      $2830 = (($regs$5) + ($2829<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy939>>2]=HEAP32[$2827>>2]|0;HEAP32[$$byval_copy939+4>>2]=HEAP32[$2827+4>>2]|0;
      ;HEAP32[$$byval_copy940>>2]=HEAP32[$2830>>2]|0;HEAP32[$$byval_copy940+4>>2]=HEAP32[$2830+4>>2]|0;
      invoke_viii(192,($mrb|0),($$byval_copy939|0),($$byval_copy940|0));
      $2831 = __THREW__; __THREW__ = 0;
      if ((($2831|0) != 0) & ((threwValue|0) != 0)) { $2832 = _testSetjmp(HEAP32[$2831>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2832|0) == 0) { _longjmp($2831|0, threwValue|0); } tempRet0 = (threwValue); } else { $2832 = -1; };
      $2833 = tempRet0;
      $cond1039 = ($2832|0)==(1);
      if ($cond1039) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2833;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2834 = ((($mrb)) + 12|0);
      $2835 = HEAP32[$2834>>2]|0;
      $2836 = ((($2835)) + 4|0);
      $2837 = HEAP32[$2836>>2]|0;
      $2838 = ((($pc$6)) + 4|0);
      $2839 = HEAP32[$2838>>2]|0;
      $2840 = $2839 & 127;
      $2841 = (200 + ($2840<<2)|0);
      $2842 = HEAP32[$2841>>2]|0;
      $syms$6$phi = $syms$6;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2842;$i$2 = $2839;$pc$6 = $2838;$regs$5 = $2837;$syms$6 = $syms$6$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 64:  {
      $2843 = $i$2 >>> 14;
      $2844 = $2843 & 511;
      $2845 = $i$2 >>> 7;
      $2846 = $2845 & 127;
      $2847 = $2846<<1;
      $2848 = (($2844) + ($2847))|0;
      __THREW__ = 0;
      invoke_viii(193,($hash|0),($mrb|0),($2846|0));
      $2849 = __THREW__; __THREW__ = 0;
      if ((($2849|0) != 0) & ((threwValue|0) != 0)) { $2850 = _testSetjmp(HEAP32[$2849>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2850|0) == 0) { _longjmp($2849|0, threwValue|0); } tempRet0 = (threwValue); } else { $2850 = -1; };
      $2851 = tempRet0;
      $cond1037 = ($2850|0)==(1);
      if ($cond1037) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2851;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $b$0 = $2844;
      while(1) {
       $2852 = ($b$0|0)<($2848|0);
       if (!($2852)) {
        break;
       }
       $2853 = (($regs$5) + ($b$0<<3)|0);
       $2854 = (($b$0) + 1)|0;
       $2855 = (($regs$5) + ($2854<<3)|0);
       __THREW__ = 0;
       ;HEAP32[$hash$byval_copy>>2]=HEAP32[$hash>>2]|0;HEAP32[$hash$byval_copy+4>>2]=HEAP32[$hash+4>>2]|0;
       ;HEAP32[$$byval_copy941>>2]=HEAP32[$2853>>2]|0;HEAP32[$$byval_copy941+4>>2]=HEAP32[$2853+4>>2]|0;
       ;HEAP32[$$byval_copy942>>2]=HEAP32[$2855>>2]|0;HEAP32[$$byval_copy942+4>>2]=HEAP32[$2855+4>>2]|0;
       invoke_viiii(194,($mrb|0),($hash$byval_copy|0),($$byval_copy941|0),($$byval_copy942|0));
       $2856 = __THREW__; __THREW__ = 0;
       if ((($2856|0) != 0) & ((threwValue|0) != 0)) { $2857 = _testSetjmp(HEAP32[$2856>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2857|0) == 0) { _longjmp($2856|0, threwValue|0); } tempRet0 = (threwValue); } else { $2857 = -1; };
       $2858 = tempRet0;
       $cond1038 = ($2857|0)==(1);
       if ($cond1038) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2858;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $2859 = (($b$0) + 2)|0;
       $b$0 = $2859;
      }
      $2860 = $i$2 >>> 23;
      $2861 = $2860 & 511;
      $2862 = (($regs$5) + ($2861<<3)|0);
      ;HEAP32[$2862>>2]=HEAP32[$hash>>2]|0;HEAP32[$2862+4>>2]=HEAP32[$hash+4>>2]|0;
      $2863 = ((($mrb)) + 92|0);
      $2864 = ((($2863)) + 416|0);
      HEAP32[$2864>>2] = $ai$1;
      $2865 = ((($pc$6)) + 4|0);
      $2866 = HEAP32[$2865>>2]|0;
      $2867 = $2866 & 127;
      $2868 = (200 + ($2867<<2)|0);
      $2869 = HEAP32[$2868>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2869;$i$2 = $2866;$pc$6 = $2865;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 65:  {
      $2870 = $i$2 >>> 7;
      $2871 = $2870 & 3;
      $2872 = $2871 & 2;
      $2873 = ($2872|0)!=(0);
      $2874 = $i$2 >>> 9;
      $2875 = $2874 & 16383;
      $2876 = ((($irep$8)) + 20|0);
      $2877 = HEAP32[$2876>>2]|0;
      $2878 = (($2877) + ($2875<<2)|0);
      $2879 = HEAP32[$2878>>2]|0;
      if ($2873) {
       __THREW__ = 0;
       $2880 = (invoke_iii(165,($mrb|0),($2879|0))|0);
       $2881 = __THREW__; __THREW__ = 0;
       if ((($2881|0) != 0) & ((threwValue|0) != 0)) { $2882 = _testSetjmp(HEAP32[$2881>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2882|0) == 0) { _longjmp($2881|0, threwValue|0); } tempRet0 = (threwValue); } else { $2882 = -1; };
       $2883 = tempRet0;
       $cond1036 = ($2882|0)==(1);
       if ($cond1036) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2883;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $p102$0 = $2880;
      } else {
       __THREW__ = 0;
       $2884 = (invoke_iii(195,($mrb|0),($2879|0))|0);
       $2885 = __THREW__; __THREW__ = 0;
       if ((($2885|0) != 0) & ((threwValue|0) != 0)) { $2886 = _testSetjmp(HEAP32[$2885>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2886|0) == 0) { _longjmp($2885|0, threwValue|0); } tempRet0 = (threwValue); } else { $2886 = -1; };
       $2887 = tempRet0;
       $cond1034 = ($2886|0)==(1);
       if ($cond1034) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2887;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $p102$0 = $2884;
      }
      $2888 = $2871 & 1;
      $2889 = ($2888|0)!=(0);
      if ($2889) {
       $2890 = HEAP32[$p102$0>>2]|0;
       $2891 = $2890 >>> 11;
       $2892 = $2891 | 256;
       $2893 = HEAP32[$p102$0>>2]|0;
       $2894 = $2892 & 2097151;
       $2895 = $2894 << 11;
       $2896 = $2893 & 2047;
       $2897 = $2896 | $2895;
       HEAP32[$p102$0>>2] = $2897;
      }
      $2898 = $i$2 >>> 23;
      $2899 = $2898 & 511;
      $2900 = (($regs$5) + ($2899<<3)|0);
      __THREW__ = 0;
      invoke_vii(133,($38|0),($p102$0|0));
      $2901 = __THREW__; __THREW__ = 0;
      if ((($2901|0) != 0) & ((threwValue|0) != 0)) { $2902 = _testSetjmp(HEAP32[$2901>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2902|0) == 0) { _longjmp($2901|0, threwValue|0); } tempRet0 = (threwValue); } else { $2902 = -1; };
      $2903 = tempRet0;
      $cond1035 = ($2902|0)==(1);
      if ($cond1035) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2903;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2900>>2]=HEAP32[$38>>2]|0;HEAP32[$2900+4>>2]=HEAP32[$38+4>>2]|0;
      $2904 = ((($mrb)) + 92|0);
      $2905 = ((($2904)) + 416|0);
      HEAP32[$2905>>2] = $ai$1;
      $2906 = ((($pc$6)) + 4|0);
      $2907 = HEAP32[$2906>>2]|0;
      $2908 = $2907 & 127;
      $2909 = (200 + ($2908<<2)|0);
      $2910 = HEAP32[$2909>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2910;$i$2 = $2907;$pc$6 = $2906;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 66:  {
      $3171 = $i$2 >>> 14;
      $3172 = $3171 & 511;
      $3173 = $i$2 >>> 23;
      $3174 = $3173 & 511;
      $3175 = (($regs$5) + ($3174<<3)|0);
      $3176 = (($regs$5) + ($3172<<3)|0);
      $3177 = (($3172) + 1)|0;
      $3178 = (($regs$5) + ($3177<<3)|0);
      $3179 = $i$2 >>> 7;
      $3180 = $3179 & 127;
      $3181 = $3180&255;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy945>>2]=HEAP32[$3176>>2]|0;HEAP32[$$byval_copy945+4>>2]=HEAP32[$3176+4>>2]|0;
      ;HEAP32[$$byval_copy946>>2]=HEAP32[$3178>>2]|0;HEAP32[$$byval_copy946+4>>2]=HEAP32[$3178+4>>2]|0;
      invoke_viiiii(200,($48|0),($mrb|0),($$byval_copy945|0),($$byval_copy946|0),($3181|0));
      $3182 = __THREW__; __THREW__ = 0;
      if ((($3182|0) != 0) & ((threwValue|0) != 0)) { $3183 = _testSetjmp(HEAP32[$3182>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3183|0) == 0) { _longjmp($3182|0, threwValue|0); } tempRet0 = (threwValue); } else { $3183 = -1; };
      $3184 = tempRet0;
      $cond1033 = ($3183|0)==(1);
      if ($cond1033) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3184;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$3175>>2]=HEAP32[$48>>2]|0;HEAP32[$3175+4>>2]=HEAP32[$48+4>>2]|0;
      $3185 = ((($mrb)) + 92|0);
      $3186 = ((($3185)) + 416|0);
      HEAP32[$3186>>2] = $ai$1;
      $3187 = ((($pc$6)) + 4|0);
      $3188 = HEAP32[$3187>>2]|0;
      $3189 = $3188 & 127;
      $3190 = (200 + ($3189<<2)|0);
      $3191 = HEAP32[$3190>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3191;$i$2 = $3188;$pc$6 = $3187;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 67:  {
      $2911 = $i$2 >>> 23;
      $2912 = $2911 & 511;
      $2913 = (($regs$5) + ($2912<<3)|0);
      $2914 = ((($mrb)) + 32|0);
      $2915 = HEAP32[$2914>>2]|0;
      __THREW__ = 0;
      invoke_vii(133,($39|0),($2915|0));
      $2916 = __THREW__; __THREW__ = 0;
      if ((($2916|0) != 0) & ((threwValue|0) != 0)) { $2917 = _testSetjmp(HEAP32[$2916>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2917|0) == 0) { _longjmp($2916|0, threwValue|0); } tempRet0 = (threwValue); } else { $2917 = -1; };
      $2918 = tempRet0;
      $cond1032 = ($2917|0)==(1);
      if ($cond1032) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2918;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2913>>2]=HEAP32[$39>>2]|0;HEAP32[$2913+4>>2]=HEAP32[$39+4>>2]|0;
      $2919 = ((($pc$6)) + 4|0);
      $2920 = HEAP32[$2919>>2]|0;
      $2921 = $2920 & 127;
      $2922 = (200 + ($2921<<2)|0);
      $2923 = HEAP32[$2922>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2923;$i$2 = $2920;$pc$6 = $2919;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 68:  {
      $2924 = $i$2 >>> 23;
      $2925 = $2924 & 511;
      $2926 = $i$2 >>> 14;
      $2927 = $2926 & 511;
      $2928 = (($syms$6) + ($2927<<2)|0);
      $2929 = HEAP32[$2928>>2]|0;
      $2930 = (($regs$5) + ($2925<<3)|0);
      ;HEAP32[$base>>2]=HEAP32[$2930>>2]|0;HEAP32[$base+4>>2]=HEAP32[$2930+4>>2]|0;
      $2931 = (($2925) + 1)|0;
      $2932 = (($regs$5) + ($2931<<3)|0);
      ;HEAP32[$super>>2]=HEAP32[$2932>>2]|0;HEAP32[$super+4>>2]=HEAP32[$2932+4>>2]|0;
      $2933 = ((($base)) + 4|0);
      $2934 = HEAP32[$2933>>2]|0;
      $2935 = ($2934|0)==(0);
      if ($2935) {
       $2936 = HEAP32[$base>>2]|0;
       $2937 = ($2936|0)!=(0);
       if (!($2937)) {
        $2938 = ((($mrb)) + 12|0);
        $2939 = HEAP32[$2938>>2]|0;
        $2940 = ((($2939)) + 16|0);
        $2941 = HEAP32[$2940>>2]|0;
        $2942 = ((($2941)) + 44|0);
        $2943 = HEAP32[$2942>>2]|0;
        __THREW__ = 0;
        invoke_vii(133,($40|0),($2943|0));
        $2944 = __THREW__; __THREW__ = 0;
        if ((($2944|0) != 0) & ((threwValue|0) != 0)) { $2945 = _testSetjmp(HEAP32[$2944>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2945|0) == 0) { _longjmp($2944|0, threwValue|0); } tempRet0 = (threwValue); } else { $2945 = -1; };
        $2946 = tempRet0;
        $cond1031 = ($2945|0)==(1);
        if ($cond1031) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2946;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$base>>2]=HEAP32[$40>>2]|0;HEAP32[$base+4>>2]=HEAP32[$40+4>>2]|0;
       }
      }
      __THREW__ = 0;
      ;HEAP32[$base$byval_copy>>2]=HEAP32[$base>>2]|0;HEAP32[$base$byval_copy+4>>2]=HEAP32[$base+4>>2]|0;
      ;HEAP32[$super$byval_copy>>2]=HEAP32[$super>>2]|0;HEAP32[$super$byval_copy+4>>2]=HEAP32[$super+4>>2]|0;
      $2947 = (invoke_iiiii(196,($mrb|0),($base$byval_copy|0),($super$byval_copy|0),($2929|0))|0);
      $2948 = __THREW__; __THREW__ = 0;
      if ((($2948|0) != 0) & ((threwValue|0) != 0)) { $2949 = _testSetjmp(HEAP32[$2948>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2949|0) == 0) { _longjmp($2948|0, threwValue|0); } tempRet0 = (threwValue); } else { $2949 = -1; };
      $2950 = tempRet0;
      $cond1029 = ($2949|0)==(1);
      if ($cond1029) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2950;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2951 = (($regs$5) + ($2925<<3)|0);
      __THREW__ = 0;
      invoke_vii(133,($41|0),($2947|0));
      $2952 = __THREW__; __THREW__ = 0;
      if ((($2952|0) != 0) & ((threwValue|0) != 0)) { $2953 = _testSetjmp(HEAP32[$2952>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2953|0) == 0) { _longjmp($2952|0, threwValue|0); } tempRet0 = (threwValue); } else { $2953 = -1; };
      $2954 = tempRet0;
      $cond1030 = ($2953|0)==(1);
      if ($cond1030) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2954;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2951>>2]=HEAP32[$41>>2]|0;HEAP32[$2951+4>>2]=HEAP32[$41+4>>2]|0;
      $2955 = ((($mrb)) + 92|0);
      $2956 = ((($2955)) + 416|0);
      HEAP32[$2956>>2] = $ai$1;
      $2957 = ((($pc$6)) + 4|0);
      $2958 = HEAP32[$2957>>2]|0;
      $2959 = $2958 & 127;
      $2960 = (200 + ($2959<<2)|0);
      $2961 = HEAP32[$2960>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2961;$i$2 = $2958;$pc$6 = $2957;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 69:  {
      $2962 = $i$2 >>> 23;
      $2963 = $2962 & 511;
      $2964 = $i$2 >>> 14;
      $2965 = $2964 & 511;
      $2966 = (($syms$6) + ($2965<<2)|0);
      $2967 = HEAP32[$2966>>2]|0;
      $2968 = (($regs$5) + ($2963<<3)|0);
      ;HEAP32[$base108>>2]=HEAP32[$2968>>2]|0;HEAP32[$base108+4>>2]=HEAP32[$2968+4>>2]|0;
      $2969 = ((($base108)) + 4|0);
      $2970 = HEAP32[$2969>>2]|0;
      $2971 = ($2970|0)==(0);
      if ($2971) {
       $2972 = HEAP32[$base108>>2]|0;
       $2973 = ($2972|0)!=(0);
       if (!($2973)) {
        $2974 = ((($mrb)) + 12|0);
        $2975 = HEAP32[$2974>>2]|0;
        $2976 = ((($2975)) + 16|0);
        $2977 = HEAP32[$2976>>2]|0;
        $2978 = ((($2977)) + 44|0);
        $2979 = HEAP32[$2978>>2]|0;
        __THREW__ = 0;
        invoke_vii(133,($42|0),($2979|0));
        $2980 = __THREW__; __THREW__ = 0;
        if ((($2980|0) != 0) & ((threwValue|0) != 0)) { $2981 = _testSetjmp(HEAP32[$2980>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2981|0) == 0) { _longjmp($2980|0, threwValue|0); } tempRet0 = (threwValue); } else { $2981 = -1; };
        $2982 = tempRet0;
        $cond1028 = ($2981|0)==(1);
        if ($cond1028) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2982;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        ;HEAP32[$base108>>2]=HEAP32[$42>>2]|0;HEAP32[$base108+4>>2]=HEAP32[$42+4>>2]|0;
       }
      }
      __THREW__ = 0;
      ;HEAP32[$base108$byval_copy>>2]=HEAP32[$base108>>2]|0;HEAP32[$base108$byval_copy+4>>2]=HEAP32[$base108+4>>2]|0;
      $2983 = (invoke_iiii(197,($mrb|0),($base108$byval_copy|0),($2967|0))|0);
      $2984 = __THREW__; __THREW__ = 0;
      if ((($2984|0) != 0) & ((threwValue|0) != 0)) { $2985 = _testSetjmp(HEAP32[$2984>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2985|0) == 0) { _longjmp($2984|0, threwValue|0); } tempRet0 = (threwValue); } else { $2985 = -1; };
      $2986 = tempRet0;
      $cond1026 = ($2985|0)==(1);
      if ($cond1026) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2986;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $2987 = (($regs$5) + ($2963<<3)|0);
      __THREW__ = 0;
      invoke_vii(133,($43|0),($2983|0));
      $2988 = __THREW__; __THREW__ = 0;
      if ((($2988|0) != 0) & ((threwValue|0) != 0)) { $2989 = _testSetjmp(HEAP32[$2988>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2989|0) == 0) { _longjmp($2988|0, threwValue|0); } tempRet0 = (threwValue); } else { $2989 = -1; };
      $2990 = tempRet0;
      $cond1027 = ($2989|0)==(1);
      if ($cond1027) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $2990;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$2987>>2]=HEAP32[$43>>2]|0;HEAP32[$2987+4>>2]=HEAP32[$43+4>>2]|0;
      $2991 = ((($mrb)) + 92|0);
      $2992 = ((($2991)) + 416|0);
      HEAP32[$2992>>2] = $ai$1;
      $2993 = ((($pc$6)) + 4|0);
      $2994 = HEAP32[$2993>>2]|0;
      $2995 = $2994 & 127;
      $2996 = (200 + ($2995<<2)|0);
      $2997 = HEAP32[$2996>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $2997;$i$2 = $2994;$pc$6 = $2993;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 70:  {
      $2998 = $i$2 >>> 23;
      $2999 = $2998 & 511;
      $3000 = (($regs$5) + ($2999<<3)|0);
      ;HEAP32[$recv112>>2]=HEAP32[$3000>>2]|0;HEAP32[$recv112+4>>2]=HEAP32[$3000+4>>2]|0;
      __THREW__ = 0;
      $3001 = (invoke_ii(141,($mrb|0))|0);
      $3002 = __THREW__; __THREW__ = 0;
      if ((($3002|0) != 0) & ((threwValue|0) != 0)) { $3003 = _testSetjmp(HEAP32[$3002>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3003|0) == 0) { _longjmp($3002|0, threwValue|0); } tempRet0 = (threwValue); } else { $3003 = -1; };
      $3004 = tempRet0;
      $cond1020 = ($3003|0)==(1);
      if ($cond1020) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3004;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3005 = ((($pc$6)) + 4|0);
      $3006 = ((($3001)) + 28|0);
      HEAP32[$3006>>2] = $3005;
      $3007 = ((($3001)) + 40|0);
      HEAP32[$3007>>2] = $2999;
      HEAP32[$3001>>2] = 0;
      $3008 = ((($mrb)) + 12|0);
      $3009 = HEAP32[$3008>>2]|0;
      $3010 = ((($3009)) + 4|0);
      $3011 = HEAP32[$3010>>2]|0;
      $3012 = ((($3001)) + 8|0);
      HEAP32[$3012>>2] = $3011;
      $3013 = ((($3001)) + 36|0);
      HEAP32[$3013>>2] = 0;
      $3014 = HEAP32[$recv112>>2]|0;
      $3015 = ((($3001)) + 44|0);
      HEAP32[$3015>>2] = $3014;
      $3016 = ((($mrb)) + 12|0);
      $3017 = HEAP32[$3016>>2]|0;
      $3018 = ((($3017)) + 4|0);
      $3019 = HEAP32[$3018>>2]|0;
      $3020 = (($3019) + ($2999<<3)|0);
      HEAP32[$3018>>2] = $3020;
      $3021 = $i$2 >>> 7;
      $3022 = $3021 & 65535;
      $3023 = ((($irep$8)) + 20|0);
      $3024 = HEAP32[$3023>>2]|0;
      $3025 = (($3024) + ($3022<<2)|0);
      $3026 = HEAP32[$3025>>2]|0;
      __THREW__ = 0;
      $3027 = (invoke_iii(195,($mrb|0),($3026|0))|0);
      $3028 = __THREW__; __THREW__ = 0;
      if ((($3028|0) != 0) & ((threwValue|0) != 0)) { $3029 = _testSetjmp(HEAP32[$3028>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3029|0) == 0) { _longjmp($3028|0, threwValue|0); } tempRet0 = (threwValue); } else { $3029 = -1; };
      $3030 = tempRet0;
      $cond1021 = ($3029|0)==(1);
      if ($cond1021) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3030;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3031 = ((($3001)) + 44|0);
      $3032 = HEAP32[$3031>>2]|0;
      $3033 = ((($3027)) + 16|0);
      HEAP32[$3033>>2] = $3032;
      $3034 = ((($3001)) + 4|0);
      HEAP32[$3034>>2] = $3027;
      $3035 = HEAP32[$3027>>2]|0;
      $3036 = $3035 >>> 11;
      $3037 = $3036 & 128;
      $3038 = ($3037|0)!=(0);
      if (!($3038)) {
       $3072 = ((($3027)) + 12|0);
       $3073 = HEAP32[$3072>>2]|0;
       $3074 = ((($3073)) + 12|0);
       $3075 = HEAP32[$3074>>2]|0;
       $3076 = ((($3073)) + 16|0);
       $3077 = HEAP32[$3076>>2]|0;
       $3078 = ((($3073)) + 2|0);
       $3079 = HEAP16[$3078>>1]|0;
       $3080 = $3079&65535;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($3080|0),1);
       $3081 = __THREW__; __THREW__ = 0;
       if ((($3081|0) != 0) & ((threwValue|0) != 0)) { $3082 = _testSetjmp(HEAP32[$3081>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3082|0) == 0) { _longjmp($3081|0, threwValue|0); } tempRet0 = (threwValue); } else { $3082 = -1; };
       $3083 = tempRet0;
       $cond1022 = ($3082|0)==(1);
       if ($cond1022) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3083;$exc_catched$1 = $exc_catched$5;$irep$1 = $3073;$pc$1 = $pc$6;$pool$1 = $3075;$regs$1 = $regs$5;$syms$1 = $3077;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $3084 = ((($3073)) + 2|0);
       $3085 = HEAP16[$3084>>1]|0;
       $3086 = $3085&65535;
       $3087 = ((($3001)) + 12|0);
       HEAP32[$3087>>2] = $3086;
       $3088 = ((($mrb)) + 12|0);
       $3089 = HEAP32[$3088>>2]|0;
       $3090 = ((($3089)) + 4|0);
       $3091 = HEAP32[$3090>>2]|0;
       $3092 = ((($3073)) + 8|0);
       $3093 = HEAP32[$3092>>2]|0;
       $3094 = HEAP32[$3093>>2]|0;
       $3095 = $3094 & 127;
       $3096 = (200 + ($3095<<2)|0);
       $3097 = HEAP32[$3096>>2]|0;
       $exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3097;$i$2 = $3094;$irep$8 = $3073;$pc$6 = $3093;$pool$6 = $3075;$regs$5 = $3091;$syms$6 = $3077;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      $3039 = ((($3001)) + 12|0);
      HEAP32[$3039>>2] = 0;
      $3040 = ((($mrb)) + 12|0);
      $3041 = HEAP32[$3040>>2]|0;
      $3042 = ((($3041)) + 4|0);
      $3043 = HEAP32[$3042>>2]|0;
      $3044 = ((($3027)) + 12|0);
      $3045 = HEAP32[$3044>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$recv112$byval_copy>>2]=HEAP32[$recv112>>2]|0;HEAP32[$recv112$byval_copy+4>>2]=HEAP32[$recv112+4>>2]|0;
      invoke_viii($3045|0,($44|0),($mrb|0),($recv112$byval_copy|0));
      $3046 = __THREW__; __THREW__ = 0;
      if ((($3046|0) != 0) & ((threwValue|0) != 0)) { $3047 = _testSetjmp(HEAP32[$3046>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3047|0) == 0) { _longjmp($3046|0, threwValue|0); } tempRet0 = (threwValue); } else { $3047 = -1; };
      $3048 = tempRet0;
      $cond1023 = ($3047|0)==(1);
      if ($cond1023) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3048;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$3043>>2]=HEAP32[$44>>2]|0;HEAP32[$3043+4>>2]=HEAP32[$44+4>>2]|0;
      __THREW__ = 0;
      invoke_vii(146,($mrb|0),($ai$1|0));
      $3049 = __THREW__; __THREW__ = 0;
      if ((($3049|0) != 0) & ((threwValue|0) != 0)) { $3050 = _testSetjmp(HEAP32[$3049>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3050|0) == 0) { _longjmp($3049|0, threwValue|0); } tempRet0 = (threwValue); } else { $3050 = -1; };
      $3051 = tempRet0;
      $cond1024 = ($3050|0)==(1);
      if ($cond1024) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3051;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3052 = ((($mrb)) + 20|0);
      $3053 = HEAP32[$3052>>2]|0;
      $3054 = ($3053|0)!=(0|0);
      if ($3054) {
       $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
       label = 276;
       continue L19;
      }
      $3055 = ((($mrb)) + 12|0);
      $3056 = HEAP32[$3055>>2]|0;
      $3057 = ((($3056)) + 16|0);
      $3058 = HEAP32[$3057>>2]|0;
      $3059 = ((($3058)) + 8|0);
      $3060 = HEAP32[$3059>>2]|0;
      $3061 = ((($mrb)) + 12|0);
      $3062 = HEAP32[$3061>>2]|0;
      $3063 = ((($3062)) + 4|0);
      HEAP32[$3063>>2] = $3060;
      __THREW__ = 0;
      invoke_vi(132,($mrb|0));
      $3064 = __THREW__; __THREW__ = 0;
      if ((($3064|0) != 0) & ((threwValue|0) != 0)) { $3065 = _testSetjmp(HEAP32[$3064>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3065|0) == 0) { _longjmp($3064|0, threwValue|0); } tempRet0 = (threwValue); } else { $3065 = -1; };
      $3066 = tempRet0;
      $cond1025 = ($3065|0)==(1);
      if ($cond1025) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3066;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $3060;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3067 = ((($pc$6)) + 4|0);
      $3068 = HEAP32[$3067>>2]|0;
      $3069 = $3068 & 127;
      $3070 = (200 + ($3069<<2)|0);
      $3071 = HEAP32[$3070>>2]|0;
      $syms$6$phi = $syms$6;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3071;$i$2 = $3068;$pc$6 = $3067;$regs$5 = $3060;$syms$6 = $syms$6$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 71:  {
      $3098 = $i$2 >>> 23;
      $3099 = $3098 & 511;
      $3100 = (($regs$5) + ($3099<<3)|0);
      $3101 = HEAP32[$3100>>2]|0;
      $3102 = (($3099) + 1)|0;
      $3103 = (($regs$5) + ($3102<<3)|0);
      $3104 = HEAP32[$3103>>2]|0;
      $3105 = $i$2 >>> 14;
      $3106 = $3105 & 511;
      $3107 = (($syms$6) + ($3106<<2)|0);
      $3108 = HEAP32[$3107>>2]|0;
      __THREW__ = 0;
      invoke_viiii(198,($mrb|0),($3101|0),($3108|0),($3104|0));
      $3109 = __THREW__; __THREW__ = 0;
      if ((($3109|0) != 0) & ((threwValue|0) != 0)) { $3110 = _testSetjmp(HEAP32[$3109>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3110|0) == 0) { _longjmp($3109|0, threwValue|0); } tempRet0 = (threwValue); } else { $3110 = -1; };
      $3111 = tempRet0;
      $cond1019 = ($3110|0)==(1);
      if ($cond1019) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3111;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3112 = ((($mrb)) + 92|0);
      $3113 = ((($3112)) + 416|0);
      HEAP32[$3113>>2] = $ai$1;
      $3114 = ((($pc$6)) + 4|0);
      $3115 = HEAP32[$3114>>2]|0;
      $3116 = $3115 & 127;
      $3117 = (200 + ($3116<<2)|0);
      $3118 = HEAP32[$3117>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3118;$i$2 = $3115;$pc$6 = $3114;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 72:  {
      $3119 = $i$2 >>> 23;
      $3120 = $3119 & 511;
      $3121 = (($regs$5) + ($3120<<3)|0);
      $3122 = $i$2 >>> 14;
      $3123 = $3122 & 511;
      $3124 = (($regs$5) + ($3123<<3)|0);
      __THREW__ = 0;
      ;HEAP32[$$byval_copy943>>2]=HEAP32[$3124>>2]|0;HEAP32[$$byval_copy943+4>>2]=HEAP32[$3124+4>>2]|0;
      invoke_viii(199,($45|0),($mrb|0),($$byval_copy943|0));
      $3125 = __THREW__; __THREW__ = 0;
      if ((($3125|0) != 0) & ((threwValue|0) != 0)) { $3126 = _testSetjmp(HEAP32[$3125>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3126|0) == 0) { _longjmp($3125|0, threwValue|0); } tempRet0 = (threwValue); } else { $3126 = -1; };
      $3127 = tempRet0;
      $cond1018 = ($3126|0)==(1);
      if ($cond1018) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3127;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      ;HEAP32[$3121>>2]=HEAP32[$45>>2]|0;HEAP32[$3121+4>>2]=HEAP32[$45+4>>2]|0;
      $3128 = ((($mrb)) + 92|0);
      $3129 = ((($3128)) + 416|0);
      HEAP32[$3129>>2] = $ai$1;
      $3130 = ((($pc$6)) + 4|0);
      $3131 = HEAP32[$3130>>2]|0;
      $3132 = $3131 & 127;
      $3133 = (200 + ($3132<<2)|0);
      $3134 = HEAP32[$3133>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3134;$i$2 = $3131;$pc$6 = $3130;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     case 73:  {
      $3135 = ((($mrb)) + 12|0);
      $3136 = HEAP32[$3135>>2]|0;
      $3137 = ((($3136)) + 16|0);
      $3138 = HEAP32[$3137>>2]|0;
      $3139 = ((($3138)) + 44|0);
      $3140 = HEAP32[$3139>>2]|0;
      $3141 = ($3140|0)!=(0|0);
      if ($3141) {
       $3154 = $i$2 >>> 23;
       $3155 = $3154 & 511;
       $3156 = (($regs$5) + ($3155<<3)|0);
       $3157 = ((($mrb)) + 12|0);
       $3158 = HEAP32[$3157>>2]|0;
       $3159 = ((($3158)) + 16|0);
       $3160 = HEAP32[$3159>>2]|0;
       $3161 = ((($3160)) + 44|0);
       $3162 = HEAP32[$3161>>2]|0;
       __THREW__ = 0;
       invoke_vii(133,($47|0),($3162|0));
       $3163 = __THREW__; __THREW__ = 0;
       if ((($3163|0) != 0) & ((threwValue|0) != 0)) { $3164 = _testSetjmp(HEAP32[$3163>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3164|0) == 0) { _longjmp($3163|0, threwValue|0); } tempRet0 = (threwValue); } else { $3164 = -1; };
       $3165 = tempRet0;
       $cond1017 = ($3164|0)==(1);
       if ($cond1017) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3165;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       ;HEAP32[$3156>>2]=HEAP32[$47>>2]|0;HEAP32[$3156+4>>2]=HEAP32[$47+4>>2]|0;
       $3166 = ((($pc$6)) + 4|0);
       $3167 = HEAP32[$3166>>2]|0;
       $3168 = $3167 & 127;
       $3169 = (200 + ($3168<<2)|0);
       $3170 = HEAP32[$3169>>2]|0;
       $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3170;$i$2 = $3167;$pc$6 = $3166;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
       label = 590;
       continue L19;
      }
      __THREW__ = 0;
      $3142 = (invoke_iii(135,($mrb|0),(68905|0))|0);
      $3143 = __THREW__; __THREW__ = 0;
      if ((($3143|0) != 0) & ((threwValue|0) != 0)) { $3144 = _testSetjmp(HEAP32[$3143>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3144|0) == 0) { _longjmp($3143|0, threwValue|0); } tempRet0 = (threwValue); } else { $3144 = -1; };
      $3145 = tempRet0;
      $cond1005 = ($3144|0)==(1);
      if ($cond1005) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3145;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      __THREW__ = 0;
      invoke_viiii(171,($46|0),($mrb|0),(56667|0),25);
      $3146 = __THREW__; __THREW__ = 0;
      if ((($3146|0) != 0) & ((threwValue|0) != 0)) { $3147 = _testSetjmp(HEAP32[$3146>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3147|0) == 0) { _longjmp($3146|0, threwValue|0); } tempRet0 = (threwValue); } else { $3147 = -1; };
      $3148 = tempRet0;
      $cond1006 = ($3147|0)==(1);
      if ($cond1006) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3148;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      __THREW__ = 0;
      ;HEAP32[$$byval_copy944>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy944+4>>2]=HEAP32[$46+4>>2]|0;
      invoke_viiii(172,($exc117|0),($mrb|0),($3142|0),($$byval_copy944|0));
      $3149 = __THREW__; __THREW__ = 0;
      if ((($3149|0) != 0) & ((threwValue|0) != 0)) { $3150 = _testSetjmp(HEAP32[$3149>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3150|0) == 0) { _longjmp($3149|0, threwValue|0); } tempRet0 = (threwValue); } else { $3150 = -1; };
      $3151 = tempRet0;
      $cond1007 = ($3150|0)==(1);
      if ($cond1007) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3151;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3152 = HEAP32[$exc117>>2]|0;
      $3153 = ((($mrb)) + 20|0);
      HEAP32[$3153>>2] = $3152;
      $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
      label = 276;
      continue L19;
      break;
     }
     case 74:  {
      $3192 = $i$2 >>> 23;
      $3193 = $3192 & 511;
      $3194 = $i$2 >>> 14;
      $3195 = $3194 & 511;
      $3196 = $i$2 >>> 7;
      $3197 = $3196 & 127;
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $3193;
      $vararg_ptr901 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr901>>2] = $3195;
      $vararg_ptr902 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr902>>2] = $3197;
      (invoke_iii(201,(56693|0),($vararg_buffer|0))|0);
      $3198 = __THREW__; __THREW__ = 0;
      if ((($3198|0) != 0) & ((threwValue|0) != 0)) { $3199 = _testSetjmp(HEAP32[$3198>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3199|0) == 0) { _longjmp($3198|0, threwValue|0); } tempRet0 = (threwValue); } else { $3199 = -1; };
      $3200 = tempRet0;
      $cond1004 = ($3199|0)==(1);
      if ($cond1004) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $3200;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $3201 = ((($pc$6)) + 4|0);
      $3202 = HEAP32[$3201>>2]|0;
      $3203 = $3202 & 127;
      $3204 = (200 + ($3203<<2)|0);
      $3205 = HEAP32[$3204>>2]|0;
      $syms$6$phi = $syms$6;$regs$5$phi = $regs$5;$pool$6$phi = $pool$6;$irep$8$phi = $irep$8;$exc_catched$5$phi = $exc_catched$5;$$8$phi = $$8;$$reg2mem887$0 = $3205;$i$2 = $3202;$pc$6 = $3201;$syms$6 = $syms$6$phi;$regs$5 = $regs$5$phi;$pool$6 = $pool$6$phi;$irep$8 = $irep$8$phi;$exc_catched$5 = $exc_catched$5$phi;$$8 = $$8$phi;
      label = 590;
      continue L19;
      break;
     }
     default: {
      label = 591;
      break L3;
     }
     }
    } while(0);
    if ((label|0) == 92) {
     label = 0;
     $707 = $i$0 >>> 23;
     $708 = $707 & 511;
     $709 = $i$0 >>> 7;
     $710 = $709 & 127;
     $711 = $i$0 >>> 14;
     $712 = $711 & 511;
     $713 = (($syms$6) + ($712<<2)|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = (($regs$5) + ($708<<3)|0);
     ;HEAP32[$recv>>2]=HEAP32[$715>>2]|0;HEAP32[$recv+4>>2]=HEAP32[$715+4>>2]|0;
     $716 = $i$0 & 127;
     $717 = ($716|0)!=(33);
     do {
      if ($717) {
       $718 = ($710|0)==(127);
       if ($718) {
        $719 = (($708) + 2)|0;
        $720 = (($regs$5) + ($719<<3)|0);
        $721 = ((($720)) + 4|0);
        HEAP32[$721>>2] = 0;
        $722 = (($708) + 2)|0;
        $723 = (($regs$5) + ($722<<3)|0);
        HEAP32[$723>>2] = 0;
        break;
       } else {
        $724 = (($708) + ($710))|0;
        $725 = (($724) + 1)|0;
        $726 = (($regs$5) + ($725<<3)|0);
        $727 = ((($726)) + 4|0);
        HEAP32[$727>>2] = 0;
        $728 = (($708) + ($710))|0;
        $729 = (($728) + 1)|0;
        $730 = (($regs$5) + ($729<<3)|0);
        HEAP32[$730>>2] = 0;
        break;
       }
      }
     } while(0);
     __THREW__ = 0;
     ;HEAP32[$recv$byval_copy>>2]=HEAP32[$recv>>2]|0;HEAP32[$recv$byval_copy+4>>2]=HEAP32[$recv+4>>2]|0;
     $731 = (invoke_iii(138,($mrb|0),($recv$byval_copy|0))|0);
     $732 = __THREW__; __THREW__ = 0;
     if ((($732|0) != 0) & ((threwValue|0) != 0)) { $733 = _testSetjmp(HEAP32[$732>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($733|0) == 0) { _longjmp($732|0, threwValue|0); } tempRet0 = (threwValue); } else { $733 = -1; };
     $734 = tempRet0;
     $cond1126 = ($733|0)==(1);
     if ($cond1126) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $734;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     HEAP32[$c>>2] = $731;
     __THREW__ = 0;
     $735 = (invoke_iiii(139,($mrb|0),($c|0),($714|0))|0);
     $736 = __THREW__; __THREW__ = 0;
     if ((($736|0) != 0) & ((threwValue|0) != 0)) { $737 = _testSetjmp(HEAP32[$736>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($737|0) == 0) { _longjmp($736|0, threwValue|0); } tempRet0 = (threwValue); } else { $737 = -1; };
     $738 = tempRet0;
     $cond1127 = ($737|0)==(1);
     if ($cond1127) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $738;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     $739 = ($735|0)!=(0|0);
     do {
      if ($739) {
       $m$0 = $735;$mid$0 = $714;$n11$0 = $710;
      } else {
       __THREW__ = 0;
       invoke_vii(143,($sym|0),($714|0));
       $740 = __THREW__; __THREW__ = 0;
       if ((($740|0) != 0) & ((threwValue|0) != 0)) { $741 = _testSetjmp(HEAP32[$740>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($741|0) == 0) { _longjmp($740|0, threwValue|0); } tempRet0 = (threwValue); } else { $741 = -1; };
       $742 = tempRet0;
       $cond1128 = ($741|0)==(1);
       if ($cond1128) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $742;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       $743 = (invoke_iiii(140,($mrb|0),(65322|0),14)|0);
       $744 = __THREW__; __THREW__ = 0;
       if ((($744|0) != 0) & ((threwValue|0) != 0)) { $745 = _testSetjmp(HEAP32[$744>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($745|0) == 0) { _longjmp($744|0, threwValue|0); } tempRet0 = (threwValue); } else { $745 = -1; };
       $746 = tempRet0;
       $cond1129 = ($745|0)==(1);
       if ($cond1129) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $746;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       $747 = (invoke_iiii(139,($mrb|0),($c|0),($743|0))|0);
       $748 = __THREW__; __THREW__ = 0;
       if ((($748|0) != 0) & ((threwValue|0) != 0)) { $749 = _testSetjmp(HEAP32[$748>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($749|0) == 0) { _longjmp($748|0, threwValue|0); } tempRet0 = (threwValue); } else { $749 = -1; };
       $750 = tempRet0;
       $cond1130 = ($749|0)==(1);
       if ($cond1130) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $750;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $751 = ($747|0)!=(0|0);
       if (!($751)) {
        $752 = ($710|0)==(127);
        if ($752) {
         $753 = (($708) + 1)|0;
         $754 = (($regs$5) + ($753<<3)|0);
         ;HEAP32[$args>>2]=HEAP32[$754>>2]|0;HEAP32[$args+4>>2]=HEAP32[$754+4>>2]|0;
        } else {
         $755 = (($regs$5) + ($708<<3)|0);
         $756 = ((($755)) + 8|0);
         __THREW__ = 0;
         invoke_viiii(167,($7|0),($mrb|0),($710|0),($756|0));
         $757 = __THREW__; __THREW__ = 0;
         if ((($757|0) != 0) & ((threwValue|0) != 0)) { $758 = _testSetjmp(HEAP32[$757>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($758|0) == 0) { _longjmp($757|0, threwValue|0); } tempRet0 = (threwValue); } else { $758 = -1; };
         $759 = tempRet0;
         $cond1131 = ($758|0)==(1);
         if ($cond1131) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $759;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         ;HEAP32[$args>>2]=HEAP32[$7>>2]|0;HEAP32[$args+4>>2]=HEAP32[$7+4>>2]|0;
        }
        __THREW__ = 0;
        ;HEAP32[$recv$byval_copy910>>2]=HEAP32[$recv>>2]|0;HEAP32[$recv$byval_copy910+4>>2]=HEAP32[$recv+4>>2]|0;
        ;HEAP32[$args$byval_copy>>2]=HEAP32[$args>>2]|0;HEAP32[$args$byval_copy+4>>2]=HEAP32[$args+4>>2]|0;
        invoke_viiii(168,($mrb|0),($714|0),($recv$byval_copy910|0),($args$byval_copy|0));
        $760 = __THREW__; __THREW__ = 0;
        if ((($760|0) != 0) & ((threwValue|0) != 0)) { $761 = _testSetjmp(HEAP32[$760>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($761|0) == 0) { _longjmp($760|0, threwValue|0); } tempRet0 = (threwValue); } else { $761 = -1; };
        $762 = tempRet0;
        $cond1132 = ($761|0)==(1);
        if ($cond1132) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $762;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
       }
       $763 = ($710|0)==(127);
       if ($763) {
        $764 = (($708) + 1)|0;
        $765 = (($regs$5) + ($764<<3)|0);
        __THREW__ = 0;
        ;HEAP32[$$byval_copy911>>2]=HEAP32[$765>>2]|0;HEAP32[$$byval_copy911+4>>2]=HEAP32[$765+4>>2]|0;
        ;HEAP32[$sym$byval_copy>>2]=HEAP32[$sym>>2]|0;HEAP32[$sym$byval_copy+4>>2]=HEAP32[$sym+4>>2]|0;
        invoke_viiii(169,($8|0),($mrb|0),($$byval_copy911|0),($sym$byval_copy|0));
        $766 = __THREW__; __THREW__ = 0;
        if ((($766|0) != 0) & ((threwValue|0) != 0)) { $767 = _testSetjmp(HEAP32[$766>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($767|0) == 0) { _longjmp($766|0, threwValue|0); } tempRet0 = (threwValue); } else { $767 = -1; };
        $768 = tempRet0;
        $cond1134 = ($767|0)==(1);
        if ($cond1134) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $768;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $m$0 = $747;$mid$0 = $743;$n11$0 = $710;
        break;
       } else {
        $769 = (($regs$5) + ($708<<3)|0);
        $770 = ((($769)) + 16|0);
        $771 = (($regs$5) + ($708<<3)|0);
        $772 = ((($771)) + 8|0);
        $773 = (($710) + 1)|0;
        __THREW__ = 0;
        invoke_viii(170,($770|0),($772|0),($773|0));
        $774 = __THREW__; __THREW__ = 0;
        if ((($774|0) != 0) & ((threwValue|0) != 0)) { $775 = _testSetjmp(HEAP32[$774>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($775|0) == 0) { _longjmp($774|0, threwValue|0); } tempRet0 = (threwValue); } else { $775 = -1; };
        $776 = tempRet0;
        $cond1133 = ($775|0)==(1);
        if ($cond1133) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $776;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $777 = (($708) + 1)|0;
        $778 = (($regs$5) + ($777<<3)|0);
        ;HEAP32[$778>>2]=HEAP32[$sym>>2]|0;HEAP32[$778+4>>2]=HEAP32[$sym+4>>2]|0;
        $m$0 = $747;$mid$0 = $743;$n11$0 = $773;
        break;
       }
      }
     } while(0);
     __THREW__ = 0;
     $779 = (invoke_ii(141,($mrb|0))|0);
     $780 = __THREW__; __THREW__ = 0;
     if ((($780|0) != 0) & ((threwValue|0) != 0)) { $781 = _testSetjmp(HEAP32[$780>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($781|0) == 0) { _longjmp($780|0, threwValue|0); } tempRet0 = (threwValue); } else { $781 = -1; };
     $782 = tempRet0;
     $cond1135 = ($781|0)==(1);
     if ($cond1135) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $782;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     HEAP32[$779>>2] = $mid$0;
     $783 = ((($779)) + 4|0);
     HEAP32[$783>>2] = $m$0;
     $784 = ((($mrb)) + 12|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = ((($785)) + 4|0);
     $787 = HEAP32[$786>>2]|0;
     $788 = ((($779)) + 8|0);
     HEAP32[$788>>2] = $787;
     $789 = HEAP32[$c>>2]|0;
     $790 = ((($779)) + 44|0);
     HEAP32[$790>>2] = $789;
     $791 = ((($pc$6)) + 4|0);
     $792 = ((($779)) + 28|0);
     HEAP32[$792>>2] = $791;
     $793 = ((($779)) + 40|0);
     HEAP32[$793>>2] = $708;
     $794 = ((($mrb)) + 12|0);
     $795 = HEAP32[$794>>2]|0;
     $796 = ((($795)) + 4|0);
     $797 = HEAP32[$796>>2]|0;
     $798 = (($797) + ($708<<3)|0);
     HEAP32[$796>>2] = $798;
     $799 = HEAP32[$m$0>>2]|0;
     $800 = $799 >>> 11;
     $801 = $800 & 128;
     $802 = ($801|0)!=(0);
     if (!($802)) {
      $861 = ((($mrb)) + 12|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = ((($862)) + 16|0);
      $864 = HEAP32[$863>>2]|0;
      $865 = ((($864)) + 4|0);
      HEAP32[$865>>2] = $m$0;
      $866 = ((($m$0)) + 12|0);
      $867 = HEAP32[$866>>2]|0;
      $868 = ((($867)) + 12|0);
      $869 = HEAP32[$868>>2]|0;
      $870 = ((($867)) + 16|0);
      $871 = HEAP32[$870>>2]|0;
      $872 = ((($867)) + 2|0);
      $873 = HEAP16[$872>>1]|0;
      $874 = $873&65535;
      $875 = ((($779)) + 12|0);
      HEAP32[$875>>2] = $874;
      $876 = ($n11$0|0)==(127);
      if ($876) {
       $877 = ((($779)) + 36|0);
       HEAP32[$877>>2] = -1;
       $878 = ((($867)) + 2|0);
       $879 = HEAP16[$878>>1]|0;
       $880 = $879&65535;
       $881 = ($880|0)<(3);
       if ($881) {
        $$reg2mem897$0 = 3;
       } else {
        $882 = ((($867)) + 2|0);
        $883 = HEAP16[$882>>1]|0;
        $884 = $883&65535;
        $$reg2mem897$0 = $884;
       }
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($$reg2mem897$0|0),3);
       $885 = __THREW__; __THREW__ = 0;
       if ((($885|0) != 0) & ((threwValue|0) != 0)) { $886 = _testSetjmp(HEAP32[$885>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($886|0) == 0) { _longjmp($885|0, threwValue|0); } tempRet0 = (threwValue); } else { $886 = -1; };
       $887 = tempRet0;
       $cond1137 = ($886|0)==(1);
       if ($cond1137) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $m$0;$$reg2mem899$0 = $887;$exc_catched$1 = $exc_catched$5;$irep$1 = $867;$pc$1 = $pc$6;$pool$1 = $869;$regs$1 = $regs$5;$syms$1 = $871;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      } else {
       $888 = ((($779)) + 36|0);
       HEAP32[$888>>2] = $n11$0;
       $889 = ((($867)) + 2|0);
       $890 = HEAP16[$889>>1]|0;
       $891 = $890&65535;
       $892 = (($n11$0) + 2)|0;
       __THREW__ = 0;
       invoke_viii(142,($mrb|0),($891|0),($892|0));
       $893 = __THREW__; __THREW__ = 0;
       if ((($893|0) != 0) & ((threwValue|0) != 0)) { $894 = _testSetjmp(HEAP32[$893>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($894|0) == 0) { _longjmp($893|0, threwValue|0); } tempRet0 = (threwValue); } else { $894 = -1; };
       $895 = tempRet0;
       $cond1136 = ($894|0)==(1);
       if ($cond1136) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $m$0;$$reg2mem899$0 = $895;$exc_catched$1 = $exc_catched$5;$irep$1 = $867;$pc$1 = $pc$6;$pool$1 = $869;$regs$1 = $regs$5;$syms$1 = $871;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
      }
      $896 = ((($mrb)) + 12|0);
      $897 = HEAP32[$896>>2]|0;
      $898 = ((($897)) + 4|0);
      $899 = HEAP32[$898>>2]|0;
      $900 = ((($867)) + 8|0);
      $901 = HEAP32[$900>>2]|0;
      $902 = HEAP32[$901>>2]|0;
      $903 = $902 & 127;
      $904 = (200 + ($903<<2)|0);
      $905 = HEAP32[$904>>2]|0;
      $exc_catched$5$phi = $exc_catched$5;$$8 = $m$0;$$reg2mem887$0 = $905;$i$2 = $902;$irep$8 = $867;$pc$6 = $901;$pool$6 = $869;$regs$5 = $899;$syms$6 = $871;$exc_catched$5 = $exc_catched$5$phi;
      label = 590;
      continue;
     }
     $803 = ($n11$0|0)==(127);
     if ($803) {
      $804 = ((($779)) + 36|0);
      HEAP32[$804>>2] = -1;
      $805 = ((($779)) + 12|0);
      HEAP32[$805>>2] = 3;
     } else {
      $806 = ((($779)) + 36|0);
      HEAP32[$806>>2] = $n11$0;
      $807 = (($n11$0) + 2)|0;
      $808 = ((($779)) + 12|0);
      HEAP32[$808>>2] = $807;
     }
     $809 = ((($m$0)) + 12|0);
     $810 = HEAP32[$809>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$recv$byval_copy912>>2]=HEAP32[$recv>>2]|0;HEAP32[$recv$byval_copy912+4>>2]=HEAP32[$recv+4>>2]|0;
     invoke_viii($810|0,($9|0),($mrb|0),($recv$byval_copy912|0));
     $811 = __THREW__; __THREW__ = 0;
     if ((($811|0) != 0) & ((threwValue|0) != 0)) { $812 = _testSetjmp(HEAP32[$811>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($812|0) == 0) { _longjmp($811|0, threwValue|0); } tempRet0 = (threwValue); } else { $812 = -1; };
     $813 = tempRet0;
     $cond1138 = ($812|0)==(1);
     if ($cond1138) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $813;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     ;HEAP32[$result>>2]=HEAP32[$9>>2]|0;HEAP32[$result+4>>2]=HEAP32[$9+4>>2]|0;
     $814 = ((($mrb)) + 12|0);
     $815 = HEAP32[$814>>2]|0;
     $816 = ((($815)) + 4|0);
     $817 = HEAP32[$816>>2]|0;
     ;HEAP32[$817>>2]=HEAP32[$result>>2]|0;HEAP32[$817+4>>2]=HEAP32[$result+4>>2]|0;
     __THREW__ = 0;
     invoke_vii(146,($mrb|0),($ai$1|0));
     $818 = __THREW__; __THREW__ = 0;
     if ((($818|0) != 0) & ((threwValue|0) != 0)) { $819 = _testSetjmp(HEAP32[$818>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($819|0) == 0) { _longjmp($818|0, threwValue|0); } tempRet0 = (threwValue); } else { $819 = -1; };
     $820 = tempRet0;
     $cond1139 = ($819|0)==(1);
     if ($cond1139) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$8;$$reg2mem899$0 = $820;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$8;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     $821 = ((($mrb)) + 20|0);
     $822 = HEAP32[$821>>2]|0;
     $823 = ($822|0)!=(0|0);
     if ($823) {
      $$5 = $$8;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$8;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
      label = 276;
      continue;
     }
     $824 = ((($mrb)) + 12|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = ((($825)) + 16|0);
     $827 = HEAP32[$826>>2]|0;
     $828 = ((($827)) + 44|0);
     $829 = HEAP32[$828>>2]|0;
     $830 = ($829|0)!=(0|0);
     if ($830) {
      $$2 = $$8;$irep$2 = $irep$8;$pool$2 = $pool$6;$syms$2 = $syms$6;
     } else {
      $831 = ((($827)) + -48|0);
      $832 = ((($831)) + 4|0);
      $833 = HEAP32[$832>>2]|0;
      $834 = HEAP32[$833>>2]|0;
      $835 = $834 >>> 11;
      $836 = $835 & 128;
      $837 = ($836|0)!=(0);
      if ($837) {
       $$2 = $$8;$irep$2 = $irep$8;$pool$2 = $pool$6;$syms$2 = $syms$6;
      } else {
       $838 = ((($827)) + -48|0);
       $839 = ((($838)) + 4|0);
       $840 = HEAP32[$839>>2]|0;
       $841 = ((($840)) + 12|0);
       $842 = HEAP32[$841>>2]|0;
       $843 = ((($842)) + 12|0);
       $844 = HEAP32[$843>>2]|0;
       $845 = ((($842)) + 16|0);
       $846 = HEAP32[$845>>2]|0;
       $$2 = $840;$irep$2 = $842;$pool$2 = $844;$syms$2 = $846;
      }
     }
     $847 = ((($827)) + 8|0);
     $848 = HEAP32[$847>>2]|0;
     $849 = ((($mrb)) + 12|0);
     $850 = HEAP32[$849>>2]|0;
     $851 = ((($850)) + 4|0);
     HEAP32[$851>>2] = $848;
     $852 = ((($827)) + 28|0);
     $853 = HEAP32[$852>>2]|0;
     __THREW__ = 0;
     invoke_vi(132,($mrb|0));
     $854 = __THREW__; __THREW__ = 0;
     if ((($854|0) != 0) & ((threwValue|0) != 0)) { $855 = _testSetjmp(HEAP32[$854>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($855|0) == 0) { _longjmp($854|0, threwValue|0); } tempRet0 = (threwValue); } else { $855 = -1; };
     $856 = tempRet0;
     $cond1140 = ($855|0)==(1);
     if ($cond1140) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$2;$$reg2mem899$0 = $856;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$2;$pc$1 = $853;$pool$1 = $pool$2;$regs$1 = $848;$syms$1 = $syms$2;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     $857 = HEAP32[$853>>2]|0;
     $858 = $857 & 127;
     $859 = (200 + ($858<<2)|0);
     $860 = HEAP32[$859>>2]|0;
     $exc_catched$5$phi = $exc_catched$5;$$8 = $$2;$$reg2mem887$0 = $860;$i$2 = $857;$irep$8 = $irep$2;$pc$6 = $853;$pool$6 = $pool$2;$regs$5 = $848;$syms$6 = $syms$2;$exc_catched$5 = $exc_catched$5$phi;
     label = 590;
     continue;
    }
    else if ((label|0) == 274) {
     label = 0;
     $1500 = $i$2 >>> 23;
     $1501 = $1500 & 511;
     $1502 = $1501 & 511;
     $1503 = $1502 << 23;
     $1504 = 41 | $1503;
     $$4 = $$3;$i$1 = $1504;$irep$4 = $irep$3;
    }
    $1505 = ((($mrb)) + 20|0);
    $1506 = HEAP32[$1505>>2]|0;
    $1507 = ($1506|0)!=(0|0);
    if ($1507) {
     $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
     label = 276;
     continue;
    }
    $1648 = ((($mrb)) + 12|0);
    $1649 = HEAP32[$1648>>2]|0;
    $1650 = ((($1649)) + 16|0);
    $1651 = HEAP32[$1650>>2]|0;
    $1652 = ((($mrb)) + 12|0);
    $1653 = HEAP32[$1652>>2]|0;
    $1654 = ((($1653)) + 16|0);
    $1655 = HEAP32[$1654>>2]|0;
    $1656 = ((($1655)) + 20|0);
    $1657 = HEAP32[$1656>>2]|0;
    $1658 = $i$1 >>> 23;
    $1659 = $1658 & 511;
    $1660 = (($regs$5) + ($1659<<3)|0);
    ;HEAP32[$v>>2]=HEAP32[$1660>>2]|0;HEAP32[$v+4>>2]=HEAP32[$1660+4>>2]|0;
    $1661 = $i$1 >>> 14;
    $1662 = $1661 & 511;
    L655: do {
     switch ($1662|0) {
     case 2:  {
      $1663 = ((($$4)) + 20|0);
      $1664 = HEAP32[$1663>>2]|0;
      $1665 = ($1664|0)!=(0|0);
      if ($1665) {
       $1666 = HEAP32[$$4>>2]|0;
       $1667 = $1666 >>> 11;
       $1668 = $1667 & 256;
       $1669 = ($1668|0)!=(0);
       if ($1669) {
        label = 313;
       } else {
        __THREW__ = 0;
        $1670 = (invoke_iii(179,($mrb|0),($$4|0))|0);
        $1671 = __THREW__; __THREW__ = 0;
        if ((($1671|0) != 0) & ((threwValue|0) != 0)) { $1672 = _testSetjmp(HEAP32[$1671>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1672|0) == 0) { _longjmp($1671|0, threwValue|0); } tempRet0 = (threwValue); } else { $1672 = -1; };
        $1673 = tempRet0;
        $cond1076 = ($1672|0)==(1);
        if ($cond1076) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1673;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $1674 = ((($1670)) + 20|0);
        $1675 = HEAP32[$1674>>2]|0;
        $1676 = ($1675|0)>=(0);
        if (!($1676)) {
         __THREW__ = 0;
         invoke_vii(180,($mrb|0),0);
         $1677 = __THREW__; __THREW__ = 0;
         if ((($1677|0) != 0) & ((threwValue|0) != 0)) { $1678 = _testSetjmp(HEAP32[$1677>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1678|0) == 0) { _longjmp($1677|0, threwValue|0); } tempRet0 = (threwValue); } else { $1678 = -1; };
         $1679 = tempRet0;
         $cond1077 = ($1678|0)==(1);
         if ($cond1077) {
          $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1679;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
          continue L3;
         }
         $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
         label = 276;
         continue L19;
        }
        $1680 = ((($mrb)) + 12|0);
        $1681 = HEAP32[$1680>>2]|0;
        $1682 = ((($1681)) + 20|0);
        $1683 = HEAP32[$1682>>2]|0;
        $1684 = ((($1670)) + 20|0);
        $1685 = HEAP32[$1684>>2]|0;
        $1686 = (($1683) + (($1685*48)|0)|0);
        $1687 = ((($mrb)) + 12|0);
        $1688 = HEAP32[$1687>>2]|0;
        $1689 = ((($1688)) + 20|0);
        $1690 = HEAP32[$1689>>2]|0;
        $1691 = ($1686|0)==($1690|0);
        if (!($1691)) {
         $1695 = ((($mrb)) + 12|0);
         $1696 = HEAP32[$1695>>2]|0;
         $1697 = ((($1696)) + 16|0);
         $1698 = HEAP32[$1697>>2]|0;
         $1699 = ((($1698)) + 8|0);
         $1700 = HEAP32[$1699>>2]|0;
         $1701 = ((($mrb)) + 12|0);
         $1702 = HEAP32[$1701>>2]|0;
         $1703 = ((($1702)) + 4|0);
         HEAP32[$1703>>2] = $1700;
         $1704 = ((($mrb)) + 12|0);
         $1705 = HEAP32[$1704>>2]|0;
         $1706 = ((($1705)) + 16|0);
         HEAP32[$1706>>2] = $1686;
         $ci34$1 = $1686;$eidx35$0 = $1657;
         break L655;
        }
        __THREW__ = 0;
        invoke_vii(180,($mrb|0),0);
        $1692 = __THREW__; __THREW__ = 0;
        if ((($1692|0) != 0) & ((threwValue|0) != 0)) { $1693 = _testSetjmp(HEAP32[$1692>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1693|0) == 0) { _longjmp($1692|0, threwValue|0); } tempRet0 = (threwValue); } else { $1693 = -1; };
        $1694 = tempRet0;
        $cond1078 = ($1693|0)==(1);
        if ($cond1078) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1694;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
      } else {
       label = 313;
      }
      break;
     }
     case 0:  {
      label = 313;
      break;
     }
     case 1:  {
      $1756 = ((($$4)) + 20|0);
      $1757 = HEAP32[$1756>>2]|0;
      $1758 = ($1757|0)!=(0|0);
      if ($1758) {
       $1759 = ((($$4)) + 20|0);
       $1760 = HEAP32[$1759>>2]|0;
       $1761 = ((($1760)) + 20|0);
       $1762 = HEAP32[$1761>>2]|0;
       $1763 = ($1762|0)>=(0);
       if ($1763) {
        $1767 = ((($mrb)) + 12|0);
        $1768 = HEAP32[$1767>>2]|0;
        $1769 = ((($1768)) + 16|0);
        $1770 = HEAP32[$1769>>2]|0;
        $1771 = ((($mrb)) + 12|0);
        $1772 = HEAP32[$1771>>2]|0;
        $1773 = ((($1772)) + 20|0);
        $1774 = HEAP32[$1773>>2]|0;
        $1775 = ($1770|0)==($1774|0);
        if ($1775) {
         $1776 = ((($mrb)) + 12|0);
         $1777 = HEAP32[$1776>>2]|0;
         $1778 = ((($1777)) + 16|0);
         $1779 = HEAP32[$1778>>2]|0;
         $1780 = ((($1779)) + 28|0);
         $1781 = HEAP32[$1780>>2]|0;
         $1782 = ($1781|0)!=(0|0);
         if ($1782) {
          $1783 = ((($mrb)) + 12|0);
          $1784 = HEAP32[$1783>>2]|0;
          $1785 = HEAP32[$1784>>2]|0;
          $1786 = ((($mrb)) + 12|0);
          HEAP32[$1786>>2] = $1785;
          HEAP32[$1784>>2] = 0;
         }
        }
        $1787 = ((($mrb)) + 12|0);
        $1788 = HEAP32[$1787>>2]|0;
        $1789 = ((($1788)) + 16|0);
        $1790 = HEAP32[$1789>>2]|0;
        $1791 = ((($1790)) + 8|0);
        $1792 = HEAP32[$1791>>2]|0;
        $1793 = ((($mrb)) + 12|0);
        $1794 = HEAP32[$1793>>2]|0;
        $1795 = ((($1794)) + 4|0);
        HEAP32[$1795>>2] = $1792;
        $1796 = ((($mrb)) + 12|0);
        $1797 = HEAP32[$1796>>2]|0;
        $1798 = ((($1797)) + 20|0);
        $1799 = HEAP32[$1798>>2]|0;
        $1800 = ((($$4)) + 20|0);
        $1801 = HEAP32[$1800>>2]|0;
        $1802 = ((($1801)) + 20|0);
        $1803 = HEAP32[$1802>>2]|0;
        $1804 = (($1799) + (($1803*48)|0)|0);
        $1805 = ((($1804)) + 48|0);
        $1806 = ((($mrb)) + 12|0);
        $1807 = HEAP32[$1806>>2]|0;
        $1808 = ((($1807)) + 16|0);
        HEAP32[$1808>>2] = $1805;
        $ci34$0 = $1790;
        while(1) {
         $1809 = ((($mrb)) + 12|0);
         $1810 = HEAP32[$1809>>2]|0;
         $1811 = ((($1810)) + 16|0);
         $1812 = HEAP32[$1811>>2]|0;
         $1813 = ($ci34$0>>>0)>($1812>>>0);
         if (!($1813)) {
          $ci34$1 = $ci34$0;$eidx35$0 = $1657;
          break L655;
         }
         $1814 = ((($ci34$0)) + -48|0);
         $1815 = ((($1814)) + 40|0);
         $1816 = HEAP32[$1815>>2]|0;
         $1817 = ($1816|0)==(-1);
         if ($1817) {
          break;
         }
         $1821 = ((($ci34$0)) + -48|0);
         $ci34$0 = $1821;
        }
        $1818 = ((($mrb)) + 12|0);
        $1819 = HEAP32[$1818>>2]|0;
        $1820 = ((($1819)) + 16|0);
        HEAP32[$1820>>2] = $ci34$0;
        $ci34$1 = $ci34$0;$eidx35$0 = $1657;
        break L655;
       }
      }
      __THREW__ = 0;
      invoke_vii(180,($mrb|0),1);
      $1764 = __THREW__; __THREW__ = 0;
      if ((($1764|0) != 0) & ((threwValue|0) != 0)) { $1765 = _testSetjmp(HEAP32[$1764>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1765|0) == 0) { _longjmp($1764|0, threwValue|0); } tempRet0 = (threwValue); } else { $1765 = -1; };
      $1766 = tempRet0;
      $cond1071 = ($1765|0)==(1);
      if ($cond1071) {
       $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1766;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
       continue L3;
      }
      $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
      label = 276;
      continue L19;
      break;
     }
     default: {
      $ci34$1 = $1651;$eidx35$0 = $1657;
     }
     }
    } while(0);
    if ((label|0) == 313) {
     label = 0;
     $1707 = ((($mrb)) + 12|0);
     $1708 = HEAP32[$1707>>2]|0;
     $1709 = ((($1708)) + 20|0);
     $1710 = HEAP32[$1709>>2]|0;
     $1711 = ($1651|0)==($1710|0);
     do {
      if ($1711) {
       $1712 = ((($mrb)) + 12|0);
       $1713 = HEAP32[$1712>>2]|0;
       $1714 = HEAP32[$1713>>2]|0;
       $1715 = ($1714|0)!=(0|0);
       if (!($1715)) {
        __THREW__ = 0;
        invoke_vii(180,($mrb|0),0);
        $1716 = __THREW__; __THREW__ = 0;
        if ((($1716|0) != 0) & ((threwValue|0) != 0)) { $1717 = _testSetjmp(HEAP32[$1716>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1717|0) == 0) { _longjmp($1716|0, threwValue|0); } tempRet0 = (threwValue); } else { $1717 = -1; };
        $1718 = tempRet0;
        $cond1072 = ($1717|0)==(1);
        if ($cond1072) {
         $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1718;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
         continue L3;
        }
        $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
        label = 276;
        continue L19;
       }
       $1719 = ((($mrb)) + 12|0);
       $1720 = HEAP32[$1719>>2]|0;
       $1721 = HEAP32[$1720>>2]|0;
       $1722 = ((($1721)) + 16|0);
       $1723 = HEAP32[$1722>>2]|0;
       $1724 = ((($mrb)) + 12|0);
       $1725 = HEAP32[$1724>>2]|0;
       $1726 = HEAP32[$1725>>2]|0;
       $1727 = ((($1726)) + 20|0);
       $1728 = HEAP32[$1727>>2]|0;
       $1729 = ($1723|0)==($1728|0);
       if (!($1729)) {
        $1742 = ((($mrb)) + 12|0);
        $1743 = HEAP32[$1742>>2]|0;
        $1744 = ((($1743)) + 44|0);
        HEAP32[$1744>>2] = 5;
        $1745 = ((($mrb)) + 12|0);
        $1746 = HEAP32[$1745>>2]|0;
        $1747 = HEAP32[$1746>>2]|0;
        $1748 = ((($mrb)) + 12|0);
        HEAP32[$1748>>2] = $1747;
        $1749 = ((($mrb)) + 12|0);
        $1750 = HEAP32[$1749>>2]|0;
        $1751 = ((($1750)) + 44|0);
        HEAP32[$1751>>2] = 1;
        break;
       }
       __THREW__ = 0;
       $1730 = (invoke_iii(135,($mrb|0),(56642|0))|0);
       $1731 = __THREW__; __THREW__ = 0;
       if ((($1731|0) != 0) & ((threwValue|0) != 0)) { $1732 = _testSetjmp(HEAP32[$1731>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1732|0) == 0) { _longjmp($1731|0, threwValue|0); } tempRet0 = (threwValue); } else { $1732 = -1; };
       $1733 = tempRet0;
       $cond1073 = ($1732|0)==(1);
       if ($cond1073) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1733;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       invoke_viiii(171,($26|0),($mrb|0),(56653|0),13);
       $1734 = __THREW__; __THREW__ = 0;
       if ((($1734|0) != 0) & ((threwValue|0) != 0)) { $1735 = _testSetjmp(HEAP32[$1734>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1735|0) == 0) { _longjmp($1734|0, threwValue|0); } tempRet0 = (threwValue); } else { $1735 = -1; };
       $1736 = tempRet0;
       $cond1074 = ($1735|0)==(1);
       if ($cond1074) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1736;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       __THREW__ = 0;
       ;HEAP32[$$byval_copy922>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy922+4>>2]=HEAP32[$26+4>>2]|0;
       invoke_viiii(172,($exc37|0),($mrb|0),($1730|0),($$byval_copy922|0));
       $1737 = __THREW__; __THREW__ = 0;
       if ((($1737|0) != 0) & ((threwValue|0) != 0)) { $1738 = _testSetjmp(HEAP32[$1737>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1738|0) == 0) { _longjmp($1737|0, threwValue|0); } tempRet0 = (threwValue); } else { $1738 = -1; };
       $1739 = tempRet0;
       $cond1075 = ($1738|0)==(1);
       if ($cond1075) {
        $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1739;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
        continue L3;
       }
       $1740 = HEAP32[$exc37>>2]|0;
       $1741 = ((($mrb)) + 20|0);
       HEAP32[$1741>>2] = $1740;
       $$5 = $$4;$exc_catched$2 = $exc_catched$5;$irep$5 = $irep$4;$pc$3 = $pc$6;$pool$3 = $pool$6;$regs$2 = $regs$5;$syms$3 = $syms$6;
       label = 276;
       continue L19;
      }
     } while(0);
     $1752 = ((($mrb)) + 12|0);
     $1753 = HEAP32[$1752>>2]|0;
     $1754 = ((($1753)) + 16|0);
     $1755 = HEAP32[$1754>>2]|0;
     $ci34$1 = $1755;$eidx35$0 = $1657;
    }
    while(1) {
     $1822 = ((($mrb)) + 12|0);
     $1823 = HEAP32[$1822>>2]|0;
     $1824 = ((($1823)) + 16|0);
     $1825 = HEAP32[$1824>>2]|0;
     $1826 = ((($1825)) + -48|0);
     $1827 = ((($1826)) + 20|0);
     $1828 = HEAP32[$1827>>2]|0;
     $1829 = ($eidx35$0|0)>($1828|0);
     if (!($1829)) {
      break;
     }
     $1830 = (($eidx35$0) + -1)|0;
     __THREW__ = 0;
     invoke_vii(166,($mrb|0),($1830|0));
     $1831 = __THREW__; __THREW__ = 0;
     if ((($1831|0) != 0) & ((threwValue|0) != 0)) { $1832 = _testSetjmp(HEAP32[$1831>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1832|0) == 0) { _longjmp($1831|0, threwValue|0); } tempRet0 = (threwValue); } else { $1832 = -1; };
     $1833 = tempRet0;
     $cond1080 = ($1832|0)==(1);
     if ($cond1080) {
      $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1833;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
      continue L3;
     }
     $ci34$1$phi = $ci34$1;$eidx35$0 = $1830;$ci34$1 = $ci34$1$phi;
    }
    __THREW__ = 0;
    invoke_vi(132,($mrb|0));
    $1834 = __THREW__; __THREW__ = 0;
    if ((($1834|0) != 0) & ((threwValue|0) != 0)) { $1835 = _testSetjmp(HEAP32[$1834>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1835|0) == 0) { _longjmp($1834|0, threwValue|0); } tempRet0 = (threwValue); } else { $1835 = -1; };
    $1836 = tempRet0;
    $cond1079 = ($1835|0)==(1);
    if ($cond1079) {
     $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$4;$$reg2mem899$0 = $1836;$exc_catched$1 = $exc_catched$5;$irep$1 = $irep$4;$pc$1 = $pc$6;$pool$1 = $pool$6;$regs$1 = $regs$5;$syms$1 = $syms$6;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
     continue L3;
    }
    $1837 = ((($ci34$1)) + 40|0);
    $1838 = HEAP32[$1837>>2]|0;
    $1839 = ((($ci34$1)) + 28|0);
    $1840 = HEAP32[$1839>>2]|0;
    $1841 = ((($ci34$1)) + 8|0);
    $1842 = HEAP32[$1841>>2]|0;
    $1843 = ((($mrb)) + 12|0);
    $1844 = HEAP32[$1843>>2]|0;
    $1845 = ((($1844)) + 4|0);
    HEAP32[$1845>>2] = $1842;
    $1846 = ($1838|0)==(-1);
    if ($1846) {
     label = 341;
     break L3;
    }
    $1847 = ((($mrb)) + 12|0);
    $1848 = HEAP32[$1847>>2]|0;
    $1849 = ((($1848)) + 16|0);
    $1850 = HEAP32[$1849>>2]|0;
    $1851 = ((($1850)) + 4|0);
    $1852 = HEAP32[$1851>>2]|0;
    $1853 = ((($1852)) + 12|0);
    $1854 = HEAP32[$1853>>2]|0;
    $1855 = ((($1854)) + 12|0);
    $1856 = HEAP32[$1855>>2]|0;
    $1857 = ((($1854)) + 16|0);
    $1858 = HEAP32[$1857>>2]|0;
    $1859 = (($1842) + ($1838<<3)|0);
    ;HEAP32[$1859>>2]=HEAP32[$v>>2]|0;HEAP32[$1859+4>>2]=HEAP32[$v+4>>2]|0;
    $$6 = $1852;$exc_catched$3 = $exc_catched$5;$irep$6 = $1854;$pc$4 = $1840;$pool$4 = $1856;$regs$3 = $1842;$syms$4 = $1858;
   }
   $1860 = HEAP32[$pc$4>>2]|0;
   $1861 = $1860 & 127;
   $1862 = (200 + ($1861<<2)|0);
   $1863 = HEAP32[$1862>>2]|0;
   $$8 = $$6;$$reg2mem887$0 = $1863;$exc_catched$5 = $exc_catched$3;$i$2 = $1860;$irep$8 = $irep$6;$pc$6 = $pc$4;$pool$6 = $pool$4;$regs$5 = $regs$3;$syms$6 = $syms$4;
   label = 590;
  }
  if ((label|0) == 287) {
   label = 0;
   HEAP32[$mrb>>2] = $prev_jmp$1;
   __THREW__ = 0;
   invoke_vii(178,($prev_jmp$1|0),1);
   $1578 = __THREW__; __THREW__ = 0;
   if ((($1578|0) != 0) & ((threwValue|0) != 0)) { $1579 = _testSetjmp(HEAP32[$1578>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1579|0) == 0) { _longjmp($1578|0, threwValue|0); } tempRet0 = (threwValue); } else { $1579 = -1; };
   $1580 = tempRet0;
   $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$5;$$reg2mem899$0 = $1580;$exc_catched$1 = $exc_catched$2;$irep$1 = $irep$5;$pc$1 = $pc$3;$pool$1 = $pool$3;$regs$1 = $regs$2;$syms$1 = $syms$3;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
   continue;
  }
  else if ((label|0) == 294) {
   label = 0;
   $1601 = ((($1600)) + 8|0);
   $1602 = HEAP32[$1601>>2]|0;
   $1603 = ((($mrb)) + 12|0);
   $1604 = HEAP32[$1603>>2]|0;
   $1605 = ((($1604)) + 4|0);
   HEAP32[$1605>>2] = $1602;
   $$7 = $$5;$exc_catched$4 = $exc_catched$2;$irep$7 = $irep$5;$pc$5 = $pc$3;$pool$5 = $pool$3;$regs$4 = $1602;$syms$5 = $syms$3;
  }
  $3206 = ((($mrb)) + 12|0);
  $3207 = HEAP32[$3206>>2]|0;
  $3208 = ((($3207)) + 16|0);
  $3209 = HEAP32[$3208>>2]|0;
  $3210 = ((($mrb)) + 12|0);
  $3211 = HEAP32[$3210>>2]|0;
  $3212 = ((($3211)) + 20|0);
  $3213 = HEAP32[$3212>>2]|0;
  $3214 = ($3209|0)==($3213|0);
  if ($3214) {
   $$reg2mem889$0 = 0;
  } else {
   $3215 = ((($mrb)) + 12|0);
   $3216 = HEAP32[$3215>>2]|0;
   $3217 = ((($3216)) + 16|0);
   $3218 = HEAP32[$3217>>2]|0;
   $3219 = ((($3218)) + -48|0);
   $3220 = ((($3219)) + 20|0);
   $3221 = HEAP32[$3220>>2]|0;
   $$reg2mem889$0 = $3221;
  }
  $3222 = ((($mrb)) + 12|0);
  $3223 = HEAP32[$3222>>2]|0;
  $3224 = ((($3223)) + 16|0);
  $3225 = HEAP32[$3224>>2]|0;
  $3226 = ((($3225)) + 20|0);
  $3227 = HEAP32[$3226>>2]|0;
  $eidx119$0 = $3227;
  while(1) {
   $3228 = ($eidx119$0|0)>($$reg2mem889$0|0);
   if (!($3228)) {
    break;
   }
   $3229 = (($eidx119$0) + -1)|0;
   __THREW__ = 0;
   invoke_vii(166,($mrb|0),($3229|0));
   $3230 = __THREW__; __THREW__ = 0;
   if ((($3230|0) != 0) & ((threwValue|0) != 0)) { $3231 = _testSetjmp(HEAP32[$3230>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3231|0) == 0) { _longjmp($3230|0, threwValue|0); } tempRet0 = (threwValue); } else { $3231 = -1; };
   $3232 = tempRet0;
   $cond1003 = ($3231|0)==(1);
   if ($cond1003) {
    $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$7;$$reg2mem899$0 = $3232;$exc_catched$1 = $exc_catched$4;$irep$1 = $irep$7;$pc$1 = $pc$5;$pool$1 = $pool$5;$regs$1 = $regs$4;$syms$1 = $syms$5;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
    continue L3;
   }
   $eidx119$0 = $3229;
  }
  $3233 = ((($mrb)) + 12|0);
  $3234 = HEAP32[$3233>>2]|0;
  $3235 = ((($3234)) + 16|0);
  $3236 = HEAP32[$3235>>2]|0;
  $3237 = ((($3236)) + 32|0);
  HEAP32[$3237>>2] = 0;
  HEAP32[$mrb>>2] = $prev_jmp$1;
  $3238 = ((($mrb)) + 20|0);
  $3239 = HEAP32[$3238>>2]|0;
  $3240 = ($3239|0)!=(0|0);
  if (!($3240)) {
   label = 578;
   break;
  }
  $3241 = ((($mrb)) + 20|0);
  $3242 = HEAP32[$3241>>2]|0;
  __THREW__ = 0;
  invoke_vii(133,($agg$result|0),($3242|0));
  $3243 = __THREW__; __THREW__ = 0;
  if ((($3243|0) != 0) & ((threwValue|0) != 0)) { $3244 = _testSetjmp(HEAP32[$3243>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3244|0) == 0) { _longjmp($3243|0, threwValue|0); } tempRet0 = (threwValue); } else { $3244 = -1; };
  $3245 = tempRet0;
  $cond1002 = ($3244|0)==(1);
  if ($cond1002) {
   $prev_jmp$1$phi = $prev_jmp$1;$ai$1$phi = $ai$1;$$1 = $$7;$$reg2mem899$0 = $3245;$exc_catched$1 = $exc_catched$4;$irep$1 = $irep$7;$pc$1 = $pc$5;$pool$1 = $pool$5;$regs$1 = $regs$4;$syms$1 = $syms$5;$prev_jmp$1 = $prev_jmp$1$phi;$ai$1 = $ai$1$phi;
  } else {
   label = 577;
   break;
  }
 }
 if ((label|0) == 341) {
  HEAP32[$mrb>>2] = $prev_jmp$1;
  ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 577) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 578) {
  $3246 = HEAP16[$irep$7>>1]|0;
  $3247 = $3246&65535;
  $3248 = (($regs$4) + ($3247<<3)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$3248>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$3248+4>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 591) {
  // unreachable;
 }
}
function _uvenv($mrb,$up) {
 $mrb = $mrb|0;
 $up = $up|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $up;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $e = $11;
 while(1) {
  $12 = $2;
  $13 = (($12) + -1)|0;
  $2 = $13;
  $14 = ($12|0)!=(0);
  $15 = $e;
  if (!($14)) {
   label = 6;
   break;
  }
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 4;
   break;
  }
  $17 = $e;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $e = $19;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $0 = $15;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _ecall($mrb,$i) {
 $mrb = $mrb|0;
 $i = $i|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $exc = 0, $p = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $i;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $self = $7;
 $8 = $1;
 $9 = ($8|0)<(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($10<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $p = $17;
 $18 = $p;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ($26|0)>($27|0);
 if ($28) {
  $29 = $1;
  $30 = $0;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 20|0);
  HEAP32[$35>>2] = $29;
 }
 $36 = $0;
 $37 = (_cipush($36)|0);
 $ci = $37;
 $38 = $0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $ci;
 $44 = ((($43)) + 8|0);
 HEAP32[$44>>2] = $42;
 $45 = $ci;
 $46 = ((($45)) + -48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $ci;
 HEAP32[$48>>2] = $47;
 $49 = $ci;
 $50 = ((($49)) + 40|0);
 HEAP32[$50>>2] = -1;
 $51 = $ci;
 $52 = ((($51)) + 36|0);
 HEAP32[$52>>2] = 0;
 $53 = $p;
 $54 = $ci;
 $55 = ((($54)) + 4|0);
 HEAP32[$55>>2] = $53;
 $56 = $p;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 2|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = $ci;
 $63 = ((($62)) + 12|0);
 HEAP32[$63>>2] = $61;
 $64 = $p;
 $65 = ((($64)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $ci;
 $68 = ((($67)) + 44|0);
 HEAP32[$68>>2] = $66;
 $69 = $0;
 $70 = ((($69)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $ci;
 $75 = ((($74)) + -48|0);
 $76 = ((($75)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($73) + ($77<<3)|0);
 $79 = $0;
 $80 = ((($79)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = $78;
 $83 = $0;
 $84 = ((($83)) + 20|0);
 $85 = HEAP32[$84>>2]|0;
 $exc = $85;
 $86 = $0;
 $87 = ((($86)) + 20|0);
 HEAP32[$87>>2] = 0;
 $88 = $0;
 $89 = $p;
 $90 = $self;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$90>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$90+4>>2]|0;
 _mrb_run($2,$88,$89,$$byval_copy);
 $91 = $1;
 $92 = $0;
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 36|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + ($91<<2)|0);
 HEAP32[$97>>2] = 0;
 $98 = $0;
 $99 = ((($98)) + 20|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $exc;
 $103 = $0;
 $104 = ((($103)) + 20|0);
 HEAP32[$104>>2] = $102;
 STACKTOP = sp;return;
}
function _value_move($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s1;
 $1 = $s2;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = ($3>>>0)>($4>>>0);
 if ($5) {
  $6 = $0;
  $7 = $1;
  $8 = $2;
  $9 = (($7) + ($8<<3)|0);
  $10 = ($6>>>0)<($9>>>0);
  if ($10) {
   $11 = $2;
   $12 = $0;
   $13 = (($12) + ($11<<3)|0);
   $0 = $13;
   $14 = $2;
   $15 = $1;
   $16 = (($15) + ($14<<3)|0);
   $1 = $16;
   while(1) {
    $17 = $2;
    $18 = (($17) + -1)|0;
    $2 = $18;
    $19 = ($17>>>0)>(0);
    if (!($19)) {
     break;
    }
    $20 = $0;
    $21 = ((($20)) + -8|0);
    $0 = $21;
    $22 = $1;
    $23 = ((($22)) + -8|0);
    $1 = $23;
    ;HEAP32[$21>>2]=HEAP32[$23>>2]|0;HEAP32[$21+4>>2]=HEAP32[$23+4>>2]|0;
   }
   STACKTOP = sp;return;
  }
 }
 $24 = $0;
 $25 = $1;
 $26 = ($24|0)!=($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $27 = $2;
  $28 = (($27) + -1)|0;
  $2 = $28;
  $29 = ($27>>>0)>(0);
  if (!($29)) {
   break;
  }
  $30 = $0;
  $31 = ((($30)) + 8|0);
  $0 = $31;
  $32 = $1;
  $33 = ((($32)) + 8|0);
  $1 = $33;
  ;HEAP32[$30>>2]=HEAP32[$32>>2]|0;HEAP32[$30+4>>2]=HEAP32[$32+4>>2]|0;
 }
 STACKTOP = sp;return;
}
function _argnum_error($mrb,$num) {
 $mrb = $mrb|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exc = 0, $str = 0, $str$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 128|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp;
 $exc = sp + 112|0;
 $str = sp + 104|0;
 $2 = sp + 96|0;
 $3 = sp + 88|0;
 $4 = sp + 80|0;
 $5 = sp + 72|0;
 $6 = sp + 64|0;
 $7 = sp + 56|0;
 $8 = sp + 48|0;
 $9 = sp + 40|0;
 $0 = $mrb;
 $1 = $num;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 $17 = $0;
 $18 = $0;
 if ($16) {
  $19 = $0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  _mrb_sym2str($2,$18,$24);
  $25 = $0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  _mrb_fixnum_value_421($3,$31);
  $32 = $1;
  _mrb_fixnum_value_421($4,$32);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$3+7>>0]|0;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  ;HEAP8[$vararg_ptr2>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$4+7>>0]|0;
  _mrb_format($5,$17,56509,$vararg_buffer);
  ;HEAP32[$str>>2]=HEAP32[$5>>2]|0;HEAP32[$str+4>>2]=HEAP32[$5+4>>2]|0;
  $40 = $0;
  $41 = $0;
  $42 = (_mrb_class_get($41,68855)|0);
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_exc_new_str($9,$40,$42,$str$byval_copy);
  ;HEAP32[$exc>>2]=HEAP32[$9>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$9+4>>2]|0;
  $43 = HEAP32[$exc>>2]|0;
  $44 = $0;
  $45 = ((($44)) + 20|0);
  HEAP32[$45>>2] = $43;
  STACKTOP = sp;return;
 } else {
  $33 = ((($18)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  _mrb_fixnum_value_421($6,$38);
  $39 = $1;
  _mrb_fixnum_value_421($7,$39);
  ;HEAP8[$vararg_buffer3>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_buffer3+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_buffer3+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_buffer3+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_buffer3+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_buffer3+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_buffer3+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_buffer3+7>>0]=HEAP8[$6+7>>0]|0;
  $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
  ;HEAP8[$vararg_ptr6>>0]=HEAP8[$7>>0]|0;HEAP8[$vararg_ptr6+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$vararg_ptr6+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$vararg_ptr6+3>>0]=HEAP8[$7+3>>0]|0;HEAP8[$vararg_ptr6+4>>0]=HEAP8[$7+4>>0]|0;HEAP8[$vararg_ptr6+5>>0]=HEAP8[$7+5>>0]|0;HEAP8[$vararg_ptr6+6>>0]=HEAP8[$7+6>>0]|0;HEAP8[$vararg_ptr6+7>>0]=HEAP8[$7+7>>0]|0;
  _mrb_format($8,$17,56553,$vararg_buffer3);
  ;HEAP32[$str>>2]=HEAP32[$8>>2]|0;HEAP32[$str+4>>2]=HEAP32[$8+4>>2]|0;
  $40 = $0;
  $41 = $0;
  $42 = (_mrb_class_get($41,68855)|0);
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_exc_new_str($9,$40,$42,$str$byval_copy);
  ;HEAP32[$exc>>2]=HEAP32[$9>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$9+4>>2]|0;
  $43 = HEAP32[$exc>>2]|0;
  $44 = $0;
  $45 = ((($44)) + 20|0);
  HEAP32[$45>>2] = $43;
  STACKTOP = sp;return;
 }
}
function _mrb_cptr_value($agg$result,$mrb,$p) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $p;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = 7;
 $3 = $1;
 HEAP32[$v>>2] = $3;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _top_env($mrb,$proc) {
 $mrb = $mrb|0;
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $proc;
 $3 = $2;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $e = $5;
 $6 = $1;
 $7 = $e;
 $8 = (_is_strict($6,$7)|0);
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  $10 = $e;
  $0 = $10;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 while(1) {
  $11 = $e;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  $15 = $e;
  if (!($14)) {
   label = 6;
   break;
  }
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $e = $17;
  $18 = $1;
  $19 = $e;
  $20 = (_is_strict($18,$19)|0);
  $21 = ($20<<24>>24)!=(0);
  if ($21) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $22 = $e;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $0 = $15;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _is_strict($mrb,$e) {
 $mrb = $mrb|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cioff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $e;
 $3 = $2;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $cioff = $5;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $cioff;
  $11 = $1;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($10*48)|0)|0);
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $cioff;
   $21 = $1;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + (($20*48)|0)|0);
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 >>> 11;
   $31 = $30 & 256;
   $32 = ($31|0)!=(0);
   if ($32) {
    $0 = 1;
    $33 = $0;
    STACKTOP = sp;return ($33|0);
   }
  }
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _localjump_error($mrb,$kind) {
 $mrb = $mrb|0;
 $kind = $kind|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exc = 0, $kind_str = 0, $kind_str_len = 0, $msg = 0, $msg$byval_copy = 0, $msg$byval_copy1 = 0, $msg$byval_copy2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg$byval_copy2 = sp + 72|0;
 $msg$byval_copy1 = sp + 64|0;
 $msg$byval_copy = sp + 56|0;
 $kind_str = sp + 83|0;
 $kind_str_len = sp + 80|0;
 $msg = sp + 40|0;
 $exc = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $kind;
 dest=$kind_str; src=56591; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$kind_str_len>>0]=HEAP8[56612>>0]|0;HEAP8[$kind_str_len+1>>0]=HEAP8[56612+1>>0]|0;HEAP8[$kind_str_len+2>>0]=HEAP8[56612+2>>0]|0;
 $6 = $0;
 _mrb_str_buf_new($2,$6,19);
 ;HEAP32[$msg>>2]=HEAP32[$2>>2]|0;HEAP32[$msg+4>>2]=HEAP32[$2+4>>2]|0;
 $7 = $0;
 ;HEAP32[$msg$byval_copy>>2]=HEAP32[$msg>>2]|0;HEAP32[$msg$byval_copy+4>>2]=HEAP32[$msg+4>>2]|0;
 _mrb_str_cat($3,$7,$msg$byval_copy,56615,11);
 $8 = $0;
 $9 = $1;
 $10 = (($kind_str) + (($9*7)|0)|0);
 $11 = $1;
 $12 = (($kind_str_len) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 ;HEAP32[$msg$byval_copy1>>2]=HEAP32[$msg>>2]|0;HEAP32[$msg$byval_copy1+4>>2]=HEAP32[$msg+4>>2]|0;
 _mrb_str_cat($4,$8,$msg$byval_copy1,$10,$14);
 $15 = $0;
 $16 = $0;
 $17 = (_mrb_class_get($16,56627)|0);
 ;HEAP32[$msg$byval_copy2>>2]=HEAP32[$msg>>2]|0;HEAP32[$msg$byval_copy2+4>>2]=HEAP32[$msg+4>>2]|0;
 _mrb_exc_new_str($5,$15,$17,$msg$byval_copy2);
 ;HEAP32[$exc>>2]=HEAP32[$5>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$5+4>>2]|0;
 $18 = HEAP32[$exc>>2]|0;
 $19 = $0;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _mrb_int_add_overflow_439($augend,$addend,$sum) {
 $augend = $augend|0;
 $addend = $addend|0;
 $sum = $sum|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $of = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $augend;
 $1 = $addend;
 $2 = $sum;
 $3 = $0;
 $4 = $1;
 $$arith = (($3) + ($4))|0;
 $$postemp = (($3) + -2147483648)|0;
 $$negtemp = (($3) + 2147483647)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($3|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $val = $$arith;
 $5 = $val;
 $6 = ($5|0)>(2147483647);
 $or$cond = $$select | $6;
 if ($or$cond) {
  $10 = 1;
 } else {
  $7 = $val;
  $8 = ($7|0)<(-2147483648);
  $10 = $8;
 }
 $9 = $10&1;
 $11 = $9&255;
 $of = $11;
 $12 = $val;
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $of;
 STACKTOP = sp;return ($14|0);
}
function _mrb_int_sub_overflow_440($minuend,$subtrahend,$difference) {
 $minuend = $minuend|0;
 $subtrahend = $subtrahend|0;
 $difference = $difference|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $of = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $minuend;
 $1 = $subtrahend;
 $2 = $difference;
 $3 = $0;
 $4 = $1;
 $$arith = (($3) - ($4))|0;
 $$postemp = (($3) + -2147483647)|0;
 $$negtemp = (($3) + -2147483648)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($3|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $val = $$arith;
 $5 = $val;
 $6 = ($5|0)>(2147483647);
 $or$cond = $$select | $6;
 if ($or$cond) {
  $10 = 1;
 } else {
  $7 = $val;
  $8 = ($7|0)<(-2147483648);
  $10 = $8;
 }
 $9 = $10&1;
 $11 = $9&255;
 $of = $11;
 $12 = $val;
 $13 = $2;
 HEAP32[$13>>2] = $12;
 $14 = $of;
 STACKTOP = sp;return ($14|0);
}
function _mrb_f_send($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $argc = 0, $argv = 0, $block = 0, $block$byval_copy = 0, $c = 0, $ci = 0, $i = 0, $len = 0, $name = 0, $p = 0, $regs = 0, $self$byval_copy = 0, $self$byval_copy4 = 0, $self$byval_copy5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy5 = sp + 104|0;
 $$byval_copy = sp + 96|0;
 $block$byval_copy = sp + 88|0;
 $self$byval_copy4 = sp + 80|0;
 $self$byval_copy = sp + 72|0;
 $vararg_buffer = sp;
 $name = sp + 64|0;
 $block = sp + 56|0;
 $argv = sp + 52|0;
 $argc = sp + 44|0;
 $c = sp + 28|0;
 $1 = sp + 16|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argv;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $argc;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $block;
 (_mrb_get_args($2,56712,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $4 = (_mrb_class_423($3,$self$byval_copy)|0);
 HEAP32[$c>>2] = $4;
 $5 = $0;
 $6 = HEAP32[$name>>2]|0;
 $7 = (_mrb_method_search_vm($5,$c,$6)|0);
 $p = $7;
 $8 = $p;
 $9 = ($8|0)!=(0|0);
 $10 = $0;
 if (!($9)) {
  $11 = HEAP32[$name>>2]|0;
  $12 = HEAP32[$argc>>2]|0;
  $13 = HEAP32[$argv>>2]|0;
  ;HEAP32[$self$byval_copy4>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy4+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$block$byval_copy>>2]=HEAP32[$block>>2]|0;HEAP32[$block$byval_copy+4>>2]=HEAP32[$block+4>>2]|0;
  _mrb_funcall_with_block($agg$result,$10,$self$byval_copy4,$11,$12,$13,$block$byval_copy);
  STACKTOP = sp;return;
 }
 $14 = ((($10)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $ci = $17;
 $18 = HEAP32[$name>>2]|0;
 $19 = $ci;
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$c>>2]|0;
 $21 = $ci;
 $22 = ((($21)) + 44|0);
 HEAP32[$22>>2] = $20;
 $23 = $p;
 $24 = $ci;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = $23;
 $26 = $0;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $regs = $31;
 $32 = $ci;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>=(0);
 if ($35) {
  $i = 0;
  $36 = $ci;
  $37 = ((($36)) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $len = $38;
  while(1) {
   $39 = $i;
   $40 = $len;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $i;
   $43 = $regs;
   $44 = (($43) + ($42<<3)|0);
   $45 = $i;
   $46 = (($45) + 1)|0;
   $47 = $regs;
   $48 = (($47) + ($46<<3)|0);
   ;HEAP32[$44>>2]=HEAP32[$48>>2]|0;HEAP32[$44+4>>2]=HEAP32[$48+4>>2]|0;
   $49 = $i;
   $50 = (($49) + 1)|0;
   $i = $50;
  }
  $51 = $ci;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1)|0;
  HEAP32[$52>>2] = $54;
 } else {
  $55 = $0;
  $56 = $regs;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$56+4>>2]|0;
  _mrb_ary_shift($1,$55,$$byval_copy);
 }
 $57 = $p;
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 >>> 11;
 $60 = $59 & 128;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $p;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  ;HEAP32[$self$byval_copy5>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy5+4>>2]=HEAP32[$self+4>>2]|0;
  FUNCTION_TABLE_viii[$64 & 511]($agg$result,$65,$self$byval_copy5);
  STACKTOP = sp;return;
 }
 $66 = $ci;
 $67 = ((($66)) + 36|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)<(0);
 $70 = $0;
 $71 = $p;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 2|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75&65535;
 if ($69) {
  $77 = ($76|0)<(3);
  if ($77) {
   $84 = 3;
  } else {
   $78 = $p;
   $79 = ((($78)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($80)) + 2|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = $83;
  }
  _stack_extend($70,$84,3);
 } else {
  $85 = $ci;
  $86 = ((($85)) + 36|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 2)|0;
  _stack_extend($70,$76,$88);
 }
 $89 = $p;
 $90 = ((($89)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 2|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93&65535;
 $95 = $ci;
 $96 = ((($95)) + 12|0);
 HEAP32[$96>>2] = $94;
 $97 = $0;
 $98 = (_cipush($97)|0);
 $ci = $98;
 $99 = $ci;
 $100 = ((($99)) + 12|0);
 HEAP32[$100>>2] = 0;
 $101 = $ci;
 $102 = ((($101)) + 44|0);
 HEAP32[$102>>2] = 0;
 $103 = $p;
 $104 = ((($103)) + 12|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ((($105)) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $ci;
 $109 = ((($108)) + 28|0);
 HEAP32[$109>>2] = $107;
 $110 = $0;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $ci;
 $116 = ((($115)) + 8|0);
 HEAP32[$116>>2] = $114;
 $117 = $ci;
 $118 = ((($117)) + 40|0);
 HEAP32[$118>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_module_eval($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, $b = 0, $b$byval_copy = 0, $mod$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy = sp + 40|0;
 $mod$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $a = sp + 16|0;
 $b = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $a;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $b;
 $2 = (_mrb_get_args($1,56716,$vararg_buffer)|0);
 $3 = ($2|0)==(1);
 $4 = $0;
 if ($3) {
  $5 = $0;
  $6 = (_mrb_class_get($5,64809)|0);
  _mrb_raise($4,$6,56720);
  // unreachable;
 } else {
  $7 = HEAP32[$mod>>2]|0;
  ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
  ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
  _eval_under($agg$result,$4,$mod$byval_copy,$b$byval_copy,$7);
  STACKTOP = sp;return;
 }
}
function _eval_under($agg$result,$mrb,$self,$blk,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 $blk = $blk|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $blk$byval_copy = 0, $ci = 0, $p = 0, $self$byval_copy = 0, $self$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy1 = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $blk$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $c;
 $2 = ((($blk)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$blk>>2]|0;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   $7 = $0;
   $8 = $0;
   $9 = (_mrb_class_get($8,68855)|0);
   _mrb_raise($7,$9,68606);
   // unreachable;
  }
 }
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $ci = $14;
 $15 = $ci;
 $16 = ((($15)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-2);
 if ($18) {
  $19 = $0;
  $20 = $1;
  ;HEAP32[$blk$byval_copy>>2]=HEAP32[$blk>>2]|0;HEAP32[$blk$byval_copy+4>>2]=HEAP32[$blk+4>>2]|0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_yield_with_class($agg$result,$19,$blk$byval_copy,0,0,$self$byval_copy,$20);
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = $ci;
 $23 = ((($22)) + 44|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$blk>>2]|0;
 $p = $24;
 $25 = $p;
 $26 = $ci;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $25;
 $28 = $p;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 11;
 $31 = $30 & 128;
 $32 = ($31|0)!=(0);
 $33 = $p;
 $34 = ((($33)) + 12|0);
 if ($32) {
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
  FUNCTION_TABLE_viii[$35 & 511]($agg$result,$36,$self$byval_copy1);
  STACKTOP = sp;return;
 } else {
  $37 = HEAP32[$34>>2]|0;
  $38 = ((($37)) + 2|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = $ci;
  $42 = ((($41)) + 12|0);
  HEAP32[$42>>2] = $40;
  $43 = $0;
  $44 = (_cipush($43)|0);
  $ci = $44;
  $45 = $ci;
  $46 = ((($45)) + 12|0);
  HEAP32[$46>>2] = 0;
  $47 = $ci;
  $48 = ((($47)) + 44|0);
  HEAP32[$48>>2] = 0;
  $49 = $p;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $ci;
  $55 = ((($54)) + 28|0);
  HEAP32[$55>>2] = $53;
  $56 = $0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $ci;
  $62 = ((($61)) + 8|0);
  HEAP32[$62>>2] = $60;
  $63 = $ci;
  $64 = ((($63)) + 40|0);
  HEAP32[$64>>2] = 0;
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_yield_with_class($agg$result,$mrb,$b,$argc,$argv,$self,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $b = $b|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $self = $self|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $mid = 0, $n = 0, $p = 0, $self$byval_copy = 0;
 var $self$byval_copy1 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy1 = sp + 72|0;
 $self$byval_copy = sp + 64|0;
 $val = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $0 = $mrb;
 $1 = $argc;
 $2 = $argv;
 $3 = $c;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $mid = $12;
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $n = $19;
 $20 = ((($b)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$b>>2]|0;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $25 = $0;
   $26 = $0;
   $27 = (_mrb_class_get($26,68855)|0);
   _mrb_raise($25,$27,68606);
   // unreachable;
  }
 }
 $28 = HEAP32[$b>>2]|0;
 $p = $28;
 $29 = $0;
 $30 = (_cipush($29)|0);
 $ci = $30;
 $31 = $mid;
 $32 = $ci;
 HEAP32[$32>>2] = $31;
 $33 = $p;
 $34 = $ci;
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = $33;
 $36 = $0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $ci;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = $40;
 $43 = $1;
 $44 = $ci;
 $45 = ((($44)) + 36|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = $ci;
 $48 = ((($47)) + 44|0);
 HEAP32[$48>>2] = $46;
 $49 = $ci;
 $50 = ((($49)) + 40|0);
 HEAP32[$50>>2] = -1;
 $51 = $0;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $n;
 $57 = (($55) + ($56<<3)|0);
 $58 = $0;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = $57;
 $62 = $p;
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 >>> 11;
 $65 = $64 & 128;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $1;
  $68 = (($67) + 2)|0;
  $69 = $ci;
  $70 = ((($69)) + 12|0);
  HEAP32[$70>>2] = $68;
  $71 = $0;
  $72 = $ci;
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  _stack_extend($71,$74,0);
 } else {
  $75 = $p;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = $ci;
  $82 = ((($81)) + 12|0);
  HEAP32[$82>>2] = $80;
  $83 = $0;
  $84 = $ci;
  $85 = ((($84)) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $1;
  $88 = (($87) + 2)|0;
  _stack_extend($83,$86,$88);
 }
 $89 = $0;
 $90 = ((($89)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 ;HEAP32[$93>>2]=HEAP32[$self>>2]|0;HEAP32[$93+4>>2]=HEAP32[$self+4>>2]|0;
 $94 = $1;
 $95 = ($94|0)>(0);
 if ($95) {
  $96 = $0;
  $97 = ((($96)) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 8|0);
  $102 = $2;
  $103 = $1;
  _stack_copy($101,$102,$103);
 }
 $104 = $1;
 $105 = (($104) + 1)|0;
 $106 = $0;
 $107 = ((($106)) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($108)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) + ($105<<3)|0);
 _mrb_nil_value_419($4);
 ;HEAP32[$111>>2]=HEAP32[$4>>2]|0;HEAP32[$111+4>>2]=HEAP32[$4+4>>2]|0;
 $112 = $p;
 $113 = HEAP32[$112>>2]|0;
 $114 = $113 >>> 11;
 $115 = $114 & 128;
 $116 = ($115|0)!=(0);
 if ($116) {
  $117 = $p;
  $118 = ((($117)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  FUNCTION_TABLE_viii[$119 & 511]($5,$120,$self$byval_copy);
  ;HEAP32[$val>>2]=HEAP32[$5>>2]|0;HEAP32[$val+4>>2]=HEAP32[$5+4>>2]|0;
  $121 = $0;
  $122 = ((($121)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($123)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($125)) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((($130)) + 4|0);
  HEAP32[$131>>2] = $127;
  $132 = $0;
  _cipop($132);
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $133 = $0;
  $134 = $p;
  ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_run($6,$133,$134,$self$byval_copy1);
  ;HEAP32[$val>>2]=HEAP32[$6>>2]|0;HEAP32[$val+4>>2]=HEAP32[$6+4>>2]|0;
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_obj_instance_eval($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $b$byval_copy = 0, $c = 0, $cv = 0, $self$byval_copy = 0;
 var $self$byval_copy2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy = sp + 72|0;
 $self$byval_copy2 = sp + 64|0;
 $self$byval_copy = sp + 56|0;
 $vararg_buffer = sp;
 $a = sp + 40|0;
 $b = sp + 32|0;
 $cv = sp + 24|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $a;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $b;
 $3 = (_mrb_get_args($2,56716,$vararg_buffer)|0);
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = $0;
  $7 = (_mrb_class_get($6,64809)|0);
  _mrb_raise($5,$7,56771);
  // unreachable;
 }
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 6: case 3: case 4:  {
  $c = 0;
  break;
 }
 default: {
  $10 = $0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_singleton_class($1,$10,$self$byval_copy);
  ;HEAP32[$cv>>2]=HEAP32[$1>>2]|0;HEAP32[$cv+4>>2]=HEAP32[$1+4>>2]|0;
  $11 = HEAP32[$cv>>2]|0;
  $c = $11;
 }
 }
 $12 = $0;
 $13 = $c;
 ;HEAP32[$self$byval_copy2>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy2+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
 _eval_under($agg$result,$12,$self$byval_copy2,$b$byval_copy,$13);
 STACKTOP = sp;return;
}
function _mrb_toplevel_run_keep($agg$result,$mrb,$proc,$stack_keep) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $proc = $proc|0;
 $stack_keep = $stack_keep|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $v = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $proc;
 $2 = $stack_keep;
 $6 = $0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($16|0)==($21|0);
  if (!($22)) {
   $27 = $0;
   $28 = (_cipush($27)|0);
   $ci = $28;
   $29 = $ci;
   $30 = ((($29)) + 12|0);
   HEAP32[$30>>2] = 1;
   $31 = $ci;
   $32 = ((($31)) + 40|0);
   HEAP32[$32>>2] = -1;
   $33 = $0;
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $ci;
   $37 = ((($36)) + 44|0);
   HEAP32[$37>>2] = $35;
   $38 = $0;
   $39 = $1;
   $40 = $0;
   _mrb_top_self($4,$40);
   $41 = $2;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;
   _mrb_context_run($5,$38,$39,$$byval_copy1,$41);
   ;HEAP32[$v>>2]=HEAP32[$5>>2]|0;HEAP32[$v+4>>2]=HEAP32[$5+4>>2]|0;
   $42 = $0;
   _cipop($42);
   ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $23 = $0;
 $24 = $1;
 $25 = $0;
 _mrb_top_self($3,$25);
 $26 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_context_run($agg$result,$23,$24,$$byval_copy,$26);
 STACKTOP = sp;return;
}
function _mrb_parser_parse($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $$reg2mem24$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cond = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0;
 var $cond30 = 0, $cond31 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $buf = sp;
 $0 = ((($p)) + 1404|0);
 HEAP32[$0>>2] = $buf;
 $1 = ((($p)) + 1404|0);
 $2 = HEAP32[$1>>2]|0;
 _setjmpTable = _saveSetjmp($2,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $3 = __THREW__; __THREW__ = 0;
 if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = (threwValue); } else { $4 = -1; };
 $5 = tempRet0;
 $cond = ($4|0)==(1);
 if ($cond) {
  $$reg2mem24$0 = $5;
 } else {
  $$reg2mem24$0 = 0;
 }
 while(1) {
  $6 = ($$reg2mem24$0|0)==(0);
  if (!($6)) {
   __THREW__ = 0;
   invoke_vii(207,($p|0),(64154|0));
   $46 = __THREW__; __THREW__ = 0;
   if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } tempRet0 = (threwValue); } else { $47 = -1; };
   $48 = tempRet0;
   $cond26 = ($47|0)==(1);
   if ($cond26) {
    $$reg2mem24$0 = $48;
    continue;
   } else {
    label = 15;
    break;
   }
  }
  $7 = ((($p)) + 72|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 & -2;
  $10 = $9 | 1;
  HEAP8[$7>>0] = $10;
  $11 = ((($p)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($p)) + 64|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($p)) + 1140|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($p)) + 1136|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($p)) + 44|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_vii(202,($p|0),($c|0));
  $16 = __THREW__; __THREW__ = 0;
  if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = (threwValue); } else { $17 = -1; };
  $18 = tempRet0;
  $cond27 = ($17|0)==(1);
  if ($cond27) {
   $$reg2mem24$0 = $18;
   continue;
  }
  __THREW__ = 0;
  (invoke_ii(203,($p|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
  $21 = tempRet0;
  $cond28 = ($20|0)==(1);
  if ($cond28) {
   $$reg2mem24$0 = $21;
   continue;
  }
  $22 = ((($p)) + 1144|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   __THREW__ = 0;
   $25 = (invoke_ii(204,($p|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
   $28 = tempRet0;
   $cond29 = ($27|0)==(1);
   if ($cond29) {
    $$reg2mem24$0 = $28;
    continue;
   }
   $29 = ((($p)) + 1144|0);
   HEAP32[$29>>2] = $25;
  }
  __THREW__ = 0;
  invoke_vii(205,($p|0),($c|0));
  $30 = __THREW__; __THREW__ = 0;
  if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = (threwValue); } else { $31 = -1; };
  $32 = tempRet0;
  $cond30 = ($31|0)==(1);
  if ($cond30) {
   $$reg2mem24$0 = $32;
   continue;
  }
  $33 = ($c|0)!=(0|0);
  if (!($33)) {
   label = 16;
   break;
  }
  $34 = ((($c)) + 28|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35&255) >>> 1;
  $37 = $36 & 1;
  $38 = $37&255;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   label = 16;
   break;
  }
  $40 = HEAP32[$p>>2]|0;
  $41 = ((($p)) + 1144|0);
  $42 = HEAP32[$41>>2]|0;
  __THREW__ = 0;
  invoke_viii(206,($40|0),($42|0),0);
  $43 = __THREW__; __THREW__ = 0;
  if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = (threwValue); } else { $44 = -1; };
  $45 = tempRet0;
  $cond31 = ($44|0)==(1);
  if ($cond31) {
   $$reg2mem24$0 = $45;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $49 = ((($p)) + 1136|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$49>>2] = $51;
  $52 = ((($p)) + 1144|0);
  HEAP32[$52>>2] = 0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
}
function _parser_init_cxt($p,$cxt) {
 $p = $p|0;
 $cxt = $cxt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $cxt;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = $1;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _mrb_parser_set_filename($8,$11);
 }
 $12 = $1;
 $13 = ((($12)) + 12|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)!=(0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 12|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $0;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
 }
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 L10: do {
  if ($24) {
   $25 = $0;
   $26 = (_cons_gen($25,0,0)|0);
   $27 = $0;
   $28 = ((($27)) + 76|0);
   HEAP32[$28>>2] = $26;
   $i = 0;
   while(1) {
    $29 = $i;
    $30 = $1;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($29|0)<($32|0);
    if (!($33)) {
     break L10;
    }
    $34 = $0;
    $35 = $i;
    $36 = $1;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($35<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    _local_add_f($34,$39);
    $40 = $i;
    $41 = (($40) + 1)|0;
    $i = $41;
   }
  }
 } while(0);
 $42 = $1;
 $43 = ((($42)) + 28|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 & 1;
 $46 = $0;
 $47 = ((($46)) + 1148|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $45 & 1;
 $50 = ($49 << 1)&255;
 $51 = $48 & -3;
 $52 = $51 | $50;
 HEAP8[$47>>0] = $52;
 $53 = $1;
 $54 = ((($53)) + 28|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55&255) >>> 4;
 $57 = $56 & 1;
 $58 = $0;
 $59 = ((($58)) + 1148|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $57 & 1;
 $62 = $60 & -2;
 $63 = $62 | $61;
 HEAP8[$59>>0] = $63;
 $64 = $1;
 $65 = ((($64)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $1;
 $69 = $0;
 $70 = ((($69)) + 24|0);
 HEAP32[$70>>2] = $68;
 STACKTOP = sp;return;
}
function _mrb_parser_set_filename($p,$f) {
 $p = $p|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $new_table = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $f;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (_mrb_intern_cstr($3,$4)|0);
 $sym = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $sym;
 $9 = (_mrb_sym2name_len($7,$8,0)|0);
 $10 = $0;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = ((($12)) + 1396|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>(0);
 $16 = $15 ? 0 : 1;
 $17 = $0;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = $16;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $0;
  $21 = ((($20)) + 1396|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $0;
  $26 = ((($25)) + 1392|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $sym;
  $31 = ($29|0)==($30|0);
  $32 = $i;
  if ($31) {
   label = 4;
   break;
  }
  $35 = (($32) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 4) {
  $33 = $0;
  $34 = ((($33)) + 1400|0);
  HEAP32[$34>>2] = $32;
  STACKTOP = sp;return;
 }
 $36 = $0;
 $37 = ((($36)) + 1396|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $40 = $0;
 $41 = ((($40)) + 1400|0);
 HEAP32[$41>>2] = $38;
 $42 = $0;
 $43 = $0;
 $44 = ((($43)) + 1396|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45<<2;
 $47 = (_parser_palloc($42,$46)|0);
 $new_table = $47;
 $48 = $0;
 $49 = ((($48)) + 1392|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $new_table;
  $53 = $0;
  $54 = ((($53)) + 1392|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = ((($56)) + 1396|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58<<2;
  _memmove(($52|0),($55|0),($59|0))|0;
 }
 $60 = $new_table;
 $61 = $0;
 $62 = ((($61)) + 1392|0);
 HEAP32[$62>>2] = $60;
 $63 = $sym;
 $64 = $0;
 $65 = ((($64)) + 1396|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) - 1)|0;
 $68 = $0;
 $69 = ((($68)) + 1392|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($67<<2)|0);
 HEAP32[$71>>2] = $63;
 STACKTOP = sp;return;
}
function _parser_palloc($p,$size) {
 $p = $p|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_mrb_pool_alloc($4,$5)|0);
 $m = $6;
 $7 = $m;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $12 = $m;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $0;
  $10 = ((($9)) + 1404|0);
  $11 = HEAP32[$10>>2]|0;
  _longjmp(($11|0),1);
  // unreachable;
 }
 return (0)|0;
}
function _cons_gen($p,$car,$cdr) {
 $p = $p|0;
 $car = $car|0;
 $cdr = $cdr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $car;
 $2 = $cdr;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $0;
 if ($6) {
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $c = $9;
  $10 = $0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = $14;
 } else {
  $17 = (_parser_palloc($7,12)|0);
  $c = $17;
 }
 $18 = $1;
 $19 = $c;
 HEAP32[$19>>2] = $18;
 $20 = $2;
 $21 = $c;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $0;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&65535;
 $27 = $c;
 $28 = ((($27)) + 8|0);
 HEAP16[$28>>1] = $26;
 $29 = $0;
 $30 = ((($29)) + 1400|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 $33 = $c;
 $34 = ((($33)) + 10|0);
 HEAP16[$34>>1] = $32;
 $35 = $c;
 STACKTOP = sp;return ($35|0);
}
function _local_add_f($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $0;
 $8 = ((($7)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $1;
 $13 = $12;
 $14 = (_list1_gen($11,$13)|0);
 $15 = (_append_gen($6,$10,$14)|0);
 $16 = $0;
 $17 = ((($16)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$18>>2] = $15;
 STACKTOP = sp;return;
}
function _list1_gen($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _append_gen($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $a;
 $3 = $b;
 $4 = $2;
 $c = $4;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = $3;
  $0 = $7;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 while(1) {
  $8 = $c;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $c;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $c = $14;
 }
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $3;
  $18 = $c;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $2;
 $0 = $20;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _yyparse($p) {
 $p = $p|0;
 var $$ = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
 var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
 var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
 var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
 var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
 var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
 var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
 var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
 var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
 var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0;
 var $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0;
 var $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0;
 var $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0;
 var $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0;
 var $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0;
 var $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0;
 var $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0;
 var $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0;
 var $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0;
 var $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0;
 var $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0;
 var $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0;
 var $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0;
 var $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0;
 var $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0;
 var $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0;
 var $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0;
 var $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0;
 var $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0;
 var $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0;
 var $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0;
 var $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0;
 var $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0;
 var $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0;
 var $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0;
 var $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0;
 var $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0;
 var $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0;
 var $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0;
 var $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0;
 var $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0;
 var $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0;
 var $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0;
 var $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0;
 var $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0;
 var $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0;
 var $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0;
 var $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0;
 var $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0;
 var $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0;
 var $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0;
 var $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0;
 var $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0;
 var $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0;
 var $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0;
 var $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0;
 var $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0;
 var $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0;
 var $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0;
 var $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0;
 var $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0;
 var $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0;
 var $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0;
 var $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0;
 var $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0;
 var $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0;
 var $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0;
 var $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0;
 var $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0;
 var $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0;
 var $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0;
 var $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0;
 var $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0;
 var $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0;
 var $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0;
 var $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0;
 var $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0;
 var $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0;
 var $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0;
 var $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0;
 var $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0;
 var $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0;
 var $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0;
 var $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0;
 var $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0;
 var $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0;
 var $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0;
 var $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0;
 var $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0;
 var $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0;
 var $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0;
 var $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0;
 var $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0;
 var $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0;
 var $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0;
 var $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0;
 var $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0;
 var $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0;
 var $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0;
 var $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0;
 var $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0;
 var $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0;
 var $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0;
 var $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0;
 var $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0;
 var $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0;
 var $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0;
 var $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0;
 var $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0;
 var $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0;
 var $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0;
 var $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0;
 var $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0;
 var $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0;
 var $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0;
 var $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0;
 var $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0;
 var $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0;
 var $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0;
 var $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0;
 var $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0;
 var $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0;
 var $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0;
 var $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0;
 var $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0;
 var $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0;
 var $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0;
 var $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0;
 var $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0;
 var $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0;
 var $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0;
 var $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0;
 var $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0;
 var $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $buf = 0, $inf = 0, $inf2 = 0, $inf3 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $yyalloc = 0, $yychar = 0;
 var $yyerrstatus = 0, $yylen = 0, $yylval = 0, $yymsg = 0, $yymsg_alloc = 0, $yymsgbuf = 0, $yyn = 0, $yynerrs = 0, $yynewbytes = 0, $yynewbytes1 = 0, $yyptr = 0, $yyresult = 0, $yysize = 0, $yysize4 = 0, $yyss = 0, $yyss1 = 0, $yyssa = 0, $yyssp = 0, $yystacksize = 0, $yystate = 0;
 var $yytoken = 0, $yyval = 0, $yyvs = 0, $yyvsa = 0, $yyvsp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $yylval = sp + 908|0;
 $yyssa = sp + 920|0;
 $yyvsa = sp + 88|0;
 $yyval = sp + 56|0;
 $yymsgbuf = sp + 1336|0;
 $buf = sp + 1320|0;
 $0 = $p;
 $yymsg = $yymsgbuf;
 $yymsg_alloc = 128;
 $yylen = 0;
 $yytoken = 0;
 $yyss = $yyssa;
 $yyvs = $yyvsa;
 $yystacksize = 200;
 $yystate = 0;
 $yyerrstatus = 0;
 $yynerrs = 0;
 $yychar = -2;
 $1 = $yyss;
 $yyssp = $1;
 $2 = $yyvs;
 $yyvsp = $2;
 L1: while(1) {
  $5 = $yystate;
  $6 = $5&65535;
  $7 = $yyssp;
  HEAP16[$7>>1] = $6;
  $8 = $yyss;
  $9 = $yystacksize;
  $10 = (($8) + ($9<<1)|0);
  $11 = ((($10)) + -2|0);
  $12 = $yyssp;
  $13 = ($11>>>0)<=($12>>>0);
  if ($13) {
   $14 = $yyssp;
   $15 = $yyss;
   $16 = $14;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = (($18|0) / 2)&-1;
   $20 = (($19) + 1)|0;
   $yysize = $20;
   $21 = $yystacksize;
   $22 = (10000)<=($21>>>0);
   if ($22) {
    label = 535;
    break;
   }
   $23 = $yystacksize;
   $24 = $23<<1;
   $yystacksize = $24;
   $25 = $yystacksize;
   $26 = (10000)<($25>>>0);
   $$ = $26 ? 10000 : $24;
   $yystacksize = $$;
   $27 = $yyss;
   $yyss1 = $27;
   $28 = $0;
   $29 = HEAP32[$28>>2]|0;
   $30 = $yystacksize;
   $31 = ($30*6)|0;
   $32 = (($31) + 3)|0;
   $33 = (_mrb_malloc($29,$32)|0);
   $yyptr = $33;
   $34 = $yyptr;
   $35 = ($34|0)!=(0|0);
   if (!($35)) {
    label = 535;
    break;
   }
   $36 = $yyptr;
   $37 = $yyss;
   $38 = $yysize;
   $39 = $38<<1;
   _memcpy(($36|0),($37|0),($39|0))|0;
   $40 = $yyptr;
   $yyss = $40;
   $41 = $yystacksize;
   $42 = $41<<1;
   $43 = (($42) + 3)|0;
   $yynewbytes = $43;
   $44 = $yynewbytes;
   $45 = (($44>>>0) / 4)&-1;
   $46 = $yyptr;
   $47 = (($46) + ($45<<2)|0);
   $yyptr = $47;
   $48 = $yyptr;
   $49 = $yyvs;
   $50 = $yysize;
   $51 = $50<<2;
   _memcpy(($48|0),($49|0),($51|0))|0;
   $52 = $yyptr;
   $yyvs = $52;
   $53 = $yystacksize;
   $54 = $53<<2;
   $55 = (($54) + 3)|0;
   $yynewbytes1 = $55;
   $56 = $yynewbytes1;
   $57 = (($56>>>0) / 4)&-1;
   $58 = $yyptr;
   $59 = (($58) + ($57<<2)|0);
   $yyptr = $59;
   $60 = $yyss1;
   $61 = ($60|0)!=($yyssa|0);
   if ($61) {
    $62 = $0;
    $63 = HEAP32[$62>>2]|0;
    $64 = $yyss1;
    _mrb_free($63,$64);
   }
   $65 = $yyss;
   $66 = $yysize;
   $67 = (($65) + ($66<<1)|0);
   $68 = ((($67)) + -2|0);
   $yyssp = $68;
   $69 = $yyvs;
   $70 = $yysize;
   $71 = (($69) + ($70<<2)|0);
   $72 = ((($71)) + -4|0);
   $yyvsp = $72;
   $73 = $yyss;
   $74 = $yystacksize;
   $75 = (($73) + ($74<<1)|0);
   $76 = ((($75)) + -2|0);
   $77 = $yyssp;
   $78 = ($76>>>0)<=($77>>>0);
   if ($78) {
    label = 534;
    break;
   }
  }
  $79 = $yystate;
  $80 = ($79|0)==(3);
  if ($80) {
   label = 533;
   break;
  }
  $81 = $yystate;
  $82 = (3044 + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $yyn = $84;
  $85 = $yyn;
  $86 = ($85|0)==(-771);
  do {
   if ($86) {
    label = 26;
   } else {
    $87 = $yychar;
    $88 = ($87|0)==(-2);
    if ($88) {
     $89 = $0;
     $90 = (_yylex($yylval,$89)|0);
     $yychar = $90;
    }
    $91 = $yychar;
    $92 = ($91|0)<=(0);
    if ($92) {
     $yytoken = 0;
     $yychar = 0;
    } else {
     $93 = $yychar;
     $94 = ($93>>>0)<=(372);
     if ($94) {
      $95 = $yychar;
      $96 = (58359 + ($95)|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = $97&255;
      $99 = $98;
     } else {
      $99 = 2;
     }
     $yytoken = $99;
    }
    $100 = $yytoken;
    $101 = $yyn;
    $102 = (($101) + ($100))|0;
    $yyn = $102;
    $103 = $yyn;
    $104 = ($103|0)<(0);
    $105 = $yyn;
    $106 = (10639)<($105|0);
    $or$cond = $104 | $106;
    if ($or$cond) {
     label = 26;
    } else {
     $107 = $yyn;
     $108 = (4980 + ($107<<1)|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = $109 << 16 >> 16;
     $111 = $yytoken;
     $112 = ($110|0)!=($111|0);
     if ($112) {
      label = 26;
     } else {
      $113 = $yyn;
      $114 = (26260 + ($113<<1)|0);
      $115 = HEAP16[$114>>1]|0;
      $116 = $115 << 16 >> 16;
      $yyn = $116;
      $117 = $yyn;
      $118 = ($117|0)<=(0);
      if ($118) {
       $119 = $yyn;
       $120 = ($119|0)==(0);
       $121 = $yyn;
       $122 = ($121|0)==(-556);
       $or$cond3 = $120 | $122;
       if ($or$cond3) {
        label = 510;
        break;
       }
       $123 = $yyn;
       $124 = (0 - ($123))|0;
       $yyn = $124;
       label = 27;
       break;
      }
      $125 = $yyerrstatus;
      $126 = ($125|0)!=(0);
      if ($126) {
       $127 = $yyerrstatus;
       $128 = (($127) + -1)|0;
       $yyerrstatus = $128;
      }
      $yychar = -2;
      $129 = $yyn;
      $yystate = $129;
      $130 = $yyvsp;
      $131 = ((($130)) + 4|0);
      $yyvsp = $131;
      ;HEAP32[$131>>2]=HEAP32[$yylval>>2]|0;
     }
    }
   }
  } while(0);
  if ((label|0) == 26) {
   label = 0;
   $132 = $yystate;
   $133 = (47540 + ($132<<1)|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = $134&65535;
   $yyn = $135;
   $136 = $yyn;
   $137 = ($136|0)==(0);
   if ($137) {
    label = 510;
   } else {
    label = 27;
   }
  }
  do {
   if ((label|0) == 27) {
    label = 0;
    $138 = $yyn;
    $139 = (58732 + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $yylen = $141;
    $142 = $yylen;
    $143 = (1 - ($142))|0;
    $144 = $yyvsp;
    $145 = (($144) + ($143<<2)|0);
    ;HEAP32[$yyval>>2]=HEAP32[$145>>2]|0;
    $146 = $yyn;
    L69: do {
     switch ($146|0) {
     case 2:  {
      $147 = $0;
      $148 = ((($147)) + 40|0);
      HEAP32[$148>>2] = 0;
      $149 = $0;
      $150 = ((($149)) + 76|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($151|0)!=(0|0);
      if (!($152)) {
       $153 = $0;
       $154 = (_cons_gen($153,0,0)|0);
       $155 = $0;
       $156 = ((($155)) + 76|0);
       HEAP32[$156>>2] = $154;
      }
      break;
     }
     case 3:  {
      $157 = $0;
      $158 = $yyvsp;
      $159 = HEAP32[$158>>2]|0;
      $160 = (_new_scope($157,$159)|0);
      $161 = $0;
      $162 = ((($161)) + 1144|0);
      HEAP32[$162>>2] = $160;
      $163 = $yyvsp;
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)!=(0|0);
      if ($165) {
       $166 = $yyvsp;
       $167 = HEAP32[$166>>2]|0;
       $168 = ((($167)) + 10|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $0;
       $171 = ((($170)) + 1144|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ((($172)) + 10|0);
       HEAP16[$173>>1] = $169;
       $174 = $yyvsp;
       $175 = HEAP32[$174>>2]|0;
       $176 = ((($175)) + 8|0);
       $177 = HEAP16[$176>>1]|0;
       $178 = $0;
       $179 = ((($178)) + 1144|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ((($180)) + 8|0);
       HEAP16[$181>>1] = $177;
      }
      break;
     }
     case 4:  {
      $182 = $yyvsp;
      $183 = ((($182)) + -4|0);
      $184 = HEAP32[$183>>2]|0;
      HEAP32[$yyval>>2] = $184;
      break;
     }
     case 5:  {
      $185 = $0;
      $186 = (_new_begin($185,0)|0);
      HEAP32[$yyval>>2] = $186;
      break;
     }
     case 6:  {
      $187 = $0;
      $188 = $yyvsp;
      $189 = HEAP32[$188>>2]|0;
      $190 = (_new_begin($187,$189)|0);
      HEAP32[$yyval>>2] = $190;
      $191 = $yyvsp;
      $192 = HEAP32[$191>>2]|0;
      $193 = ($192|0)!=(0|0);
      if ($193) {
       $194 = $yyvsp;
       $195 = HEAP32[$194>>2]|0;
       $196 = ((($195)) + 10|0);
       $197 = HEAP16[$196>>1]|0;
       $198 = HEAP32[$yyval>>2]|0;
       $199 = ((($198)) + 10|0);
       HEAP16[$199>>1] = $197;
       $200 = $yyvsp;
       $201 = HEAP32[$200>>2]|0;
       $202 = ((($201)) + 8|0);
       $203 = HEAP16[$202>>1]|0;
       $204 = HEAP32[$yyval>>2]|0;
       $205 = ((($204)) + 8|0);
       HEAP16[$205>>1] = $203;
      }
      break;
     }
     case 7:  {
      $206 = $0;
      $207 = $yyvsp;
      $208 = ((($207)) + -8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $0;
      $211 = $yyvsp;
      $212 = HEAP32[$211>>2]|0;
      $213 = (_list1_gen($210,$212)|0);
      $214 = (_append_gen($206,$209,$213)|0);
      HEAP32[$yyval>>2] = $214;
      break;
     }
     case 8:  {
      $215 = $0;
      $216 = (_new_begin($215,0)|0);
      HEAP32[$yyval>>2] = $216;
      break;
     }
     case 10:  {
      $217 = $0;
      $218 = (_local_switch($217)|0);
      HEAP32[$yyval>>2] = $218;
      break;
     }
     case 11:  {
      $219 = $0;
      _yyerror($219,59288);
      $220 = $0;
      $221 = $yyvsp;
      $222 = ((($221)) + -12|0);
      $223 = HEAP32[$222>>2]|0;
      _local_resume($220,$223);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 12:  {
      $224 = $yyvsp;
      $225 = ((($224)) + -8|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ($226|0)!=(0|0);
      do {
       if ($227) {
        $228 = $0;
        $229 = $yyvsp;
        $230 = ((($229)) + -12|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $yyvsp;
        $233 = ((($232)) + -8|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $yyvsp;
        $236 = ((($235)) + -4|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = (_new_rescue($228,$231,$234,$237)|0);
        HEAP32[$yyval>>2] = $238;
        $239 = $yyvsp;
        $240 = ((($239)) + -12|0);
        $241 = HEAP32[$240>>2]|0;
        $242 = ($241|0)!=(0|0);
        if ($242) {
         $243 = $yyvsp;
         $244 = ((($243)) + -12|0);
         $245 = HEAP32[$244>>2]|0;
         $246 = ((($245)) + 10|0);
         $247 = HEAP16[$246>>1]|0;
         $248 = HEAP32[$yyval>>2]|0;
         $249 = ((($248)) + 10|0);
         HEAP16[$249>>1] = $247;
         $250 = $yyvsp;
         $251 = ((($250)) + -12|0);
         $252 = HEAP32[$251>>2]|0;
         $253 = ((($252)) + 8|0);
         $254 = HEAP16[$253>>1]|0;
         $255 = HEAP32[$yyval>>2]|0;
         $256 = ((($255)) + 8|0);
         HEAP16[$256>>1] = $254;
        }
       } else {
        $257 = $yyvsp;
        $258 = ((($257)) + -4|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = ($259|0)!=(0|0);
        if ($260) {
         $261 = $0;
         _yywarn($261,59308);
         $262 = $0;
         $263 = $yyvsp;
         $264 = ((($263)) + -12|0);
         $265 = HEAP32[$264>>2]|0;
         $266 = $0;
         $267 = $yyvsp;
         $268 = ((($267)) + -4|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = (_list1_gen($266,$269)|0);
         $271 = (_append_gen($262,$265,$270)|0);
         HEAP32[$yyval>>2] = $271;
         break;
        } else {
         $272 = $yyvsp;
         $273 = ((($272)) + -12|0);
         $274 = HEAP32[$273>>2]|0;
         HEAP32[$yyval>>2] = $274;
         break;
        }
       }
      } while(0);
      $275 = $yyvsp;
      $276 = HEAP32[$275>>2]|0;
      $277 = ($276|0)!=(0|0);
      if ($277) {
       $278 = HEAP32[$yyval>>2]|0;
       $279 = ($278|0)!=(0|0);
       $280 = $0;
       if ($279) {
        $281 = HEAP32[$yyval>>2]|0;
        $282 = $yyvsp;
        $283 = HEAP32[$282>>2]|0;
        $284 = (_new_ensure($280,$281,$283)|0);
        HEAP32[$yyval>>2] = $284;
        break L69;
       } else {
        $285 = $yyvsp;
        $286 = HEAP32[$285>>2]|0;
        $287 = $0;
        $288 = $0;
        $289 = (_new_nil($288)|0);
        $290 = (_list1_gen($287,$289)|0);
        $291 = (_append_gen($280,$286,$290)|0);
        HEAP32[$yyval>>2] = $291;
        break L69;
       }
      }
      break;
     }
     case 13:  {
      $292 = $yyvsp;
      $293 = ((($292)) + -4|0);
      $294 = HEAP32[$293>>2]|0;
      HEAP32[$yyval>>2] = $294;
      break;
     }
     case 14:  {
      $295 = $0;
      $296 = (_new_begin($295,0)|0);
      HEAP32[$yyval>>2] = $296;
      break;
     }
     case 15:  {
      $297 = $0;
      $298 = $yyvsp;
      $299 = HEAP32[$298>>2]|0;
      $300 = (_new_begin($297,$299)|0);
      HEAP32[$yyval>>2] = $300;
      $301 = $yyvsp;
      $302 = HEAP32[$301>>2]|0;
      $303 = ($302|0)!=(0|0);
      if ($303) {
       $304 = $yyvsp;
       $305 = HEAP32[$304>>2]|0;
       $306 = ((($305)) + 10|0);
       $307 = HEAP16[$306>>1]|0;
       $308 = HEAP32[$yyval>>2]|0;
       $309 = ((($308)) + 10|0);
       HEAP16[$309>>1] = $307;
       $310 = $yyvsp;
       $311 = HEAP32[$310>>2]|0;
       $312 = ((($311)) + 8|0);
       $313 = HEAP16[$312>>1]|0;
       $314 = HEAP32[$yyval>>2]|0;
       $315 = ((($314)) + 8|0);
       HEAP16[$315>>1] = $313;
      }
      break;
     }
     case 16:  {
      $316 = $0;
      $317 = $yyvsp;
      $318 = ((($317)) + -8|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = $0;
      $321 = $yyvsp;
      $322 = HEAP32[$321>>2]|0;
      $323 = (_list1_gen($320,$322)|0);
      $324 = (_append_gen($316,$319,$323)|0);
      HEAP32[$yyval>>2] = $324;
      break;
     }
     case 17:  {
      $325 = $0;
      $326 = $yyvsp;
      $327 = HEAP32[$326>>2]|0;
      $328 = (_new_begin($325,$327)|0);
      HEAP32[$yyval>>2] = $328;
      break;
     }
     case 18:  {
      $329 = $0;
      $330 = ((($329)) + 40|0);
      HEAP32[$330>>2] = 7;
      break;
     }
     case 19:  {
      $331 = $0;
      $332 = $yyvsp;
      $333 = ((($332)) + -8|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = $yyvsp;
      $336 = HEAP32[$335>>2]|0;
      $337 = (_new_alias($331,$334,$336)|0);
      HEAP32[$yyval>>2] = $337;
      break;
     }
     case 20:  {
      $338 = $yyvsp;
      $339 = HEAP32[$338>>2]|0;
      HEAP32[$yyval>>2] = $339;
      break;
     }
     case 21:  {
      $340 = $0;
      $341 = $yyvsp;
      $342 = HEAP32[$341>>2]|0;
      $343 = (_cond($342)|0);
      $344 = $yyvsp;
      $345 = ((($344)) + -8|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = (_new_if($340,$343,$346,0)|0);
      HEAP32[$yyval>>2] = $347;
      break;
     }
     case 22:  {
      $348 = $0;
      $349 = $yyvsp;
      $350 = HEAP32[$349>>2]|0;
      $351 = (_cond($350)|0);
      $352 = $yyvsp;
      $353 = ((($352)) + -8|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = (_new_unless($348,$351,$354,0)|0);
      HEAP32[$yyval>>2] = $355;
      break;
     }
     case 23:  {
      $356 = $0;
      $357 = $yyvsp;
      $358 = HEAP32[$357>>2]|0;
      $359 = (_cond($358)|0);
      $360 = $yyvsp;
      $361 = ((($360)) + -8|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = (_new_while($356,$359,$362)|0);
      HEAP32[$yyval>>2] = $363;
      break;
     }
     case 24:  {
      $364 = $0;
      $365 = $yyvsp;
      $366 = HEAP32[$365>>2]|0;
      $367 = (_cond($366)|0);
      $368 = $yyvsp;
      $369 = ((($368)) + -8|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = (_new_until($364,$367,$370)|0);
      HEAP32[$yyval>>2] = $371;
      break;
     }
     case 25:  {
      $372 = $0;
      $373 = $yyvsp;
      $374 = ((($373)) + -8|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = $0;
      $377 = $0;
      $378 = $yyvsp;
      $379 = HEAP32[$378>>2]|0;
      $380 = (_list3_gen($377,0,0,$379)|0);
      $381 = (_list1_gen($376,$380)|0);
      $382 = (_new_rescue($372,$375,$381,0)|0);
      HEAP32[$yyval>>2] = $382;
      break;
     }
     case 26:  {
      $383 = $0;
      _yyerror($383,59339);
      $384 = $0;
      $385 = $yyvsp;
      $386 = ((($385)) + -4|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = (_new_postexe($384,$387)|0);
      HEAP32[$yyval>>2] = $388;
      break;
     }
     case 28:  {
      $389 = $0;
      $390 = $yyvsp;
      $391 = ((($390)) + -8|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = $yyvsp;
      $394 = HEAP32[$393>>2]|0;
      $395 = (_new_masgn($389,$392,$394)|0);
      HEAP32[$yyval>>2] = $395;
      break;
     }
     case 29:  {
      $396 = $0;
      $397 = $yyvsp;
      $398 = ((($397)) + -8|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = $yyvsp;
      $401 = ((($400)) + -4|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = $yyvsp;
      $404 = HEAP32[$403>>2]|0;
      $405 = (_new_op_asgn($396,$399,$402,$404)|0);
      HEAP32[$yyval>>2] = $405;
      break;
     }
     case 30:  {
      $406 = $0;
      $407 = $0;
      $408 = $yyvsp;
      $409 = ((($408)) + -20|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = $0;
      $412 = (_intern_gen($411,68841,2)|0);
      $413 = $yyvsp;
      $414 = ((($413)) + -12|0);
      $415 = HEAP32[$414>>2]|0;
      $416 = (_new_call($407,$410,$412,$415)|0);
      $417 = $yyvsp;
      $418 = ((($417)) + -4|0);
      $419 = HEAP32[$418>>2]|0;
      $420 = $yyvsp;
      $421 = HEAP32[$420>>2]|0;
      $422 = (_new_op_asgn($406,$416,$419,$421)|0);
      HEAP32[$yyval>>2] = $422;
      break;
     }
     case 31:  {
      $423 = $0;
      $424 = $0;
      $425 = $yyvsp;
      $426 = ((($425)) + -16|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = $yyvsp;
      $429 = ((($428)) + -8|0);
      $430 = HEAP32[$429>>2]|0;
      $431 = (_new_call($424,$427,$430,0)|0);
      $432 = $yyvsp;
      $433 = ((($432)) + -4|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = $yyvsp;
      $436 = HEAP32[$435>>2]|0;
      $437 = (_new_op_asgn($423,$431,$434,$436)|0);
      HEAP32[$yyval>>2] = $437;
      break;
     }
     case 32:  {
      $438 = $0;
      $439 = $0;
      $440 = $yyvsp;
      $441 = ((($440)) + -16|0);
      $442 = HEAP32[$441>>2]|0;
      $443 = $yyvsp;
      $444 = ((($443)) + -8|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = (_new_call($439,$442,$445,0)|0);
      $447 = $yyvsp;
      $448 = ((($447)) + -4|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = $yyvsp;
      $451 = HEAP32[$450>>2]|0;
      $452 = (_new_op_asgn($438,$446,$449,$451)|0);
      HEAP32[$yyval>>2] = $452;
      break;
     }
     case 33:  {
      $453 = $0;
      _yyerror($453,59356);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 34:  {
      $454 = $0;
      $455 = $0;
      $456 = $yyvsp;
      $457 = ((($456)) + -16|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = $yyvsp;
      $460 = ((($459)) + -8|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = (_new_call($455,$458,$461,0)|0);
      $463 = $yyvsp;
      $464 = ((($463)) + -4|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = $yyvsp;
      $467 = HEAP32[$466>>2]|0;
      $468 = (_new_op_asgn($454,$462,$465,$467)|0);
      HEAP32[$yyval>>2] = $468;
      break;
     }
     case 35:  {
      $469 = $0;
      $470 = $yyvsp;
      $471 = ((($470)) + -8|0);
      $472 = HEAP32[$471>>2]|0;
      _backref_error($469,$472);
      $473 = $0;
      $474 = (_new_begin($473,0)|0);
      HEAP32[$yyval>>2] = $474;
      break;
     }
     case 36:  {
      $475 = $0;
      $476 = $yyvsp;
      $477 = ((($476)) + -8|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = $0;
      $480 = $yyvsp;
      $481 = HEAP32[$480>>2]|0;
      $482 = (_new_array($479,$481)|0);
      $483 = (_new_asgn($475,$478,$482)|0);
      HEAP32[$yyval>>2] = $483;
      break;
     }
     case 37:  {
      $484 = $0;
      $485 = $yyvsp;
      $486 = ((($485)) + -8|0);
      $487 = HEAP32[$486>>2]|0;
      $488 = $yyvsp;
      $489 = HEAP32[$488>>2]|0;
      $490 = (_new_masgn($484,$487,$489)|0);
      HEAP32[$yyval>>2] = $490;
      break;
     }
     case 38:  {
      $491 = $0;
      $492 = $yyvsp;
      $493 = ((($492)) + -8|0);
      $494 = HEAP32[$493>>2]|0;
      $495 = $0;
      $496 = $yyvsp;
      $497 = HEAP32[$496>>2]|0;
      $498 = (_new_array($495,$497)|0);
      $499 = (_new_masgn($491,$494,$498)|0);
      HEAP32[$yyval>>2] = $499;
      break;
     }
     case 40:  {
      $500 = $0;
      $501 = $yyvsp;
      $502 = ((($501)) + -8|0);
      $503 = HEAP32[$502>>2]|0;
      $504 = $yyvsp;
      $505 = HEAP32[$504>>2]|0;
      $506 = (_new_asgn($500,$503,$505)|0);
      HEAP32[$yyval>>2] = $506;
      break;
     }
     case 41:  {
      $507 = $0;
      $508 = $yyvsp;
      $509 = ((($508)) + -8|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = $yyvsp;
      $512 = HEAP32[$511>>2]|0;
      $513 = (_new_asgn($507,$510,$512)|0);
      HEAP32[$yyval>>2] = $513;
      break;
     }
     case 43:  {
      $514 = $0;
      $515 = $yyvsp;
      $516 = ((($515)) + -8|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = $yyvsp;
      $519 = HEAP32[$518>>2]|0;
      $520 = (_new_and($514,$517,$519)|0);
      HEAP32[$yyval>>2] = $520;
      break;
     }
     case 44:  {
      $521 = $0;
      $522 = $yyvsp;
      $523 = ((($522)) + -8|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = $yyvsp;
      $526 = HEAP32[$525>>2]|0;
      $527 = (_new_or($521,$524,$526)|0);
      HEAP32[$yyval>>2] = $527;
      break;
     }
     case 45:  {
      $528 = $0;
      $529 = $yyvsp;
      $530 = HEAP32[$529>>2]|0;
      $531 = (_cond($530)|0);
      $532 = (_call_uni_op($528,$531,65320)|0);
      HEAP32[$yyval>>2] = $532;
      break;
     }
     case 46:  {
      $533 = $0;
      $534 = $yyvsp;
      $535 = HEAP32[$534>>2]|0;
      $536 = (_cond($535)|0);
      $537 = (_call_uni_op($533,$536,65320)|0);
      HEAP32[$yyval>>2] = $537;
      break;
     }
     case 48:  {
      $538 = $yyvsp;
      $539 = HEAP32[$538>>2]|0;
      $540 = ($539|0)!=(0|0);
      if ($540) {
       $543 = $yyvsp;
       $544 = HEAP32[$543>>2]|0;
       HEAP32[$yyval>>2] = $544;
       break L69;
      } else {
       $541 = $0;
       $542 = (_new_nil($541)|0);
       HEAP32[$yyval>>2] = $542;
       break L69;
      }
      break;
     }
     case 53:  {
      $545 = $0;
      _local_nest($545);
      break;
     }
     case 54:  {
      $546 = $0;
      $547 = $yyvsp;
      $548 = ((($547)) + -8|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = $yyvsp;
      $551 = ((($550)) + -4|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = (_new_block($546,$549,$552)|0);
      HEAP32[$yyval>>2] = $553;
      $554 = $0;
      _local_unnest($554);
      break;
     }
     case 55:  {
      $555 = $0;
      $556 = $yyvsp;
      $557 = ((($556)) + -4|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = $yyvsp;
      $560 = HEAP32[$559>>2]|0;
      $561 = (_new_fcall($555,$558,$560)|0);
      HEAP32[$yyval>>2] = $561;
      break;
     }
     case 56:  {
      $562 = $0;
      $563 = $yyvsp;
      $564 = ((($563)) + -4|0);
      $565 = HEAP32[$564>>2]|0;
      $566 = $yyvsp;
      $567 = HEAP32[$566>>2]|0;
      _args_with_block($562,$565,$567);
      $568 = $0;
      $569 = $yyvsp;
      $570 = ((($569)) + -8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = $yyvsp;
      $573 = ((($572)) + -4|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = (_new_fcall($568,$571,$574)|0);
      HEAP32[$yyval>>2] = $575;
      break;
     }
     case 57:  {
      $576 = $0;
      $577 = $yyvsp;
      $578 = ((($577)) + -12|0);
      $579 = HEAP32[$578>>2]|0;
      $580 = $yyvsp;
      $581 = ((($580)) + -4|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = $yyvsp;
      $584 = HEAP32[$583>>2]|0;
      $585 = (_new_call($576,$579,$582,$584)|0);
      HEAP32[$yyval>>2] = $585;
      break;
     }
     case 58:  {
      $586 = $0;
      $587 = $yyvsp;
      $588 = ((($587)) + -4|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = $yyvsp;
      $591 = HEAP32[$590>>2]|0;
      _args_with_block($586,$589,$591);
      $592 = $0;
      $593 = $yyvsp;
      $594 = ((($593)) + -16|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = $yyvsp;
      $597 = ((($596)) + -8|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $yyvsp;
      $600 = ((($599)) + -4|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = (_new_call($592,$595,$598,$601)|0);
      HEAP32[$yyval>>2] = $602;
      break;
     }
     case 59:  {
      $603 = $0;
      $604 = $yyvsp;
      $605 = ((($604)) + -12|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = $yyvsp;
      $608 = ((($607)) + -4|0);
      $609 = HEAP32[$608>>2]|0;
      $610 = $yyvsp;
      $611 = HEAP32[$610>>2]|0;
      $612 = (_new_call($603,$606,$609,$611)|0);
      HEAP32[$yyval>>2] = $612;
      break;
     }
     case 60:  {
      $613 = $0;
      $614 = $yyvsp;
      $615 = ((($614)) + -4|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = $yyvsp;
      $618 = HEAP32[$617>>2]|0;
      _args_with_block($613,$616,$618);
      $619 = $0;
      $620 = $yyvsp;
      $621 = ((($620)) + -16|0);
      $622 = HEAP32[$621>>2]|0;
      $623 = $yyvsp;
      $624 = ((($623)) + -8|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = $yyvsp;
      $627 = ((($626)) + -4|0);
      $628 = HEAP32[$627>>2]|0;
      $629 = (_new_call($619,$622,$625,$628)|0);
      HEAP32[$yyval>>2] = $629;
      break;
     }
     case 61:  {
      $630 = $0;
      $631 = $yyvsp;
      $632 = HEAP32[$631>>2]|0;
      $633 = (_new_super($630,$632)|0);
      HEAP32[$yyval>>2] = $633;
      break;
     }
     case 62:  {
      $634 = $0;
      $635 = $yyvsp;
      $636 = HEAP32[$635>>2]|0;
      $637 = (_new_yield($634,$636)|0);
      HEAP32[$yyval>>2] = $637;
      break;
     }
     case 63:  {
      $638 = $0;
      $639 = $0;
      $640 = $yyvsp;
      $641 = HEAP32[$640>>2]|0;
      $642 = (_ret_args($639,$641)|0);
      $643 = (_new_return($638,$642)|0);
      HEAP32[$yyval>>2] = $643;
      break;
     }
     case 64:  {
      $644 = $0;
      $645 = $0;
      $646 = $yyvsp;
      $647 = HEAP32[$646>>2]|0;
      $648 = (_ret_args($645,$647)|0);
      $649 = (_new_break($644,$648)|0);
      HEAP32[$yyval>>2] = $649;
      break;
     }
     case 65:  {
      $650 = $0;
      $651 = $0;
      $652 = $yyvsp;
      $653 = HEAP32[$652>>2]|0;
      $654 = (_ret_args($651,$653)|0);
      $655 = (_new_next($650,$654)|0);
      HEAP32[$yyval>>2] = $655;
      break;
     }
     case 66:  {
      $656 = $yyvsp;
      $657 = HEAP32[$656>>2]|0;
      HEAP32[$yyval>>2] = $657;
      break;
     }
     case 67:  {
      $658 = $yyvsp;
      $659 = ((($658)) + -4|0);
      $660 = HEAP32[$659>>2]|0;
      HEAP32[$yyval>>2] = $660;
      break;
     }
     case 69:  {
      $661 = $yyvsp;
      $662 = ((($661)) + -4|0);
      $663 = HEAP32[$662>>2]|0;
      HEAP32[$yyval>>2] = $663;
      break;
     }
     case 70:  {
      $664 = $0;
      $665 = $yyvsp;
      $666 = HEAP32[$665>>2]|0;
      $667 = (_list1_gen($664,$666)|0);
      HEAP32[$yyval>>2] = $667;
      break;
     }
     case 71:  {
      $668 = $0;
      $669 = $0;
      $670 = $yyvsp;
      $671 = ((($670)) + -4|0);
      $672 = HEAP32[$671>>2]|0;
      $673 = $0;
      $674 = $yyvsp;
      $675 = HEAP32[$674>>2]|0;
      $676 = (_list1_gen($673,$675)|0);
      $677 = (_append_gen($669,$672,$676)|0);
      $678 = (_list1_gen($668,$677)|0);
      HEAP32[$yyval>>2] = $678;
      break;
     }
     case 72:  {
      $679 = $0;
      $680 = $yyvsp;
      $681 = ((($680)) + -8|0);
      $682 = HEAP32[$681>>2]|0;
      $683 = $yyvsp;
      $684 = HEAP32[$683>>2]|0;
      $685 = (_list2_gen($679,$682,$684)|0);
      HEAP32[$yyval>>2] = $685;
      break;
     }
     case 73:  {
      $686 = $0;
      $687 = $yyvsp;
      $688 = ((($687)) + -16|0);
      $689 = HEAP32[$688>>2]|0;
      $690 = $yyvsp;
      $691 = ((($690)) + -8|0);
      $692 = HEAP32[$691>>2]|0;
      $693 = $yyvsp;
      $694 = HEAP32[$693>>2]|0;
      $695 = (_list3_gen($686,$689,$692,$694)|0);
      HEAP32[$yyval>>2] = $695;
      break;
     }
     case 74:  {
      $696 = $0;
      $697 = $yyvsp;
      $698 = ((($697)) + -4|0);
      $699 = HEAP32[$698>>2]|0;
      $700 = $0;
      $701 = (_new_nil($700)|0);
      $702 = (_list2_gen($696,$699,$701)|0);
      HEAP32[$yyval>>2] = $702;
      break;
     }
     case 75:  {
      $703 = $0;
      $704 = $yyvsp;
      $705 = ((($704)) + -12|0);
      $706 = HEAP32[$705>>2]|0;
      $707 = $0;
      $708 = (_new_nil($707)|0);
      $709 = $yyvsp;
      $710 = HEAP32[$709>>2]|0;
      $711 = (_list3_gen($703,$706,$708,$710)|0);
      HEAP32[$yyval>>2] = $711;
      break;
     }
     case 76:  {
      $712 = $0;
      $713 = $yyvsp;
      $714 = HEAP32[$713>>2]|0;
      $715 = (_list2_gen($712,0,$714)|0);
      HEAP32[$yyval>>2] = $715;
      break;
     }
     case 77:  {
      $716 = $0;
      $717 = $yyvsp;
      $718 = ((($717)) + -8|0);
      $719 = HEAP32[$718>>2]|0;
      $720 = $yyvsp;
      $721 = HEAP32[$720>>2]|0;
      $722 = (_list3_gen($716,0,$719,$721)|0);
      HEAP32[$yyval>>2] = $722;
      break;
     }
     case 78:  {
      $723 = $0;
      $724 = $0;
      $725 = (_new_nil($724)|0);
      $726 = (_list2_gen($723,0,$725)|0);
      HEAP32[$yyval>>2] = $726;
      break;
     }
     case 79:  {
      $727 = $0;
      $728 = $0;
      $729 = (_new_nil($728)|0);
      $730 = $yyvsp;
      $731 = HEAP32[$730>>2]|0;
      $732 = (_list3_gen($727,0,$729,$731)|0);
      HEAP32[$yyval>>2] = $732;
      break;
     }
     case 81:  {
      $733 = $0;
      $734 = $yyvsp;
      $735 = ((($734)) + -4|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = (_new_masgn($733,$736,0)|0);
      HEAP32[$yyval>>2] = $737;
      break;
     }
     case 82:  {
      $738 = $0;
      $739 = $yyvsp;
      $740 = ((($739)) + -4|0);
      $741 = HEAP32[$740>>2]|0;
      $742 = (_list1_gen($738,$741)|0);
      HEAP32[$yyval>>2] = $742;
      break;
     }
     case 83:  {
      $743 = $0;
      $744 = $yyvsp;
      $745 = ((($744)) + -8|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = $0;
      $748 = $yyvsp;
      $749 = ((($748)) + -4|0);
      $750 = HEAP32[$749>>2]|0;
      $751 = (_list1_gen($747,$750)|0);
      $752 = (_append_gen($743,$746,$751)|0);
      HEAP32[$yyval>>2] = $752;
      break;
     }
     case 84:  {
      $753 = $0;
      $754 = $yyvsp;
      $755 = HEAP32[$754>>2]|0;
      $756 = (_list1_gen($753,$755)|0);
      HEAP32[$yyval>>2] = $756;
      break;
     }
     case 85:  {
      $757 = $0;
      $758 = $yyvsp;
      $759 = ((($758)) + -4|0);
      $760 = HEAP32[$759>>2]|0;
      $761 = $0;
      $762 = $yyvsp;
      $763 = HEAP32[$762>>2]|0;
      $764 = (_list1_gen($761,$763)|0);
      $765 = (_append_gen($757,$760,$764)|0);
      HEAP32[$yyval>>2] = $765;
      break;
     }
     case 86:  {
      $766 = $0;
      $767 = $yyvsp;
      $768 = HEAP32[$767>>2]|0;
      _assignable($766,$768);
      break;
     }
     case 87:  {
      $769 = $0;
      $770 = $yyvsp;
      $771 = ((($770)) + -12|0);
      $772 = HEAP32[$771>>2]|0;
      $773 = $0;
      $774 = (_intern_gen($773,68841,2)|0);
      $775 = $yyvsp;
      $776 = ((($775)) + -4|0);
      $777 = HEAP32[$776>>2]|0;
      $778 = (_new_call($769,$772,$774,$777)|0);
      HEAP32[$yyval>>2] = $778;
      break;
     }
     case 88:  {
      $779 = $0;
      $780 = $yyvsp;
      $781 = ((($780)) + -8|0);
      $782 = HEAP32[$781>>2]|0;
      $783 = $yyvsp;
      $784 = HEAP32[$783>>2]|0;
      $785 = (_new_call($779,$782,$784,0)|0);
      HEAP32[$yyval>>2] = $785;
      break;
     }
     case 89:  {
      $786 = $0;
      $787 = $yyvsp;
      $788 = ((($787)) + -8|0);
      $789 = HEAP32[$788>>2]|0;
      $790 = $yyvsp;
      $791 = HEAP32[$790>>2]|0;
      $792 = (_new_call($786,$789,$791,0)|0);
      HEAP32[$yyval>>2] = $792;
      break;
     }
     case 90:  {
      $793 = $0;
      $794 = $yyvsp;
      $795 = ((($794)) + -8|0);
      $796 = HEAP32[$795>>2]|0;
      $797 = $yyvsp;
      $798 = HEAP32[$797>>2]|0;
      $799 = (_new_call($793,$796,$798,0)|0);
      HEAP32[$yyval>>2] = $799;
      break;
     }
     case 91:  {
      $800 = $0;
      $801 = ((($800)) + 64|0);
      $802 = HEAP32[$801>>2]|0;
      $803 = ($802|0)!=(0);
      if ($803) {
       label = 123;
      } else {
       $804 = $0;
       $805 = ((($804)) + 68|0);
       $806 = HEAP32[$805>>2]|0;
       $807 = ($806|0)!=(0);
       if ($807) {
        label = 123;
       }
      }
      if ((label|0) == 123) {
       label = 0;
       $808 = $0;
       _yyerror($808,59547);
      }
      $809 = $0;
      $810 = $yyvsp;
      $811 = ((($810)) + -8|0);
      $812 = HEAP32[$811>>2]|0;
      $813 = $yyvsp;
      $814 = HEAP32[$813>>2]|0;
      $815 = (_new_colon2($809,$812,$814)|0);
      HEAP32[$yyval>>2] = $815;
      break;
     }
     case 92:  {
      $816 = $0;
      $817 = ((($816)) + 64|0);
      $818 = HEAP32[$817>>2]|0;
      $819 = ($818|0)!=(0);
      if ($819) {
       label = 127;
      } else {
       $820 = $0;
       $821 = ((($820)) + 68|0);
       $822 = HEAP32[$821>>2]|0;
       $823 = ($822|0)!=(0);
       if ($823) {
        label = 127;
       }
      }
      if ((label|0) == 127) {
       label = 0;
       $824 = $0;
       _yyerror($824,59547);
      }
      $825 = $0;
      $826 = $yyvsp;
      $827 = HEAP32[$826>>2]|0;
      $828 = (_new_colon3($825,$827)|0);
      HEAP32[$yyval>>2] = $828;
      break;
     }
     case 93:  {
      $829 = $0;
      $830 = $yyvsp;
      $831 = HEAP32[$830>>2]|0;
      _backref_error($829,$831);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 94:  {
      $832 = $0;
      $833 = $yyvsp;
      $834 = HEAP32[$833>>2]|0;
      _assignable($832,$834);
      break;
     }
     case 95:  {
      $835 = $0;
      $836 = $yyvsp;
      $837 = ((($836)) + -12|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = $0;
      $840 = (_intern_gen($839,68841,2)|0);
      $841 = $yyvsp;
      $842 = ((($841)) + -4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (_new_call($835,$838,$840,$843)|0);
      HEAP32[$yyval>>2] = $844;
      break;
     }
     case 96:  {
      $845 = $0;
      $846 = $yyvsp;
      $847 = ((($846)) + -8|0);
      $848 = HEAP32[$847>>2]|0;
      $849 = $yyvsp;
      $850 = HEAP32[$849>>2]|0;
      $851 = (_new_call($845,$848,$850,0)|0);
      HEAP32[$yyval>>2] = $851;
      break;
     }
     case 97:  {
      $852 = $0;
      $853 = $yyvsp;
      $854 = ((($853)) + -8|0);
      $855 = HEAP32[$854>>2]|0;
      $856 = $yyvsp;
      $857 = HEAP32[$856>>2]|0;
      $858 = (_new_call($852,$855,$857,0)|0);
      HEAP32[$yyval>>2] = $858;
      break;
     }
     case 98:  {
      $859 = $0;
      $860 = $yyvsp;
      $861 = ((($860)) + -8|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = $yyvsp;
      $864 = HEAP32[$863>>2]|0;
      $865 = (_new_call($859,$862,$864,0)|0);
      HEAP32[$yyval>>2] = $865;
      break;
     }
     case 99:  {
      $866 = $0;
      $867 = ((($866)) + 64|0);
      $868 = HEAP32[$867>>2]|0;
      $869 = ($868|0)!=(0);
      if ($869) {
       label = 137;
      } else {
       $870 = $0;
       $871 = ((($870)) + 68|0);
       $872 = HEAP32[$871>>2]|0;
       $873 = ($872|0)!=(0);
       if ($873) {
        label = 137;
       }
      }
      if ((label|0) == 137) {
       label = 0;
       $874 = $0;
       _yyerror($874,59547);
      }
      $875 = $0;
      $876 = $yyvsp;
      $877 = ((($876)) + -8|0);
      $878 = HEAP32[$877>>2]|0;
      $879 = $yyvsp;
      $880 = HEAP32[$879>>2]|0;
      $881 = (_new_colon2($875,$878,$880)|0);
      HEAP32[$yyval>>2] = $881;
      break;
     }
     case 100:  {
      $882 = $0;
      $883 = ((($882)) + 64|0);
      $884 = HEAP32[$883>>2]|0;
      $885 = ($884|0)!=(0);
      if ($885) {
       label = 141;
      } else {
       $886 = $0;
       $887 = ((($886)) + 68|0);
       $888 = HEAP32[$887>>2]|0;
       $889 = ($888|0)!=(0);
       if ($889) {
        label = 141;
       }
      }
      if ((label|0) == 141) {
       label = 0;
       $890 = $0;
       _yyerror($890,59547);
      }
      $891 = $0;
      $892 = $yyvsp;
      $893 = HEAP32[$892>>2]|0;
      $894 = (_new_colon3($891,$893)|0);
      HEAP32[$yyval>>2] = $894;
      break;
     }
     case 101:  {
      $895 = $0;
      $896 = $yyvsp;
      $897 = HEAP32[$896>>2]|0;
      _backref_error($895,$897);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 102:  {
      $898 = $0;
      _yyerror($898,59575);
      break;
     }
     case 104:  {
      $899 = $0;
      $900 = $yyvsp;
      $901 = HEAP32[$900>>2]|0;
      $902 = $901;
      $903 = (_cons_gen($899,(1),$902)|0);
      HEAP32[$yyval>>2] = $903;
      break;
     }
     case 105:  {
      $904 = $0;
      $905 = $yyvsp;
      $906 = HEAP32[$905>>2]|0;
      $907 = $906;
      $908 = (_cons_gen($904,0,$907)|0);
      HEAP32[$yyval>>2] = $908;
      break;
     }
     case 106:  {
      $909 = $0;
      $910 = $yyvsp;
      $911 = ((($910)) + -8|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = $yyvsp;
      $914 = HEAP32[$913>>2]|0;
      $915 = $914;
      $916 = (_cons_gen($909,$912,$915)|0);
      HEAP32[$yyval>>2] = $916;
      break;
     }
     case 110:  {
      $917 = $0;
      $918 = ((($917)) + 40|0);
      HEAP32[$918>>2] = 3;
      $919 = $yyvsp;
      $920 = HEAP32[$919>>2]|0;
      HEAP32[$yyval>>2] = $920;
      break;
     }
     case 111:  {
      $921 = $0;
      $922 = ((($921)) + 40|0);
      HEAP32[$922>>2] = 3;
      $923 = $yyvsp;
      $924 = HEAP32[$923>>2]|0;
      HEAP32[$yyval>>2] = $924;
      break;
     }
     case 114:  {
      $925 = $0;
      $926 = $yyvsp;
      $927 = HEAP32[$926>>2]|0;
      $928 = (_new_undef($925,$927)|0);
      HEAP32[$yyval>>2] = $928;
      break;
     }
     case 115:  {
      $929 = $0;
      $930 = ((($929)) + 40|0);
      HEAP32[$930>>2] = 7;
      break;
     }
     case 116:  {
      $931 = $0;
      $932 = $yyvsp;
      $933 = ((($932)) + -12|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = $0;
      $936 = $yyvsp;
      $937 = HEAP32[$936>>2]|0;
      $938 = $937;
      $939 = (_list1_gen($935,$938)|0);
      $940 = (_append_gen($931,$934,$939)|0);
      HEAP32[$yyval>>2] = $940;
      break;
     }
     case 117:  {
      $941 = $0;
      $942 = (_intern_gen_c($941,124)|0);
      HEAP32[$yyval>>2] = $942;
      break;
     }
     case 118:  {
      $943 = $0;
      $944 = (_intern_gen_c($943,94)|0);
      HEAP32[$yyval>>2] = $944;
      break;
     }
     case 119:  {
      $945 = $0;
      $946 = (_intern_gen_c($945,38)|0);
      HEAP32[$yyval>>2] = $946;
      break;
     }
     case 120:  {
      $947 = $0;
      $948 = (_intern_gen($947,68851,3)|0);
      HEAP32[$yyval>>2] = $948;
      break;
     }
     case 121:  {
      $949 = $0;
      $950 = (_intern_gen($949,68902,2)|0);
      HEAP32[$yyval>>2] = $950;
      break;
     }
     case 122:  {
      $951 = $0;
      $952 = (_intern_gen($951,69450,3)|0);
      HEAP32[$yyval>>2] = $952;
      break;
     }
     case 123:  {
      $953 = $0;
      $954 = (_intern_gen($953,59610,2)|0);
      HEAP32[$yyval>>2] = $954;
      break;
     }
     case 124:  {
      $955 = $0;
      $956 = (_intern_gen($955,59613,2)|0);
      HEAP32[$yyval>>2] = $956;
      break;
     }
     case 125:  {
      $957 = $0;
      $958 = (_intern_gen_c($957,62)|0);
      HEAP32[$yyval>>2] = $958;
      break;
     }
     case 126:  {
      $959 = $0;
      $960 = (_intern_gen($959,59616,2)|0);
      HEAP32[$yyval>>2] = $960;
      break;
     }
     case 127:  {
      $961 = $0;
      $962 = (_intern_gen_c($961,60)|0);
      HEAP32[$yyval>>2] = $962;
      break;
     }
     case 128:  {
      $963 = $0;
      $964 = (_intern_gen($963,59619,2)|0);
      HEAP32[$yyval>>2] = $964;
      break;
     }
     case 129:  {
      $965 = $0;
      $966 = (_intern_gen($965,68065,2)|0);
      HEAP32[$yyval>>2] = $966;
      break;
     }
     case 130:  {
      $967 = $0;
      $968 = (_intern_gen($967,64339,2)|0);
      HEAP32[$yyval>>2] = $968;
      break;
     }
     case 131:  {
      $969 = $0;
      $970 = (_intern_gen($969,57205,2)|0);
      HEAP32[$yyval>>2] = $970;
      break;
     }
     case 132:  {
      $971 = $0;
      $972 = (_intern_gen_c($971,43)|0);
      HEAP32[$yyval>>2] = $972;
      break;
     }
     case 133:  {
      $973 = $0;
      $974 = (_intern_gen_c($973,45)|0);
      HEAP32[$yyval>>2] = $974;
      break;
     }
     case 134:  {
      $975 = $0;
      $976 = (_intern_gen_c($975,42)|0);
      HEAP32[$yyval>>2] = $976;
      break;
     }
     case 135:  {
      $977 = $0;
      $978 = (_intern_gen_c($977,42)|0);
      HEAP32[$yyval>>2] = $978;
      break;
     }
     case 136:  {
      $979 = $0;
      $980 = (_intern_gen_c($979,47)|0);
      HEAP32[$yyval>>2] = $980;
      break;
     }
     case 137:  {
      $981 = $0;
      $982 = (_intern_gen_c($981,37)|0);
      HEAP32[$yyval>>2] = $982;
      break;
     }
     case 138:  {
      $983 = $0;
      $984 = (_intern_gen($983,57087,2)|0);
      HEAP32[$yyval>>2] = $984;
      break;
     }
     case 139:  {
      $985 = $0;
      $986 = (_intern_gen_c($985,33)|0);
      HEAP32[$yyval>>2] = $986;
      break;
     }
     case 140:  {
      $987 = $0;
      $988 = (_intern_gen_c($987,126)|0);
      HEAP32[$yyval>>2] = $988;
      break;
     }
     case 141:  {
      $989 = $0;
      $990 = (_intern_gen($989,59622,2)|0);
      HEAP32[$yyval>>2] = $990;
      break;
     }
     case 142:  {
      $991 = $0;
      $992 = (_intern_gen($991,59625,2)|0);
      HEAP32[$yyval>>2] = $992;
      break;
     }
     case 143:  {
      $993 = $0;
      $994 = (_intern_gen($993,68841,2)|0);
      HEAP32[$yyval>>2] = $994;
      break;
     }
     case 144:  {
      $995 = $0;
      $996 = (_intern_gen($995,64349,3)|0);
      HEAP32[$yyval>>2] = $996;
      break;
     }
     case 145:  {
      $997 = $0;
      $998 = (_intern_gen_c($997,96)|0);
      HEAP32[$yyval>>2] = $998;
      break;
     }
     case 186:  {
      $999 = $0;
      $1000 = $yyvsp;
      $1001 = ((($1000)) + -8|0);
      $1002 = HEAP32[$1001>>2]|0;
      $1003 = $yyvsp;
      $1004 = HEAP32[$1003>>2]|0;
      $1005 = (_new_asgn($999,$1002,$1004)|0);
      HEAP32[$yyval>>2] = $1005;
      break;
     }
     case 187:  {
      $1006 = $0;
      $1007 = $yyvsp;
      $1008 = ((($1007)) + -16|0);
      $1009 = HEAP32[$1008>>2]|0;
      $1010 = $0;
      $1011 = $yyvsp;
      $1012 = ((($1011)) + -8|0);
      $1013 = HEAP32[$1012>>2]|0;
      $1014 = $0;
      $1015 = $0;
      $1016 = $yyvsp;
      $1017 = HEAP32[$1016>>2]|0;
      $1018 = (_list3_gen($1015,0,0,$1017)|0);
      $1019 = (_list1_gen($1014,$1018)|0);
      $1020 = (_new_rescue($1010,$1013,$1019,0)|0);
      $1021 = (_new_asgn($1006,$1009,$1020)|0);
      HEAP32[$yyval>>2] = $1021;
      break;
     }
     case 188:  {
      $1022 = $0;
      $1023 = $yyvsp;
      $1024 = ((($1023)) + -8|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $yyvsp;
      $1027 = ((($1026)) + -4|0);
      $1028 = HEAP32[$1027>>2]|0;
      $1029 = $yyvsp;
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = (_new_op_asgn($1022,$1025,$1028,$1030)|0);
      HEAP32[$yyval>>2] = $1031;
      break;
     }
     case 189:  {
      $1032 = $0;
      $1033 = $yyvsp;
      $1034 = ((($1033)) + -16|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = $yyvsp;
      $1037 = ((($1036)) + -12|0);
      $1038 = HEAP32[$1037>>2]|0;
      $1039 = $0;
      $1040 = $yyvsp;
      $1041 = ((($1040)) + -8|0);
      $1042 = HEAP32[$1041>>2]|0;
      $1043 = $0;
      $1044 = $0;
      $1045 = $yyvsp;
      $1046 = HEAP32[$1045>>2]|0;
      $1047 = (_list3_gen($1044,0,0,$1046)|0);
      $1048 = (_list1_gen($1043,$1047)|0);
      $1049 = (_new_rescue($1039,$1042,$1048,0)|0);
      $1050 = (_new_op_asgn($1032,$1035,$1038,$1049)|0);
      HEAP32[$yyval>>2] = $1050;
      break;
     }
     case 190:  {
      $1051 = $0;
      $1052 = $0;
      $1053 = $yyvsp;
      $1054 = ((($1053)) + -20|0);
      $1055 = HEAP32[$1054>>2]|0;
      $1056 = $0;
      $1057 = (_intern_gen($1056,68841,2)|0);
      $1058 = $yyvsp;
      $1059 = ((($1058)) + -12|0);
      $1060 = HEAP32[$1059>>2]|0;
      $1061 = (_new_call($1052,$1055,$1057,$1060)|0);
      $1062 = $yyvsp;
      $1063 = ((($1062)) + -4|0);
      $1064 = HEAP32[$1063>>2]|0;
      $1065 = $yyvsp;
      $1066 = HEAP32[$1065>>2]|0;
      $1067 = (_new_op_asgn($1051,$1061,$1064,$1066)|0);
      HEAP32[$yyval>>2] = $1067;
      break;
     }
     case 191:  {
      $1068 = $0;
      $1069 = $0;
      $1070 = $yyvsp;
      $1071 = ((($1070)) + -16|0);
      $1072 = HEAP32[$1071>>2]|0;
      $1073 = $yyvsp;
      $1074 = ((($1073)) + -8|0);
      $1075 = HEAP32[$1074>>2]|0;
      $1076 = (_new_call($1069,$1072,$1075,0)|0);
      $1077 = $yyvsp;
      $1078 = ((($1077)) + -4|0);
      $1079 = HEAP32[$1078>>2]|0;
      $1080 = $yyvsp;
      $1081 = HEAP32[$1080>>2]|0;
      $1082 = (_new_op_asgn($1068,$1076,$1079,$1081)|0);
      HEAP32[$yyval>>2] = $1082;
      break;
     }
     case 192:  {
      $1083 = $0;
      $1084 = $0;
      $1085 = $yyvsp;
      $1086 = ((($1085)) + -16|0);
      $1087 = HEAP32[$1086>>2]|0;
      $1088 = $yyvsp;
      $1089 = ((($1088)) + -8|0);
      $1090 = HEAP32[$1089>>2]|0;
      $1091 = (_new_call($1084,$1087,$1090,0)|0);
      $1092 = $yyvsp;
      $1093 = ((($1092)) + -4|0);
      $1094 = HEAP32[$1093>>2]|0;
      $1095 = $yyvsp;
      $1096 = HEAP32[$1095>>2]|0;
      $1097 = (_new_op_asgn($1083,$1091,$1094,$1096)|0);
      HEAP32[$yyval>>2] = $1097;
      break;
     }
     case 193:  {
      $1098 = $0;
      $1099 = $0;
      $1100 = $yyvsp;
      $1101 = ((($1100)) + -16|0);
      $1102 = HEAP32[$1101>>2]|0;
      $1103 = $yyvsp;
      $1104 = ((($1103)) + -8|0);
      $1105 = HEAP32[$1104>>2]|0;
      $1106 = (_new_call($1099,$1102,$1105,0)|0);
      $1107 = $yyvsp;
      $1108 = ((($1107)) + -4|0);
      $1109 = HEAP32[$1108>>2]|0;
      $1110 = $yyvsp;
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = (_new_op_asgn($1098,$1106,$1109,$1111)|0);
      HEAP32[$yyval>>2] = $1112;
      break;
     }
     case 194:  {
      $1113 = $0;
      _yyerror($1113,59356);
      $1114 = $0;
      $1115 = (_new_begin($1114,0)|0);
      HEAP32[$yyval>>2] = $1115;
      break;
     }
     case 195:  {
      $1116 = $0;
      _yyerror($1116,59356);
      $1117 = $0;
      $1118 = (_new_begin($1117,0)|0);
      HEAP32[$yyval>>2] = $1118;
      break;
     }
     case 196:  {
      $1119 = $0;
      $1120 = $yyvsp;
      $1121 = ((($1120)) + -8|0);
      $1122 = HEAP32[$1121>>2]|0;
      _backref_error($1119,$1122);
      $1123 = $0;
      $1124 = (_new_begin($1123,0)|0);
      HEAP32[$yyval>>2] = $1124;
      break;
     }
     case 197:  {
      $1125 = $0;
      $1126 = $yyvsp;
      $1127 = ((($1126)) + -8|0);
      $1128 = HEAP32[$1127>>2]|0;
      $1129 = $yyvsp;
      $1130 = HEAP32[$1129>>2]|0;
      $1131 = (_new_dot2($1125,$1128,$1130)|0);
      HEAP32[$yyval>>2] = $1131;
      break;
     }
     case 198:  {
      $1132 = $0;
      $1133 = $yyvsp;
      $1134 = ((($1133)) + -8|0);
      $1135 = HEAP32[$1134>>2]|0;
      $1136 = $yyvsp;
      $1137 = HEAP32[$1136>>2]|0;
      $1138 = (_new_dot3($1132,$1135,$1137)|0);
      HEAP32[$yyval>>2] = $1138;
      break;
     }
     case 199:  {
      $1139 = $0;
      $1140 = $yyvsp;
      $1141 = ((($1140)) + -8|0);
      $1142 = HEAP32[$1141>>2]|0;
      $1143 = $yyvsp;
      $1144 = HEAP32[$1143>>2]|0;
      $1145 = (_call_bin_op($1139,$1142,64315,$1144)|0);
      HEAP32[$yyval>>2] = $1145;
      break;
     }
     case 200:  {
      $1146 = $0;
      $1147 = $yyvsp;
      $1148 = ((($1147)) + -8|0);
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = $yyvsp;
      $1151 = HEAP32[$1150>>2]|0;
      $1152 = (_call_bin_op($1146,$1149,69609,$1151)|0);
      HEAP32[$yyval>>2] = $1152;
      break;
     }
     case 201:  {
      $1153 = $0;
      $1154 = $yyvsp;
      $1155 = ((($1154)) + -8|0);
      $1156 = HEAP32[$1155>>2]|0;
      $1157 = $yyvsp;
      $1158 = HEAP32[$1157>>2]|0;
      $1159 = (_call_bin_op($1153,$1156,68114,$1158)|0);
      HEAP32[$yyval>>2] = $1159;
      break;
     }
     case 202:  {
      $1160 = $0;
      $1161 = $yyvsp;
      $1162 = ((($1161)) + -8|0);
      $1163 = HEAP32[$1162>>2]|0;
      $1164 = $yyvsp;
      $1165 = HEAP32[$1164>>2]|0;
      $1166 = (_call_bin_op($1160,$1163,59628,$1165)|0);
      HEAP32[$yyval>>2] = $1166;
      break;
     }
     case 203:  {
      $1167 = $0;
      $1168 = $yyvsp;
      $1169 = ((($1168)) + -8|0);
      $1170 = HEAP32[$1169>>2]|0;
      $1171 = $yyvsp;
      $1172 = HEAP32[$1171>>2]|0;
      $1173 = (_call_bin_op($1167,$1170,59630,$1172)|0);
      HEAP32[$yyval>>2] = $1173;
      break;
     }
     case 204:  {
      $1174 = $0;
      $1175 = $yyvsp;
      $1176 = ((($1175)) + -8|0);
      $1177 = HEAP32[$1176>>2]|0;
      $1178 = $yyvsp;
      $1179 = HEAP32[$1178>>2]|0;
      $1180 = (_call_bin_op($1174,$1177,57087,$1179)|0);
      HEAP32[$yyval>>2] = $1180;
      break;
     }
     case 205:  {
      $1181 = $0;
      $1182 = $0;
      $1183 = $yyvsp;
      $1184 = ((($1183)) + -8|0);
      $1185 = HEAP32[$1184>>2]|0;
      $1186 = $yyvsp;
      $1187 = HEAP32[$1186>>2]|0;
      $1188 = (_call_bin_op($1182,$1185,57087,$1187)|0);
      $1189 = (_call_uni_op($1181,$1188,59625)|0);
      HEAP32[$yyval>>2] = $1189;
      break;
     }
     case 206:  {
      $1190 = $0;
      $1191 = $0;
      $1192 = $yyvsp;
      $1193 = ((($1192)) + -8|0);
      $1194 = HEAP32[$1193>>2]|0;
      $1195 = $yyvsp;
      $1196 = HEAP32[$1195>>2]|0;
      $1197 = (_call_bin_op($1191,$1194,57087,$1196)|0);
      $1198 = (_call_uni_op($1190,$1197,59625)|0);
      HEAP32[$yyval>>2] = $1198;
      break;
     }
     case 207:  {
      $1199 = $0;
      $1200 = $yyvsp;
      $1201 = HEAP32[$1200>>2]|0;
      $1202 = (_call_uni_op($1199,$1201,59622)|0);
      HEAP32[$yyval>>2] = $1202;
      break;
     }
     case 208:  {
      $1203 = $0;
      $1204 = $yyvsp;
      $1205 = HEAP32[$1204>>2]|0;
      $1206 = (_call_uni_op($1203,$1205,59625)|0);
      HEAP32[$yyval>>2] = $1206;
      break;
     }
     case 209:  {
      $1207 = $0;
      $1208 = $yyvsp;
      $1209 = ((($1208)) + -8|0);
      $1210 = HEAP32[$1209>>2]|0;
      $1211 = $yyvsp;
      $1212 = HEAP32[$1211>>2]|0;
      $1213 = (_call_bin_op($1207,$1210,59632,$1212)|0);
      HEAP32[$yyval>>2] = $1213;
      break;
     }
     case 210:  {
      $1214 = $0;
      $1215 = $yyvsp;
      $1216 = ((($1215)) + -8|0);
      $1217 = HEAP32[$1216>>2]|0;
      $1218 = $yyvsp;
      $1219 = HEAP32[$1218>>2]|0;
      $1220 = (_call_bin_op($1214,$1217,59634,$1219)|0);
      HEAP32[$yyval>>2] = $1220;
      break;
     }
     case 211:  {
      $1221 = $0;
      $1222 = $yyvsp;
      $1223 = ((($1222)) + -8|0);
      $1224 = HEAP32[$1223>>2]|0;
      $1225 = $yyvsp;
      $1226 = HEAP32[$1225>>2]|0;
      $1227 = (_call_bin_op($1221,$1224,68778,$1226)|0);
      HEAP32[$yyval>>2] = $1227;
      break;
     }
     case 212:  {
      $1228 = $0;
      $1229 = $yyvsp;
      $1230 = ((($1229)) + -8|0);
      $1231 = HEAP32[$1230>>2]|0;
      $1232 = $yyvsp;
      $1233 = HEAP32[$1232>>2]|0;
      $1234 = (_call_bin_op($1228,$1231,68851,$1233)|0);
      HEAP32[$yyval>>2] = $1234;
      break;
     }
     case 213:  {
      $1235 = $0;
      $1236 = $yyvsp;
      $1237 = ((($1236)) + -8|0);
      $1238 = HEAP32[$1237>>2]|0;
      $1239 = $yyvsp;
      $1240 = HEAP32[$1239>>2]|0;
      $1241 = (_call_bin_op($1235,$1238,65241,$1240)|0);
      HEAP32[$yyval>>2] = $1241;
      break;
     }
     case 214:  {
      $1242 = $0;
      $1243 = $yyvsp;
      $1244 = ((($1243)) + -8|0);
      $1245 = HEAP32[$1244>>2]|0;
      $1246 = $yyvsp;
      $1247 = HEAP32[$1246>>2]|0;
      $1248 = (_call_bin_op($1242,$1245,59616,$1247)|0);
      HEAP32[$yyval>>2] = $1248;
      break;
     }
     case 215:  {
      $1249 = $0;
      $1250 = $yyvsp;
      $1251 = ((($1250)) + -8|0);
      $1252 = HEAP32[$1251>>2]|0;
      $1253 = $yyvsp;
      $1254 = HEAP32[$1253>>2]|0;
      $1255 = (_call_bin_op($1249,$1252,59636,$1254)|0);
      HEAP32[$yyval>>2] = $1255;
      break;
     }
     case 216:  {
      $1256 = $0;
      $1257 = $yyvsp;
      $1258 = ((($1257)) + -8|0);
      $1259 = HEAP32[$1258>>2]|0;
      $1260 = $yyvsp;
      $1261 = HEAP32[$1260>>2]|0;
      $1262 = (_call_bin_op($1256,$1259,59619,$1261)|0);
      HEAP32[$yyval>>2] = $1262;
      break;
     }
     case 217:  {
      $1263 = $0;
      $1264 = $yyvsp;
      $1265 = ((($1264)) + -8|0);
      $1266 = HEAP32[$1265>>2]|0;
      $1267 = $yyvsp;
      $1268 = HEAP32[$1267>>2]|0;
      $1269 = (_call_bin_op($1263,$1266,68902,$1268)|0);
      HEAP32[$yyval>>2] = $1269;
      break;
     }
     case 218:  {
      $1270 = $0;
      $1271 = $yyvsp;
      $1272 = ((($1271)) + -8|0);
      $1273 = HEAP32[$1272>>2]|0;
      $1274 = $yyvsp;
      $1275 = HEAP32[$1274>>2]|0;
      $1276 = (_call_bin_op($1270,$1273,69450,$1275)|0);
      HEAP32[$yyval>>2] = $1276;
      break;
     }
     case 219:  {
      $1277 = $0;
      $1278 = $yyvsp;
      $1279 = ((($1278)) + -8|0);
      $1280 = HEAP32[$1279>>2]|0;
      $1281 = $yyvsp;
      $1282 = HEAP32[$1281>>2]|0;
      $1283 = (_call_bin_op($1277,$1280,68065,$1282)|0);
      HEAP32[$yyval>>2] = $1283;
      break;
     }
     case 220:  {
      $1284 = $0;
      $1285 = $yyvsp;
      $1286 = ((($1285)) + -8|0);
      $1287 = HEAP32[$1286>>2]|0;
      $1288 = $yyvsp;
      $1289 = HEAP32[$1288>>2]|0;
      $1290 = (_call_bin_op($1284,$1287,59610,$1289)|0);
      HEAP32[$yyval>>2] = $1290;
      break;
     }
     case 221:  {
      $1291 = $0;
      $1292 = $yyvsp;
      $1293 = ((($1292)) + -8|0);
      $1294 = HEAP32[$1293>>2]|0;
      $1295 = $yyvsp;
      $1296 = HEAP32[$1295>>2]|0;
      $1297 = (_call_bin_op($1291,$1294,59613,$1296)|0);
      HEAP32[$yyval>>2] = $1297;
      break;
     }
     case 222:  {
      $1298 = $0;
      $1299 = $yyvsp;
      $1300 = HEAP32[$1299>>2]|0;
      $1301 = (_cond($1300)|0);
      $1302 = (_call_uni_op($1298,$1301,65320)|0);
      HEAP32[$yyval>>2] = $1302;
      break;
     }
     case 223:  {
      $1303 = $0;
      $1304 = $yyvsp;
      $1305 = HEAP32[$1304>>2]|0;
      $1306 = (_cond($1305)|0);
      $1307 = (_call_uni_op($1303,$1306,59638)|0);
      HEAP32[$yyval>>2] = $1307;
      break;
     }
     case 224:  {
      $1308 = $0;
      $1309 = $yyvsp;
      $1310 = ((($1309)) + -8|0);
      $1311 = HEAP32[$1310>>2]|0;
      $1312 = $yyvsp;
      $1313 = HEAP32[$1312>>2]|0;
      $1314 = (_call_bin_op($1308,$1311,64339,$1313)|0);
      HEAP32[$yyval>>2] = $1314;
      break;
     }
     case 225:  {
      $1315 = $0;
      $1316 = $yyvsp;
      $1317 = ((($1316)) + -8|0);
      $1318 = HEAP32[$1317>>2]|0;
      $1319 = $yyvsp;
      $1320 = HEAP32[$1319>>2]|0;
      $1321 = (_call_bin_op($1315,$1318,57205,$1320)|0);
      HEAP32[$yyval>>2] = $1321;
      break;
     }
     case 226:  {
      $1322 = $0;
      $1323 = $yyvsp;
      $1324 = ((($1323)) + -8|0);
      $1325 = HEAP32[$1324>>2]|0;
      $1326 = $yyvsp;
      $1327 = HEAP32[$1326>>2]|0;
      $1328 = (_new_and($1322,$1325,$1327)|0);
      HEAP32[$yyval>>2] = $1328;
      break;
     }
     case 227:  {
      $1329 = $0;
      $1330 = $yyvsp;
      $1331 = ((($1330)) + -8|0);
      $1332 = HEAP32[$1331>>2]|0;
      $1333 = $yyvsp;
      $1334 = HEAP32[$1333>>2]|0;
      $1335 = (_new_or($1329,$1332,$1334)|0);
      HEAP32[$yyval>>2] = $1335;
      break;
     }
     case 228:  {
      $1336 = $0;
      $1337 = $yyvsp;
      $1338 = ((($1337)) + -20|0);
      $1339 = HEAP32[$1338>>2]|0;
      $1340 = (_cond($1339)|0);
      $1341 = $yyvsp;
      $1342 = ((($1341)) + -12|0);
      $1343 = HEAP32[$1342>>2]|0;
      $1344 = $yyvsp;
      $1345 = HEAP32[$1344>>2]|0;
      $1346 = (_new_if($1336,$1340,$1343,$1345)|0);
      HEAP32[$yyval>>2] = $1346;
      break;
     }
     case 229:  {
      $1347 = $yyvsp;
      $1348 = HEAP32[$1347>>2]|0;
      HEAP32[$yyval>>2] = $1348;
      break;
     }
     case 230:  {
      $1349 = $yyvsp;
      $1350 = HEAP32[$1349>>2]|0;
      HEAP32[$yyval>>2] = $1350;
      $1351 = HEAP32[$yyval>>2]|0;
      $1352 = ($1351|0)!=(0|0);
      if (!($1352)) {
       $1353 = $0;
       $1354 = (_new_nil($1353)|0);
       HEAP32[$yyval>>2] = $1354;
      }
      break;
     }
     case 232:  {
      $1355 = $yyvsp;
      $1356 = ((($1355)) + -4|0);
      $1357 = HEAP32[$1356>>2]|0;
      HEAP32[$yyval>>2] = $1357;
      $1358 = $yyvsp;
      $1359 = ((($1358)) + -4|0);
      $1360 = HEAP32[$1359>>2]|0;
      $1361 = ($1360|0)!=(0|0);
      if ($1361) {
       $1362 = $yyvsp;
       $1363 = ((($1362)) + -4|0);
       $1364 = HEAP32[$1363>>2]|0;
       $1365 = ((($1364)) + 10|0);
       $1366 = HEAP16[$1365>>1]|0;
       $1367 = HEAP32[$yyval>>2]|0;
       $1368 = ((($1367)) + 10|0);
       HEAP16[$1368>>1] = $1366;
       $1369 = $yyvsp;
       $1370 = ((($1369)) + -4|0);
       $1371 = HEAP32[$1370>>2]|0;
       $1372 = ((($1371)) + 8|0);
       $1373 = HEAP16[$1372>>1]|0;
       $1374 = HEAP32[$yyval>>2]|0;
       $1375 = ((($1374)) + 8|0);
       HEAP16[$1375>>1] = $1373;
      }
      break;
     }
     case 233:  {
      $1376 = $0;
      $1377 = $yyvsp;
      $1378 = ((($1377)) + -12|0);
      $1379 = HEAP32[$1378>>2]|0;
      $1380 = $0;
      $1381 = $0;
      $1382 = $yyvsp;
      $1383 = ((($1382)) + -4|0);
      $1384 = HEAP32[$1383>>2]|0;
      $1385 = (_new_hash($1381,$1384)|0);
      $1386 = (_list1_gen($1380,$1385)|0);
      $1387 = (_append_gen($1376,$1379,$1386)|0);
      HEAP32[$yyval>>2] = $1387;
      break;
     }
     case 234:  {
      $1388 = $0;
      $1389 = $0;
      $1390 = $yyvsp;
      $1391 = ((($1390)) + -4|0);
      $1392 = HEAP32[$1391>>2]|0;
      $1393 = (_new_hash($1389,$1392)|0);
      $1394 = (_cons_gen($1388,$1393,0)|0);
      HEAP32[$yyval>>2] = $1394;
      $1395 = $yyvsp;
      $1396 = ((($1395)) + -4|0);
      $1397 = HEAP32[$1396>>2]|0;
      $1398 = ($1397|0)!=(0|0);
      if ($1398) {
       $1399 = $yyvsp;
       $1400 = ((($1399)) + -4|0);
       $1401 = HEAP32[$1400>>2]|0;
       $1402 = ((($1401)) + 10|0);
       $1403 = HEAP16[$1402>>1]|0;
       $1404 = HEAP32[$yyval>>2]|0;
       $1405 = ((($1404)) + 10|0);
       HEAP16[$1405>>1] = $1403;
       $1406 = $yyvsp;
       $1407 = ((($1406)) + -4|0);
       $1408 = HEAP32[$1407>>2]|0;
       $1409 = ((($1408)) + 8|0);
       $1410 = HEAP16[$1409>>1]|0;
       $1411 = HEAP32[$yyval>>2]|0;
       $1412 = ((($1411)) + 8|0);
       HEAP16[$1412>>1] = $1410;
      }
      break;
     }
     case 235:  {
      $1413 = $yyvsp;
      $1414 = ((($1413)) + -4|0);
      $1415 = HEAP32[$1414>>2]|0;
      HEAP32[$yyval>>2] = $1415;
      break;
     }
     case 240:  {
      $1416 = $0;
      $1417 = $yyvsp;
      $1418 = ((($1417)) + -4|0);
      $1419 = HEAP32[$1418>>2]|0;
      $1420 = (_cons_gen($1416,$1419,0)|0);
      HEAP32[$yyval>>2] = $1420;
      $1421 = $yyvsp;
      $1422 = ((($1421)) + -4|0);
      $1423 = HEAP32[$1422>>2]|0;
      $1424 = ($1423|0)!=(0|0);
      if ($1424) {
       $1425 = $yyvsp;
       $1426 = ((($1425)) + -4|0);
       $1427 = HEAP32[$1426>>2]|0;
       $1428 = ((($1427)) + 10|0);
       $1429 = HEAP16[$1428>>1]|0;
       $1430 = HEAP32[$yyval>>2]|0;
       $1431 = ((($1430)) + 10|0);
       HEAP16[$1431>>1] = $1429;
       $1432 = $yyvsp;
       $1433 = ((($1432)) + -4|0);
       $1434 = HEAP32[$1433>>2]|0;
       $1435 = ((($1434)) + 8|0);
       $1436 = HEAP16[$1435>>1]|0;
       $1437 = HEAP32[$yyval>>2]|0;
       $1438 = ((($1437)) + 8|0);
       HEAP16[$1438>>1] = $1436;
      }
      break;
     }
     case 241:  {
      $1439 = $0;
      $1440 = $0;
      $1441 = $yyvsp;
      $1442 = ((($1441)) + -12|0);
      $1443 = HEAP32[$1442>>2]|0;
      $1444 = $0;
      $1445 = $0;
      $1446 = $yyvsp;
      $1447 = ((($1446)) + -4|0);
      $1448 = HEAP32[$1447>>2]|0;
      $1449 = (_new_hash($1445,$1448)|0);
      $1450 = (_list1_gen($1444,$1449)|0);
      $1451 = (_append_gen($1440,$1443,$1450)|0);
      $1452 = (_cons_gen($1439,$1451,0)|0);
      HEAP32[$yyval>>2] = $1452;
      $1453 = $yyvsp;
      $1454 = ((($1453)) + -12|0);
      $1455 = HEAP32[$1454>>2]|0;
      $1456 = ($1455|0)!=(0|0);
      if ($1456) {
       $1457 = $yyvsp;
       $1458 = ((($1457)) + -12|0);
       $1459 = HEAP32[$1458>>2]|0;
       $1460 = ((($1459)) + 10|0);
       $1461 = HEAP16[$1460>>1]|0;
       $1462 = HEAP32[$yyval>>2]|0;
       $1463 = ((($1462)) + 10|0);
       HEAP16[$1463>>1] = $1461;
       $1464 = $yyvsp;
       $1465 = ((($1464)) + -12|0);
       $1466 = HEAP32[$1465>>2]|0;
       $1467 = ((($1466)) + 8|0);
       $1468 = HEAP16[$1467>>1]|0;
       $1469 = HEAP32[$yyval>>2]|0;
       $1470 = ((($1469)) + 8|0);
       HEAP16[$1470>>1] = $1468;
      }
      break;
     }
     case 242:  {
      $1471 = $0;
      $1472 = $0;
      $1473 = $0;
      $1474 = $yyvsp;
      $1475 = ((($1474)) + -4|0);
      $1476 = HEAP32[$1475>>2]|0;
      $1477 = (_new_hash($1473,$1476)|0);
      $1478 = (_list1_gen($1472,$1477)|0);
      $1479 = (_cons_gen($1471,$1478,0)|0);
      HEAP32[$yyval>>2] = $1479;
      $1480 = $yyvsp;
      $1481 = ((($1480)) + -4|0);
      $1482 = HEAP32[$1481>>2]|0;
      $1483 = ($1482|0)!=(0|0);
      if ($1483) {
       $1484 = $yyvsp;
       $1485 = ((($1484)) + -4|0);
       $1486 = HEAP32[$1485>>2]|0;
       $1487 = ((($1486)) + 10|0);
       $1488 = HEAP16[$1487>>1]|0;
       $1489 = HEAP32[$yyval>>2]|0;
       $1490 = ((($1489)) + 10|0);
       HEAP16[$1490>>1] = $1488;
       $1491 = $yyvsp;
       $1492 = ((($1491)) + -4|0);
       $1493 = HEAP32[$1492>>2]|0;
       $1494 = ((($1493)) + 8|0);
       $1495 = HEAP16[$1494>>1]|0;
       $1496 = HEAP32[$yyval>>2]|0;
       $1497 = ((($1496)) + 8|0);
       HEAP16[$1497>>1] = $1495;
      }
      break;
     }
     case 243:  {
      $1498 = $0;
      $1499 = $0;
      $1500 = $yyvsp;
      $1501 = HEAP32[$1500>>2]|0;
      $1502 = (_list1_gen($1499,$1501)|0);
      $1503 = (_cons_gen($1498,$1502,0)|0);
      HEAP32[$yyval>>2] = $1503;
      $1504 = $yyvsp;
      $1505 = HEAP32[$1504>>2]|0;
      $1506 = ($1505|0)!=(0|0);
      if ($1506) {
       $1507 = $yyvsp;
       $1508 = HEAP32[$1507>>2]|0;
       $1509 = ((($1508)) + 10|0);
       $1510 = HEAP16[$1509>>1]|0;
       $1511 = HEAP32[$yyval>>2]|0;
       $1512 = ((($1511)) + 10|0);
       HEAP16[$1512>>1] = $1510;
       $1513 = $yyvsp;
       $1514 = HEAP32[$1513>>2]|0;
       $1515 = ((($1514)) + 8|0);
       $1516 = HEAP16[$1515>>1]|0;
       $1517 = HEAP32[$yyval>>2]|0;
       $1518 = ((($1517)) + 8|0);
       HEAP16[$1518>>1] = $1516;
      }
      break;
     }
     case 244:  {
      $1519 = $0;
      $1520 = $yyvsp;
      $1521 = ((($1520)) + -4|0);
      $1522 = HEAP32[$1521>>2]|0;
      $1523 = $yyvsp;
      $1524 = HEAP32[$1523>>2]|0;
      $1525 = (_cons_gen($1519,$1522,$1524)|0);
      HEAP32[$yyval>>2] = $1525;
      $1526 = $yyvsp;
      $1527 = ((($1526)) + -4|0);
      $1528 = HEAP32[$1527>>2]|0;
      $1529 = ($1528|0)!=(0|0);
      if ($1529) {
       $1530 = $yyvsp;
       $1531 = ((($1530)) + -4|0);
       $1532 = HEAP32[$1531>>2]|0;
       $1533 = ((($1532)) + 10|0);
       $1534 = HEAP16[$1533>>1]|0;
       $1535 = HEAP32[$yyval>>2]|0;
       $1536 = ((($1535)) + 10|0);
       HEAP16[$1536>>1] = $1534;
       $1537 = $yyvsp;
       $1538 = ((($1537)) + -4|0);
       $1539 = HEAP32[$1538>>2]|0;
       $1540 = ((($1539)) + 8|0);
       $1541 = HEAP16[$1540>>1]|0;
       $1542 = HEAP32[$yyval>>2]|0;
       $1543 = ((($1542)) + 8|0);
       HEAP16[$1543>>1] = $1541;
      }
      break;
     }
     case 245:  {
      $1544 = $0;
      $1545 = $0;
      $1546 = $0;
      $1547 = $yyvsp;
      $1548 = ((($1547)) + -4|0);
      $1549 = HEAP32[$1548>>2]|0;
      $1550 = (_new_hash($1546,$1549)|0);
      $1551 = (_list1_gen($1545,$1550)|0);
      $1552 = $yyvsp;
      $1553 = HEAP32[$1552>>2]|0;
      $1554 = (_cons_gen($1544,$1551,$1553)|0);
      HEAP32[$yyval>>2] = $1554;
      $1555 = $yyvsp;
      $1556 = ((($1555)) + -4|0);
      $1557 = HEAP32[$1556>>2]|0;
      $1558 = ($1557|0)!=(0|0);
      if ($1558) {
       $1559 = $yyvsp;
       $1560 = ((($1559)) + -4|0);
       $1561 = HEAP32[$1560>>2]|0;
       $1562 = ((($1561)) + 10|0);
       $1563 = HEAP16[$1562>>1]|0;
       $1564 = HEAP32[$yyval>>2]|0;
       $1565 = ((($1564)) + 10|0);
       HEAP16[$1565>>1] = $1563;
       $1566 = $yyvsp;
       $1567 = ((($1566)) + -4|0);
       $1568 = HEAP32[$1567>>2]|0;
       $1569 = ((($1568)) + 8|0);
       $1570 = HEAP16[$1569>>1]|0;
       $1571 = HEAP32[$yyval>>2]|0;
       $1572 = ((($1571)) + 8|0);
       HEAP16[$1572>>1] = $1570;
      }
      break;
     }
     case 246:  {
      $1573 = $0;
      $1574 = $0;
      $1575 = $yyvsp;
      $1576 = ((($1575)) + -12|0);
      $1577 = HEAP32[$1576>>2]|0;
      $1578 = $0;
      $1579 = $0;
      $1580 = $yyvsp;
      $1581 = ((($1580)) + -4|0);
      $1582 = HEAP32[$1581>>2]|0;
      $1583 = (_new_hash($1579,$1582)|0);
      $1584 = (_list1_gen($1578,$1583)|0);
      $1585 = (_append_gen($1574,$1577,$1584)|0);
      $1586 = $yyvsp;
      $1587 = HEAP32[$1586>>2]|0;
      $1588 = (_cons_gen($1573,$1585,$1587)|0);
      HEAP32[$yyval>>2] = $1588;
      $1589 = $yyvsp;
      $1590 = ((($1589)) + -12|0);
      $1591 = HEAP32[$1590>>2]|0;
      $1592 = ($1591|0)!=(0|0);
      if ($1592) {
       $1593 = $yyvsp;
       $1594 = ((($1593)) + -12|0);
       $1595 = HEAP32[$1594>>2]|0;
       $1596 = ((($1595)) + 10|0);
       $1597 = HEAP16[$1596>>1]|0;
       $1598 = HEAP32[$yyval>>2]|0;
       $1599 = ((($1598)) + 10|0);
       HEAP16[$1599>>1] = $1597;
       $1600 = $yyvsp;
       $1601 = ((($1600)) + -12|0);
       $1602 = HEAP32[$1601>>2]|0;
       $1603 = ((($1602)) + 8|0);
       $1604 = HEAP16[$1603>>1]|0;
       $1605 = HEAP32[$yyval>>2]|0;
       $1606 = ((($1605)) + 8|0);
       HEAP16[$1606>>1] = $1604;
      }
      break;
     }
     case 247:  {
      $1607 = $0;
      $1608 = $yyvsp;
      $1609 = HEAP32[$1608>>2]|0;
      $1610 = (_cons_gen($1607,0,$1609)|0);
      HEAP32[$yyval>>2] = $1610;
      $1611 = $yyvsp;
      $1612 = HEAP32[$1611>>2]|0;
      $1613 = ($1612|0)!=(0|0);
      if ($1613) {
       $1614 = $yyvsp;
       $1615 = HEAP32[$1614>>2]|0;
       $1616 = ((($1615)) + 10|0);
       $1617 = HEAP16[$1616>>1]|0;
       $1618 = HEAP32[$yyval>>2]|0;
       $1619 = ((($1618)) + 10|0);
       HEAP16[$1619>>1] = $1617;
       $1620 = $yyvsp;
       $1621 = HEAP32[$1620>>2]|0;
       $1622 = ((($1621)) + 8|0);
       $1623 = HEAP16[$1622>>1]|0;
       $1624 = HEAP32[$yyval>>2]|0;
       $1625 = ((($1624)) + 8|0);
       HEAP16[$1625>>1] = $1623;
      }
      break;
     }
     case 248:  {
      $1626 = $0;
      $1627 = ((($1626)) + 52|0);
      $1628 = HEAP32[$1627>>2]|0;
      HEAP32[$yyval>>2] = $1628;
      $1629 = $0;
      $1630 = ((($1629)) + 52|0);
      $1631 = HEAP32[$1630>>2]|0;
      $1632 = $1631 << 1;
      $1633 = $1632 | 1;
      $1634 = $0;
      $1635 = ((($1634)) + 52|0);
      HEAP32[$1635>>2] = $1633;
      break;
     }
     case 249:  {
      $1636 = $yyvsp;
      $1637 = ((($1636)) + -4|0);
      $1638 = HEAP32[$1637>>2]|0;
      $1639 = $0;
      $1640 = ((($1639)) + 52|0);
      HEAP32[$1640>>2] = $1638;
      $1641 = $yyvsp;
      $1642 = HEAP32[$1641>>2]|0;
      HEAP32[$yyval>>2] = $1642;
      break;
     }
     case 250:  {
      $1643 = $0;
      $1644 = $yyvsp;
      $1645 = HEAP32[$1644>>2]|0;
      $1646 = (_new_block_arg($1643,$1645)|0);
      HEAP32[$yyval>>2] = $1646;
      break;
     }
     case 251:  {
      $1647 = $yyvsp;
      $1648 = HEAP32[$1647>>2]|0;
      HEAP32[$yyval>>2] = $1648;
      break;
     }
     case 252:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 253:  {
      $1649 = $0;
      $1650 = $yyvsp;
      $1651 = HEAP32[$1650>>2]|0;
      $1652 = (_cons_gen($1649,$1651,0)|0);
      HEAP32[$yyval>>2] = $1652;
      $1653 = $yyvsp;
      $1654 = HEAP32[$1653>>2]|0;
      $1655 = ($1654|0)!=(0|0);
      if ($1655) {
       $1656 = $yyvsp;
       $1657 = HEAP32[$1656>>2]|0;
       $1658 = ((($1657)) + 10|0);
       $1659 = HEAP16[$1658>>1]|0;
       $1660 = HEAP32[$yyval>>2]|0;
       $1661 = ((($1660)) + 10|0);
       HEAP16[$1661>>1] = $1659;
       $1662 = $yyvsp;
       $1663 = HEAP32[$1662>>2]|0;
       $1664 = ((($1663)) + 8|0);
       $1665 = HEAP16[$1664>>1]|0;
       $1666 = HEAP32[$yyval>>2]|0;
       $1667 = ((($1666)) + 8|0);
       HEAP16[$1667>>1] = $1665;
      }
      break;
     }
     case 254:  {
      $1668 = $0;
      $1669 = $0;
      $1670 = $yyvsp;
      $1671 = HEAP32[$1670>>2]|0;
      $1672 = (_new_splat($1669,$1671)|0);
      $1673 = (_cons_gen($1668,$1672,0)|0);
      HEAP32[$yyval>>2] = $1673;
      $1674 = $yyvsp;
      $1675 = HEAP32[$1674>>2]|0;
      $1676 = ($1675|0)!=(0|0);
      if ($1676) {
       $1677 = $yyvsp;
       $1678 = HEAP32[$1677>>2]|0;
       $1679 = ((($1678)) + 10|0);
       $1680 = HEAP16[$1679>>1]|0;
       $1681 = HEAP32[$yyval>>2]|0;
       $1682 = ((($1681)) + 10|0);
       HEAP16[$1682>>1] = $1680;
       $1683 = $yyvsp;
       $1684 = HEAP32[$1683>>2]|0;
       $1685 = ((($1684)) + 8|0);
       $1686 = HEAP16[$1685>>1]|0;
       $1687 = HEAP32[$yyval>>2]|0;
       $1688 = ((($1687)) + 8|0);
       HEAP16[$1688>>1] = $1686;
      }
      break;
     }
     case 255:  {
      $1689 = $0;
      $1690 = $yyvsp;
      $1691 = ((($1690)) + -8|0);
      $1692 = HEAP32[$1691>>2]|0;
      $1693 = $0;
      $1694 = $yyvsp;
      $1695 = HEAP32[$1694>>2]|0;
      $1696 = (_list1_gen($1693,$1695)|0);
      $1697 = (_append_gen($1689,$1692,$1696)|0);
      HEAP32[$yyval>>2] = $1697;
      break;
     }
     case 256:  {
      $1698 = $0;
      $1699 = $yyvsp;
      $1700 = ((($1699)) + -12|0);
      $1701 = HEAP32[$1700>>2]|0;
      $1702 = $0;
      $1703 = $0;
      $1704 = $yyvsp;
      $1705 = HEAP32[$1704>>2]|0;
      $1706 = (_new_splat($1703,$1705)|0);
      $1707 = (_list1_gen($1702,$1706)|0);
      $1708 = (_append_gen($1698,$1701,$1707)|0);
      HEAP32[$yyval>>2] = $1708;
      break;
     }
     case 257:  {
      $1709 = $0;
      $1710 = $yyvsp;
      $1711 = ((($1710)) + -12|0);
      $1712 = HEAP32[$1711>>2]|0;
      $1713 = $0;
      $1714 = $yyvsp;
      $1715 = HEAP32[$1714>>2]|0;
      $1716 = (_list1_gen($1713,$1715)|0);
      $1717 = (_append_gen($1709,$1712,$1716)|0);
      HEAP32[$yyval>>2] = $1717;
      break;
     }
     case 258:  {
      $1718 = $0;
      $1719 = $yyvsp;
      $1720 = ((($1719)) + -16|0);
      $1721 = HEAP32[$1720>>2]|0;
      $1722 = $0;
      $1723 = $0;
      $1724 = $yyvsp;
      $1725 = HEAP32[$1724>>2]|0;
      $1726 = (_new_splat($1723,$1725)|0);
      $1727 = (_list1_gen($1722,$1726)|0);
      $1728 = (_append_gen($1718,$1721,$1727)|0);
      HEAP32[$yyval>>2] = $1728;
      break;
     }
     case 259:  {
      $1729 = $0;
      $1730 = $yyvsp;
      $1731 = ((($1730)) + -8|0);
      $1732 = HEAP32[$1731>>2]|0;
      $1733 = $0;
      $1734 = $yyvsp;
      $1735 = HEAP32[$1734>>2]|0;
      $1736 = (_list1_gen($1733,$1735)|0);
      $1737 = (_append_gen($1729,$1732,$1736)|0);
      HEAP32[$yyval>>2] = $1737;
      break;
     }
     case 260:  {
      $1738 = $0;
      $1739 = $yyvsp;
      $1740 = ((($1739)) + -12|0);
      $1741 = HEAP32[$1740>>2]|0;
      $1742 = $0;
      $1743 = $0;
      $1744 = $yyvsp;
      $1745 = HEAP32[$1744>>2]|0;
      $1746 = (_new_splat($1743,$1745)|0);
      $1747 = (_list1_gen($1742,$1746)|0);
      $1748 = (_append_gen($1738,$1741,$1747)|0);
      HEAP32[$yyval>>2] = $1748;
      break;
     }
     case 261:  {
      $1749 = $0;
      $1750 = $0;
      $1751 = $yyvsp;
      $1752 = HEAP32[$1751>>2]|0;
      $1753 = (_new_splat($1750,$1752)|0);
      $1754 = (_list1_gen($1749,$1753)|0);
      HEAP32[$yyval>>2] = $1754;
      break;
     }
     case 269:  {
      $1755 = $0;
      $1756 = $yyvsp;
      $1757 = HEAP32[$1756>>2]|0;
      $1758 = (_new_fcall($1755,$1757,0)|0);
      HEAP32[$yyval>>2] = $1758;
      break;
     }
     case 270:  {
      $1759 = $0;
      $1760 = ((($1759)) + 52|0);
      $1761 = HEAP32[$1760>>2]|0;
      HEAP32[$yyval>>2] = $1761;
      $1762 = $0;
      $1763 = ((($1762)) + 52|0);
      HEAP32[$1763>>2] = 0;
      break;
     }
     case 271:  {
      $1764 = $yyvsp;
      $1765 = ((($1764)) + -8|0);
      $1766 = HEAP32[$1765>>2]|0;
      $1767 = $0;
      $1768 = ((($1767)) + 52|0);
      HEAP32[$1768>>2] = $1766;
      $1769 = $yyvsp;
      $1770 = ((($1769)) + -4|0);
      $1771 = HEAP32[$1770>>2]|0;
      HEAP32[$yyval>>2] = $1771;
      break;
     }
     case 272:  {
      $1772 = $0;
      $1773 = ((($1772)) + 52|0);
      $1774 = HEAP32[$1773>>2]|0;
      HEAP32[$yyval>>2] = $1774;
      $1775 = $0;
      $1776 = ((($1775)) + 52|0);
      HEAP32[$1776>>2] = 0;
      break;
     }
     case 273:  {
      $1777 = $0;
      $1778 = ((($1777)) + 40|0);
      HEAP32[$1778>>2] = 2;
      break;
     }
     case 274:  {
      $1779 = $yyvsp;
      $1780 = ((($1779)) + -12|0);
      $1781 = HEAP32[$1780>>2]|0;
      $1782 = $0;
      $1783 = ((($1782)) + 52|0);
      HEAP32[$1783>>2] = $1781;
      $1784 = $yyvsp;
      $1785 = ((($1784)) + -8|0);
      $1786 = HEAP32[$1785>>2]|0;
      HEAP32[$yyval>>2] = $1786;
      break;
     }
     case 275:  {
      $1787 = $0;
      $1788 = ((($1787)) + 40|0);
      HEAP32[$1788>>2] = 2;
      break;
     }
     case 276:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 277:  {
      $1789 = $yyvsp;
      $1790 = ((($1789)) + -4|0);
      $1791 = HEAP32[$1790>>2]|0;
      HEAP32[$yyval>>2] = $1791;
      break;
     }
     case 278:  {
      $1792 = $0;
      $1793 = $yyvsp;
      $1794 = ((($1793)) + -8|0);
      $1795 = HEAP32[$1794>>2]|0;
      $1796 = $yyvsp;
      $1797 = HEAP32[$1796>>2]|0;
      $1798 = (_new_colon2($1792,$1795,$1797)|0);
      HEAP32[$yyval>>2] = $1798;
      break;
     }
     case 279:  {
      $1799 = $0;
      $1800 = $yyvsp;
      $1801 = HEAP32[$1800>>2]|0;
      $1802 = (_new_colon3($1799,$1801)|0);
      HEAP32[$yyval>>2] = $1802;
      break;
     }
     case 280:  {
      $1803 = $0;
      $1804 = $yyvsp;
      $1805 = ((($1804)) + -4|0);
      $1806 = HEAP32[$1805>>2]|0;
      $1807 = (_new_array($1803,$1806)|0);
      HEAP32[$yyval>>2] = $1807;
      $1808 = $yyvsp;
      $1809 = ((($1808)) + -4|0);
      $1810 = HEAP32[$1809>>2]|0;
      $1811 = ($1810|0)!=(0|0);
      if ($1811) {
       $1812 = $yyvsp;
       $1813 = ((($1812)) + -4|0);
       $1814 = HEAP32[$1813>>2]|0;
       $1815 = ((($1814)) + 10|0);
       $1816 = HEAP16[$1815>>1]|0;
       $1817 = HEAP32[$yyval>>2]|0;
       $1818 = ((($1817)) + 10|0);
       HEAP16[$1818>>1] = $1816;
       $1819 = $yyvsp;
       $1820 = ((($1819)) + -4|0);
       $1821 = HEAP32[$1820>>2]|0;
       $1822 = ((($1821)) + 8|0);
       $1823 = HEAP16[$1822>>1]|0;
       $1824 = HEAP32[$yyval>>2]|0;
       $1825 = ((($1824)) + 8|0);
       HEAP16[$1825>>1] = $1823;
      }
      break;
     }
     case 281:  {
      $1826 = $0;
      $1827 = $yyvsp;
      $1828 = ((($1827)) + -4|0);
      $1829 = HEAP32[$1828>>2]|0;
      $1830 = (_new_hash($1826,$1829)|0);
      HEAP32[$yyval>>2] = $1830;
      $1831 = $yyvsp;
      $1832 = ((($1831)) + -4|0);
      $1833 = HEAP32[$1832>>2]|0;
      $1834 = ($1833|0)!=(0|0);
      if ($1834) {
       $1835 = $yyvsp;
       $1836 = ((($1835)) + -4|0);
       $1837 = HEAP32[$1836>>2]|0;
       $1838 = ((($1837)) + 10|0);
       $1839 = HEAP16[$1838>>1]|0;
       $1840 = HEAP32[$yyval>>2]|0;
       $1841 = ((($1840)) + 10|0);
       HEAP16[$1841>>1] = $1839;
       $1842 = $yyvsp;
       $1843 = ((($1842)) + -4|0);
       $1844 = HEAP32[$1843>>2]|0;
       $1845 = ((($1844)) + 8|0);
       $1846 = HEAP16[$1845>>1]|0;
       $1847 = HEAP32[$yyval>>2]|0;
       $1848 = ((($1847)) + 8|0);
       HEAP16[$1848>>1] = $1846;
      }
      break;
     }
     case 282:  {
      $1849 = $0;
      $1850 = (_new_return($1849,0)|0);
      HEAP32[$yyval>>2] = $1850;
      break;
     }
     case 283:  {
      $1851 = $0;
      $1852 = $yyvsp;
      $1853 = ((($1852)) + -4|0);
      $1854 = HEAP32[$1853>>2]|0;
      $1855 = (_new_yield($1851,$1854)|0);
      HEAP32[$yyval>>2] = $1855;
      break;
     }
     case 284:  {
      $1856 = $0;
      $1857 = (_new_yield($1856,0)|0);
      HEAP32[$yyval>>2] = $1857;
      break;
     }
     case 285:  {
      $1858 = $0;
      $1859 = (_new_yield($1858,0)|0);
      HEAP32[$yyval>>2] = $1859;
      break;
     }
     case 286:  {
      $1860 = $0;
      $1861 = $yyvsp;
      $1862 = ((($1861)) + -4|0);
      $1863 = HEAP32[$1862>>2]|0;
      $1864 = (_cond($1863)|0);
      $1865 = (_call_uni_op($1860,$1864,65320)|0);
      HEAP32[$yyval>>2] = $1865;
      break;
     }
     case 287:  {
      $1866 = $0;
      $1867 = $0;
      $1868 = (_new_nil($1867)|0);
      $1869 = (_call_uni_op($1866,$1868,65320)|0);
      HEAP32[$yyval>>2] = $1869;
      break;
     }
     case 288:  {
      $1870 = $0;
      $1871 = $yyvsp;
      $1872 = ((($1871)) + -4|0);
      $1873 = HEAP32[$1872>>2]|0;
      $1874 = $0;
      $1875 = $yyvsp;
      $1876 = HEAP32[$1875>>2]|0;
      $1877 = (_cons_gen($1874,0,$1876)|0);
      $1878 = (_new_fcall($1870,$1873,$1877)|0);
      HEAP32[$yyval>>2] = $1878;
      break;
     }
     case 290:  {
      $1879 = $0;
      $1880 = $yyvsp;
      $1881 = ((($1880)) + -4|0);
      $1882 = HEAP32[$1881>>2]|0;
      $1883 = $yyvsp;
      $1884 = HEAP32[$1883>>2]|0;
      _call_with_block($1879,$1882,$1884);
      $1885 = $yyvsp;
      $1886 = ((($1885)) + -4|0);
      $1887 = HEAP32[$1886>>2]|0;
      HEAP32[$yyval>>2] = $1887;
      break;
     }
     case 291:  {
      $1888 = $0;
      _local_nest($1888);
      $1889 = $0;
      $1890 = ((($1889)) + 60|0);
      $1891 = HEAP32[$1890>>2]|0;
      HEAP32[$yyval>>2] = $1891;
      $1892 = $0;
      $1893 = ((($1892)) + 56|0);
      $1894 = HEAP32[$1893>>2]|0;
      $1895 = (($1894) + 1)|0;
      HEAP32[$1893>>2] = $1895;
      $1896 = $0;
      $1897 = ((($1896)) + 60|0);
      HEAP32[$1897>>2] = $1895;
      break;
     }
     case 292:  {
      $1898 = $0;
      $1899 = ((($1898)) + 52|0);
      $1900 = HEAP32[$1899>>2]|0;
      HEAP32[$yyval>>2] = $1900;
      $1901 = $0;
      $1902 = ((($1901)) + 52|0);
      HEAP32[$1902>>2] = 0;
      break;
     }
     case 293:  {
      $1903 = $yyvsp;
      $1904 = ((($1903)) + -12|0);
      $1905 = HEAP32[$1904>>2]|0;
      $1906 = $0;
      $1907 = ((($1906)) + 60|0);
      HEAP32[$1907>>2] = $1905;
      $1908 = $0;
      $1909 = $yyvsp;
      $1910 = ((($1909)) + -8|0);
      $1911 = HEAP32[$1910>>2]|0;
      $1912 = $yyvsp;
      $1913 = HEAP32[$1912>>2]|0;
      $1914 = (_new_lambda($1908,$1911,$1913)|0);
      HEAP32[$yyval>>2] = $1914;
      $1915 = $0;
      _local_unnest($1915);
      $1916 = $yyvsp;
      $1917 = ((($1916)) + -4|0);
      $1918 = HEAP32[$1917>>2]|0;
      $1919 = $0;
      $1920 = ((($1919)) + 52|0);
      HEAP32[$1920>>2] = $1918;
      $1921 = $0;
      $1922 = ((($1921)) + 52|0);
      $1923 = HEAP32[$1922>>2]|0;
      $1924 = $1923 >>> 1;
      $1925 = $0;
      $1926 = ((($1925)) + 52|0);
      $1927 = HEAP32[$1926>>2]|0;
      $1928 = $1927 & 1;
      $1929 = $1924 | $1928;
      $1930 = $0;
      $1931 = ((($1930)) + 52|0);
      HEAP32[$1931>>2] = $1929;
      break;
     }
     case 294:  {
      $1932 = $0;
      $1933 = $yyvsp;
      $1934 = ((($1933)) + -16|0);
      $1935 = HEAP32[$1934>>2]|0;
      $1936 = (_cond($1935)|0);
      $1937 = $yyvsp;
      $1938 = ((($1937)) + -8|0);
      $1939 = HEAP32[$1938>>2]|0;
      $1940 = $yyvsp;
      $1941 = ((($1940)) + -4|0);
      $1942 = HEAP32[$1941>>2]|0;
      $1943 = (_new_if($1932,$1936,$1939,$1942)|0);
      HEAP32[$yyval>>2] = $1943;
      $1944 = $yyvsp;
      $1945 = ((($1944)) + -20|0);
      $1946 = HEAP32[$1945>>2]|0;
      $1947 = $1946&65535;
      $1948 = HEAP32[$yyval>>2]|0;
      $1949 = ((($1948)) + 8|0);
      HEAP16[$1949>>1] = $1947;
      break;
     }
     case 295:  {
      $1950 = $0;
      $1951 = $yyvsp;
      $1952 = ((($1951)) + -16|0);
      $1953 = HEAP32[$1952>>2]|0;
      $1954 = (_cond($1953)|0);
      $1955 = $yyvsp;
      $1956 = ((($1955)) + -8|0);
      $1957 = HEAP32[$1956>>2]|0;
      $1958 = $yyvsp;
      $1959 = ((($1958)) + -4|0);
      $1960 = HEAP32[$1959>>2]|0;
      $1961 = (_new_unless($1950,$1954,$1957,$1960)|0);
      HEAP32[$yyval>>2] = $1961;
      $1962 = $yyvsp;
      $1963 = ((($1962)) + -20|0);
      $1964 = HEAP32[$1963>>2]|0;
      $1965 = $1964&65535;
      $1966 = HEAP32[$yyval>>2]|0;
      $1967 = ((($1966)) + 8|0);
      HEAP16[$1967>>1] = $1965;
      break;
     }
     case 296:  {
      $1968 = $0;
      $1969 = ((($1968)) + 48|0);
      $1970 = HEAP32[$1969>>2]|0;
      $1971 = $1970 << 1;
      $1972 = $1971 | 1;
      $1973 = $0;
      $1974 = ((($1973)) + 48|0);
      HEAP32[$1974>>2] = $1972;
      break;
     }
     case 297:  {
      $1975 = $0;
      $1976 = ((($1975)) + 48|0);
      $1977 = HEAP32[$1976>>2]|0;
      $1978 = $1977 >>> 1;
      $1979 = $0;
      $1980 = ((($1979)) + 48|0);
      HEAP32[$1980>>2] = $1978;
      break;
     }
     case 298:  {
      $1981 = $0;
      $1982 = $yyvsp;
      $1983 = ((($1982)) + -16|0);
      $1984 = HEAP32[$1983>>2]|0;
      $1985 = (_cond($1984)|0);
      $1986 = $yyvsp;
      $1987 = ((($1986)) + -4|0);
      $1988 = HEAP32[$1987>>2]|0;
      $1989 = (_new_while($1981,$1985,$1988)|0);
      HEAP32[$yyval>>2] = $1989;
      $1990 = $yyvsp;
      $1991 = ((($1990)) + -24|0);
      $1992 = HEAP32[$1991>>2]|0;
      $1993 = $1992&65535;
      $1994 = HEAP32[$yyval>>2]|0;
      $1995 = ((($1994)) + 8|0);
      HEAP16[$1995>>1] = $1993;
      break;
     }
     case 299:  {
      $1996 = $0;
      $1997 = ((($1996)) + 48|0);
      $1998 = HEAP32[$1997>>2]|0;
      $1999 = $1998 << 1;
      $2000 = $1999 | 1;
      $2001 = $0;
      $2002 = ((($2001)) + 48|0);
      HEAP32[$2002>>2] = $2000;
      break;
     }
     case 300:  {
      $2003 = $0;
      $2004 = ((($2003)) + 48|0);
      $2005 = HEAP32[$2004>>2]|0;
      $2006 = $2005 >>> 1;
      $2007 = $0;
      $2008 = ((($2007)) + 48|0);
      HEAP32[$2008>>2] = $2006;
      break;
     }
     case 301:  {
      $2009 = $0;
      $2010 = $yyvsp;
      $2011 = ((($2010)) + -16|0);
      $2012 = HEAP32[$2011>>2]|0;
      $2013 = (_cond($2012)|0);
      $2014 = $yyvsp;
      $2015 = ((($2014)) + -4|0);
      $2016 = HEAP32[$2015>>2]|0;
      $2017 = (_new_until($2009,$2013,$2016)|0);
      HEAP32[$yyval>>2] = $2017;
      $2018 = $yyvsp;
      $2019 = ((($2018)) + -24|0);
      $2020 = HEAP32[$2019>>2]|0;
      $2021 = $2020&65535;
      $2022 = HEAP32[$yyval>>2]|0;
      $2023 = ((($2022)) + 8|0);
      HEAP16[$2023>>1] = $2021;
      break;
     }
     case 302:  {
      $2024 = $0;
      $2025 = $yyvsp;
      $2026 = ((($2025)) + -12|0);
      $2027 = HEAP32[$2026>>2]|0;
      $2028 = $yyvsp;
      $2029 = ((($2028)) + -4|0);
      $2030 = HEAP32[$2029>>2]|0;
      $2031 = (_new_case($2024,$2027,$2030)|0);
      HEAP32[$yyval>>2] = $2031;
      break;
     }
     case 303:  {
      $2032 = $0;
      $2033 = $yyvsp;
      $2034 = ((($2033)) + -4|0);
      $2035 = HEAP32[$2034>>2]|0;
      $2036 = (_new_case($2032,0,$2035)|0);
      HEAP32[$yyval>>2] = $2036;
      break;
     }
     case 304:  {
      $2037 = $0;
      $2038 = ((($2037)) + 48|0);
      $2039 = HEAP32[$2038>>2]|0;
      $2040 = $2039 << 1;
      $2041 = $2040 | 1;
      $2042 = $0;
      $2043 = ((($2042)) + 48|0);
      HEAP32[$2043>>2] = $2041;
      break;
     }
     case 305:  {
      $2044 = $0;
      $2045 = ((($2044)) + 48|0);
      $2046 = HEAP32[$2045>>2]|0;
      $2047 = $2046 >>> 1;
      $2048 = $0;
      $2049 = ((($2048)) + 48|0);
      HEAP32[$2049>>2] = $2047;
      break;
     }
     case 306:  {
      $2050 = $0;
      $2051 = $yyvsp;
      $2052 = ((($2051)) + -28|0);
      $2053 = HEAP32[$2052>>2]|0;
      $2054 = $yyvsp;
      $2055 = ((($2054)) + -16|0);
      $2056 = HEAP32[$2055>>2]|0;
      $2057 = $yyvsp;
      $2058 = ((($2057)) + -4|0);
      $2059 = HEAP32[$2058>>2]|0;
      $2060 = (_new_for($2050,$2053,$2056,$2059)|0);
      HEAP32[$yyval>>2] = $2060;
      $2061 = $yyvsp;
      $2062 = ((($2061)) + -32|0);
      $2063 = HEAP32[$2062>>2]|0;
      $2064 = $2063&65535;
      $2065 = HEAP32[$yyval>>2]|0;
      $2066 = ((($2065)) + 8|0);
      HEAP16[$2066>>1] = $2064;
      break;
     }
     case 307:  {
      $2067 = $0;
      $2068 = ((($2067)) + 64|0);
      $2069 = HEAP32[$2068>>2]|0;
      $2070 = ($2069|0)!=(0);
      if ($2070) {
       label = 307;
      } else {
       $2071 = $0;
       $2072 = ((($2071)) + 68|0);
       $2073 = HEAP32[$2072>>2]|0;
       $2074 = ($2073|0)!=(0);
       if ($2074) {
        label = 307;
       }
      }
      if ((label|0) == 307) {
       label = 0;
       $2075 = $0;
       _yyerror($2075,59640);
      }
      $2076 = $0;
      $2077 = (_local_switch($2076)|0);
      HEAP32[$yyval>>2] = $2077;
      break;
     }
     case 308:  {
      $2078 = $0;
      $2079 = $yyvsp;
      $2080 = ((($2079)) + -16|0);
      $2081 = HEAP32[$2080>>2]|0;
      $2082 = $yyvsp;
      $2083 = ((($2082)) + -12|0);
      $2084 = HEAP32[$2083>>2]|0;
      $2085 = $yyvsp;
      $2086 = ((($2085)) + -4|0);
      $2087 = HEAP32[$2086>>2]|0;
      $2088 = (_new_class($2078,$2081,$2084,$2087)|0);
      HEAP32[$yyval>>2] = $2088;
      $2089 = $yyvsp;
      $2090 = ((($2089)) + -20|0);
      $2091 = HEAP32[$2090>>2]|0;
      $2092 = $2091&65535;
      $2093 = HEAP32[$yyval>>2]|0;
      $2094 = ((($2093)) + 8|0);
      HEAP16[$2094>>1] = $2092;
      $2095 = $0;
      $2096 = $yyvsp;
      $2097 = ((($2096)) + -8|0);
      $2098 = HEAP32[$2097>>2]|0;
      _local_resume($2095,$2098);
      break;
     }
     case 309:  {
      $2099 = $0;
      $2100 = ((($2099)) + 64|0);
      $2101 = HEAP32[$2100>>2]|0;
      HEAP32[$yyval>>2] = $2101;
      $2102 = $0;
      $2103 = ((($2102)) + 64|0);
      HEAP32[$2103>>2] = 0;
      break;
     }
     case 310:  {
      $2104 = $0;
      $2105 = $0;
      $2106 = (_local_switch($2105)|0);
      $2107 = $0;
      $2108 = ((($2107)) + 68|0);
      $2109 = HEAP32[$2108>>2]|0;
      $2110 = $2109;
      $2111 = (_cons_gen($2104,$2106,$2110)|0);
      HEAP32[$yyval>>2] = $2111;
      $2112 = $0;
      $2113 = ((($2112)) + 68|0);
      HEAP32[$2113>>2] = 0;
      break;
     }
     case 311:  {
      $2114 = $0;
      $2115 = $yyvsp;
      $2116 = ((($2115)) + -20|0);
      $2117 = HEAP32[$2116>>2]|0;
      $2118 = $yyvsp;
      $2119 = ((($2118)) + -4|0);
      $2120 = HEAP32[$2119>>2]|0;
      $2121 = (_new_sclass($2114,$2117,$2120)|0);
      HEAP32[$yyval>>2] = $2121;
      $2122 = $yyvsp;
      $2123 = ((($2122)) + -28|0);
      $2124 = HEAP32[$2123>>2]|0;
      $2125 = $2124&65535;
      $2126 = HEAP32[$yyval>>2]|0;
      $2127 = ((($2126)) + 8|0);
      HEAP16[$2127>>1] = $2125;
      $2128 = $0;
      $2129 = $yyvsp;
      $2130 = ((($2129)) + -8|0);
      $2131 = HEAP32[$2130>>2]|0;
      $2132 = HEAP32[$2131>>2]|0;
      _local_resume($2128,$2132);
      $2133 = $yyvsp;
      $2134 = ((($2133)) + -16|0);
      $2135 = HEAP32[$2134>>2]|0;
      $2136 = $0;
      $2137 = ((($2136)) + 64|0);
      HEAP32[$2137>>2] = $2135;
      $2138 = $yyvsp;
      $2139 = ((($2138)) + -8|0);
      $2140 = HEAP32[$2139>>2]|0;
      $2141 = ((($2140)) + 4|0);
      $2142 = HEAP32[$2141>>2]|0;
      $2143 = $2142;
      $2144 = $0;
      $2145 = ((($2144)) + 68|0);
      HEAP32[$2145>>2] = $2143;
      break;
     }
     case 312:  {
      $2146 = $0;
      $2147 = ((($2146)) + 64|0);
      $2148 = HEAP32[$2147>>2]|0;
      $2149 = ($2148|0)!=(0);
      if ($2149) {
       label = 315;
      } else {
       $2150 = $0;
       $2151 = ((($2150)) + 68|0);
       $2152 = HEAP32[$2151>>2]|0;
       $2153 = ($2152|0)!=(0);
       if ($2153) {
        label = 315;
       }
      }
      if ((label|0) == 315) {
       label = 0;
       $2154 = $0;
       _yyerror($2154,59672);
      }
      $2155 = $0;
      $2156 = (_local_switch($2155)|0);
      HEAP32[$yyval>>2] = $2156;
      break;
     }
     case 313:  {
      $2157 = $0;
      $2158 = $yyvsp;
      $2159 = ((($2158)) + -12|0);
      $2160 = HEAP32[$2159>>2]|0;
      $2161 = $yyvsp;
      $2162 = ((($2161)) + -4|0);
      $2163 = HEAP32[$2162>>2]|0;
      $2164 = (_new_module($2157,$2160,$2163)|0);
      HEAP32[$yyval>>2] = $2164;
      $2165 = $yyvsp;
      $2166 = ((($2165)) + -16|0);
      $2167 = HEAP32[$2166>>2]|0;
      $2168 = $2167&65535;
      $2169 = HEAP32[$yyval>>2]|0;
      $2170 = ((($2169)) + 8|0);
      HEAP16[$2170>>1] = $2168;
      $2171 = $0;
      $2172 = $yyvsp;
      $2173 = ((($2172)) + -8|0);
      $2174 = HEAP32[$2173>>2]|0;
      _local_resume($2171,$2174);
      break;
     }
     case 314:  {
      $2175 = $0;
      $2176 = ((($2175)) + 52|0);
      $2177 = HEAP32[$2176>>2]|0;
      HEAP32[$yyval>>2] = $2177;
      $2178 = $0;
      $2179 = ((($2178)) + 52|0);
      HEAP32[$2179>>2] = 0;
      break;
     }
     case 315:  {
      $2180 = $0;
      $2181 = ((($2180)) + 64|0);
      $2182 = HEAP32[$2181>>2]|0;
      $2183 = (($2182) + 1)|0;
      HEAP32[$2181>>2] = $2183;
      $2184 = $0;
      $2185 = (_local_switch($2184)|0);
      HEAP32[$yyval>>2] = $2185;
      break;
     }
     case 316:  {
      $2186 = $0;
      $2187 = $yyvsp;
      $2188 = ((($2187)) + -20|0);
      $2189 = HEAP32[$2188>>2]|0;
      $2190 = $yyvsp;
      $2191 = ((($2190)) + -8|0);
      $2192 = HEAP32[$2191>>2]|0;
      $2193 = $yyvsp;
      $2194 = ((($2193)) + -4|0);
      $2195 = HEAP32[$2194>>2]|0;
      $2196 = (_new_def($2186,$2189,$2192,$2195)|0);
      HEAP32[$yyval>>2] = $2196;
      $2197 = $yyvsp;
      $2198 = ((($2197)) + -24|0);
      $2199 = HEAP32[$2198>>2]|0;
      $2200 = $2199&65535;
      $2201 = HEAP32[$yyval>>2]|0;
      $2202 = ((($2201)) + 8|0);
      HEAP16[$2202>>1] = $2200;
      $2203 = $0;
      $2204 = $yyvsp;
      $2205 = ((($2204)) + -12|0);
      $2206 = HEAP32[$2205>>2]|0;
      _local_resume($2203,$2206);
      $2207 = $0;
      $2208 = ((($2207)) + 64|0);
      $2209 = HEAP32[$2208>>2]|0;
      $2210 = (($2209) + -1)|0;
      HEAP32[$2208>>2] = $2210;
      $2211 = $yyvsp;
      $2212 = ((($2211)) + -16|0);
      $2213 = HEAP32[$2212>>2]|0;
      $2214 = $0;
      $2215 = ((($2214)) + 52|0);
      HEAP32[$2215>>2] = $2213;
      break;
     }
     case 317:  {
      $2216 = $0;
      $2217 = ((($2216)) + 40|0);
      HEAP32[$2217>>2] = 7;
      $2218 = $0;
      $2219 = ((($2218)) + 52|0);
      $2220 = HEAP32[$2219>>2]|0;
      HEAP32[$yyval>>2] = $2220;
      $2221 = $0;
      $2222 = ((($2221)) + 52|0);
      HEAP32[$2222>>2] = 0;
      break;
     }
     case 318:  {
      $2223 = $0;
      $2224 = ((($2223)) + 68|0);
      $2225 = HEAP32[$2224>>2]|0;
      $2226 = (($2225) + 1)|0;
      HEAP32[$2224>>2] = $2226;
      $2227 = $0;
      $2228 = ((($2227)) + 40|0);
      HEAP32[$2228>>2] = 3;
      $2229 = $0;
      $2230 = (_local_switch($2229)|0);
      HEAP32[$yyval>>2] = $2230;
      break;
     }
     case 319:  {
      $2231 = $0;
      $2232 = $yyvsp;
      $2233 = ((($2232)) + -28|0);
      $2234 = HEAP32[$2233>>2]|0;
      $2235 = $yyvsp;
      $2236 = ((($2235)) + -16|0);
      $2237 = HEAP32[$2236>>2]|0;
      $2238 = $yyvsp;
      $2239 = ((($2238)) + -8|0);
      $2240 = HEAP32[$2239>>2]|0;
      $2241 = $yyvsp;
      $2242 = ((($2241)) + -4|0);
      $2243 = HEAP32[$2242>>2]|0;
      $2244 = (_new_sdef($2231,$2234,$2237,$2240,$2243)|0);
      HEAP32[$yyval>>2] = $2244;
      $2245 = $yyvsp;
      $2246 = ((($2245)) + -32|0);
      $2247 = HEAP32[$2246>>2]|0;
      $2248 = $2247&65535;
      $2249 = HEAP32[$yyval>>2]|0;
      $2250 = ((($2249)) + 8|0);
      HEAP16[$2250>>1] = $2248;
      $2251 = $0;
      $2252 = $yyvsp;
      $2253 = ((($2252)) + -12|0);
      $2254 = HEAP32[$2253>>2]|0;
      _local_resume($2251,$2254);
      $2255 = $0;
      $2256 = ((($2255)) + 68|0);
      $2257 = HEAP32[$2256>>2]|0;
      $2258 = (($2257) + -1)|0;
      HEAP32[$2256>>2] = $2258;
      $2259 = $yyvsp;
      $2260 = ((($2259)) + -20|0);
      $2261 = HEAP32[$2260>>2]|0;
      $2262 = $0;
      $2263 = ((($2262)) + 52|0);
      HEAP32[$2263>>2] = $2261;
      break;
     }
     case 320:  {
      $2264 = $0;
      $2265 = (_new_break($2264,0)|0);
      HEAP32[$yyval>>2] = $2265;
      break;
     }
     case 321:  {
      $2266 = $0;
      $2267 = (_new_next($2266,0)|0);
      HEAP32[$yyval>>2] = $2267;
      break;
     }
     case 322:  {
      $2268 = $0;
      $2269 = (_new_redo($2268)|0);
      HEAP32[$yyval>>2] = $2269;
      break;
     }
     case 323:  {
      $2270 = $0;
      $2271 = (_new_retry($2270)|0);
      HEAP32[$yyval>>2] = $2271;
      break;
     }
     case 324:  {
      $2272 = $yyvsp;
      $2273 = HEAP32[$2272>>2]|0;
      HEAP32[$yyval>>2] = $2273;
      $2274 = HEAP32[$yyval>>2]|0;
      $2275 = ($2274|0)!=(0|0);
      if (!($2275)) {
       $2276 = $0;
       $2277 = (_new_nil($2276)|0);
       HEAP32[$yyval>>2] = $2277;
      }
      break;
     }
     case 331:  {
      $2278 = $0;
      $2279 = $yyvsp;
      $2280 = ((($2279)) + -12|0);
      $2281 = HEAP32[$2280>>2]|0;
      $2282 = (_cond($2281)|0);
      $2283 = $yyvsp;
      $2284 = ((($2283)) + -4|0);
      $2285 = HEAP32[$2284>>2]|0;
      $2286 = $yyvsp;
      $2287 = HEAP32[$2286>>2]|0;
      $2288 = (_new_if($2278,$2282,$2285,$2287)|0);
      HEAP32[$yyval>>2] = $2288;
      break;
     }
     case 333:  {
      $2289 = $yyvsp;
      $2290 = HEAP32[$2289>>2]|0;
      HEAP32[$yyval>>2] = $2290;
      break;
     }
     case 334:  {
      $2291 = $0;
      $2292 = $0;
      $2293 = $yyvsp;
      $2294 = HEAP32[$2293>>2]|0;
      $2295 = (_list1_gen($2292,$2294)|0);
      $2296 = (_list1_gen($2291,$2295)|0);
      HEAP32[$yyval>>2] = $2296;
      break;
     }
     case 336:  {
      $2297 = $0;
      $2298 = $yyvsp;
      $2299 = HEAP32[$2298>>2]|0;
      $2300 = (_new_arg($2297,$2299)|0);
      HEAP32[$yyval>>2] = $2300;
      break;
     }
     case 337:  {
      $2301 = $0;
      $2302 = $yyvsp;
      $2303 = ((($2302)) + -4|0);
      $2304 = HEAP32[$2303>>2]|0;
      $2305 = (_new_masgn($2301,$2304,0)|0);
      HEAP32[$yyval>>2] = $2305;
      break;
     }
     case 338:  {
      $2306 = $0;
      $2307 = $yyvsp;
      $2308 = HEAP32[$2307>>2]|0;
      $2309 = (_list1_gen($2306,$2308)|0);
      HEAP32[$yyval>>2] = $2309;
      break;
     }
     case 339:  {
      $2310 = $0;
      $2311 = $yyvsp;
      $2312 = ((($2311)) + -8|0);
      $2313 = HEAP32[$2312>>2]|0;
      $2314 = $0;
      $2315 = $yyvsp;
      $2316 = HEAP32[$2315>>2]|0;
      $2317 = (_list1_gen($2314,$2316)|0);
      $2318 = (_append_gen($2310,$2313,$2317)|0);
      HEAP32[$yyval>>2] = $2318;
      break;
     }
     case 340:  {
      $2319 = $0;
      $2320 = $yyvsp;
      $2321 = HEAP32[$2320>>2]|0;
      $2322 = (_list3_gen($2319,$2321,0,0)|0);
      HEAP32[$yyval>>2] = $2322;
      break;
     }
     case 341:  {
      $2323 = $0;
      $2324 = $yyvsp;
      $2325 = ((($2324)) + -12|0);
      $2326 = HEAP32[$2325>>2]|0;
      $2327 = $0;
      $2328 = $yyvsp;
      $2329 = HEAP32[$2328>>2]|0;
      $2330 = (_new_arg($2327,$2329)|0);
      $2331 = (_list3_gen($2323,$2326,$2330,0)|0);
      HEAP32[$yyval>>2] = $2331;
      break;
     }
     case 342:  {
      $2332 = $0;
      $2333 = $yyvsp;
      $2334 = ((($2333)) + -20|0);
      $2335 = HEAP32[$2334>>2]|0;
      $2336 = $0;
      $2337 = $yyvsp;
      $2338 = ((($2337)) + -8|0);
      $2339 = HEAP32[$2338>>2]|0;
      $2340 = (_new_arg($2336,$2339)|0);
      $2341 = $yyvsp;
      $2342 = HEAP32[$2341>>2]|0;
      $2343 = (_list3_gen($2332,$2335,$2340,$2342)|0);
      HEAP32[$yyval>>2] = $2343;
      break;
     }
     case 343:  {
      $2344 = $0;
      $2345 = $yyvsp;
      $2346 = ((($2345)) + -8|0);
      $2347 = HEAP32[$2346>>2]|0;
      $2348 = (_list3_gen($2344,$2347,(-1),0)|0);
      HEAP32[$yyval>>2] = $2348;
      break;
     }
     case 344:  {
      $2349 = $0;
      $2350 = $yyvsp;
      $2351 = ((($2350)) + -16|0);
      $2352 = HEAP32[$2351>>2]|0;
      $2353 = $yyvsp;
      $2354 = HEAP32[$2353>>2]|0;
      $2355 = (_list3_gen($2349,$2352,(-1),$2354)|0);
      HEAP32[$yyval>>2] = $2355;
      break;
     }
     case 345:  {
      $2356 = $0;
      $2357 = $0;
      $2358 = $yyvsp;
      $2359 = HEAP32[$2358>>2]|0;
      $2360 = (_new_arg($2357,$2359)|0);
      $2361 = (_list3_gen($2356,0,$2360,0)|0);
      HEAP32[$yyval>>2] = $2361;
      break;
     }
     case 346:  {
      $2362 = $0;
      $2363 = $0;
      $2364 = $yyvsp;
      $2365 = ((($2364)) + -8|0);
      $2366 = HEAP32[$2365>>2]|0;
      $2367 = (_new_arg($2363,$2366)|0);
      $2368 = $yyvsp;
      $2369 = HEAP32[$2368>>2]|0;
      $2370 = (_list3_gen($2362,0,$2367,$2369)|0);
      HEAP32[$yyval>>2] = $2370;
      break;
     }
     case 347:  {
      $2371 = $0;
      $2372 = (_list3_gen($2371,0,(-1),0)|0);
      HEAP32[$yyval>>2] = $2372;
      break;
     }
     case 348:  {
      $2373 = $0;
      $2374 = $yyvsp;
      $2375 = HEAP32[$2374>>2]|0;
      $2376 = (_list3_gen($2373,0,(-1),$2375)|0);
      HEAP32[$yyval>>2] = $2376;
      break;
     }
     case 349:  {
      $2377 = $0;
      $2378 = $yyvsp;
      $2379 = ((($2378)) + -20|0);
      $2380 = HEAP32[$2379>>2]|0;
      $2381 = $yyvsp;
      $2382 = ((($2381)) + -12|0);
      $2383 = HEAP32[$2382>>2]|0;
      $2384 = $yyvsp;
      $2385 = ((($2384)) + -4|0);
      $2386 = HEAP32[$2385>>2]|0;
      $2387 = $yyvsp;
      $2388 = HEAP32[$2387>>2]|0;
      $2389 = (_new_args($2377,$2380,$2383,$2386,0,$2388)|0);
      HEAP32[$yyval>>2] = $2389;
      break;
     }
     case 350:  {
      $2390 = $0;
      $2391 = $yyvsp;
      $2392 = ((($2391)) + -28|0);
      $2393 = HEAP32[$2392>>2]|0;
      $2394 = $yyvsp;
      $2395 = ((($2394)) + -20|0);
      $2396 = HEAP32[$2395>>2]|0;
      $2397 = $yyvsp;
      $2398 = ((($2397)) + -12|0);
      $2399 = HEAP32[$2398>>2]|0;
      $2400 = $yyvsp;
      $2401 = ((($2400)) + -4|0);
      $2402 = HEAP32[$2401>>2]|0;
      $2403 = $yyvsp;
      $2404 = HEAP32[$2403>>2]|0;
      $2405 = (_new_args($2390,$2393,$2396,$2399,$2402,$2404)|0);
      HEAP32[$yyval>>2] = $2405;
      break;
     }
     case 351:  {
      $2406 = $0;
      $2407 = $yyvsp;
      $2408 = ((($2407)) + -12|0);
      $2409 = HEAP32[$2408>>2]|0;
      $2410 = $yyvsp;
      $2411 = ((($2410)) + -4|0);
      $2412 = HEAP32[$2411>>2]|0;
      $2413 = $yyvsp;
      $2414 = HEAP32[$2413>>2]|0;
      $2415 = (_new_args($2406,$2409,$2412,0,0,$2414)|0);
      HEAP32[$yyval>>2] = $2415;
      break;
     }
     case 352:  {
      $2416 = $0;
      $2417 = $yyvsp;
      $2418 = ((($2417)) + -20|0);
      $2419 = HEAP32[$2418>>2]|0;
      $2420 = $yyvsp;
      $2421 = ((($2420)) + -12|0);
      $2422 = HEAP32[$2421>>2]|0;
      $2423 = $yyvsp;
      $2424 = ((($2423)) + -4|0);
      $2425 = HEAP32[$2424>>2]|0;
      $2426 = $yyvsp;
      $2427 = HEAP32[$2426>>2]|0;
      $2428 = (_new_args($2416,$2419,$2422,0,$2425,$2427)|0);
      HEAP32[$yyval>>2] = $2428;
      break;
     }
     case 353:  {
      $2429 = $0;
      $2430 = $yyvsp;
      $2431 = ((($2430)) + -12|0);
      $2432 = HEAP32[$2431>>2]|0;
      $2433 = $yyvsp;
      $2434 = ((($2433)) + -4|0);
      $2435 = HEAP32[$2434>>2]|0;
      $2436 = $yyvsp;
      $2437 = HEAP32[$2436>>2]|0;
      $2438 = (_new_args($2429,$2432,0,$2435,0,$2437)|0);
      HEAP32[$yyval>>2] = $2438;
      break;
     }
     case 354:  {
      $2439 = $0;
      $2440 = $yyvsp;
      $2441 = ((($2440)) + -4|0);
      $2442 = HEAP32[$2441>>2]|0;
      $2443 = (_new_args($2439,$2442,0,1,0,0)|0);
      HEAP32[$yyval>>2] = $2443;
      break;
     }
     case 355:  {
      $2444 = $0;
      $2445 = $yyvsp;
      $2446 = ((($2445)) + -20|0);
      $2447 = HEAP32[$2446>>2]|0;
      $2448 = $yyvsp;
      $2449 = ((($2448)) + -12|0);
      $2450 = HEAP32[$2449>>2]|0;
      $2451 = $yyvsp;
      $2452 = ((($2451)) + -4|0);
      $2453 = HEAP32[$2452>>2]|0;
      $2454 = $yyvsp;
      $2455 = HEAP32[$2454>>2]|0;
      $2456 = (_new_args($2444,$2447,0,$2450,$2453,$2455)|0);
      HEAP32[$yyval>>2] = $2456;
      break;
     }
     case 356:  {
      $2457 = $0;
      $2458 = $yyvsp;
      $2459 = ((($2458)) + -4|0);
      $2460 = HEAP32[$2459>>2]|0;
      $2461 = $yyvsp;
      $2462 = HEAP32[$2461>>2]|0;
      $2463 = (_new_args($2457,$2460,0,0,0,$2462)|0);
      HEAP32[$yyval>>2] = $2463;
      break;
     }
     case 357:  {
      $2464 = $0;
      $2465 = $yyvsp;
      $2466 = ((($2465)) + -12|0);
      $2467 = HEAP32[$2466>>2]|0;
      $2468 = $yyvsp;
      $2469 = ((($2468)) + -4|0);
      $2470 = HEAP32[$2469>>2]|0;
      $2471 = $yyvsp;
      $2472 = HEAP32[$2471>>2]|0;
      $2473 = (_new_args($2464,0,$2467,$2470,0,$2472)|0);
      HEAP32[$yyval>>2] = $2473;
      break;
     }
     case 358:  {
      $2474 = $0;
      $2475 = $yyvsp;
      $2476 = ((($2475)) + -20|0);
      $2477 = HEAP32[$2476>>2]|0;
      $2478 = $yyvsp;
      $2479 = ((($2478)) + -12|0);
      $2480 = HEAP32[$2479>>2]|0;
      $2481 = $yyvsp;
      $2482 = ((($2481)) + -4|0);
      $2483 = HEAP32[$2482>>2]|0;
      $2484 = $yyvsp;
      $2485 = HEAP32[$2484>>2]|0;
      $2486 = (_new_args($2474,0,$2477,$2480,$2483,$2485)|0);
      HEAP32[$yyval>>2] = $2486;
      break;
     }
     case 359:  {
      $2487 = $0;
      $2488 = $yyvsp;
      $2489 = ((($2488)) + -4|0);
      $2490 = HEAP32[$2489>>2]|0;
      $2491 = $yyvsp;
      $2492 = HEAP32[$2491>>2]|0;
      $2493 = (_new_args($2487,0,$2490,0,0,$2492)|0);
      HEAP32[$yyval>>2] = $2493;
      break;
     }
     case 360:  {
      $2494 = $0;
      $2495 = $yyvsp;
      $2496 = ((($2495)) + -12|0);
      $2497 = HEAP32[$2496>>2]|0;
      $2498 = $yyvsp;
      $2499 = ((($2498)) + -4|0);
      $2500 = HEAP32[$2499>>2]|0;
      $2501 = $yyvsp;
      $2502 = HEAP32[$2501>>2]|0;
      $2503 = (_new_args($2494,0,$2497,0,$2500,$2502)|0);
      HEAP32[$yyval>>2] = $2503;
      break;
     }
     case 361:  {
      $2504 = $0;
      $2505 = $yyvsp;
      $2506 = ((($2505)) + -4|0);
      $2507 = HEAP32[$2506>>2]|0;
      $2508 = $yyvsp;
      $2509 = HEAP32[$2508>>2]|0;
      $2510 = (_new_args($2504,0,0,$2507,0,$2509)|0);
      HEAP32[$yyval>>2] = $2510;
      break;
     }
     case 362:  {
      $2511 = $0;
      $2512 = $yyvsp;
      $2513 = ((($2512)) + -12|0);
      $2514 = HEAP32[$2513>>2]|0;
      $2515 = $yyvsp;
      $2516 = ((($2515)) + -4|0);
      $2517 = HEAP32[$2516>>2]|0;
      $2518 = $yyvsp;
      $2519 = HEAP32[$2518>>2]|0;
      $2520 = (_new_args($2511,0,0,$2514,$2517,$2519)|0);
      HEAP32[$yyval>>2] = $2520;
      break;
     }
     case 363:  {
      $2521 = $0;
      $2522 = $yyvsp;
      $2523 = HEAP32[$2522>>2]|0;
      $2524 = (_new_args($2521,0,0,0,0,$2523)|0);
      HEAP32[$yyval>>2] = $2524;
      break;
     }
     case 365:  {
      $2525 = $0;
      $2526 = ((($2525)) + 72|0);
      $2527 = HEAP8[$2526>>0]|0;
      $2528 = $2527 & -2;
      $2529 = $2528 | 1;
      HEAP8[$2526>>0] = $2529;
      $2530 = $yyvsp;
      $2531 = HEAP32[$2530>>2]|0;
      HEAP32[$yyval>>2] = $2531;
      break;
     }
     case 366:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 367:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 368:  {
      $2532 = $yyvsp;
      $2533 = ((($2532)) + -8|0);
      $2534 = HEAP32[$2533>>2]|0;
      HEAP32[$yyval>>2] = $2534;
      break;
     }
     case 369:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 370:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 373:  {
      $2535 = $0;
      $2536 = $yyvsp;
      $2537 = HEAP32[$2536>>2]|0;
      _local_add_f($2535,$2537);
      $2538 = $0;
      $2539 = $yyvsp;
      $2540 = HEAP32[$2539>>2]|0;
      _new_bv($2538,$2540);
      break;
     }
     case 375:  {
      $2541 = $yyvsp;
      $2542 = ((($2541)) + -8|0);
      $2543 = HEAP32[$2542>>2]|0;
      HEAP32[$yyval>>2] = $2543;
      break;
     }
     case 376:  {
      $2544 = $yyvsp;
      $2545 = HEAP32[$2544>>2]|0;
      HEAP32[$yyval>>2] = $2545;
      break;
     }
     case 377:  {
      $2546 = $yyvsp;
      $2547 = ((($2546)) + -4|0);
      $2548 = HEAP32[$2547>>2]|0;
      HEAP32[$yyval>>2] = $2548;
      break;
     }
     case 378:  {
      $2549 = $yyvsp;
      $2550 = ((($2549)) + -4|0);
      $2551 = HEAP32[$2550>>2]|0;
      HEAP32[$yyval>>2] = $2551;
      break;
     }
     case 379:  {
      $2552 = $0;
      _local_nest($2552);
      break;
     }
     case 380:  {
      $2553 = $0;
      $2554 = $yyvsp;
      $2555 = ((($2554)) + -8|0);
      $2556 = HEAP32[$2555>>2]|0;
      $2557 = $yyvsp;
      $2558 = ((($2557)) + -4|0);
      $2559 = HEAP32[$2558>>2]|0;
      $2560 = (_new_block($2553,$2556,$2559)|0);
      HEAP32[$yyval>>2] = $2560;
      $2561 = $0;
      _local_unnest($2561);
      break;
     }
     case 381:  {
      $2562 = $yyvsp;
      $2563 = ((($2562)) + -4|0);
      $2564 = HEAP32[$2563>>2]|0;
      $2565 = HEAP32[$2564>>2]|0;
      $2566 = ($2565|0)==((38)|0);
      $2567 = $0;
      if ($2566) {
       _yyerror($2567,59705);
      } else {
       $2568 = $yyvsp;
       $2569 = ((($2568)) + -4|0);
       $2570 = HEAP32[$2569>>2]|0;
       $2571 = $yyvsp;
       $2572 = HEAP32[$2571>>2]|0;
       _call_with_block($2567,$2570,$2572);
      }
      $2573 = $yyvsp;
      $2574 = ((($2573)) + -4|0);
      $2575 = HEAP32[$2574>>2]|0;
      HEAP32[$yyval>>2] = $2575;
      break;
     }
     case 382:  {
      $2576 = $0;
      $2577 = $yyvsp;
      $2578 = ((($2577)) + -12|0);
      $2579 = HEAP32[$2578>>2]|0;
      $2580 = $yyvsp;
      $2581 = ((($2580)) + -4|0);
      $2582 = HEAP32[$2581>>2]|0;
      $2583 = $yyvsp;
      $2584 = HEAP32[$2583>>2]|0;
      $2585 = (_new_call($2576,$2579,$2582,$2584)|0);
      HEAP32[$yyval>>2] = $2585;
      break;
     }
     case 383:  {
      $2586 = $0;
      $2587 = $yyvsp;
      $2588 = ((($2587)) + -16|0);
      $2589 = HEAP32[$2588>>2]|0;
      $2590 = $yyvsp;
      $2591 = ((($2590)) + -8|0);
      $2592 = HEAP32[$2591>>2]|0;
      $2593 = $yyvsp;
      $2594 = ((($2593)) + -4|0);
      $2595 = HEAP32[$2594>>2]|0;
      $2596 = (_new_call($2586,$2589,$2592,$2595)|0);
      HEAP32[$yyval>>2] = $2596;
      $2597 = $0;
      $2598 = HEAP32[$yyval>>2]|0;
      $2599 = $yyvsp;
      $2600 = HEAP32[$2599>>2]|0;
      _call_with_block($2597,$2598,$2600);
      break;
     }
     case 384:  {
      $2601 = $0;
      $2602 = $yyvsp;
      $2603 = ((($2602)) + -16|0);
      $2604 = HEAP32[$2603>>2]|0;
      $2605 = $yyvsp;
      $2606 = ((($2605)) + -8|0);
      $2607 = HEAP32[$2606>>2]|0;
      $2608 = $yyvsp;
      $2609 = ((($2608)) + -4|0);
      $2610 = HEAP32[$2609>>2]|0;
      $2611 = (_new_call($2601,$2604,$2607,$2610)|0);
      HEAP32[$yyval>>2] = $2611;
      $2612 = $0;
      $2613 = HEAP32[$yyval>>2]|0;
      $2614 = $yyvsp;
      $2615 = HEAP32[$2614>>2]|0;
      _call_with_block($2612,$2613,$2615);
      break;
     }
     case 385:  {
      $2616 = $0;
      $2617 = $yyvsp;
      $2618 = ((($2617)) + -4|0);
      $2619 = HEAP32[$2618>>2]|0;
      $2620 = $yyvsp;
      $2621 = HEAP32[$2620>>2]|0;
      $2622 = (_new_fcall($2616,$2619,$2621)|0);
      HEAP32[$yyval>>2] = $2622;
      break;
     }
     case 386:  {
      $2623 = $0;
      $2624 = $yyvsp;
      $2625 = ((($2624)) + -12|0);
      $2626 = HEAP32[$2625>>2]|0;
      $2627 = $yyvsp;
      $2628 = ((($2627)) + -4|0);
      $2629 = HEAP32[$2628>>2]|0;
      $2630 = $yyvsp;
      $2631 = HEAP32[$2630>>2]|0;
      $2632 = (_new_call($2623,$2626,$2629,$2631)|0);
      HEAP32[$yyval>>2] = $2632;
      break;
     }
     case 387:  {
      $2633 = $0;
      $2634 = $yyvsp;
      $2635 = ((($2634)) + -12|0);
      $2636 = HEAP32[$2635>>2]|0;
      $2637 = $yyvsp;
      $2638 = ((($2637)) + -4|0);
      $2639 = HEAP32[$2638>>2]|0;
      $2640 = $yyvsp;
      $2641 = HEAP32[$2640>>2]|0;
      $2642 = (_new_call($2633,$2636,$2639,$2641)|0);
      HEAP32[$yyval>>2] = $2642;
      break;
     }
     case 388:  {
      $2643 = $0;
      $2644 = $yyvsp;
      $2645 = ((($2644)) + -8|0);
      $2646 = HEAP32[$2645>>2]|0;
      $2647 = $yyvsp;
      $2648 = HEAP32[$2647>>2]|0;
      $2649 = (_new_call($2643,$2646,$2648,0)|0);
      HEAP32[$yyval>>2] = $2649;
      break;
     }
     case 389:  {
      $2650 = $0;
      $2651 = $yyvsp;
      $2652 = ((($2651)) + -8|0);
      $2653 = HEAP32[$2652>>2]|0;
      $2654 = $0;
      $2655 = (_intern_gen($2654,69512,4)|0);
      $2656 = $yyvsp;
      $2657 = HEAP32[$2656>>2]|0;
      $2658 = (_new_call($2650,$2653,$2655,$2657)|0);
      HEAP32[$yyval>>2] = $2658;
      break;
     }
     case 390:  {
      $2659 = $0;
      $2660 = $yyvsp;
      $2661 = ((($2660)) + -8|0);
      $2662 = HEAP32[$2661>>2]|0;
      $2663 = $0;
      $2664 = (_intern_gen($2663,69512,4)|0);
      $2665 = $yyvsp;
      $2666 = HEAP32[$2665>>2]|0;
      $2667 = (_new_call($2659,$2662,$2664,$2666)|0);
      HEAP32[$yyval>>2] = $2667;
      break;
     }
     case 391:  {
      $2668 = $0;
      $2669 = $yyvsp;
      $2670 = HEAP32[$2669>>2]|0;
      $2671 = (_new_super($2668,$2670)|0);
      HEAP32[$yyval>>2] = $2671;
      break;
     }
     case 392:  {
      $2672 = $0;
      $2673 = (_new_zsuper($2672)|0);
      HEAP32[$yyval>>2] = $2673;
      break;
     }
     case 393:  {
      $2674 = $0;
      $2675 = $yyvsp;
      $2676 = ((($2675)) + -12|0);
      $2677 = HEAP32[$2676>>2]|0;
      $2678 = $0;
      $2679 = (_intern_gen($2678,68841,2)|0);
      $2680 = $yyvsp;
      $2681 = ((($2680)) + -4|0);
      $2682 = HEAP32[$2681>>2]|0;
      $2683 = (_new_call($2674,$2677,$2679,$2682)|0);
      HEAP32[$yyval>>2] = $2683;
      break;
     }
     case 394:  {
      $2684 = $0;
      _local_nest($2684);
      $2685 = $0;
      $2686 = ((($2685)) + 32|0);
      $2687 = HEAP32[$2686>>2]|0;
      HEAP32[$yyval>>2] = $2687;
      break;
     }
     case 395:  {
      $2688 = $0;
      $2689 = $yyvsp;
      $2690 = ((($2689)) + -8|0);
      $2691 = HEAP32[$2690>>2]|0;
      $2692 = $yyvsp;
      $2693 = ((($2692)) + -4|0);
      $2694 = HEAP32[$2693>>2]|0;
      $2695 = (_new_block($2688,$2691,$2694)|0);
      HEAP32[$yyval>>2] = $2695;
      $2696 = $yyvsp;
      $2697 = ((($2696)) + -12|0);
      $2698 = HEAP32[$2697>>2]|0;
      $2699 = $2698&65535;
      $2700 = HEAP32[$yyval>>2]|0;
      $2701 = ((($2700)) + 8|0);
      HEAP16[$2701>>1] = $2699;
      $2702 = $0;
      _local_unnest($2702);
      break;
     }
     case 396:  {
      $2703 = $0;
      _local_nest($2703);
      $2704 = $0;
      $2705 = ((($2704)) + 32|0);
      $2706 = HEAP32[$2705>>2]|0;
      HEAP32[$yyval>>2] = $2706;
      break;
     }
     case 397:  {
      $2707 = $0;
      $2708 = $yyvsp;
      $2709 = ((($2708)) + -8|0);
      $2710 = HEAP32[$2709>>2]|0;
      $2711 = $yyvsp;
      $2712 = ((($2711)) + -4|0);
      $2713 = HEAP32[$2712>>2]|0;
      $2714 = (_new_block($2707,$2710,$2713)|0);
      HEAP32[$yyval>>2] = $2714;
      $2715 = $yyvsp;
      $2716 = ((($2715)) + -12|0);
      $2717 = HEAP32[$2716>>2]|0;
      $2718 = $2717&65535;
      $2719 = HEAP32[$yyval>>2]|0;
      $2720 = ((($2719)) + 8|0);
      HEAP16[$2720>>1] = $2718;
      $2721 = $0;
      _local_unnest($2721);
      break;
     }
     case 398:  {
      $2722 = $0;
      $2723 = $0;
      $2724 = $yyvsp;
      $2725 = ((($2724)) + -12|0);
      $2726 = HEAP32[$2725>>2]|0;
      $2727 = $yyvsp;
      $2728 = ((($2727)) + -4|0);
      $2729 = HEAP32[$2728>>2]|0;
      $2730 = (_cons_gen($2723,$2726,$2729)|0);
      $2731 = $yyvsp;
      $2732 = HEAP32[$2731>>2]|0;
      $2733 = (_cons_gen($2722,$2730,$2732)|0);
      HEAP32[$yyval>>2] = $2733;
      break;
     }
     case 399:  {
      $2734 = $yyvsp;
      $2735 = HEAP32[$2734>>2]|0;
      $2736 = ($2735|0)!=(0|0);
      if ($2736) {
       $2737 = $0;
       $2738 = $0;
       $2739 = $yyvsp;
       $2740 = HEAP32[$2739>>2]|0;
       $2741 = (_cons_gen($2738,0,$2740)|0);
       $2742 = (_cons_gen($2737,$2741,0)|0);
       HEAP32[$yyval>>2] = $2742;
       break L69;
      } else {
       HEAP32[$yyval>>2] = 0;
       break L69;
      }
      break;
     }
     case 401:  {
      $2743 = $0;
      $2744 = $0;
      $2745 = $yyvsp;
      $2746 = ((($2745)) + -16|0);
      $2747 = HEAP32[$2746>>2]|0;
      $2748 = $yyvsp;
      $2749 = ((($2748)) + -12|0);
      $2750 = HEAP32[$2749>>2]|0;
      $2751 = $yyvsp;
      $2752 = ((($2751)) + -4|0);
      $2753 = HEAP32[$2752>>2]|0;
      $2754 = (_list3_gen($2744,$2747,$2750,$2753)|0);
      $2755 = (_list1_gen($2743,$2754)|0);
      HEAP32[$yyval>>2] = $2755;
      $2756 = $yyvsp;
      $2757 = HEAP32[$2756>>2]|0;
      $2758 = ($2757|0)!=(0|0);
      if ($2758) {
       $2759 = $0;
       $2760 = HEAP32[$yyval>>2]|0;
       $2761 = $yyvsp;
       $2762 = HEAP32[$2761>>2]|0;
       $2763 = (_append_gen($2759,$2760,$2762)|0);
       HEAP32[$yyval>>2] = $2763;
      }
      break;
     }
     case 403:  {
      $2764 = $0;
      $2765 = $yyvsp;
      $2766 = HEAP32[$2765>>2]|0;
      $2767 = (_list1_gen($2764,$2766)|0);
      HEAP32[$yyval>>2] = $2767;
      break;
     }
     case 406:  {
      $2768 = $yyvsp;
      $2769 = HEAP32[$2768>>2]|0;
      HEAP32[$yyval>>2] = $2769;
      break;
     }
     case 408:  {
      $2770 = $yyvsp;
      $2771 = HEAP32[$2770>>2]|0;
      HEAP32[$yyval>>2] = $2771;
      break;
     }
     case 416:  {
      $2772 = $yyvsp;
      $2773 = HEAP32[$2772>>2]|0;
      HEAP32[$yyval>>2] = $2773;
      break;
     }
     case 417:  {
      $2774 = $0;
      $2775 = $0;
      $2776 = $yyvsp;
      $2777 = ((($2776)) + -4|0);
      $2778 = HEAP32[$2777>>2]|0;
      $2779 = $0;
      $2780 = $yyvsp;
      $2781 = HEAP32[$2780>>2]|0;
      $2782 = (_list1_gen($2779,$2781)|0);
      $2783 = (_append_gen($2775,$2778,$2782)|0);
      $2784 = (_new_dstr($2774,$2783)|0);
      HEAP32[$yyval>>2] = $2784;
      break;
     }
     case 419:  {
      $2785 = $0;
      $2786 = $yyvsp;
      $2787 = ((($2786)) + -4|0);
      $2788 = HEAP32[$2787>>2]|0;
      $2789 = $yyvsp;
      $2790 = HEAP32[$2789>>2]|0;
      $2791 = (_append_gen($2785,$2788,$2790)|0);
      HEAP32[$yyval>>2] = $2791;
      break;
     }
     case 420:  {
      $2792 = $0;
      $2793 = $yyvsp;
      $2794 = HEAP32[$2793>>2]|0;
      $2795 = (_list1_gen($2792,$2794)|0);
      HEAP32[$yyval>>2] = $2795;
      break;
     }
     case 421:  {
      $2796 = $0;
      $2797 = ((($2796)) + 44|0);
      $2798 = HEAP32[$2797>>2]|0;
      HEAP32[$yyval>>2] = $2798;
      $2799 = $0;
      $2800 = ((($2799)) + 44|0);
      HEAP32[$2800>>2] = 0;
      break;
     }
     case 422:  {
      $2801 = $yyvsp;
      $2802 = ((($2801)) + -8|0);
      $2803 = HEAP32[$2802>>2]|0;
      $2804 = $0;
      $2805 = ((($2804)) + 44|0);
      HEAP32[$2805>>2] = $2803;
      $2806 = $0;
      $2807 = $yyvsp;
      $2808 = ((($2807)) + -12|0);
      $2809 = HEAP32[$2808>>2]|0;
      $2810 = $yyvsp;
      $2811 = ((($2810)) + -4|0);
      $2812 = HEAP32[$2811>>2]|0;
      $2813 = (_list2_gen($2806,$2809,$2812)|0);
      HEAP32[$yyval>>2] = $2813;
      break;
     }
     case 423:  {
      $2814 = $0;
      $2815 = $0;
      $2816 = (_new_literal_delim($2815)|0);
      $2817 = (_list1_gen($2814,$2816)|0);
      HEAP32[$yyval>>2] = $2817;
      break;
     }
     case 424:  {
      $2818 = $0;
      $2819 = $0;
      $2820 = (_new_literal_delim($2819)|0);
      $2821 = (_list1_gen($2818,$2820)|0);
      HEAP32[$yyval>>2] = $2821;
      break;
     }
     case 425:  {
      $2822 = $yyvsp;
      $2823 = HEAP32[$2822>>2]|0;
      HEAP32[$yyval>>2] = $2823;
      break;
     }
     case 426:  {
      $2824 = $0;
      $2825 = $0;
      $2826 = $yyvsp;
      $2827 = ((($2826)) + -4|0);
      $2828 = HEAP32[$2827>>2]|0;
      $2829 = $0;
      $2830 = $yyvsp;
      $2831 = HEAP32[$2830>>2]|0;
      $2832 = (_list1_gen($2829,$2831)|0);
      $2833 = (_append_gen($2825,$2828,$2832)|0);
      $2834 = (_new_dxstr($2824,$2833)|0);
      HEAP32[$yyval>>2] = $2834;
      break;
     }
     case 427:  {
      $2835 = $yyvsp;
      $2836 = HEAP32[$2835>>2]|0;
      HEAP32[$yyval>>2] = $2836;
      break;
     }
     case 428:  {
      $2837 = $0;
      $2838 = $yyvsp;
      $2839 = ((($2838)) + -4|0);
      $2840 = HEAP32[$2839>>2]|0;
      $2841 = $yyvsp;
      $2842 = HEAP32[$2841>>2]|0;
      $2843 = (_new_dregx($2837,$2840,$2842)|0);
      HEAP32[$yyval>>2] = $2843;
      break;
     }
     case 434:  {
      $2844 = $0;
      $2845 = (_parsing_heredoc_inf($2844)|0);
      $inf = $2845;
      $2846 = $0;
      $2847 = $inf;
      $2848 = ((($2847)) + 16|0);
      $2849 = HEAP32[$2848>>2]|0;
      $2850 = $0;
      $2851 = $0;
      $2852 = (_new_str($2851,75436,0)|0);
      $2853 = (_list1_gen($2850,$2852)|0);
      $2854 = (_append_gen($2846,$2849,$2853)|0);
      $2855 = $inf;
      $2856 = ((($2855)) + 16|0);
      HEAP32[$2856>>2] = $2854;
      $2857 = $0;
      _heredoc_end($2857);
      break;
     }
     case 435:  {
      $2858 = $0;
      _heredoc_end($2858);
      break;
     }
     case 438:  {
      $2859 = $0;
      $2860 = (_parsing_heredoc_inf($2859)|0);
      $inf2 = $2860;
      $2861 = $0;
      $2862 = $inf2;
      $2863 = ((($2862)) + 16|0);
      $2864 = HEAP32[$2863>>2]|0;
      $2865 = $0;
      $2866 = $yyvsp;
      $2867 = HEAP32[$2866>>2]|0;
      $2868 = (_list1_gen($2865,$2867)|0);
      $2869 = (_append_gen($2861,$2864,$2868)|0);
      $2870 = $inf2;
      $2871 = ((($2870)) + 16|0);
      HEAP32[$2871>>2] = $2869;
      $2872 = $0;
      _heredoc_treat_nextline($2872);
      break;
     }
     case 439:  {
      $2873 = $0;
      $2874 = ((($2873)) + 44|0);
      $2875 = HEAP32[$2874>>2]|0;
      HEAP32[$yyval>>2] = $2875;
      $2876 = $0;
      $2877 = ((($2876)) + 44|0);
      HEAP32[$2877>>2] = 0;
      break;
     }
     case 440:  {
      $2878 = $0;
      $2879 = (_parsing_heredoc_inf($2878)|0);
      $inf3 = $2879;
      $2880 = $yyvsp;
      $2881 = ((($2880)) + -8|0);
      $2882 = HEAP32[$2881>>2]|0;
      $2883 = $0;
      $2884 = ((($2883)) + 44|0);
      HEAP32[$2884>>2] = $2882;
      $2885 = $0;
      $2886 = $0;
      $2887 = $inf3;
      $2888 = ((($2887)) + 16|0);
      $2889 = HEAP32[$2888>>2]|0;
      $2890 = $0;
      $2891 = $yyvsp;
      $2892 = ((($2891)) + -12|0);
      $2893 = HEAP32[$2892>>2]|0;
      $2894 = (_list1_gen($2890,$2893)|0);
      $2895 = (_append_gen($2886,$2889,$2894)|0);
      $2896 = $0;
      $2897 = $yyvsp;
      $2898 = ((($2897)) + -4|0);
      $2899 = HEAP32[$2898>>2]|0;
      $2900 = (_list1_gen($2896,$2899)|0);
      $2901 = (_append_gen($2885,$2895,$2900)|0);
      $2902 = $inf3;
      $2903 = ((($2902)) + 16|0);
      HEAP32[$2903>>2] = $2901;
      break;
     }
     case 441:  {
      $2904 = $0;
      $2905 = $0;
      $2906 = $yyvsp;
      $2907 = HEAP32[$2906>>2]|0;
      $2908 = (_list1_gen($2905,$2907)|0);
      $2909 = (_new_words($2904,$2908)|0);
      HEAP32[$yyval>>2] = $2909;
      break;
     }
     case 442:  {
      $2910 = $0;
      $2911 = $0;
      $2912 = $yyvsp;
      $2913 = ((($2912)) + -4|0);
      $2914 = HEAP32[$2913>>2]|0;
      $2915 = $0;
      $2916 = $yyvsp;
      $2917 = HEAP32[$2916>>2]|0;
      $2918 = (_list1_gen($2915,$2917)|0);
      $2919 = (_append_gen($2911,$2914,$2918)|0);
      $2920 = (_new_words($2910,$2919)|0);
      HEAP32[$yyval>>2] = $2920;
      break;
     }
     case 443:  {
      $2921 = $0;
      $2922 = $yyvsp;
      $2923 = HEAP32[$2922>>2]|0;
      $2924 = (_new_sym($2921,$2923)|0);
      HEAP32[$yyval>>2] = $2924;
      break;
     }
     case 444:  {
      $2925 = $0;
      $2926 = ((($2925)) + 40|0);
      HEAP32[$2926>>2] = 1;
      $2927 = $0;
      $2928 = $0;
      $2929 = $yyvsp;
      $2930 = ((($2929)) + -4|0);
      $2931 = HEAP32[$2930>>2]|0;
      $2932 = $0;
      $2933 = $yyvsp;
      $2934 = HEAP32[$2933>>2]|0;
      $2935 = (_list1_gen($2932,$2934)|0);
      $2936 = (_append_gen($2928,$2931,$2935)|0);
      $2937 = (_new_dsym($2927,$2936)|0);
      HEAP32[$yyval>>2] = $2937;
      break;
     }
     case 445:  {
      $2938 = $0;
      $2939 = ((($2938)) + 40|0);
      HEAP32[$2939>>2] = 1;
      $2940 = $yyvsp;
      $2941 = HEAP32[$2940>>2]|0;
      HEAP32[$yyval>>2] = $2941;
      break;
     }
     case 450:  {
      $2942 = $0;
      $2943 = $yyvsp;
      $2944 = HEAP32[$2943>>2]|0;
      $2945 = (_new_strsym($2942,$2944)|0);
      HEAP32[$yyval>>2] = $2945;
      break;
     }
     case 451:  {
      $2946 = $0;
      $2947 = $yyvsp;
      $2948 = HEAP32[$2947>>2]|0;
      $2949 = (_new_strsym($2946,$2948)|0);
      HEAP32[$yyval>>2] = $2949;
      break;
     }
     case 452:  {
      $2950 = $0;
      $2951 = $0;
      $2952 = $yyvsp;
      $2953 = HEAP32[$2952>>2]|0;
      $2954 = (_list1_gen($2951,$2953)|0);
      $2955 = (_new_symbols($2950,$2954)|0);
      HEAP32[$yyval>>2] = $2955;
      break;
     }
     case 453:  {
      $2956 = $0;
      $2957 = $0;
      $2958 = $yyvsp;
      $2959 = ((($2958)) + -4|0);
      $2960 = HEAP32[$2959>>2]|0;
      $2961 = $0;
      $2962 = $yyvsp;
      $2963 = HEAP32[$2962>>2]|0;
      $2964 = (_list1_gen($2961,$2963)|0);
      $2965 = (_append_gen($2957,$2960,$2964)|0);
      $2966 = (_new_symbols($2956,$2965)|0);
      HEAP32[$yyval>>2] = $2966;
      break;
     }
     case 456:  {
      $2967 = $0;
      $2968 = $yyvsp;
      $2969 = HEAP32[$2968>>2]|0;
      $2970 = (_negate_lit($2967,$2969)|0);
      HEAP32[$yyval>>2] = $2970;
      break;
     }
     case 457:  {
      $2971 = $0;
      $2972 = $yyvsp;
      $2973 = HEAP32[$2972>>2]|0;
      $2974 = (_negate_lit($2971,$2973)|0);
      HEAP32[$yyval>>2] = $2974;
      break;
     }
     case 458:  {
      $2975 = $0;
      $2976 = $yyvsp;
      $2977 = HEAP32[$2976>>2]|0;
      $2978 = (_new_lvar($2975,$2977)|0);
      HEAP32[$yyval>>2] = $2978;
      break;
     }
     case 459:  {
      $2979 = $0;
      $2980 = $yyvsp;
      $2981 = HEAP32[$2980>>2]|0;
      $2982 = (_new_ivar($2979,$2981)|0);
      HEAP32[$yyval>>2] = $2982;
      break;
     }
     case 460:  {
      $2983 = $0;
      $2984 = $yyvsp;
      $2985 = HEAP32[$2984>>2]|0;
      $2986 = (_new_gvar($2983,$2985)|0);
      HEAP32[$yyval>>2] = $2986;
      break;
     }
     case 461:  {
      $2987 = $0;
      $2988 = $yyvsp;
      $2989 = HEAP32[$2988>>2]|0;
      $2990 = (_new_cvar($2987,$2989)|0);
      HEAP32[$yyval>>2] = $2990;
      break;
     }
     case 462:  {
      $2991 = $0;
      $2992 = $yyvsp;
      $2993 = HEAP32[$2992>>2]|0;
      $2994 = (_new_const($2991,$2993)|0);
      HEAP32[$yyval>>2] = $2994;
      break;
     }
     case 463:  {
      $2995 = $0;
      $2996 = $yyvsp;
      $2997 = HEAP32[$2996>>2]|0;
      _assignable($2995,$2997);
      break;
     }
     case 464:  {
      $2998 = $0;
      $2999 = $yyvsp;
      $3000 = HEAP32[$2999>>2]|0;
      $3001 = (_var_reference($2998,$3000)|0);
      HEAP32[$yyval>>2] = $3001;
      break;
     }
     case 465:  {
      $3002 = $0;
      $3003 = (_new_nil($3002)|0);
      HEAP32[$yyval>>2] = $3003;
      break;
     }
     case 466:  {
      $3004 = $0;
      $3005 = (_new_self($3004)|0);
      HEAP32[$yyval>>2] = $3005;
      break;
     }
     case 467:  {
      $3006 = $0;
      $3007 = (_new_true($3006)|0);
      HEAP32[$yyval>>2] = $3007;
      break;
     }
     case 468:  {
      $3008 = $0;
      $3009 = (_new_false($3008)|0);
      HEAP32[$yyval>>2] = $3009;
      break;
     }
     case 469:  {
      $3010 = $0;
      $3011 = ((($3010)) + 28|0);
      $3012 = HEAP32[$3011>>2]|0;
      $3013 = ($3012|0)!=(0|0);
      if (!($3013)) {
       $3014 = $0;
       $3015 = ((($3014)) + 28|0);
       HEAP32[$3015>>2] = 72338;
      }
      $3016 = $0;
      $3017 = $0;
      $3018 = ((($3017)) + 28|0);
      $3019 = HEAP32[$3018>>2]|0;
      $3020 = $0;
      $3021 = ((($3020)) + 28|0);
      $3022 = HEAP32[$3021>>2]|0;
      $3023 = (_strlen($3022)|0);
      $3024 = (_new_str($3016,$3019,$3023)|0);
      HEAP32[$yyval>>2] = $3024;
      break;
     }
     case 470:  {
      $3025 = $0;
      $3026 = ((($3025)) + 32|0);
      $3027 = HEAP32[$3026>>2]|0;
      HEAP32[$vararg_buffer>>2] = $3027;
      (_snprintf($buf,16,59726,$vararg_buffer)|0);
      $3028 = $0;
      $3029 = (_new_int($3028,$buf,10)|0);
      HEAP32[$yyval>>2] = $3029;
      break;
     }
     case 473:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 474:  {
      $3030 = $0;
      $3031 = ((($3030)) + 40|0);
      HEAP32[$3031>>2] = 0;
      $3032 = $0;
      $3033 = ((($3032)) + 72|0);
      $3034 = HEAP8[$3033>>0]|0;
      $3035 = $3034 & -2;
      $3036 = $3035 | 1;
      HEAP8[$3033>>0] = $3036;
      break;
     }
     case 475:  {
      $3037 = $yyvsp;
      $3038 = ((($3037)) + -4|0);
      $3039 = HEAP32[$3038>>2]|0;
      HEAP32[$yyval>>2] = $3039;
      break;
     }
     case 476:  {
      $3040 = $yyvsp;
      $3041 = ((($3040)) + -4|0);
      $3042 = HEAP32[$3041>>2]|0;
      HEAP32[$yyval>>2] = $3042;
      $3043 = $0;
      $3044 = ((($3043)) + 40|0);
      HEAP32[$3044>>2] = 0;
      $3045 = $0;
      $3046 = ((($3045)) + 72|0);
      $3047 = HEAP8[$3046>>0]|0;
      $3048 = $3047 & -2;
      $3049 = $3048 | 1;
      HEAP8[$3046>>0] = $3049;
      break;
     }
     case 477:  {
      $3050 = $yyvsp;
      $3051 = ((($3050)) + -4|0);
      $3052 = HEAP32[$3051>>2]|0;
      HEAP32[$yyval>>2] = $3052;
      break;
     }
     case 478:  {
      $3053 = $0;
      $3054 = $yyvsp;
      $3055 = ((($3054)) + -20|0);
      $3056 = HEAP32[$3055>>2]|0;
      $3057 = $yyvsp;
      $3058 = ((($3057)) + -12|0);
      $3059 = HEAP32[$3058>>2]|0;
      $3060 = $yyvsp;
      $3061 = ((($3060)) + -4|0);
      $3062 = HEAP32[$3061>>2]|0;
      $3063 = $yyvsp;
      $3064 = HEAP32[$3063>>2]|0;
      $3065 = (_new_args($3053,$3056,$3059,$3062,0,$3064)|0);
      HEAP32[$yyval>>2] = $3065;
      break;
     }
     case 479:  {
      $3066 = $0;
      $3067 = $yyvsp;
      $3068 = ((($3067)) + -28|0);
      $3069 = HEAP32[$3068>>2]|0;
      $3070 = $yyvsp;
      $3071 = ((($3070)) + -20|0);
      $3072 = HEAP32[$3071>>2]|0;
      $3073 = $yyvsp;
      $3074 = ((($3073)) + -12|0);
      $3075 = HEAP32[$3074>>2]|0;
      $3076 = $yyvsp;
      $3077 = ((($3076)) + -4|0);
      $3078 = HEAP32[$3077>>2]|0;
      $3079 = $yyvsp;
      $3080 = HEAP32[$3079>>2]|0;
      $3081 = (_new_args($3066,$3069,$3072,$3075,$3078,$3080)|0);
      HEAP32[$yyval>>2] = $3081;
      break;
     }
     case 480:  {
      $3082 = $0;
      $3083 = $yyvsp;
      $3084 = ((($3083)) + -12|0);
      $3085 = HEAP32[$3084>>2]|0;
      $3086 = $yyvsp;
      $3087 = ((($3086)) + -4|0);
      $3088 = HEAP32[$3087>>2]|0;
      $3089 = $yyvsp;
      $3090 = HEAP32[$3089>>2]|0;
      $3091 = (_new_args($3082,$3085,$3088,0,0,$3090)|0);
      HEAP32[$yyval>>2] = $3091;
      break;
     }
     case 481:  {
      $3092 = $0;
      $3093 = $yyvsp;
      $3094 = ((($3093)) + -20|0);
      $3095 = HEAP32[$3094>>2]|0;
      $3096 = $yyvsp;
      $3097 = ((($3096)) + -12|0);
      $3098 = HEAP32[$3097>>2]|0;
      $3099 = $yyvsp;
      $3100 = ((($3099)) + -4|0);
      $3101 = HEAP32[$3100>>2]|0;
      $3102 = $yyvsp;
      $3103 = HEAP32[$3102>>2]|0;
      $3104 = (_new_args($3092,$3095,$3098,0,$3101,$3103)|0);
      HEAP32[$yyval>>2] = $3104;
      break;
     }
     case 482:  {
      $3105 = $0;
      $3106 = $yyvsp;
      $3107 = ((($3106)) + -12|0);
      $3108 = HEAP32[$3107>>2]|0;
      $3109 = $yyvsp;
      $3110 = ((($3109)) + -4|0);
      $3111 = HEAP32[$3110>>2]|0;
      $3112 = $yyvsp;
      $3113 = HEAP32[$3112>>2]|0;
      $3114 = (_new_args($3105,$3108,0,$3111,0,$3113)|0);
      HEAP32[$yyval>>2] = $3114;
      break;
     }
     case 483:  {
      $3115 = $0;
      $3116 = $yyvsp;
      $3117 = ((($3116)) + -20|0);
      $3118 = HEAP32[$3117>>2]|0;
      $3119 = $yyvsp;
      $3120 = ((($3119)) + -12|0);
      $3121 = HEAP32[$3120>>2]|0;
      $3122 = $yyvsp;
      $3123 = ((($3122)) + -4|0);
      $3124 = HEAP32[$3123>>2]|0;
      $3125 = $yyvsp;
      $3126 = HEAP32[$3125>>2]|0;
      $3127 = (_new_args($3115,$3118,0,$3121,$3124,$3126)|0);
      HEAP32[$yyval>>2] = $3127;
      break;
     }
     case 484:  {
      $3128 = $0;
      $3129 = $yyvsp;
      $3130 = ((($3129)) + -4|0);
      $3131 = HEAP32[$3130>>2]|0;
      $3132 = $yyvsp;
      $3133 = HEAP32[$3132>>2]|0;
      $3134 = (_new_args($3128,$3131,0,0,0,$3133)|0);
      HEAP32[$yyval>>2] = $3134;
      break;
     }
     case 485:  {
      $3135 = $0;
      $3136 = $yyvsp;
      $3137 = ((($3136)) + -12|0);
      $3138 = HEAP32[$3137>>2]|0;
      $3139 = $yyvsp;
      $3140 = ((($3139)) + -4|0);
      $3141 = HEAP32[$3140>>2]|0;
      $3142 = $yyvsp;
      $3143 = HEAP32[$3142>>2]|0;
      $3144 = (_new_args($3135,0,$3138,$3141,0,$3143)|0);
      HEAP32[$yyval>>2] = $3144;
      break;
     }
     case 486:  {
      $3145 = $0;
      $3146 = $yyvsp;
      $3147 = ((($3146)) + -20|0);
      $3148 = HEAP32[$3147>>2]|0;
      $3149 = $yyvsp;
      $3150 = ((($3149)) + -12|0);
      $3151 = HEAP32[$3150>>2]|0;
      $3152 = $yyvsp;
      $3153 = ((($3152)) + -4|0);
      $3154 = HEAP32[$3153>>2]|0;
      $3155 = $yyvsp;
      $3156 = HEAP32[$3155>>2]|0;
      $3157 = (_new_args($3145,0,$3148,$3151,$3154,$3156)|0);
      HEAP32[$yyval>>2] = $3157;
      break;
     }
     case 487:  {
      $3158 = $0;
      $3159 = $yyvsp;
      $3160 = ((($3159)) + -4|0);
      $3161 = HEAP32[$3160>>2]|0;
      $3162 = $yyvsp;
      $3163 = HEAP32[$3162>>2]|0;
      $3164 = (_new_args($3158,0,$3161,0,0,$3163)|0);
      HEAP32[$yyval>>2] = $3164;
      break;
     }
     case 488:  {
      $3165 = $0;
      $3166 = $yyvsp;
      $3167 = ((($3166)) + -12|0);
      $3168 = HEAP32[$3167>>2]|0;
      $3169 = $yyvsp;
      $3170 = ((($3169)) + -4|0);
      $3171 = HEAP32[$3170>>2]|0;
      $3172 = $yyvsp;
      $3173 = HEAP32[$3172>>2]|0;
      $3174 = (_new_args($3165,0,$3168,0,$3171,$3173)|0);
      HEAP32[$yyval>>2] = $3174;
      break;
     }
     case 489:  {
      $3175 = $0;
      $3176 = $yyvsp;
      $3177 = ((($3176)) + -4|0);
      $3178 = HEAP32[$3177>>2]|0;
      $3179 = $yyvsp;
      $3180 = HEAP32[$3179>>2]|0;
      $3181 = (_new_args($3175,0,0,$3178,0,$3180)|0);
      HEAP32[$yyval>>2] = $3181;
      break;
     }
     case 490:  {
      $3182 = $0;
      $3183 = $yyvsp;
      $3184 = ((($3183)) + -12|0);
      $3185 = HEAP32[$3184>>2]|0;
      $3186 = $yyvsp;
      $3187 = ((($3186)) + -4|0);
      $3188 = HEAP32[$3187>>2]|0;
      $3189 = $yyvsp;
      $3190 = HEAP32[$3189>>2]|0;
      $3191 = (_new_args($3182,0,0,$3185,$3188,$3190)|0);
      HEAP32[$yyval>>2] = $3191;
      break;
     }
     case 491:  {
      $3192 = $0;
      $3193 = $yyvsp;
      $3194 = HEAP32[$3193>>2]|0;
      $3195 = (_new_args($3192,0,0,0,0,$3194)|0);
      HEAP32[$yyval>>2] = $3195;
      break;
     }
     case 492:  {
      $3196 = $0;
      _local_add_f($3196,0);
      $3197 = $0;
      $3198 = (_new_args($3197,0,0,0,0,0)|0);
      HEAP32[$yyval>>2] = $3198;
      break;
     }
     case 493:  {
      $3199 = $0;
      _yyerror($3199,59729);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 494:  {
      $3200 = $0;
      _yyerror($3200,59766);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 495:  {
      $3201 = $0;
      _yyerror($3201,59813);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 496:  {
      $3202 = $0;
      _yyerror($3202,59857);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 497:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 498:  {
      $3203 = $0;
      $3204 = $yyvsp;
      $3205 = HEAP32[$3204>>2]|0;
      _local_add_f($3203,$3205);
      $3206 = $yyvsp;
      $3207 = HEAP32[$3206>>2]|0;
      HEAP32[$yyval>>2] = $3207;
      break;
     }
     case 499:  {
      $3208 = $0;
      $3209 = $yyvsp;
      $3210 = HEAP32[$3209>>2]|0;
      $3211 = (_new_arg($3208,$3210)|0);
      HEAP32[$yyval>>2] = $3211;
      break;
     }
     case 500:  {
      $3212 = $0;
      $3213 = $yyvsp;
      $3214 = ((($3213)) + -4|0);
      $3215 = HEAP32[$3214>>2]|0;
      $3216 = (_new_masgn($3212,$3215,0)|0);
      HEAP32[$yyval>>2] = $3216;
      break;
     }
     case 501:  {
      $3217 = $0;
      $3218 = $yyvsp;
      $3219 = HEAP32[$3218>>2]|0;
      $3220 = (_list1_gen($3217,$3219)|0);
      HEAP32[$yyval>>2] = $3220;
      break;
     }
     case 502:  {
      $3221 = $0;
      $3222 = $yyvsp;
      $3223 = ((($3222)) + -8|0);
      $3224 = HEAP32[$3223>>2]|0;
      $3225 = $0;
      $3226 = $yyvsp;
      $3227 = HEAP32[$3226>>2]|0;
      $3228 = (_list1_gen($3225,$3227)|0);
      $3229 = (_append_gen($3221,$3224,$3228)|0);
      HEAP32[$yyval>>2] = $3229;
      break;
     }
     case 503:  {
      $3230 = $0;
      $3231 = $yyvsp;
      $3232 = ((($3231)) + -4|0);
      $3233 = HEAP32[$3232>>2]|0;
      _local_add_f($3230,$3233);
      $3234 = $yyvsp;
      $3235 = ((($3234)) + -4|0);
      $3236 = HEAP32[$3235>>2]|0;
      HEAP32[$yyval>>2] = $3236;
      break;
     }
     case 504:  {
      $3237 = $0;
      $3238 = $yyvsp;
      $3239 = ((($3238)) + -4|0);
      $3240 = HEAP32[$3239>>2]|0;
      $3241 = $3240;
      $3242 = $yyvsp;
      $3243 = HEAP32[$3242>>2]|0;
      $3244 = (_cons_gen($3237,$3241,$3243)|0);
      HEAP32[$yyval>>2] = $3244;
      break;
     }
     case 505:  {
      $3245 = $0;
      $3246 = $yyvsp;
      $3247 = ((($3246)) + -4|0);
      $3248 = HEAP32[$3247>>2]|0;
      $3249 = $3248;
      $3250 = $yyvsp;
      $3251 = HEAP32[$3250>>2]|0;
      $3252 = (_cons_gen($3245,$3249,$3251)|0);
      HEAP32[$yyval>>2] = $3252;
      break;
     }
     case 506:  {
      $3253 = $0;
      $3254 = $yyvsp;
      $3255 = HEAP32[$3254>>2]|0;
      $3256 = (_list1_gen($3253,$3255)|0);
      HEAP32[$yyval>>2] = $3256;
      break;
     }
     case 507:  {
      $3257 = $0;
      $3258 = $yyvsp;
      $3259 = ((($3258)) + -8|0);
      $3260 = HEAP32[$3259>>2]|0;
      $3261 = $0;
      $3262 = $yyvsp;
      $3263 = HEAP32[$3262>>2]|0;
      $3264 = (_list1_gen($3261,$3263)|0);
      $3265 = (_append_gen($3257,$3260,$3264)|0);
      HEAP32[$yyval>>2] = $3265;
      break;
     }
     case 508:  {
      $3266 = $0;
      $3267 = $yyvsp;
      $3268 = HEAP32[$3267>>2]|0;
      $3269 = (_list1_gen($3266,$3268)|0);
      HEAP32[$yyval>>2] = $3269;
      break;
     }
     case 509:  {
      $3270 = $0;
      $3271 = $yyvsp;
      $3272 = ((($3271)) + -8|0);
      $3273 = HEAP32[$3272>>2]|0;
      $3274 = $0;
      $3275 = $yyvsp;
      $3276 = HEAP32[$3275>>2]|0;
      $3277 = (_list1_gen($3274,$3276)|0);
      $3278 = (_append_gen($3270,$3273,$3277)|0);
      HEAP32[$yyval>>2] = $3278;
      break;
     }
     case 512:  {
      $3279 = $0;
      $3280 = $yyvsp;
      $3281 = HEAP32[$3280>>2]|0;
      _local_add_f($3279,$3281);
      $3282 = $yyvsp;
      $3283 = HEAP32[$3282>>2]|0;
      HEAP32[$yyval>>2] = $3283;
      break;
     }
     case 513:  {
      $3284 = $0;
      _local_add_f($3284,0);
      HEAP32[$yyval>>2] = -1;
      break;
     }
     case 516:  {
      $3285 = $0;
      $3286 = $yyvsp;
      $3287 = HEAP32[$3286>>2]|0;
      _local_add_f($3285,$3287);
      $3288 = $yyvsp;
      $3289 = HEAP32[$3288>>2]|0;
      HEAP32[$yyval>>2] = $3289;
      break;
     }
     case 517:  {
      $3290 = $yyvsp;
      $3291 = HEAP32[$3290>>2]|0;
      HEAP32[$yyval>>2] = $3291;
      break;
     }
     case 518:  {
      $3292 = $0;
      _local_add_f($3292,0);
      HEAP32[$yyval>>2] = 0;
      break;
     }
     case 519:  {
      $3293 = $yyvsp;
      $3294 = HEAP32[$3293>>2]|0;
      HEAP32[$yyval>>2] = $3294;
      $3295 = HEAP32[$yyval>>2]|0;
      $3296 = ($3295|0)!=(0|0);
      if (!($3296)) {
       $3297 = $0;
       $3298 = (_new_nil($3297)|0);
       HEAP32[$yyval>>2] = $3298;
      }
      break;
     }
     case 520:  {
      $3299 = $0;
      $3300 = ((($3299)) + 40|0);
      HEAP32[$3300>>2] = 0;
      break;
     }
     case 521:  {
      $3301 = $yyvsp;
      $3302 = ((($3301)) + -4|0);
      $3303 = HEAP32[$3302>>2]|0;
      $3304 = ($3303|0)==(0|0);
      L553: do {
       if ($3304) {
        $3305 = $0;
        _yyerror($3305,59900);
       } else {
        $3306 = $yyvsp;
        $3307 = ((($3306)) + -4|0);
        $3308 = HEAP32[$3307>>2]|0;
        $3309 = HEAP32[$3308>>2]|0;
        $3310 = $3309;
        switch ($3310|0) {
        case 99: case 34: case 51: case 47: case 60: case 58: case 57: case 56: case 55:  {
         break;
        }
        default: {
         break L553;
        }
        }
        $3311 = $0;
        _yyerror($3311,59938);
       }
      } while(0);
      $3312 = $yyvsp;
      $3313 = ((($3312)) + -4|0);
      $3314 = HEAP32[$3313>>2]|0;
      HEAP32[$yyval>>2] = $3314;
      break;
     }
     case 523:  {
      $3315 = $yyvsp;
      $3316 = ((($3315)) + -4|0);
      $3317 = HEAP32[$3316>>2]|0;
      HEAP32[$yyval>>2] = $3317;
      break;
     }
     case 524:  {
      $3318 = $0;
      $3319 = $yyvsp;
      $3320 = HEAP32[$3319>>2]|0;
      $3321 = (_list1_gen($3318,$3320)|0);
      HEAP32[$yyval>>2] = $3321;
      $3322 = $yyvsp;
      $3323 = HEAP32[$3322>>2]|0;
      $3324 = ($3323|0)!=(0|0);
      if ($3324) {
       $3325 = $yyvsp;
       $3326 = HEAP32[$3325>>2]|0;
       $3327 = ((($3326)) + 10|0);
       $3328 = HEAP16[$3327>>1]|0;
       $3329 = HEAP32[$yyval>>2]|0;
       $3330 = ((($3329)) + 10|0);
       HEAP16[$3330>>1] = $3328;
       $3331 = $yyvsp;
       $3332 = HEAP32[$3331>>2]|0;
       $3333 = ((($3332)) + 8|0);
       $3334 = HEAP16[$3333>>1]|0;
       $3335 = HEAP32[$yyval>>2]|0;
       $3336 = ((($3335)) + 8|0);
       HEAP16[$3336>>1] = $3334;
      }
      break;
     }
     case 525:  {
      $3337 = $0;
      $3338 = $yyvsp;
      $3339 = ((($3338)) + -8|0);
      $3340 = HEAP32[$3339>>2]|0;
      $3341 = $0;
      $3342 = $yyvsp;
      $3343 = HEAP32[$3342>>2]|0;
      $3344 = (_list1_gen($3341,$3343)|0);
      $3345 = (_append_gen($3337,$3340,$3344)|0);
      HEAP32[$yyval>>2] = $3345;
      break;
     }
     case 526:  {
      $3346 = $0;
      $3347 = $yyvsp;
      $3348 = ((($3347)) + -8|0);
      $3349 = HEAP32[$3348>>2]|0;
      $3350 = $yyvsp;
      $3351 = HEAP32[$3350>>2]|0;
      $3352 = (_cons_gen($3346,$3349,$3351)|0);
      HEAP32[$yyval>>2] = $3352;
      break;
     }
     case 527:  {
      $3353 = $0;
      $3354 = $0;
      $3355 = $yyvsp;
      $3356 = ((($3355)) + -4|0);
      $3357 = HEAP32[$3356>>2]|0;
      $3358 = (_new_sym($3354,$3357)|0);
      $3359 = $yyvsp;
      $3360 = HEAP32[$3359>>2]|0;
      $3361 = (_cons_gen($3353,$3358,$3360)|0);
      HEAP32[$yyval>>2] = $3361;
      break;
     }
     case 549:  {
      $yyerrstatus = 0;
      break;
     }
     case 551:  {
      $3362 = $0;
      $3363 = ((($3362)) + 32|0);
      $3364 = HEAP32[$3363>>2]|0;
      $3365 = (($3364) + 1)|0;
      HEAP32[$3363>>2] = $3365;
      $3366 = $0;
      $3367 = ((($3366)) + 36|0);
      HEAP32[$3367>>2] = 0;
      break;
     }
     case 554:  {
      $yyerrstatus = 0;
      break;
     }
     case 555:  {
      HEAP32[$yyval>>2] = 0;
      break;
     }
     default: {
     }
     }
    } while(0);
    $3368 = $yylen;
    $3369 = $yyvsp;
    $3370 = (0 - ($3368))|0;
    $3371 = (($3369) + ($3370<<2)|0);
    $yyvsp = $3371;
    $3372 = $yylen;
    $3373 = $yyssp;
    $3374 = (0 - ($3372))|0;
    $3375 = (($3373) + ($3374<<1)|0);
    $yyssp = $3375;
    $yylen = 0;
    $3376 = $yyvsp;
    $3377 = ((($3376)) + 4|0);
    $yyvsp = $3377;
    ;HEAP32[$3377>>2]=HEAP32[$yyval>>2]|0;
    $3378 = $yyn;
    $3379 = (49476 + ($3378<<1)|0);
    $3380 = HEAP16[$3379>>1]|0;
    $3381 = $3380&65535;
    $yyn = $3381;
    $3382 = $yyn;
    $3383 = (($3382) - 144)|0;
    $3384 = (50588 + ($3383<<1)|0);
    $3385 = HEAP16[$3384>>1]|0;
    $3386 = $3385 << 16 >> 16;
    $3387 = $yyssp;
    $3388 = HEAP16[$3387>>1]|0;
    $3389 = $3388 << 16 >> 16;
    $3390 = (($3386) + ($3389))|0;
    $yystate = $3390;
    $3391 = $yystate;
    $3392 = (0)<=($3391|0);
    $3393 = $yystate;
    $3394 = ($3393|0)<=(10639);
    $or$cond5 = $3392 & $3394;
    if ($or$cond5) {
     $3395 = $yystate;
     $3396 = (4980 + ($3395<<1)|0);
     $3397 = HEAP16[$3396>>1]|0;
     $3398 = $3397 << 16 >> 16;
     $3399 = $yyssp;
     $3400 = HEAP16[$3399>>1]|0;
     $3401 = $3400 << 16 >> 16;
     $3402 = ($3398|0)==($3401|0);
     if ($3402) {
      $3403 = $yystate;
      $3404 = (26260 + ($3403<<1)|0);
      $3405 = HEAP16[$3404>>1]|0;
      $3406 = $3405 << 16 >> 16;
      $yystate = $3406;
      break;
     }
    }
    $3407 = $yyn;
    $3408 = (($3407) - 144)|0;
    $3409 = (50910 + ($3408<<1)|0);
    $3410 = HEAP16[$3409>>1]|0;
    $3411 = $3410 << 16 >> 16;
    $yystate = $3411;
   }
   else if ((label|0) == 510) {
    label = 0;
    $3412 = $yyerrstatus;
    $3413 = ($3412|0)!=(0);
    do {
     if (!($3413)) {
      $3414 = $yynerrs;
      $3415 = (($3414) + 1)|0;
      $yynerrs = $3415;
      $3416 = $yystate;
      $3417 = $yychar;
      $3418 = (_yysyntax_error(0,$3416,$3417)|0);
      $yysize4 = $3418;
      $3419 = $yymsg_alloc;
      $3420 = $yysize4;
      $3421 = ($3419>>>0)<($3420>>>0);
      $3422 = $yymsg_alloc;
      $3423 = ($3422>>>0)<(4294967295);
      $or$cond7 = $3421 & $3423;
      do {
       if ($or$cond7) {
        $3424 = $yysize4;
        $3425 = $3424<<1;
        $yyalloc = $3425;
        $3426 = $yysize4;
        $3427 = $yyalloc;
        $3428 = ($3426>>>0)<=($3427>>>0);
        $3429 = $yyalloc;
        $3430 = ($3429>>>0)<=(4294967295);
        $or$cond9 = $3428 & $3430;
        $$12 = $or$cond9 ? $3425 : -1;
        $yyalloc = $$12;
        $3431 = $yymsg;
        $3432 = ($3431|0)!=($yymsgbuf|0);
        if ($3432) {
         $3433 = $0;
         $3434 = HEAP32[$3433>>2]|0;
         $3435 = $yymsg;
         _mrb_free($3434,$3435);
        }
        $3436 = $0;
        $3437 = HEAP32[$3436>>2]|0;
        $3438 = $yyalloc;
        $3439 = (_mrb_malloc($3437,$3438)|0);
        $yymsg = $3439;
        $3440 = $yymsg;
        $3441 = ($3440|0)!=(0|0);
        if ($3441) {
         $3442 = $yyalloc;
         $yymsg_alloc = $3442;
         break;
        } else {
         $yymsg = $yymsgbuf;
         $yymsg_alloc = 128;
         break;
        }
       }
      } while(0);
      $3443 = $yysize4;
      $3444 = (0)<($3443>>>0);
      if ($3444) {
       $3445 = $yysize4;
       $3446 = $yymsg_alloc;
       $3447 = ($3445>>>0)<=($3446>>>0);
       if ($3447) {
        $3448 = $yymsg;
        $3449 = $yystate;
        $3450 = $yychar;
        (_yysyntax_error($3448,$3449,$3450)|0);
        $3451 = $0;
        $3452 = $yymsg;
        _yyerror($3451,$3452);
        break;
       }
      }
      $3453 = $0;
      _yyerror($3453,62760);
      $3454 = $yysize4;
      $3455 = ($3454|0)!=(0);
      if ($3455) {
       label = 535;
       break L1;
      }
     }
    } while(0);
    $3456 = $yyerrstatus;
    $3457 = ($3456|0)==(3);
    do {
     if ($3457) {
      $3458 = $yychar;
      $3459 = ($3458|0)<=(0);
      if ($3459) {
       $3460 = $yychar;
       $3461 = ($3460|0)==(0);
       if ($3461) {
        label = 534;
        break L1;
       } else {
        break;
       }
      } else {
       $3462 = $yytoken;
       $3463 = $0;
       _yydestruct(62773,$3462,$yylval,$3463);
       $yychar = -2;
       break;
      }
     }
    } while(0);
    $yyerrstatus = 3;
    while(1) {
     $3464 = $yystate;
     $3465 = (3044 + ($3464<<1)|0);
     $3466 = HEAP16[$3465>>1]|0;
     $3467 = $3466 << 16 >> 16;
     $yyn = $3467;
     $3468 = $yyn;
     $3469 = ($3468|0)!=(-771);
     if ($3469) {
      $3470 = $yyn;
      $3471 = (($3470) + 1)|0;
      $yyn = $3471;
      $3472 = $yyn;
      $3473 = (0)<=($3472|0);
      $3474 = $yyn;
      $3475 = ($3474|0)<=(10639);
      $or$cond11 = $3473 & $3475;
      if ($or$cond11) {
       $3476 = $yyn;
       $3477 = (4980 + ($3476<<1)|0);
       $3478 = HEAP16[$3477>>1]|0;
       $3479 = $3478 << 16 >> 16;
       $3480 = ($3479|0)==(1);
       if ($3480) {
        $3481 = $yyn;
        $3482 = (26260 + ($3481<<1)|0);
        $3483 = HEAP16[$3482>>1]|0;
        $3484 = $3483 << 16 >> 16;
        $yyn = $3484;
        $3485 = $yyn;
        $3486 = (0)<($3485|0);
        if ($3486) {
         break;
        }
       }
      }
     }
     $3487 = $yyssp;
     $3488 = $yyss;
     $3489 = ($3487|0)==($3488|0);
     if ($3489) {
      label = 534;
      break L1;
     }
     $3490 = $yystate;
     $3491 = (51232 + ($3490<<1)|0);
     $3492 = HEAP16[$3491>>1]|0;
     $3493 = $3492&65535;
     $3494 = $yyvsp;
     $3495 = $0;
     _yydestruct(62800,$3493,$3494,$3495);
     $3496 = $yyvsp;
     $3497 = ((($3496)) + -4|0);
     $yyvsp = $3497;
     $3498 = $yyssp;
     $3499 = ((($3498)) + -2|0);
     $yyssp = $3499;
     $3500 = $yyssp;
     $3501 = HEAP16[$3500>>1]|0;
     $3502 = $3501 << 16 >> 16;
     $yystate = $3502;
    }
    $3503 = $yyvsp;
    $3504 = ((($3503)) + 4|0);
    $yyvsp = $3504;
    ;HEAP32[$3504>>2]=HEAP32[$yylval>>2]|0;
    $3505 = $yyn;
    $yystate = $3505;
   }
  } while(0);
  $3 = $yyssp;
  $4 = ((($3)) + 2|0);
  $yyssp = $4;
 }
 if ((label|0) == 533) {
  $yyresult = 0;
 }
 else if ((label|0) == 534) {
  $yyresult = 1;
 }
 else if ((label|0) == 535) {
  $3506 = $0;
  _yyerror($3506,62815);
  $yyresult = 2;
 }
 $3507 = $yychar;
 $3508 = ($3507|0)!=(-2);
 if ($3508) {
  $3509 = $yytoken;
  $3510 = $0;
  _yydestruct(62832,$3509,$yylval,$3510);
 }
 $3511 = $yylen;
 $3512 = $yyvsp;
 $3513 = (0 - ($3511))|0;
 $3514 = (($3512) + ($3513<<2)|0);
 $yyvsp = $3514;
 $3515 = $yylen;
 $3516 = $yyssp;
 $3517 = (0 - ($3515))|0;
 $3518 = (($3516) + ($3517<<1)|0);
 $yyssp = $3518;
 while(1) {
  $3519 = $yyssp;
  $3520 = $yyss;
  $3521 = ($3519|0)!=($3520|0);
  if (!($3521)) {
   break;
  }
  $3522 = $yyssp;
  $3523 = HEAP16[$3522>>1]|0;
  $3524 = $3523 << 16 >> 16;
  $3525 = (51232 + ($3524<<1)|0);
  $3526 = HEAP16[$3525>>1]|0;
  $3527 = $3526&65535;
  $3528 = $yyvsp;
  $3529 = $0;
  _yydestruct(62862,$3527,$3528,$3529);
  $3530 = $yyvsp;
  $3531 = ((($3530)) + -4|0);
  $yyvsp = $3531;
  $3532 = $yyssp;
  $3533 = ((($3532)) + -2|0);
  $yyssp = $3533;
 }
 $3534 = $yyss;
 $3535 = ($3534|0)!=($yyssa|0);
 if ($3535) {
  $3536 = $0;
  $3537 = HEAP32[$3536>>2]|0;
  $3538 = $yyss;
  _mrb_free($3537,$3538);
 }
 $3539 = $yymsg;
 $3540 = ($3539|0)!=($yymsgbuf|0);
 if (!($3540)) {
  $3544 = $yyresult;
  STACKTOP = sp;return ($3544|0);
 }
 $3541 = $0;
 $3542 = HEAP32[$3541>>2]|0;
 $3543 = $yymsg;
 _mrb_free($3542,$3543);
 $3544 = $yyresult;
 STACKTOP = sp;return ($3544|0);
}
function _yylex($lval,$p) {
 $lval = $lval|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lval;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 1132|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = (_parser_yylex($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _parser_yylex($p) {
 $p = $p|0;
 var $$old = 0, $$old1 = 0, $$old10 = 0, $$old102 = 0, $$old103 = 0, $$old105 = 0, $$old106 = 0, $$old11 = 0, $$old111 = 0, $$old112 = 0, $$old114 = 0, $$old115 = 0, $$old19 = 0, $$old2 = 0, $$old20 = 0, $$old22 = 0, $$old23 = 0, $$old27 = 0, $$old28 = 0, $$old3 = 0;
 var $$old30 = 0, $$old31 = 0, $$old35 = 0, $$old36 = 0, $$old38 = 0, $$old39 = 0, $$old88 = 0, $$old89 = 0, $$old94 = 0, $$old95 = 0, $$old97 = 0, $$old98 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0.0, $1012 = 0.0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
 var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
 var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
 var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
 var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
 var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
 var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
 var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
 var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
 var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
 var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
 var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
 var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
 var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
 var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
 var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
 var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
 var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
 var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
 var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
 var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
 var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
 var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
 var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
 var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
 var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0;
 var $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0;
 var $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0;
 var $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0;
 var $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0;
 var $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0;
 var $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0;
 var $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0;
 var $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0;
 var $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0;
 var $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0;
 var $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0;
 var $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0;
 var $2012 = 0, $2013 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $buf = 0, $c = 0, $c0 = 0, $c2 = 0, $c21 = 0, $cmd_state = 0, $d = 0.0, $endp = 0, $ident = 0, $is_float = 0, $kw = 0, $last_state = 0, $n = 0, $nondigit = 0;
 var $or$cond = 0, $or$cond$not = 0, $or$cond101 = 0, $or$cond104 = 0, $or$cond107 = 0, $or$cond110 = 0, $or$cond113 = 0, $or$cond113$not = 0, $or$cond116 = 0, $or$cond118 = 0, $or$cond12 = 0, $or$cond121 = 0, $or$cond121$not = 0, $or$cond124 = 0, $or$cond127 = 0, $or$cond127$not = 0, $or$cond130 = 0, $or$cond133 = 0, $or$cond133$not = 0, $or$cond136 = 0;
 var $or$cond139 = 0, $or$cond139$not = 0, $or$cond142 = 0, $or$cond145 = 0, $or$cond15 = 0, $or$cond150 = 0, $or$cond153 = 0, $or$cond156 = 0, $or$cond159 = 0, $or$cond162 = 0, $or$cond165 = 0, $or$cond168 = 0, $or$cond18 = 0, $or$cond21 = 0, $or$cond21$not = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond29 = 0, $or$cond29$not = 0, $or$cond32 = 0;
 var $or$cond34 = 0, $or$cond37 = 0, $or$cond37$not = 0, $or$cond4 = 0, $or$cond40 = 0, $or$cond42 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond51 = 0, $or$cond54 = 0, $or$cond57 = 0, $or$cond6 = 0, $or$cond60 = 0, $or$cond63 = 0, $or$cond66 = 0, $or$cond69 = 0, $or$cond72 = 0, $or$cond75 = 0, $or$cond78 = 0, $or$cond81 = 0;
 var $or$cond84 = 0, $or$cond87 = 0, $or$cond9 = 0, $or$cond90 = 0, $or$cond93 = 0, $or$cond96 = 0, $or$cond96$not = 0, $or$cond99 = 0, $paren = 0, $result = 0, $seen_e = 0, $seen_point = 0, $space_seen = 0, $start = 0, $state = 0, $term = 0, $token = 0, $token_column = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $buf = sp + 112|0;
 $endp = sp + 40|0;
 $1 = $p;
 $space_seen = 0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  $11 = $10 & 64;
  $12 = ($11|0)!=(0);
  $13 = $1;
  if (!($12)) {
   $19 = (_parse_string($13)|0);
   $0 = $19;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
  }
  $14 = ((($13)) + 1120|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $1;
   $18 = (_parse_string($17)|0);
   $0 = $18;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 72|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 1;
 $24 = $23&255;
 $cmd_state = $24;
 $25 = $1;
 $26 = ((($25)) + 72|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 & -2;
 HEAP8[$26>>0] = $28;
 L10: while(1) {
  $29 = $1;
  $30 = ((($29)) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  $last_state = $31;
  $32 = $1;
  $33 = (_nextc($32)|0);
  $c = $33;
  switch ($33|0) {
  case 42:  {
   label = 25;
   break L10;
   break;
  }
  case 33:  {
   label = 47;
   break L10;
   break;
  }
  case 60:  {
   label = 82;
   break L10;
   break;
  }
  case 62:  {
   label = 107;
   break L10;
   break;
  }
  case 34:  {
   label = 118;
   break L10;
   break;
  }
  case 39:  {
   label = 119;
   break L10;
   break;
  }
  case 96:  {
   label = 120;
   break L10;
   break;
  }
  case 63:  {
   label = 128;
   break L10;
   break;
  }
  case 38:  {
   label = 155;
   break L10;
   break;
  }
  case 124:  {
   label = 177;
   break L10;
   break;
  }
  case 43:  {
   label = 188;
   break L10;
   break;
  }
  case 45:  {
   label = 209;
   break L10;
   break;
  }
  case 46:  {
   label = 232;
   break L10;
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
   label = 240;
   break L10;
   break;
  }
  case 93: case 41:  {
   label = 332;
   break L10;
   break;
  }
  case 125:  {
   label = 333;
   break L10;
   break;
  }
  case 58:  {
   label = 337;
   break L10;
   break;
  }
  case 47:  {
   label = 354;
   break L10;
   break;
  }
  case 94:  {
   label = 371;
   break L10;
   break;
  }
  case 59:  {
   label = 378;
   break L10;
   break;
  }
  case 44:  {
   label = 379;
   break L10;
   break;
  }
  case 126:  {
   label = 380;
   break L10;
   break;
  }
  case 40:  {
   label = 387;
   break L10;
   break;
  }
  case 91:  {
   label = 397;
   break L10;
   break;
  }
  case 123:  {
   label = 414;
   break L10;
   break;
  }
  case 37:  {
   label = 429;
   break L10;
   break;
  }
  case 36:  {
   label = 473;
   break L10;
   break;
  }
  case 64:  {
   label = 497;
   break L10;
   break;
  }
  case 95:  {
   label = 512;
   break L10;
   break;
  }
  case -1: case 0: case 26: case 4:  {
   $34 = $1;
   $35 = ((($34)) + 1116|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if (!($37)) {
    label = 9;
    break L10;
   }
   break;
  }
  case 11: case 13: case 12: case 9: case 32:  {
   $space_seen = 1;
   continue L10;
   break;
  }
  case 35:  {
   $38 = $1;
   _skip($38,10);
   break;
  }
  case 10: case -2:  {
   break;
  }
  case 61:  {
   $173 = $1;
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)==(1);
   if (!($176)) {
    label = 69;
    break L10;
   }
   $177 = $1;
   $178 = (_peeks($177,68915)|0);
   $179 = ($178<<24>>24)!=(0);
   if (!($179)) {
    label = 69;
    break L10;
   }
   $180 = $1;
   $181 = (_peekc_n($180,5)|0);
   $c = $181;
   $182 = $c;
   $183 = ($182|0)<(0);
   $184 = $c;
   $185 = ($184|0)==(32);
   $or$cond9 = $183 | $185;
   if (!($or$cond9)) {
    $186 = $c;
    $187 = (($186) - 9)|0;
    $188 = ($187>>>0)<(5);
    if (!($188)) {
     label = 69;
     break L10;
    }
   }
   while(1) {
    $189 = $1;
    $190 = (_skips($189,57125)|0);
    $191 = ($190<<24>>24)!=(0);
    $192 = $1;
    if (!($191)) {
     label = 62;
     break L10;
    }
    $193 = (_nextc($192)|0);
    $c = $193;
    $194 = $c;
    $195 = ($194|0)<(0);
    $196 = $c;
    $197 = ($196|0)==(32);
    $or$cond168 = $195 | $197;
    if ($or$cond168) {
     $202 = 1;
    } else {
     $198 = $c;
     $199 = (($198) - 9)|0;
     $200 = ($199>>>0)<(5);
     $202 = $200;
    }
    $201 = $202 ^ 1;
    if (!($201)) {
     break;
    }
   }
   $203 = $c;
   $204 = ($203|0)!=(10);
   if ($204) {
    $205 = $1;
    _skip($205,10);
   }
   $206 = $1;
   $207 = ((($206)) + 32|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = (($208) + 1)|0;
   HEAP32[$207>>2] = $209;
   $210 = $1;
   $211 = ((($210)) + 36|0);
   HEAP32[$211>>2] = 0;
   continue L10;
   break;
  }
  case 92:  {
   $1414 = $1;
   $1415 = (_nextc($1414)|0);
   $c = $1415;
   $1416 = $c;
   $1417 = ($1416|0)==(10);
   $1418 = $1;
   if (!($1417)) {
    label = 428;
    break L10;
   }
   $1419 = ((($1418)) + 32|0);
   $1420 = HEAP32[$1419>>2]|0;
   $1421 = (($1420) + 1)|0;
   HEAP32[$1419>>2] = $1421;
   $1422 = $1;
   $1423 = ((($1422)) + 36|0);
   HEAP32[$1423>>2] = 0;
   $space_seen = 1;
   continue L10;
   break;
  }
  default: {
   $1715 = $c;
   $1716 = $1715 | 32;
   $1717 = (($1716) - 97)|0;
   $1718 = ($1717>>>0)<(26);
   if ($1718) {
    label = 516;
    break L10;
   }
   $1719 = $c;
   $1720 = (($1719) - 48)|0;
   $1721 = ($1720>>>0)<(10);
   $1722 = $c;
   $1723 = ($1722|0)==(95);
   $or$cond139 = $1721 | $1723;
   $or$cond139$not = $or$cond139 ^ 1;
   $1724 = $c;
   $1725 = ($1724>>>0)<=(127);
   $or$cond142 = $or$cond139$not & $1725;
   if (!($or$cond142)) {
    label = 516;
    break L10;
   }
   $1726 = $1;
   $1727 = $c;
   _yyerror_i($1726,57851,$1727);
   continue L10;
  }
  }
  $39 = $1;
  _heredoc_treat_nextline($39);
  $40 = $1;
  $41 = ((($40)) + 40|0);
  $42 = HEAP32[$41>>2]|0;
  switch ($42|0) {
  case 10: case 9: case 8: case 7: case 0:  {
   $43 = $1;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$44>>2] = $46;
   $47 = $1;
   $48 = ((($47)) + 36|0);
   HEAP32[$48>>2] = 0;
   $49 = $1;
   $50 = ((($49)) + 1120|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(0|0);
   if (!($52)) {
    continue L10;
   }
   $53 = $1;
   $54 = ((($53)) + 44|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0|0);
   if ($56) {
    label = 15;
    break L10;
   } else {
    continue L10;
   }
   break;
  }
  default: {
  }
  }
  $59 = $1;
  $60 = ((($59)) + 1120|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   label = 17;
   break;
  }
  L41: while(1) {
   $63 = $1;
   $64 = (_nextc($63)|0);
   $c = $64;
   $65 = ($64|0)!=(0);
   if (!($65)) {
    label = 24;
    break L10;
   }
   $66 = $c;
   switch ($66|0) {
   case -2: case -1:  {
    label = 24;
    break L10;
    break;
   }
   case 46:  {
    break L41;
    break;
   }
   case 11: case 13: case 12: case 9: case 32:  {
    break;
   }
   default: {
    label = 23;
    break L10;
   }
   }
   $space_seen = 1;
  }
  $67 = $1;
  $68 = (_nextc($67)|0);
  $c = $68;
  $69 = ($68|0)!=(46);
  if (!($69)) {
   label = 24;
   break;
  }
  $70 = $1;
  $71 = $c;
  _pushback($70,$71);
  $72 = $1;
  _pushback($72,46);
 }
 L47:  switch (label|0) {
  case 9: {
   $0 = 0;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 15: {
   $57 = $1;
   $58 = (_parse_string($57)|0);
   $0 = $58;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 17: {
   $0 = 10;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 23: {
   $73 = $1;
   $74 = $c;
   _pushback($73,$74);
   label = 24;
   break;
  }
  case 25: {
   $82 = $1;
   $83 = (_nextc($82)|0);
   $c = $83;
   $84 = ($83|0)==(42);
   do {
    if ($84) {
     $85 = $1;
     $86 = (_nextc($85)|0);
     $c = $86;
     $87 = ($86|0)==(61);
     $88 = $1;
     if (!($87)) {
      $95 = $c;
      _pushback($88,$95);
      $c = 326;
      break;
     }
     $89 = (_intern_gen($88,57087,2)|0);
     $90 = $1;
     $91 = ((($90)) + 1132|0);
     $92 = HEAP32[$91>>2]|0;
     HEAP32[$92>>2] = $89;
     $93 = $1;
     $94 = ((($93)) + 40|0);
     HEAP32[$94>>2] = 0;
     $0 = 345;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $96 = $c;
     $97 = ($96|0)==(61);
     $98 = $1;
     if ($97) {
      $99 = (_intern_gen_c($98,42)|0);
      $100 = $1;
      $101 = ((($100)) + 1132|0);
      $102 = HEAP32[$101>>2]|0;
      HEAP32[$102>>2] = $99;
      $103 = $1;
      $104 = ((($103)) + 40|0);
      HEAP32[$104>>2] = 0;
      $0 = 345;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $105 = $c;
     _pushback($98,$105);
     $106 = $1;
     $107 = ((($106)) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==(4);
     if ($109) {
      $$old = $space_seen;
      $$old1 = ($$old|0)==(0);
      $$old2 = $c;
      $$old3 = ($$old2|0)==(32);
      $or$cond6 = $$old1 | $$old3;
      if (!($or$cond6)) {
       label = 34;
      }
     } else {
      $110 = $1;
      $111 = ((($110)) + 40|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)==(5);
      $114 = $space_seen;
      $115 = ($114|0)!=(0);
      $or$cond = $113 & $115;
      $or$cond$not = $or$cond ^ 1;
      $116 = $c;
      $117 = ($116|0)==(32);
      $or$cond4 = $or$cond$not | $117;
      if (!($or$cond4)) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $118 = $c;
      $119 = (($118) - 9)|0;
      $120 = ($119>>>0)<(5);
      if (!($120)) {
       $121 = $1;
       _yywarning($121,57090);
       $c = 353;
       break;
      }
     }
     $122 = $1;
     $123 = ((($122)) + 40|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)==(0);
     if (!($125)) {
      $126 = $1;
      $127 = ((($126)) + 40|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ($128|0)==(6);
      if (!($129)) {
       $130 = $1;
       $131 = ((($130)) + 40|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(10);
       if (!($133)) {
        $134 = $1;
        $135 = ((($134)) + 40|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(9);
        if (!($137)) {
         $c = 42;
         break;
        }
       }
      }
     }
     $c = 353;
    }
   } while(0);
   $138 = $1;
   $139 = ((($138)) + 40|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)==(7);
   if ($141) {
    label = 44;
   } else {
    $142 = $1;
    $143 = ((($142)) + 40|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==(8);
    if ($145) {
     label = 44;
    } else {
     $148 = $1;
     $149 = ((($148)) + 40|0);
     HEAP32[$149>>2] = 0;
    }
   }
   if ((label|0) == 44) {
    $146 = $1;
    $147 = ((($146)) + 40|0);
    HEAP32[$147>>2] = 4;
   }
   $150 = $c;
   $0 = $150;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 47: {
   $151 = $1;
   $152 = (_nextc($151)|0);
   $c = $152;
   $153 = $1;
   $154 = ((($153)) + 40|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($155|0)==(7);
   if ($156) {
    label = 49;
   } else {
    $157 = $1;
    $158 = ((($157)) + 40|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(8);
    if ($160) {
     label = 49;
    } else {
     $165 = $1;
     $166 = ((($165)) + 40|0);
     HEAP32[$166>>2] = 0;
    }
   }
   if ((label|0) == 49) {
    $161 = $1;
    $162 = ((($161)) + 40|0);
    HEAP32[$162>>2] = 4;
    $163 = $c;
    $164 = ($163|0)==(64);
    if ($164) {
     $0 = 33;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $167 = $c;
   $168 = ($167|0)==(61);
   if ($168) {
    $0 = 330;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $169 = $c;
   $170 = ($169|0)==(126);
   if ($170) {
    $0 = 336;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $171 = $1;
    $172 = $c;
    _pushback($171,$172);
    $0 = 33;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 62: {
   _yyerror($192,57131);
   $0 = 0;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 69: {
   $212 = $1;
   $213 = ((($212)) + 40|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)==(7);
   if ($215) {
    label = 71;
   } else {
    $216 = $1;
    $217 = ((($216)) + 40|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)==(8);
    if ($219) {
     label = 71;
    } else {
     $222 = $1;
     $223 = ((($222)) + 40|0);
     HEAP32[$223>>2] = 0;
    }
   }
   if ((label|0) == 71) {
    $220 = $1;
    $221 = ((($220)) + 40|0);
    HEAP32[$221>>2] = 4;
   }
   $224 = $1;
   $225 = (_nextc($224)|0);
   $c = $225;
   $226 = ($225|0)==(61);
   if ($226) {
    $227 = $1;
    $228 = (_nextc($227)|0);
    $c = $228;
    $229 = ($228|0)==(61);
    if ($229) {
     $0 = 329;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $230 = $1;
     $231 = $c;
     _pushback($230,$231);
     $0 = 328;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $232 = $c;
   $233 = ($232|0)==(126);
   if ($233) {
    $0 = 335;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $234 = $c;
   $235 = ($234|0)==(62);
   if ($235) {
    $0 = 346;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $236 = $1;
    $237 = $c;
    _pushback($236,$237);
    $0 = 61;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 82: {
   $238 = $1;
   $239 = (_nextc($238)|0);
   $c = $239;
   $240 = $c;
   $241 = ($240|0)==(60);
   do {
    if ($241) {
     $242 = $1;
     $243 = ((($242)) + 40|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ($244|0)!=(8);
     if ($245) {
      $246 = $1;
      $247 = ((($246)) + 40|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($248|0)!=(9);
      if ($249) {
       $250 = $1;
       $251 = ((($250)) + 40|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = ($252|0)==(1);
       if (!($253)) {
        $254 = $1;
        $255 = ((($254)) + 40|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ($256|0)==(2);
        if (!($257)) {
         $258 = $1;
         $259 = ((($258)) + 40|0);
         $260 = HEAP32[$259>>2]|0;
         $261 = ($260|0)==(3);
         if (!($261)) {
          $262 = $1;
          $263 = ((($262)) + 40|0);
          $264 = HEAP32[$263>>2]|0;
          $265 = ($264|0)==(4);
          if ($265) {
           $$old10 = $space_seen;
           $$old11 = ($$old10|0)!=(0);
           if (!($$old11)) {
            break;
           }
          } else {
           $266 = $1;
           $267 = ((($266)) + 40|0);
           $268 = HEAP32[$267>>2]|0;
           $269 = ($268|0)!=(5);
           $270 = $space_seen;
           $271 = ($270|0)!=(0);
           $or$cond12 = $269 | $271;
           if (!($or$cond12)) {
            break;
           }
          }
          $272 = $1;
          $273 = (_heredoc_identifier($272)|0);
          $token = $273;
          $274 = $token;
          $275 = ($274|0)!=(0);
          if ($275) {
           $276 = $token;
           $0 = $276;
           $2013 = $0;
           STACKTOP = sp;return ($2013|0);
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $277 = $1;
   $278 = ((($277)) + 40|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = ($279|0)==(7);
   if ($280) {
    label = 95;
   } else {
    $281 = $1;
    $282 = ((($281)) + 40|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ($283|0)==(8);
    if ($284) {
     label = 95;
    } else {
     $287 = $1;
     $288 = ((($287)) + 40|0);
     HEAP32[$288>>2] = 0;
     $289 = $1;
     $290 = ((($289)) + 40|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($291|0)==(9);
     if ($292) {
      $293 = $1;
      $294 = ((($293)) + 72|0);
      $295 = HEAP8[$294>>0]|0;
      $296 = $295 & -2;
      $297 = $296 | 1;
      HEAP8[$294>>0] = $297;
     }
    }
   }
   if ((label|0) == 95) {
    $285 = $1;
    $286 = ((($285)) + 40|0);
    HEAP32[$286>>2] = 4;
   }
   $298 = $c;
   $299 = ($298|0)==(61);
   if ($299) {
    $300 = $1;
    $301 = (_nextc($300)|0);
    $c = $301;
    $302 = ($301|0)==(62);
    if ($302) {
     $0 = 327;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $303 = $1;
     $304 = $c;
     _pushback($303,$304);
     $0 = 332;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $305 = $c;
   $306 = ($305|0)==(60);
   $307 = $1;
   if (!($306)) {
    $318 = $c;
    _pushback($307,$318);
    $0 = 60;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $308 = (_nextc($307)|0);
   $c = $308;
   $309 = ($308|0)==(61);
   $310 = $1;
   if ($309) {
    $311 = (_intern_gen($310,64339,2)|0);
    $312 = $1;
    $313 = ((($312)) + 1132|0);
    $314 = HEAP32[$313>>2]|0;
    HEAP32[$314>>2] = $311;
    $315 = $1;
    $316 = ((($315)) + 40|0);
    HEAP32[$316>>2] = 0;
    $0 = 345;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $317 = $c;
    _pushback($310,$317);
    $0 = 341;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 107: {
   $319 = $1;
   $320 = ((($319)) + 40|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ($321|0)==(7);
   if ($322) {
    label = 109;
   } else {
    $323 = $1;
    $324 = ((($323)) + 40|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)==(8);
    if ($326) {
     label = 109;
    } else {
     $329 = $1;
     $330 = ((($329)) + 40|0);
     HEAP32[$330>>2] = 0;
    }
   }
   if ((label|0) == 109) {
    $327 = $1;
    $328 = ((($327)) + 40|0);
    HEAP32[$328>>2] = 4;
   }
   $331 = $1;
   $332 = (_nextc($331)|0);
   $c = $332;
   $333 = ($332|0)==(61);
   if ($333) {
    $0 = 331;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $334 = $c;
   $335 = ($334|0)==(62);
   $336 = $1;
   if (!($335)) {
    $347 = $c;
    _pushback($336,$347);
    $0 = 62;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $337 = (_nextc($336)|0);
   $c = $337;
   $338 = ($337|0)==(61);
   $339 = $1;
   if ($338) {
    $340 = (_intern_gen($339,57205,2)|0);
    $341 = $1;
    $342 = ((($341)) + 1132|0);
    $343 = HEAP32[$342>>2]|0;
    HEAP32[$343>>2] = $340;
    $344 = $1;
    $345 = ((($344)) + 40|0);
    HEAP32[$345>>2] = 0;
    $0 = 345;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $346 = $c;
    _pushback($339,$346);
    $0 = 342;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 118: {
   $348 = $1;
   $349 = (_new_strterm($348,3,34,0)|0);
   $350 = $1;
   $351 = ((($350)) + 44|0);
   HEAP32[$351>>2] = $349;
   $0 = 360;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 119: {
   $352 = $1;
   $353 = (_new_strterm($352,1,39,0)|0);
   $354 = $1;
   $355 = ((($354)) + 44|0);
   HEAP32[$355>>2] = $353;
   $356 = $1;
   $357 = (_parse_string($356)|0);
   $0 = $357;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 120: {
   $358 = $1;
   $359 = ((($358)) + 40|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ($360|0)==(7);
   $362 = $1;
   $363 = ((($362)) + 40|0);
   if ($361) {
    HEAP32[$363>>2] = 3;
    $0 = 96;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $364 = HEAP32[$363>>2]|0;
   $365 = ($364|0)==(8);
   if (!($365)) {
    $370 = $1;
    $371 = (_new_strterm($370,131,96,0)|0);
    $372 = $1;
    $373 = ((($372)) + 44|0);
    HEAP32[$373>>2] = $371;
    $0 = 361;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $366 = $cmd_state;
   $367 = ($366|0)!=(0);
   $368 = $1;
   $369 = ((($368)) + 40|0);
   if ($367) {
    HEAP32[$369>>2] = 5;
   } else {
    HEAP32[$369>>2] = 4;
   }
   $0 = 96;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 128: {
   $374 = $1;
   $375 = ((($374)) + 40|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ($376|0)==(1);
   if (!($377)) {
    $378 = $1;
    $379 = ((($378)) + 40|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ($380|0)==(2);
    if (!($381)) {
     $382 = $1;
     $383 = ((($382)) + 40|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = ($384|0)==(3);
     if (!($385)) {
      $388 = $1;
      $389 = (_nextc($388)|0);
      $c = $389;
      $390 = $c;
      $391 = ($390|0)<(0);
      if ($391) {
       $392 = $1;
       _yyerror($392,57208);
       $0 = 0;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
      $393 = $c;
      $394 = ($393|0)==(32);
      do {
       if ($394) {
        label = 136;
       } else {
        $395 = $c;
        $396 = (($395) - 9)|0;
        $397 = ($396>>>0)<(5);
        if ($397) {
         label = 136;
        } else {
         $415 = $1;
         (_newtok($415)|0);
         $416 = $c;
         $417 = (_isalnum($416)|0);
         $418 = ($417|0)!=(0);
         $419 = $c;
         $420 = ($419|0)==(95);
         $or$cond15 = $418 | $420;
         if ($or$cond15) {
          $421 = $1;
          $422 = (_nextc($421)|0);
          $c21 = $422;
          $423 = $1;
          $424 = $c21;
          _pushback($423,$424);
          $425 = $c21;
          $426 = (_isalnum($425)|0);
          $427 = ($426|0)!=(0);
          $428 = $c21;
          $429 = ($428|0)==(95);
          $or$cond18 = $427 | $429;
          if ($or$cond18) {
           break;
          }
         }
         $430 = $c;
         $431 = ($430|0)==(92);
         $432 = $1;
         if ($431) {
          $433 = (_read_escape($432)|0);
          $c = $433;
          $434 = $1;
          $435 = $c;
          _tokadd($434,$435);
         } else {
          $436 = $c;
          _tokadd($432,$436);
         }
         $437 = $1;
         _tokfix($437);
         $438 = $1;
         $439 = $1;
         $440 = (_tok($439)|0);
         $441 = $1;
         $442 = (_toklen($441)|0);
         $443 = (_new_str($438,$440,$442)|0);
         $444 = $1;
         $445 = ((($444)) + 1132|0);
         $446 = HEAP32[$445>>2]|0;
         HEAP32[$446>>2] = $443;
         $447 = $1;
         $448 = ((($447)) + 40|0);
         HEAP32[$448>>2] = 1;
         $0 = 315;
         $2013 = $0;
         STACKTOP = sp;return ($2013|0);
        }
       }
      } while(0);
      if ((label|0) == 136) {
       $398 = $1;
       $399 = ((($398)) + 40|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = ($400|0)==(4);
       if (!($401)) {
        $402 = $1;
        $403 = ((($402)) + 40|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = ($404|0)==(5);
        if (!($405)) {
         $406 = $c;
         switch ($406|0) {
         case 32:  {
          $c2 = 115;
          break;
         }
         case 10:  {
          $c2 = 110;
          break;
         }
         case 9:  {
          $c2 = 116;
          break;
         }
         case 11:  {
          $c2 = 118;
          break;
         }
         case 13:  {
          $c2 = 114;
          break;
         }
         case 12:  {
          $c2 = 102;
          break;
         }
         default: {
          $c2 = 0;
         }
         }
         $407 = $c2;
         $408 = ($407|0)!=(0);
         if ($408) {
          $409 = $c2;
          HEAP32[$vararg_buffer>>2] = $409;
          (_snprintf($buf,256,57236,$vararg_buffer)|0);
          $410 = $1;
          _yyerror($410,$buf);
         }
        }
       }
      }
      $411 = $1;
      $412 = $c;
      _pushback($411,$412);
      $413 = $1;
      $414 = ((($413)) + 40|0);
      HEAP32[$414>>2] = 10;
      $0 = 63;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
    }
   }
   $386 = $1;
   $387 = ((($386)) + 40|0);
   HEAP32[$387>>2] = 10;
   $0 = 63;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 155: {
   $449 = $1;
   $450 = (_nextc($449)|0);
   $c = $450;
   $451 = ($450|0)==(38);
   if ($451) {
    $452 = $1;
    $453 = ((($452)) + 40|0);
    HEAP32[$453>>2] = 0;
    $454 = $1;
    $455 = (_nextc($454)|0);
    $c = $455;
    $456 = ($455|0)==(61);
    $457 = $1;
    if ($456) {
     $458 = (_intern_gen($457,57271,2)|0);
     $459 = $1;
     $460 = ((($459)) + 1132|0);
     $461 = HEAP32[$460>>2]|0;
     HEAP32[$461>>2] = $458;
     $462 = $1;
     $463 = ((($462)) + 40|0);
     HEAP32[$463>>2] = 0;
     $0 = 345;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $464 = $c;
     _pushback($457,$464);
     $0 = 333;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $465 = $c;
   $466 = ($465|0)==(61);
   $467 = $1;
   if ($466) {
    $468 = (_intern_gen_c($467,38)|0);
    $469 = $1;
    $470 = ((($469)) + 1132|0);
    $471 = HEAP32[$470>>2]|0;
    HEAP32[$471>>2] = $468;
    $472 = $1;
    $473 = ((($472)) + 40|0);
    HEAP32[$473>>2] = 0;
    $0 = 345;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $474 = $c;
   _pushback($467,$474);
   $475 = $1;
   $476 = ((($475)) + 40|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = ($477|0)==(4);
   if ($478) {
    $$old19 = $space_seen;
    $$old20 = ($$old19|0)==(0);
    $$old22 = $c;
    $$old23 = ($$old22|0)==(32);
    $or$cond26 = $$old20 | $$old23;
    if ($or$cond26) {
     label = 166;
    } else {
     label = 164;
    }
   } else {
    $479 = $1;
    $480 = ((($479)) + 40|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = ($481|0)==(5);
    $483 = $space_seen;
    $484 = ($483|0)!=(0);
    $or$cond21 = $482 & $484;
    $or$cond21$not = $or$cond21 ^ 1;
    $485 = $c;
    $486 = ($485|0)==(32);
    $or$cond24 = $or$cond21$not | $486;
    if ($or$cond24) {
     label = 166;
    } else {
     label = 164;
    }
   }
   if ((label|0) == 164) {
    $487 = $c;
    $488 = (($487) - 9)|0;
    $489 = ($488>>>0)<(5);
    if ($489) {
     label = 166;
    } else {
     $490 = $1;
     _yywarning($490,57274);
     $c = 354;
    }
   }
   do {
    if ((label|0) == 166) {
     $491 = $1;
     $492 = ((($491)) + 40|0);
     $493 = HEAP32[$492>>2]|0;
     $494 = ($493|0)==(0);
     if (!($494)) {
      $495 = $1;
      $496 = ((($495)) + 40|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = ($497|0)==(6);
      if (!($498)) {
       $499 = $1;
       $500 = ((($499)) + 40|0);
       $501 = HEAP32[$500>>2]|0;
       $502 = ($501|0)==(10);
       if (!($502)) {
        $503 = $1;
        $504 = ((($503)) + 40|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($505|0)==(9);
        if (!($506)) {
         $c = 38;
         break;
        }
       }
      }
     }
     $c = 354;
    }
   } while(0);
   $507 = $1;
   $508 = ((($507)) + 40|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = ($509|0)==(7);
   if ($510) {
    label = 174;
   } else {
    $511 = $1;
    $512 = ((($511)) + 40|0);
    $513 = HEAP32[$512>>2]|0;
    $514 = ($513|0)==(8);
    if ($514) {
     label = 174;
    } else {
     $517 = $1;
     $518 = ((($517)) + 40|0);
     HEAP32[$518>>2] = 0;
    }
   }
   if ((label|0) == 174) {
    $515 = $1;
    $516 = ((($515)) + 40|0);
    HEAP32[$516>>2] = 4;
   }
   $519 = $c;
   $0 = $519;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 177: {
   $520 = $1;
   $521 = (_nextc($520)|0);
   $c = $521;
   $522 = ($521|0)==(124);
   if ($522) {
    $523 = $1;
    $524 = ((($523)) + 40|0);
    HEAP32[$524>>2] = 0;
    $525 = $1;
    $526 = (_nextc($525)|0);
    $c = $526;
    $527 = ($526|0)==(61);
    $528 = $1;
    if ($527) {
     $529 = (_intern_gen($528,57309,2)|0);
     $530 = $1;
     $531 = ((($530)) + 1132|0);
     $532 = HEAP32[$531>>2]|0;
     HEAP32[$532>>2] = $529;
     $533 = $1;
     $534 = ((($533)) + 40|0);
     HEAP32[$534>>2] = 0;
     $0 = 345;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $535 = $c;
     _pushback($528,$535);
     $0 = 334;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $536 = $c;
   $537 = ($536|0)==(61);
   $538 = $1;
   if ($537) {
    $539 = (_intern_gen_c($538,124)|0);
    $540 = $1;
    $541 = ((($540)) + 1132|0);
    $542 = HEAP32[$541>>2]|0;
    HEAP32[$542>>2] = $539;
    $543 = $1;
    $544 = ((($543)) + 40|0);
    HEAP32[$544>>2] = 0;
    $0 = 345;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $545 = ((($538)) + 40|0);
   $546 = HEAP32[$545>>2]|0;
   $547 = ($546|0)==(7);
   if ($547) {
    label = 185;
   } else {
    $548 = $1;
    $549 = ((($548)) + 40|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = ($550|0)==(8);
    if ($551) {
     label = 185;
    } else {
     $554 = $1;
     $555 = ((($554)) + 40|0);
     HEAP32[$555>>2] = 0;
    }
   }
   if ((label|0) == 185) {
    $552 = $1;
    $553 = ((($552)) + 40|0);
    HEAP32[$553>>2] = 4;
   }
   $556 = $1;
   $557 = $c;
   _pushback($556,$557);
   $0 = 124;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 188: {
   $558 = $1;
   $559 = (_nextc($558)|0);
   $c = $559;
   $560 = $1;
   $561 = ((($560)) + 40|0);
   $562 = HEAP32[$561>>2]|0;
   $563 = ($562|0)==(7);
   if (!($563)) {
    $564 = $1;
    $565 = ((($564)) + 40|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = ($566|0)==(8);
    if (!($567)) {
     $574 = $c;
     $575 = ($574|0)==(61);
     $576 = $1;
     if ($575) {
      $577 = (_intern_gen_c($576,43)|0);
      $578 = $1;
      $579 = ((($578)) + 1132|0);
      $580 = HEAP32[$579>>2]|0;
      HEAP32[$580>>2] = $577;
      $581 = $1;
      $582 = ((($581)) + 40|0);
      HEAP32[$582>>2] = 0;
      $0 = 345;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $583 = ((($576)) + 40|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = ($584|0)==(0);
     do {
      if (!($585)) {
       $586 = $1;
       $587 = ((($586)) + 40|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = ($588|0)==(6);
       if (!($589)) {
        $590 = $1;
        $591 = ((($590)) + 40|0);
        $592 = HEAP32[$591>>2]|0;
        $593 = ($592|0)==(10);
        if (!($593)) {
         $594 = $1;
         $595 = ((($594)) + 40|0);
         $596 = HEAP32[$595>>2]|0;
         $597 = ($596|0)==(9);
         if (!($597)) {
          $598 = $1;
          $599 = ((($598)) + 40|0);
          $600 = HEAP32[$599>>2]|0;
          $601 = ($600|0)==(4);
          if ($601) {
           $$old27 = $space_seen;
           $$old28 = ($$old27|0)==(0);
           $$old30 = $c;
           $$old31 = ($$old30|0)==(32);
           $or$cond34 = $$old28 | $$old31;
           if (!($or$cond34)) {
            label = 202;
           }
          } else {
           $602 = $1;
           $603 = ((($602)) + 40|0);
           $604 = HEAP32[$603>>2]|0;
           $605 = ($604|0)==(5);
           $606 = $space_seen;
           $607 = ($606|0)!=(0);
           $or$cond29 = $605 & $607;
           $or$cond29$not = $or$cond29 ^ 1;
           $608 = $c;
           $609 = ($608|0)==(32);
           $or$cond32 = $or$cond29$not | $609;
           if (!($or$cond32)) {
            label = 202;
           }
          }
          if ((label|0) == 202) {
           $610 = $c;
           $611 = (($610) - 9)|0;
           $612 = ($611>>>0)<(5);
           if (!($612)) {
            $613 = $1;
            $614 = (_arg_ambiguous($613)|0);
            $615 = ($614|0)!=(0);
            if ($615) {
             break;
            }
           }
          }
          $625 = $1;
          $626 = ((($625)) + 40|0);
          HEAP32[$626>>2] = 0;
          $627 = $1;
          $628 = $c;
          _pushback($627,$628);
          $0 = 43;
          $2013 = $0;
          STACKTOP = sp;return ($2013|0);
         }
        }
       }
      }
     } while(0);
     $616 = $1;
     $617 = ((($616)) + 40|0);
     HEAP32[$617>>2] = 0;
     $618 = $1;
     $619 = $c;
     _pushback($618,$619);
     $620 = $c;
     $621 = ($620|0)>=(0);
     if ($621) {
      $622 = $c;
      $623 = (($622) - 48)|0;
      $624 = ($623>>>0)<(10);
      if ($624) {
       $c = 43;
       label = 240;
       break;
      }
     }
     $0 = 324;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $568 = $1;
   $569 = ((($568)) + 40|0);
   HEAP32[$569>>2] = 4;
   $570 = $c;
   $571 = ($570|0)==(64);
   if ($571) {
    $0 = 324;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $572 = $1;
    $573 = $c;
    _pushback($572,$573);
    $0 = 43;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 209: {
   $629 = $1;
   $630 = (_nextc($629)|0);
   $c = $630;
   $631 = $1;
   $632 = ((($631)) + 40|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = ($633|0)==(7);
   if (!($634)) {
    $635 = $1;
    $636 = ((($635)) + 40|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = ($637|0)==(8);
    if (!($638)) {
     $645 = $c;
     $646 = ($645|0)==(61);
     if ($646) {
      $647 = $1;
      $648 = (_intern_gen_c($647,45)|0);
      $649 = $1;
      $650 = ((($649)) + 1132|0);
      $651 = HEAP32[$650>>2]|0;
      HEAP32[$651>>2] = $648;
      $652 = $1;
      $653 = ((($652)) + 40|0);
      HEAP32[$653>>2] = 0;
      $0 = 345;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $654 = $c;
     $655 = ($654|0)==(62);
     $656 = $1;
     $657 = ((($656)) + 40|0);
     if ($655) {
      HEAP32[$657>>2] = 3;
      $0 = 355;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $658 = HEAP32[$657>>2]|0;
     $659 = ($658|0)==(0);
     do {
      if (!($659)) {
       $660 = $1;
       $661 = ((($660)) + 40|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = ($662|0)==(6);
       if (!($663)) {
        $664 = $1;
        $665 = ((($664)) + 40|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = ($666|0)==(10);
        if (!($667)) {
         $668 = $1;
         $669 = ((($668)) + 40|0);
         $670 = HEAP32[$669>>2]|0;
         $671 = ($670|0)==(9);
         if (!($671)) {
          $672 = $1;
          $673 = ((($672)) + 40|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = ($674|0)==(4);
          if ($675) {
           $$old35 = $space_seen;
           $$old36 = ($$old35|0)==(0);
           $$old38 = $c;
           $$old39 = ($$old38|0)==(32);
           $or$cond42 = $$old36 | $$old39;
           if (!($or$cond42)) {
            label = 225;
           }
          } else {
           $676 = $1;
           $677 = ((($676)) + 40|0);
           $678 = HEAP32[$677>>2]|0;
           $679 = ($678|0)==(5);
           $680 = $space_seen;
           $681 = ($680|0)!=(0);
           $or$cond37 = $679 & $681;
           $or$cond37$not = $or$cond37 ^ 1;
           $682 = $c;
           $683 = ($682|0)==(32);
           $or$cond40 = $or$cond37$not | $683;
           if (!($or$cond40)) {
            label = 225;
           }
          }
          if ((label|0) == 225) {
           $684 = $c;
           $685 = (($684) - 9)|0;
           $686 = ($685>>>0)<(5);
           if (!($686)) {
            $687 = $1;
            $688 = (_arg_ambiguous($687)|0);
            $689 = ($688|0)!=(0);
            if ($689) {
             break;
            }
           }
          }
          $699 = $1;
          $700 = ((($699)) + 40|0);
          HEAP32[$700>>2] = 0;
          $701 = $1;
          $702 = $c;
          _pushback($701,$702);
          $0 = 45;
          $2013 = $0;
          STACKTOP = sp;return ($2013|0);
         }
        }
       }
      }
     } while(0);
     $690 = $1;
     $691 = ((($690)) + 40|0);
     HEAP32[$691>>2] = 0;
     $692 = $1;
     $693 = $c;
     _pushback($692,$693);
     $694 = $c;
     $695 = ($694|0)>=(0);
     if ($695) {
      $696 = $c;
      $697 = (($696) - 48)|0;
      $698 = ($697>>>0)<(10);
      if ($698) {
       $0 = 371;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     }
     $0 = 325;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $639 = $1;
   $640 = ((($639)) + 40|0);
   HEAP32[$640>>2] = 4;
   $641 = $c;
   $642 = ($641|0)==(64);
   if ($642) {
    $0 = 325;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $643 = $1;
    $644 = $c;
    _pushback($643,$644);
    $0 = 45;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 232: {
   $703 = $1;
   $704 = ((($703)) + 40|0);
   HEAP32[$704>>2] = 0;
   $705 = $1;
   $706 = (_nextc($705)|0);
   $c = $706;
   $707 = ($706|0)==(46);
   $708 = $1;
   if ($707) {
    $709 = (_nextc($708)|0);
    $c = $709;
    $710 = ($709|0)==(46);
    if ($710) {
     $0 = 338;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    } else {
     $711 = $1;
     $712 = $c;
     _pushback($711,$712);
     $0 = 337;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   } else {
    $713 = $c;
    _pushback($708,$713);
    $714 = $c;
    $715 = ($714|0)>=(0);
    if ($715) {
     $716 = $c;
     $717 = (($716) - 48)|0;
     $718 = ($717>>>0)<(10);
     if ($718) {
      $719 = $1;
      _yyerror($719,57369);
     }
    }
    $720 = $1;
    $721 = ((($720)) + 40|0);
    HEAP32[$721>>2] = 8;
    $0 = 46;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 332: {
   $1042 = $1;
   $1043 = ((($1042)) + 56|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = (($1044) + -1)|0;
   HEAP32[$1043>>2] = $1045;
   label = 333;
   break;
  }
  case 337: {
   $1073 = $1;
   $1074 = (_nextc($1073)|0);
   $c = $1074;
   $1075 = $c;
   $1076 = ($1075|0)==(58);
   $1077 = $1;
   $1078 = ((($1077)) + 40|0);
   $1079 = HEAP32[$1078>>2]|0;
   if (!($1076)) {
    $1111 = ($1079|0)==(1);
    if (!($1111)) {
     $1112 = $1;
     $1113 = ((($1112)) + 40|0);
     $1114 = HEAP32[$1113>>2]|0;
     $1115 = ($1114|0)==(2);
     if (!($1115)) {
      $1116 = $1;
      $1117 = ((($1116)) + 40|0);
      $1118 = HEAP32[$1117>>2]|0;
      $1119 = ($1118|0)==(3);
      $1120 = $c;
      $1121 = ($1120|0)==(32);
      $or$cond93 = $1119 | $1121;
      if (!($or$cond93)) {
       $1122 = $c;
       $1123 = (($1122) - 9)|0;
       $1124 = ($1123>>>0)<(5);
       if (!($1124)) {
        $1129 = $1;
        $1130 = $c;
        _pushback($1129,$1130);
        $1131 = $1;
        $1132 = ((($1131)) + 40|0);
        HEAP32[$1132>>2] = 7;
        $0 = 356;
        $2013 = $0;
        STACKTOP = sp;return ($2013|0);
       }
      }
     }
    }
    $1125 = $1;
    $1126 = $c;
    _pushback($1125,$1126);
    $1127 = $1;
    $1128 = ((($1127)) + 40|0);
    HEAP32[$1128>>2] = 0;
    $0 = 58;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1080 = ($1079|0)==(0);
   do {
    if (!($1080)) {
     $1081 = $1;
     $1082 = ((($1081)) + 40|0);
     $1083 = HEAP32[$1082>>2]|0;
     $1084 = ($1083|0)==(6);
     if (!($1084)) {
      $1085 = $1;
      $1086 = ((($1085)) + 40|0);
      $1087 = HEAP32[$1086>>2]|0;
      $1088 = ($1087|0)==(10);
      if (!($1088)) {
       $1089 = $1;
       $1090 = ((($1089)) + 40|0);
       $1091 = HEAP32[$1090>>2]|0;
       $1092 = ($1091|0)==(9);
       if (!($1092)) {
        $1093 = $1;
        $1094 = ((($1093)) + 40|0);
        $1095 = HEAP32[$1094>>2]|0;
        $1096 = ($1095|0)==(9);
        if (!($1096)) {
         $1097 = $1;
         $1098 = ((($1097)) + 40|0);
         $1099 = HEAP32[$1098>>2]|0;
         $1100 = ($1099|0)==(4);
         if ($1100) {
          $$old88 = $space_seen;
          $$old89 = ($$old88|0)!=(0);
          if ($$old89) {
           break;
          }
         } else {
          $1101 = $1;
          $1102 = ((($1101)) + 40|0);
          $1103 = HEAP32[$1102>>2]|0;
          $1104 = ($1103|0)==(5);
          $1105 = $space_seen;
          $1106 = ($1105|0)!=(0);
          $or$cond90 = $1104 & $1106;
          if ($or$cond90) {
           break;
          }
         }
         $1109 = $1;
         $1110 = ((($1109)) + 40|0);
         HEAP32[$1110>>2] = 8;
         $0 = 343;
         $2013 = $0;
         STACKTOP = sp;return ($2013|0);
        }
       }
      }
     }
    }
   } while(0);
   $1107 = $1;
   $1108 = ((($1107)) + 40|0);
   HEAP32[$1108>>2] = 0;
   $0 = 344;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 354: {
   $1133 = $1;
   $1134 = ((($1133)) + 40|0);
   $1135 = HEAP32[$1134>>2]|0;
   $1136 = ($1135|0)==(0);
   if (!($1136)) {
    $1137 = $1;
    $1138 = ((($1137)) + 40|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = ($1139|0)==(6);
    if (!($1140)) {
     $1141 = $1;
     $1142 = ((($1141)) + 40|0);
     $1143 = HEAP32[$1142>>2]|0;
     $1144 = ($1143|0)==(10);
     if (!($1144)) {
      $1145 = $1;
      $1146 = ((($1145)) + 40|0);
      $1147 = HEAP32[$1146>>2]|0;
      $1148 = ($1147|0)==(9);
      if (!($1148)) {
       $1153 = $1;
       $1154 = (_nextc($1153)|0);
       $c = $1154;
       $1155 = ($1154|0)==(61);
       $1156 = $1;
       if ($1155) {
        $1157 = (_intern_gen_c($1156,47)|0);
        $1158 = $1;
        $1159 = ((($1158)) + 1132|0);
        $1160 = HEAP32[$1159>>2]|0;
        HEAP32[$1160>>2] = $1157;
        $1161 = $1;
        $1162 = ((($1161)) + 40|0);
        HEAP32[$1162>>2] = 0;
        $0 = 345;
        $2013 = $0;
        STACKTOP = sp;return ($2013|0);
       }
       $1163 = $c;
       _pushback($1156,$1163);
       $1164 = $1;
       $1165 = ((($1164)) + 40|0);
       $1166 = HEAP32[$1165>>2]|0;
       $1167 = ($1166|0)==(4);
       if ($1167) {
        $$old94 = $space_seen;
        $$old95 = ($$old94|0)==(0);
        $$old97 = $c;
        $$old98 = ($$old97|0)==(32);
        $or$cond101 = $$old95 | $$old98;
        if (!($or$cond101)) {
         label = 364;
        }
       } else {
        $1168 = $1;
        $1169 = ((($1168)) + 40|0);
        $1170 = HEAP32[$1169>>2]|0;
        $1171 = ($1170|0)==(5);
        $1172 = $space_seen;
        $1173 = ($1172|0)!=(0);
        $or$cond96 = $1171 & $1173;
        $or$cond96$not = $or$cond96 ^ 1;
        $1174 = $c;
        $1175 = ($1174|0)==(32);
        $or$cond99 = $or$cond96$not | $1175;
        if (!($or$cond99)) {
         label = 364;
        }
       }
       if ((label|0) == 364) {
        $1176 = $c;
        $1177 = (($1176) - 9)|0;
        $1178 = ($1177>>>0)<(5);
        if (!($1178)) {
         $1179 = $1;
         $1180 = (_new_strterm($1179,7,47,0)|0);
         $1181 = $1;
         $1182 = ((($1181)) + 44|0);
         HEAP32[$1182>>2] = $1180;
         $0 = 357;
         $2013 = $0;
         STACKTOP = sp;return ($2013|0);
        }
       }
       $1183 = $1;
       $1184 = ((($1183)) + 40|0);
       $1185 = HEAP32[$1184>>2]|0;
       $1186 = ($1185|0)==(7);
       if ($1186) {
        label = 368;
       } else {
        $1187 = $1;
        $1188 = ((($1187)) + 40|0);
        $1189 = HEAP32[$1188>>2]|0;
        $1190 = ($1189|0)==(8);
        if ($1190) {
         label = 368;
        } else {
         $1193 = $1;
         $1194 = ((($1193)) + 40|0);
         HEAP32[$1194>>2] = 0;
        }
       }
       if ((label|0) == 368) {
        $1191 = $1;
        $1192 = ((($1191)) + 40|0);
        HEAP32[$1192>>2] = 4;
       }
       $0 = 47;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     }
    }
   }
   $1149 = $1;
   $1150 = (_new_strterm($1149,7,47,0)|0);
   $1151 = $1;
   $1152 = ((($1151)) + 44|0);
   HEAP32[$1152>>2] = $1150;
   $0 = 357;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 371: {
   $1195 = $1;
   $1196 = (_nextc($1195)|0);
   $c = $1196;
   $1197 = ($1196|0)==(61);
   $1198 = $1;
   if ($1197) {
    $1199 = (_intern_gen_c($1198,94)|0);
    $1200 = $1;
    $1201 = ((($1200)) + 1132|0);
    $1202 = HEAP32[$1201>>2]|0;
    HEAP32[$1202>>2] = $1199;
    $1203 = $1;
    $1204 = ((($1203)) + 40|0);
    HEAP32[$1204>>2] = 0;
    $0 = 345;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1205 = ((($1198)) + 40|0);
   $1206 = HEAP32[$1205>>2]|0;
   $1207 = ($1206|0)==(7);
   if ($1207) {
    label = 375;
   } else {
    $1208 = $1;
    $1209 = ((($1208)) + 40|0);
    $1210 = HEAP32[$1209>>2]|0;
    $1211 = ($1210|0)==(8);
    if ($1211) {
     label = 375;
    } else {
     $1214 = $1;
     $1215 = ((($1214)) + 40|0);
     HEAP32[$1215>>2] = 0;
    }
   }
   if ((label|0) == 375) {
    $1212 = $1;
    $1213 = ((($1212)) + 40|0);
    HEAP32[$1213>>2] = 4;
   }
   $1216 = $1;
   $1217 = $c;
   _pushback($1216,$1217);
   $0 = 94;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 378: {
   $1218 = $1;
   $1219 = ((($1218)) + 40|0);
   HEAP32[$1219>>2] = 0;
   $0 = 59;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 379: {
   $1220 = $1;
   $1221 = ((($1220)) + 40|0);
   HEAP32[$1221>>2] = 0;
   $0 = 44;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 380: {
   $1222 = $1;
   $1223 = ((($1222)) + 40|0);
   $1224 = HEAP32[$1223>>2]|0;
   $1225 = ($1224|0)==(7);
   if ($1225) {
    label = 382;
   } else {
    $1226 = $1;
    $1227 = ((($1226)) + 40|0);
    $1228 = HEAP32[$1227>>2]|0;
    $1229 = ($1228|0)==(8);
    if ($1229) {
     label = 382;
    } else {
     $1237 = $1;
     $1238 = ((($1237)) + 40|0);
     HEAP32[$1238>>2] = 0;
    }
   }
   if ((label|0) == 382) {
    $1230 = $1;
    $1231 = (_nextc($1230)|0);
    $c = $1231;
    $1232 = ($1231|0)!=(64);
    if ($1232) {
     $1233 = $1;
     $1234 = $c;
     _pushback($1233,$1234);
    }
    $1235 = $1;
    $1236 = ((($1235)) + 40|0);
    HEAP32[$1236>>2] = 4;
   }
   $0 = 126;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 387: {
   $1239 = $1;
   $1240 = ((($1239)) + 40|0);
   $1241 = HEAP32[$1240>>2]|0;
   $1242 = ($1241|0)==(0);
   do {
    if ($1242) {
     label = 391;
    } else {
     $1243 = $1;
     $1244 = ((($1243)) + 40|0);
     $1245 = HEAP32[$1244>>2]|0;
     $1246 = ($1245|0)==(6);
     if ($1246) {
      label = 391;
     } else {
      $1247 = $1;
      $1248 = ((($1247)) + 40|0);
      $1249 = HEAP32[$1248>>2]|0;
      $1250 = ($1249|0)==(10);
      if ($1250) {
       label = 391;
      } else {
       $1251 = $1;
       $1252 = ((($1251)) + 40|0);
       $1253 = HEAP32[$1252>>2]|0;
       $1254 = ($1253|0)==(9);
       if ($1254) {
        label = 391;
       } else {
        $1255 = $1;
        $1256 = ((($1255)) + 40|0);
        $1257 = HEAP32[$1256>>2]|0;
        $1258 = ($1257|0)==(4);
        if ($1258) {
         $$old102 = $space_seen;
         $$old103 = ($$old102|0)!=(0);
         if (!($$old103)) {
          break;
         }
        } else {
         $1259 = $1;
         $1260 = ((($1259)) + 40|0);
         $1261 = HEAP32[$1260>>2]|0;
         $1262 = ($1261|0)==(5);
         $1263 = $space_seen;
         $1264 = ($1263|0)!=(0);
         $or$cond104 = $1262 & $1264;
         if (!($or$cond104)) {
          break;
         }
        }
        $c = 348;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 391) {
    $c = 347;
   }
   $1265 = $1;
   $1266 = ((($1265)) + 56|0);
   $1267 = HEAP32[$1266>>2]|0;
   $1268 = (($1267) + 1)|0;
   HEAP32[$1266>>2] = $1268;
   $1269 = $1;
   $1270 = ((($1269)) + 48|0);
   $1271 = HEAP32[$1270>>2]|0;
   $1272 = $1271 << 1;
   $1273 = $1;
   $1274 = ((($1273)) + 48|0);
   HEAP32[$1274>>2] = $1272;
   $1275 = $1;
   $1276 = ((($1275)) + 52|0);
   $1277 = HEAP32[$1276>>2]|0;
   $1278 = $1277 << 1;
   $1279 = $1;
   $1280 = ((($1279)) + 52|0);
   HEAP32[$1280>>2] = $1278;
   $1281 = $1;
   $1282 = ((($1281)) + 40|0);
   HEAP32[$1282>>2] = 0;
   $1283 = $c;
   $0 = $1283;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 397: {
   $1284 = $1;
   $1285 = ((($1284)) + 56|0);
   $1286 = HEAP32[$1285>>2]|0;
   $1287 = (($1286) + 1)|0;
   HEAP32[$1285>>2] = $1287;
   $1288 = $1;
   $1289 = ((($1288)) + 40|0);
   $1290 = HEAP32[$1289>>2]|0;
   $1291 = ($1290|0)==(7);
   if (!($1291)) {
    $1292 = $1;
    $1293 = ((($1292)) + 40|0);
    $1294 = HEAP32[$1293>>2]|0;
    $1295 = ($1294|0)==(8);
    if (!($1295)) {
     $1307 = $1;
     $1308 = ((($1307)) + 40|0);
     $1309 = HEAP32[$1308>>2]|0;
     $1310 = ($1309|0)==(0);
     do {
      if ($1310) {
       label = 408;
      } else {
       $1311 = $1;
       $1312 = ((($1311)) + 40|0);
       $1313 = HEAP32[$1312>>2]|0;
       $1314 = ($1313|0)==(6);
       if ($1314) {
        label = 408;
       } else {
        $1315 = $1;
        $1316 = ((($1315)) + 40|0);
        $1317 = HEAP32[$1316>>2]|0;
        $1318 = ($1317|0)==(10);
        if ($1318) {
         label = 408;
        } else {
         $1319 = $1;
         $1320 = ((($1319)) + 40|0);
         $1321 = HEAP32[$1320>>2]|0;
         $1322 = ($1321|0)==(9);
         if ($1322) {
          label = 408;
         } else {
          $1323 = $1;
          $1324 = ((($1323)) + 40|0);
          $1325 = HEAP32[$1324>>2]|0;
          $1326 = ($1325|0)==(4);
          if ($1326) {
           $$old105 = $space_seen;
           $$old106 = ($$old105|0)!=(0);
           if (!($$old106)) {
            break;
           }
          } else {
           $1327 = $1;
           $1328 = ((($1327)) + 40|0);
           $1329 = HEAP32[$1328>>2]|0;
           $1330 = ($1329|0)==(5);
           $1331 = $space_seen;
           $1332 = ($1331|0)!=(0);
           $or$cond107 = $1330 & $1332;
           if (!($or$cond107)) {
            break;
           }
          }
          $c = 350;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 408) {
      $c = 350;
     }
     $1333 = $1;
     $1334 = ((($1333)) + 40|0);
     HEAP32[$1334>>2] = 0;
     $1335 = $1;
     $1336 = ((($1335)) + 48|0);
     $1337 = HEAP32[$1336>>2]|0;
     $1338 = $1337 << 1;
     $1339 = $1;
     $1340 = ((($1339)) + 48|0);
     HEAP32[$1340>>2] = $1338;
     $1341 = $1;
     $1342 = ((($1341)) + 52|0);
     $1343 = HEAP32[$1342>>2]|0;
     $1344 = $1343 << 1;
     $1345 = $1;
     $1346 = ((($1345)) + 52|0);
     HEAP32[$1346>>2] = $1344;
     $1347 = $c;
     $0 = $1347;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $1296 = $1;
   $1297 = ((($1296)) + 40|0);
   HEAP32[$1297>>2] = 4;
   $1298 = $1;
   $1299 = (_nextc($1298)|0);
   $c = $1299;
   $1300 = ($1299|0)==(93);
   $1301 = $1;
   if (!($1300)) {
    $1306 = $c;
    _pushback($1301,$1306);
    $0 = 91;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1302 = (_nextc($1301)|0);
   $c = $1302;
   $1303 = ($1302|0)==(61);
   if ($1303) {
    $0 = 340;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   } else {
    $1304 = $1;
    $1305 = $c;
    _pushback($1304,$1305);
    $0 = 339;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   break;
  }
  case 414: {
   $1348 = $1;
   $1349 = ((($1348)) + 60|0);
   $1350 = HEAP32[$1349>>2]|0;
   $1351 = ($1350|0)!=(0);
   if ($1351) {
    $1352 = $1;
    $1353 = ((($1352)) + 60|0);
    $1354 = HEAP32[$1353>>2]|0;
    $1355 = $1;
    $1356 = ((($1355)) + 56|0);
    $1357 = HEAP32[$1356>>2]|0;
    $1358 = ($1354|0)==($1357|0);
    if ($1358) {
     $1359 = $1;
     $1360 = ((($1359)) + 40|0);
     HEAP32[$1360>>2] = 0;
     $1361 = $1;
     $1362 = ((($1361)) + 60|0);
     HEAP32[$1362>>2] = 0;
     $1363 = $1;
     $1364 = ((($1363)) + 56|0);
     $1365 = HEAP32[$1364>>2]|0;
     $1366 = (($1365) + -1)|0;
     HEAP32[$1364>>2] = $1366;
     $1367 = $1;
     $1368 = ((($1367)) + 48|0);
     $1369 = HEAP32[$1368>>2]|0;
     $1370 = $1369 << 1;
     $1371 = $1;
     $1372 = ((($1371)) + 48|0);
     HEAP32[$1372>>2] = $1370;
     $1373 = $1;
     $1374 = ((($1373)) + 52|0);
     $1375 = HEAP32[$1374>>2]|0;
     $1376 = $1375 << 1;
     $1377 = $1;
     $1378 = ((($1377)) + 52|0);
     HEAP32[$1378>>2] = $1376;
     $0 = 363;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
   }
   $1379 = $1;
   $1380 = ((($1379)) + 40|0);
   $1381 = HEAP32[$1380>>2]|0;
   $1382 = ($1381|0)==(4);
   do {
    if ($1382) {
     label = 421;
    } else {
     $1383 = $1;
     $1384 = ((($1383)) + 40|0);
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = ($1385|0)==(5);
     if ($1386) {
      label = 421;
     } else {
      $1387 = $1;
      $1388 = ((($1387)) + 40|0);
      $1389 = HEAP32[$1388>>2]|0;
      $1390 = ($1389|0)==(1);
      if ($1390) {
       label = 421;
      } else {
       $1391 = $1;
       $1392 = ((($1391)) + 40|0);
       $1393 = HEAP32[$1392>>2]|0;
       $1394 = ($1393|0)==(3);
       if ($1394) {
        label = 421;
       } else {
        $1395 = $1;
        $1396 = ((($1395)) + 40|0);
        $1397 = HEAP32[$1396>>2]|0;
        $1398 = ($1397|0)==(2);
        if ($1398) {
         $c = 352;
         break;
        } else {
         $c = 351;
         break;
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 421) {
    $c = 123;
   }
   $1399 = $1;
   $1400 = ((($1399)) + 48|0);
   $1401 = HEAP32[$1400>>2]|0;
   $1402 = $1401 << 1;
   $1403 = $1;
   $1404 = ((($1403)) + 48|0);
   HEAP32[$1404>>2] = $1402;
   $1405 = $1;
   $1406 = ((($1405)) + 52|0);
   $1407 = HEAP32[$1406>>2]|0;
   $1408 = $1407 << 1;
   $1409 = $1;
   $1410 = ((($1409)) + 52|0);
   HEAP32[$1410>>2] = $1408;
   $1411 = $1;
   $1412 = ((($1411)) + 40|0);
   HEAP32[$1412>>2] = 0;
   $1413 = $c;
   $0 = $1413;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 428: {
   $1424 = $c;
   _pushback($1418,$1424);
   $0 = 92;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 429: {
   $1425 = $1;
   $1426 = ((($1425)) + 40|0);
   $1427 = HEAP32[$1426>>2]|0;
   $1428 = ($1427|0)==(0);
   do {
    if ($1428) {
     label = 433;
    } else {
     $1429 = $1;
     $1430 = ((($1429)) + 40|0);
     $1431 = HEAP32[$1430>>2]|0;
     $1432 = ($1431|0)==(6);
     if ($1432) {
      label = 433;
     } else {
      $1433 = $1;
      $1434 = ((($1433)) + 40|0);
      $1435 = HEAP32[$1434>>2]|0;
      $1436 = ($1435|0)==(10);
      if ($1436) {
       label = 433;
      } else {
       $1437 = $1;
       $1438 = ((($1437)) + 40|0);
       $1439 = HEAP32[$1438>>2]|0;
       $1440 = ($1439|0)==(9);
       if ($1440) {
        label = 433;
       } else {
        $1531 = $1;
        $1532 = (_nextc($1531)|0);
        $c = $1532;
        $1533 = ($1532|0)==(61);
        $1534 = $1;
        if ($1533) {
         $1535 = (_intern_gen_c($1534,37)|0);
         $1536 = $1;
         $1537 = ((($1536)) + 1132|0);
         $1538 = HEAP32[$1537>>2]|0;
         HEAP32[$1538>>2] = $1535;
         $1539 = $1;
         $1540 = ((($1539)) + 40|0);
         HEAP32[$1540>>2] = 0;
         $0 = 345;
         $2013 = $0;
         STACKTOP = sp;return ($2013|0);
        }
        $1541 = ((($1534)) + 40|0);
        $1542 = HEAP32[$1541>>2]|0;
        $1543 = ($1542|0)==(4);
        if ($1543) {
         $$old111 = $space_seen;
         $$old112 = ($$old111|0)==(0);
         $$old114 = $c;
         $$old115 = ($$old114|0)==(32);
         $or$cond118 = $$old112 | $$old115;
         if (!($or$cond118)) {
          label = 467;
         }
        } else {
         $1544 = $1;
         $1545 = ((($1544)) + 40|0);
         $1546 = HEAP32[$1545>>2]|0;
         $1547 = ($1546|0)==(5);
         $1548 = $space_seen;
         $1549 = ($1548|0)!=(0);
         $or$cond113 = $1547 & $1549;
         $or$cond113$not = $or$cond113 ^ 1;
         $1550 = $c;
         $1551 = ($1550|0)==(32);
         $or$cond116 = $or$cond113$not | $1551;
         if (!($or$cond116)) {
          label = 467;
         }
        }
        if ((label|0) == 467) {
         $1552 = $c;
         $1553 = (($1552) - 9)|0;
         $1554 = ($1553>>>0)<(5);
         if (!($1554)) {
          break;
         }
        }
        $1555 = $1;
        $1556 = ((($1555)) + 40|0);
        $1557 = HEAP32[$1556>>2]|0;
        $1558 = ($1557|0)==(7);
        if ($1558) {
         label = 470;
        } else {
         $1559 = $1;
         $1560 = ((($1559)) + 40|0);
         $1561 = HEAP32[$1560>>2]|0;
         $1562 = ($1561|0)==(8);
         if ($1562) {
          label = 470;
         } else {
          $1565 = $1;
          $1566 = ((($1565)) + 40|0);
          HEAP32[$1566>>2] = 0;
         }
        }
        if ((label|0) == 470) {
         $1563 = $1;
         $1564 = ((($1563)) + 40|0);
         HEAP32[$1564>>2] = 4;
        }
        $1567 = $1;
        $1568 = $c;
        _pushback($1567,$1568);
        $0 = 37;
        $2013 = $0;
        STACKTOP = sp;return ($2013|0);
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 433) {
    $1441 = $1;
    $1442 = (_nextc($1441)|0);
    $c = $1442;
   }
   $1443 = $c;
   $1444 = ($1443|0)<(0);
   do {
    if ($1444) {
     label = 437;
    } else {
     $1445 = $c;
     $1446 = $1445 | 32;
     $1447 = (($1446) - 97)|0;
     $1448 = ($1447>>>0)<(26);
     if (!($1448)) {
      $1449 = $c;
      $1450 = (($1449) - 48)|0;
      $1451 = ($1450>>>0)<(10);
      if (!($1451)) {
       label = 437;
       break;
      }
     }
     $1453 = $1;
     $1454 = (_nextc($1453)|0);
     $term = $1454;
     $1455 = $term;
     $1456 = (_isalnum($1455)|0);
     $1457 = ($1456|0)!=(0);
     if ($1457) {
      $1458 = $1;
      _yyerror($1458,57548);
      $0 = 0;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
    }
   } while(0);
   if ((label|0) == 437) {
    $1452 = $c;
    $term = $1452;
    $c = 81;
   }
   $1459 = $c;
   $1460 = ($1459|0)<(0);
   $1461 = $term;
   $1462 = ($1461|0)<(0);
   $or$cond110 = $1460 | $1462;
   if ($or$cond110) {
    $1463 = $1;
    _yyerror($1463,57572);
    $0 = 0;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1464 = $term;
   $paren = $1464;
   $1465 = $term;
   $1466 = ($1465|0)==(40);
   do {
    if ($1466) {
     $term = 41;
    } else {
     $1467 = $term;
     $1468 = ($1467|0)==(91);
     if ($1468) {
      $term = 93;
      break;
     }
     $1469 = $term;
     $1470 = ($1469|0)==(123);
     if ($1470) {
      $term = 125;
      break;
     }
     $1471 = $term;
     $1472 = ($1471|0)==(60);
     if ($1472) {
      $term = 62;
      break;
     } else {
      $paren = 0;
      break;
     }
    }
   } while(0);
   $1473 = $c;
   do {
    switch ($1473|0) {
    case 81:  {
     $1474 = $1;
     $1475 = $term;
     $1476 = $paren;
     $1477 = (_new_strterm($1474,3,$1475,$1476)|0);
     $1478 = $1;
     $1479 = ((($1478)) + 44|0);
     HEAP32[$1479>>2] = $1477;
     $0 = 360;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 113:  {
     $1480 = $1;
     $1481 = $term;
     $1482 = $paren;
     $1483 = (_new_strterm($1480,1,$1481,$1482)|0);
     $1484 = $1;
     $1485 = ((($1484)) + 44|0);
     HEAP32[$1485>>2] = $1483;
     $1486 = $1;
     $1487 = (_parse_string($1486)|0);
     $0 = $1487;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 87:  {
     $1488 = $1;
     $1489 = $term;
     $1490 = $paren;
     $1491 = (_new_strterm($1488,43,$1489,$1490)|0);
     $1492 = $1;
     $1493 = ((($1492)) + 44|0);
     HEAP32[$1493>>2] = $1491;
     $0 = 358;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 119:  {
     $1494 = $1;
     $1495 = $term;
     $1496 = $paren;
     $1497 = (_new_strterm($1494,41,$1495,$1496)|0);
     $1498 = $1;
     $1499 = ((($1498)) + 44|0);
     HEAP32[$1499>>2] = $1497;
     $0 = 358;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 120:  {
     $1500 = $1;
     $1501 = $term;
     $1502 = $paren;
     $1503 = (_new_strterm($1500,131,$1501,$1502)|0);
     $1504 = $1;
     $1505 = ((($1504)) + 44|0);
     HEAP32[$1505>>2] = $1503;
     $0 = 361;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 114:  {
     $1506 = $1;
     $1507 = $term;
     $1508 = $paren;
     $1509 = (_new_strterm($1506,7,$1507,$1508)|0);
     $1510 = $1;
     $1511 = ((($1510)) + 44|0);
     HEAP32[$1511>>2] = $1509;
     $0 = 357;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 115:  {
     $1512 = $1;
     $1513 = $term;
     $1514 = $paren;
     $1515 = (_new_strterm($1512,17,$1513,$1514)|0);
     $1516 = $1;
     $1517 = ((($1516)) + 44|0);
     HEAP32[$1517>>2] = $1515;
     $0 = 356;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 73:  {
     $1518 = $1;
     $1519 = $term;
     $1520 = $paren;
     $1521 = (_new_strterm($1518,51,$1519,$1520)|0);
     $1522 = $1;
     $1523 = ((($1522)) + 44|0);
     HEAP32[$1523>>2] = $1521;
     $0 = 359;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 105:  {
     $1524 = $1;
     $1525 = $term;
     $1526 = $paren;
     $1527 = (_new_strterm($1524,49,$1525,$1526)|0);
     $1528 = $1;
     $1529 = ((($1528)) + 44|0);
     HEAP32[$1529>>2] = $1527;
     $0 = 359;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    default: {
     $1530 = $1;
     _yyerror($1530,57548);
     $0 = 0;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
    }
   } while(0);
   break;
  }
  case 473: {
   $1569 = $1;
   $1570 = ((($1569)) + 40|0);
   HEAP32[$1570>>2] = 1;
   $1571 = $1;
   $1572 = (_newtok($1571)|0);
   $token_column = $1572;
   $1573 = $1;
   $1574 = (_nextc($1573)|0);
   $c = $1574;
   $1575 = $c;
   $1576 = ($1575|0)<(0);
   if ($1576) {
    $1577 = $1;
    _yyerror($1577,57617);
    $0 = 0;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1578 = $c;
   L572: do {
    switch ($1578|0) {
    case 95:  {
     $1579 = $1;
     $1580 = (_nextc($1579)|0);
     $c = $1580;
     $1581 = $c;
     $1582 = ($1581|0)>=(0);
     do {
      if ($1582) {
       $1583 = $c;
       $1584 = $1583 | 32;
       $1585 = (($1584) - 97)|0;
       $1586 = ($1585>>>0)<(26);
       if (!($1586)) {
        $1587 = $c;
        $1588 = (($1587) - 48)|0;
        $1589 = ($1588>>>0)<(10);
        $1590 = $c;
        $1591 = ($1590|0)==(95);
        $or$cond121 = $1589 | $1591;
        $or$cond121$not = $or$cond121 ^ 1;
        $1592 = $c;
        $1593 = ($1592>>>0)<=(127);
        $or$cond124 = $or$cond121$not & $1593;
        if ($or$cond124) {
         break;
        }
       }
       $1594 = $1;
       _tokadd($1594,36);
       $1595 = $1;
       $1596 = $c;
       _tokadd($1595,$1596);
       label = 517;
       break L47;
      }
     } while(0);
     $1597 = $1;
     $1598 = $c;
     _pushback($1597,$1598);
     $c = 95;
     label = 481;
     break;
    }
    case 34: case 62: case 60: case 58: case 61: case 46: case 44: case 59: case 92: case 47: case 64: case 33: case 63: case 36: case 42: case 126:  {
     label = 481;
     break;
    }
    case 45:  {
     $1610 = $1;
     _tokadd($1610,36);
     $1611 = $1;
     $1612 = $c;
     _tokadd($1611,$1612);
     $1613 = $1;
     $1614 = (_nextc($1613)|0);
     $c = $1614;
     $1615 = $1;
     $1616 = $c;
     _pushback($1615,$1616);
     label = 483;
     break;
    }
    case 43: case 39: case 96: case 38:  {
     $1625 = $last_state;
     $1626 = ($1625|0)==(7);
     $1627 = $1;
     if ($1626) {
      _tokadd($1627,36);
      $1628 = $1;
      $1629 = $c;
      _tokadd($1628,$1629);
      label = 483;
      break L572;
     }
     $1630 = $c;
     $1631 = (_new_back_ref($1627,$1630)|0);
     $1632 = $1;
     $1633 = ((($1632)) + 1132|0);
     $1634 = HEAP32[$1633>>2]|0;
     HEAP32[$1634>>2] = $1631;
     $0 = 322;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     while(1) {
      $1635 = $1;
      $1636 = $c;
      _tokadd($1635,$1636);
      $1637 = $1;
      $1638 = (_nextc($1637)|0);
      $c = $1638;
      $1639 = $c;
      $1640 = ($1639|0)>=(0);
      if (!($1640)) {
       break;
      }
      $1641 = $c;
      $1642 = (_isdigit($1641)|0);
      $1643 = ($1642|0)!=(0);
      if (!($1643)) {
       break;
      }
     }
     $1644 = $1;
     $1645 = $c;
     _pushback($1644,$1645);
     $1646 = $last_state;
     $1647 = ($1646|0)==(7);
     if ($1647) {
      label = 483;
     } else {
      $1648 = $1;
      _tokfix($1648);
      $1649 = $1;
      $1650 = (_tok($1649)|0);
      $1651 = (_strtoul($1650,0,10)|0);
      $n = $1651;
      $1652 = $n;
      $1653 = ($1652>>>0)>(2147483647);
      $1654 = $1;
      if ($1653) {
       _yyerror_i($1654,57651,2147483647);
       $0 = 0;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      } else {
       $1655 = $n;
       $1656 = (_new_nth_ref($1654,$1655)|0);
       $1657 = $1;
       $1658 = ((($1657)) + 1132|0);
       $1659 = HEAP32[$1658>>2]|0;
       HEAP32[$1659>>2] = $1656;
       $0 = 321;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     }
     break;
    }
    case 48:  {
     label = 496;
     break;
    }
    default: {
     $1660 = $c;
     $1661 = $1660 | 32;
     $1662 = (($1661) - 97)|0;
     $1663 = ($1662>>>0)<(26);
     if ($1663) {
      label = 496;
     } else {
      $1664 = $c;
      $1665 = (($1664) - 48)|0;
      $1666 = ($1665>>>0)<(10);
      $1667 = $c;
      $1668 = ($1667|0)==(95);
      $or$cond127 = $1666 | $1668;
      $or$cond127$not = $or$cond127 ^ 1;
      $1669 = $c;
      $1670 = ($1669>>>0)<=(127);
      $or$cond130 = $or$cond127$not & $1670;
      if ($or$cond130) {
       $1671 = $1;
       $1672 = $c;
       _pushback($1671,$1672);
       $0 = 36;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      } else {
       label = 496;
      }
     }
    }
    }
   } while(0);
   if ((label|0) == 481) {
    $1599 = $1;
    _tokadd($1599,36);
    $1600 = $1;
    $1601 = $c;
    _tokadd($1600,$1601);
    $1602 = $1;
    _tokfix($1602);
    $1603 = $1;
    $1604 = $1;
    $1605 = (_tok($1604)|0);
    $1606 = (_intern_cstr_gen($1603,$1605)|0);
    $1607 = $1;
    $1608 = ((($1607)) + 1132|0);
    $1609 = HEAP32[$1608>>2]|0;
    HEAP32[$1609>>2] = $1606;
    $0 = 308;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   else if ((label|0) == 483) {
    $1617 = $1;
    _tokfix($1617);
    $1618 = $1;
    $1619 = $1;
    $1620 = (_tok($1619)|0);
    $1621 = (_intern_cstr_gen($1618,$1620)|0);
    $1622 = $1;
    $1623 = ((($1622)) + 1132|0);
    $1624 = HEAP32[$1623>>2]|0;
    HEAP32[$1624>>2] = $1621;
    $0 = 308;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   else if ((label|0) == 496) {
    $1673 = $1;
    _tokadd($1673,36);
    label = 517;
    break;
   }
   break;
  }
  case 497: {
   $1674 = $1;
   $1675 = (_nextc($1674)|0);
   $c = $1675;
   $1676 = $1;
   $1677 = (_newtok($1676)|0);
   $token_column = $1677;
   $1678 = $1;
   _tokadd($1678,64);
   $1679 = $c;
   $1680 = ($1679|0)==(64);
   if ($1680) {
    $1681 = $1;
    _tokadd($1681,64);
    $1682 = $1;
    $1683 = (_nextc($1682)|0);
    $c = $1683;
   }
   $1684 = $c;
   $1685 = ($1684|0)<(0);
   if ($1685) {
    $1686 = $1;
    $1687 = ((($1686)) + 1108|0);
    $1688 = HEAP32[$1687>>2]|0;
    $1689 = ($1688|0)==(1);
    $1690 = $1;
    if ($1689) {
     _yyerror($1690,57685);
    } else {
     _yyerror($1690,57721);
    }
    $0 = 0;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1691 = $c;
   $1692 = (_isdigit($1691)|0);
   $1693 = ($1692|0)!=(0);
   if (!($1693)) {
    $1700 = $c;
    $1701 = $1700 | 32;
    $1702 = (($1701) - 97)|0;
    $1703 = ($1702>>>0)<(26);
    if ($1703) {
     label = 517;
     break;
    }
    $1704 = $c;
    $1705 = (($1704) - 48)|0;
    $1706 = ($1705>>>0)<(10);
    $1707 = $c;
    $1708 = ($1707|0)==(95);
    $or$cond133 = $1706 | $1708;
    $or$cond133$not = $or$cond133 ^ 1;
    $1709 = $c;
    $1710 = ($1709>>>0)<=(127);
    $or$cond136 = $or$cond133$not & $1710;
    if (!($or$cond136)) {
     label = 517;
     break;
    }
    $1711 = $1;
    $1712 = $c;
    _pushback($1711,$1712);
    $0 = 64;
    $2013 = $0;
    STACKTOP = sp;return ($2013|0);
   }
   $1694 = $1;
   $1695 = ((($1694)) + 1108|0);
   $1696 = HEAP32[$1695>>2]|0;
   $1697 = ($1696|0)==(1);
   $1698 = $1;
   $1699 = $c;
   if ($1697) {
    _yyerror_i($1698,57754,$1699);
   } else {
    _yyerror_i($1698,57804,$1699);
   }
   $0 = 0;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
   break;
  }
  case 512: {
   $1713 = $1;
   $1714 = (_newtok($1713)|0);
   $token_column = $1714;
   label = 517;
   break;
  }
  case 516: {
   $1728 = $1;
   $1729 = (_newtok($1728)|0);
   $token_column = $1729;
   label = 517;
   break;
  }
 }
 if ((label|0) == 24) {
  $75 = $1;
  $76 = ((($75)) + 72|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77 & -2;
  $79 = $78 | 1;
  HEAP8[$76>>0] = $79;
  $80 = $1;
  $81 = ((($80)) + 40|0);
  HEAP32[$81>>2] = 0;
  $0 = 10;
  $2013 = $0;
  STACKTOP = sp;return ($2013|0);
 }
 else if ((label|0) == 240) {
  $nondigit = 0;
  $seen_e = 0;
  $seen_point = 0;
  $is_float = 0;
  $722 = $1;
  $723 = ((($722)) + 40|0);
  HEAP32[$723>>2] = 1;
  $724 = $1;
  (_newtok($724)|0);
  $725 = $c;
  $726 = ($725|0)==(45);
  $727 = $c;
  $728 = ($727|0)==(43);
  $or$cond45 = $726 | $728;
  if ($or$cond45) {
   $729 = $1;
   $730 = $c;
   _tokadd($729,$730);
   $731 = $1;
   $732 = (_nextc($731)|0);
   $c = $732;
  }
  $733 = $c;
  $734 = ($733|0)==(48);
  L671: do {
   if ($734) {
    $735 = $1;
    $736 = (_toklen($735)|0);
    $start = $736;
    $737 = $1;
    $738 = (_nextc($737)|0);
    $c = $738;
    $739 = $c;
    $740 = ($739|0)==(120);
    $741 = $c;
    $742 = ($741|0)==(88);
    $or$cond48 = $740 | $742;
    if ($or$cond48) {
     $743 = $1;
     $744 = (_nextc($743)|0);
     $c = $744;
     $745 = $c;
     $746 = ($745|0)>=(0);
     L675: do {
      if ($746) {
       $747 = $c;
       $748 = (($747) - 48)|0;
       $749 = ($748>>>0)<(10);
       if (!($749)) {
        $750 = $c;
        $751 = $750 | 32;
        $752 = (($751) - 97)|0;
        $753 = ($752>>>0)<(6);
        if (!($753)) {
         break;
        }
       }
       while(1) {
        $754 = $c;
        $755 = ($754|0)==(95);
        if ($755) {
         $756 = $nondigit;
         $757 = ($756|0)!=(0);
         if ($757) {
          break L675;
         }
         $758 = $c;
         $nondigit = $758;
        } else {
         $759 = $c;
         $760 = (($759) - 48)|0;
         $761 = ($760>>>0)<(10);
         if (!($761)) {
          $762 = $c;
          $763 = $762 | 32;
          $764 = (($763) - 97)|0;
          $765 = ($764>>>0)<(6);
          if (!($765)) {
           break L675;
          }
         }
         $nondigit = 0;
         $766 = $1;
         $767 = $c;
         $768 = (_tolower($767)|0);
         _tokadd($766,$768);
        }
        $769 = $1;
        $770 = (_nextc($769)|0);
        $c = $770;
        $771 = ($770|0)>=(0);
        if (!($771)) {
         break;
        }
       }
      }
     } while(0);
     $772 = $1;
     $773 = $c;
     _pushback($772,$773);
     $774 = $1;
     _tokfix($774);
     $775 = $1;
     $776 = (_toklen($775)|0);
     $777 = $start;
     $778 = ($776|0)==($777|0);
     if ($778) {
      $779 = $1;
      _yyerror($779,57424);
      $0 = 0;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $780 = $nondigit;
     $781 = ($780|0)!=(0);
     if ($781) {
      label = 323;
      break;
     }
     $782 = $1;
     $783 = $1;
     $784 = (_tok($783)|0);
     $785 = (_new_int($782,$784,16)|0);
     $786 = $1;
     $787 = ((($786)) + 1132|0);
     $788 = HEAP32[$787>>2]|0;
     HEAP32[$788>>2] = $785;
     $0 = 313;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
    $789 = $c;
    $790 = ($789|0)==(98);
    $791 = $c;
    $792 = ($791|0)==(66);
    $or$cond51 = $790 | $792;
    if ($or$cond51) {
     $793 = $1;
     $794 = (_nextc($793)|0);
     $c = $794;
     $795 = $c;
     $796 = ($795|0)==(48);
     $797 = $c;
     $798 = ($797|0)==(49);
     $or$cond54 = $796 | $798;
     L699: do {
      if ($or$cond54) {
       while(1) {
        $799 = $c;
        $800 = ($799|0)==(95);
        if ($800) {
         $801 = $nondigit;
         $802 = ($801|0)!=(0);
         if ($802) {
          break L699;
         }
         $803 = $c;
         $nondigit = $803;
        } else {
         $804 = $c;
         $805 = ($804|0)!=(48);
         $806 = $c;
         $807 = ($806|0)!=(49);
         $or$cond57 = $805 & $807;
         if ($or$cond57) {
          break L699;
         }
         $nondigit = 0;
         $808 = $1;
         $809 = $c;
         _tokadd($808,$809);
        }
        $810 = $1;
        $811 = (_nextc($810)|0);
        $c = $811;
        $812 = ($811|0)>=(0);
        if (!($812)) {
         break;
        }
       }
      }
     } while(0);
     $813 = $1;
     $814 = $c;
     _pushback($813,$814);
     $815 = $1;
     _tokfix($815);
     $816 = $1;
     $817 = (_toklen($816)|0);
     $818 = $start;
     $819 = ($817|0)==($818|0);
     if ($819) {
      $820 = $1;
      _yyerror($820,57424);
      $0 = 0;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $821 = $nondigit;
     $822 = ($821|0)!=(0);
     if ($822) {
      label = 323;
      break;
     }
     $823 = $1;
     $824 = $1;
     $825 = (_tok($824)|0);
     $826 = (_new_int($823,$825,2)|0);
     $827 = $1;
     $828 = ((($827)) + 1132|0);
     $829 = HEAP32[$828>>2]|0;
     HEAP32[$829>>2] = $826;
     $0 = 313;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
    $830 = $c;
    $831 = ($830|0)==(100);
    $832 = $c;
    $833 = ($832|0)==(68);
    $or$cond60 = $831 | $833;
    if ($or$cond60) {
     $834 = $1;
     $835 = (_nextc($834)|0);
     $c = $835;
     $836 = $c;
     $837 = ($836|0)>=(0);
     L718: do {
      if ($837) {
       $838 = $c;
       $839 = (($838) - 48)|0;
       $840 = ($839>>>0)<(10);
       if ($840) {
        while(1) {
         $841 = $c;
         $842 = ($841|0)==(95);
         if ($842) {
          $843 = $nondigit;
          $844 = ($843|0)!=(0);
          if ($844) {
           break L718;
          }
          $845 = $c;
          $nondigit = $845;
         } else {
          $846 = $c;
          $847 = (($846) - 48)|0;
          $848 = ($847>>>0)<(10);
          if (!($848)) {
           break L718;
          }
          $nondigit = 0;
          $849 = $1;
          $850 = $c;
          _tokadd($849,$850);
         }
         $851 = $1;
         $852 = (_nextc($851)|0);
         $c = $852;
         $853 = ($852|0)>=(0);
         if (!($853)) {
          break;
         }
        }
       }
      }
     } while(0);
     $854 = $1;
     $855 = $c;
     _pushback($854,$855);
     $856 = $1;
     _tokfix($856);
     $857 = $1;
     $858 = (_toklen($857)|0);
     $859 = $start;
     $860 = ($858|0)==($859|0);
     if ($860) {
      $861 = $1;
      _yyerror($861,57424);
      $0 = 0;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
     $862 = $nondigit;
     $863 = ($862|0)!=(0);
     if ($863) {
      label = 323;
      break;
     }
     $864 = $1;
     $865 = $1;
     $866 = (_tok($865)|0);
     $867 = (_new_int($864,$866,10)|0);
     $868 = $1;
     $869 = ((($868)) + 1132|0);
     $870 = HEAP32[$869>>2]|0;
     HEAP32[$870>>2] = $867;
     $0 = 313;
     $2013 = $0;
     STACKTOP = sp;return ($2013|0);
    }
    $871 = $c;
    $872 = ($871|0)==(95);
    if ($872) {
     label = 289;
    } else {
     $873 = $c;
     $874 = ($873|0)==(111);
     $875 = $c;
     $876 = ($875|0)==(79);
     $or$cond63 = $874 | $876;
     do {
      if ($or$cond63) {
       $877 = $1;
       $878 = (_nextc($877)|0);
       $c = $878;
       $879 = $c;
       $880 = ($879|0)<(0);
       $881 = $c;
       $882 = ($881|0)==(95);
       $or$cond66 = $880 | $882;
       if (!($or$cond66)) {
        $883 = $c;
        $884 = (($883) - 48)|0;
        $885 = ($884>>>0)<(10);
        if ($885) {
         break;
        }
       }
       $886 = $1;
       _yyerror($886,57424);
       $0 = 0;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     } while(0);
     $887 = $c;
     $888 = ($887|0)>=(48);
     $889 = $c;
     $890 = ($889|0)<=(55);
     $or$cond69 = $888 & $890;
     if ($or$cond69) {
      label = 289;
     } else {
      label = 301;
     }
    }
    L745: do {
     if ((label|0) == 289) {
      while(1) {
       label = 0;
       $891 = $c;
       $892 = ($891|0)==(95);
       if ($892) {
        $893 = $nondigit;
        $894 = ($893|0)!=(0);
        if ($894) {
         break;
        }
        $895 = $c;
        $nondigit = $895;
       } else {
        $896 = $c;
        $897 = ($896|0)<(48);
        $898 = $c;
        $899 = ($898|0)>(57);
        $or$cond72 = $897 | $899;
        if ($or$cond72) {
         break;
        }
        $900 = $c;
        $901 = ($900|0)>(55);
        if ($901) {
         break L745;
        }
        $nondigit = 0;
        $902 = $1;
        $903 = $c;
        _tokadd($902,$903);
       }
       $904 = $1;
       $905 = (_nextc($904)|0);
       $c = $905;
       $906 = ($905|0)>=(0);
       if ($906) {
        label = 289;
       } else {
        break;
       }
      }
      $907 = $1;
      $908 = (_toklen($907)|0);
      $909 = $start;
      $910 = ($908|0)>($909|0);
      if (!($910)) {
       $923 = $nondigit;
       $924 = ($923|0)!=(0);
       if (!($924)) {
        label = 301;
        break;
       }
       $925 = $1;
       $926 = $c;
       _pushback($925,$926);
       label = 323;
       break L671;
      }
      $911 = $1;
      $912 = $c;
      _pushback($911,$912);
      $913 = $1;
      _tokfix($913);
      $914 = $nondigit;
      $915 = ($914|0)!=(0);
      if ($915) {
       label = 323;
       break L671;
      }
      $916 = $1;
      $917 = $1;
      $918 = (_tok($917)|0);
      $919 = (_new_int($916,$918,8)|0);
      $920 = $1;
      $921 = ((($920)) + 1132|0);
      $922 = HEAP32[$921>>2]|0;
      HEAP32[$922>>2] = $919;
      $0 = 313;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
    } while(0);
    if ((label|0) == 301) {
     $927 = $c;
     $928 = ($927|0)>(55);
     $929 = $c;
     $930 = ($929|0)<=(57);
     $or$cond75 = $928 & $930;
     if (!($or$cond75)) {
      $932 = $c;
      $933 = ($932|0)==(46);
      $934 = $c;
      $935 = ($934|0)==(101);
      $or$cond78 = $933 | $935;
      $936 = $c;
      $937 = ($936|0)==(69);
      $or$cond81 = $or$cond78 | $937;
      $938 = $1;
      if ($or$cond81) {
       _tokadd($938,48);
       label = 306;
       break;
      }
      $939 = $c;
      _pushback($938,$939);
      $940 = $1;
      $941 = (_new_int($940,57475,10)|0);
      $942 = $1;
      $943 = ((($942)) + 1132|0);
      $944 = HEAP32[$943>>2]|0;
      HEAP32[$944>>2] = $941;
      $0 = 313;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
    }
    $931 = $1;
    _yyerror($931,57455);
    label = 306;
   } else {
    label = 306;
   }
  } while(0);
  L770: do {
   if ((label|0) == 306) {
    L771: while(1) {
     label = 0;
     $945 = $c;
     switch ($945|0) {
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $nondigit = 0;
      $946 = $1;
      $947 = $c;
      _tokadd($946,$947);
      break;
     }
     case 46:  {
      $948 = $nondigit;
      $949 = ($948|0)!=(0);
      if ($949) {
       label = 323;
       break L770;
      }
      $950 = $seen_point;
      $951 = ($950|0)!=(0);
      $952 = $seen_e;
      $953 = ($952|0)!=(0);
      $or$cond84 = $951 | $953;
      if ($or$cond84) {
       break L771;
      }
      $954 = $1;
      $955 = (_nextc($954)|0);
      $c0 = $955;
      $956 = $c0;
      $957 = ($956|0)<(0);
      if ($957) {
       label = 312;
       break L771;
      }
      $958 = $c0;
      $959 = (($958) - 48)|0;
      $960 = ($959>>>0)<(10);
      if (!($960)) {
       label = 312;
       break L771;
      }
      $963 = $c0;
      $c = $963;
      $964 = $1;
      _tokadd($964,46);
      $965 = $1;
      $966 = $c;
      _tokadd($965,$966);
      $967 = $is_float;
      $968 = (($967) + 1)|0;
      $is_float = $968;
      $969 = $seen_point;
      $970 = (($969) + 1)|0;
      $seen_point = $970;
      $nondigit = 0;
      break;
     }
     case 69: case 101:  {
      $971 = $nondigit;
      $972 = ($971|0)!=(0);
      if ($972) {
       label = 315;
       break L771;
      }
      $976 = $seen_e;
      $977 = ($976|0)!=(0);
      if ($977) {
       break L771;
      }
      $978 = $1;
      $979 = $c;
      _tokadd($978,$979);
      $980 = $seen_e;
      $981 = (($980) + 1)|0;
      $seen_e = $981;
      $982 = $is_float;
      $983 = (($982) + 1)|0;
      $is_float = $983;
      $984 = $c;
      $nondigit = $984;
      $985 = $1;
      $986 = (_nextc($985)|0);
      $c = $986;
      $987 = $c;
      $988 = ($987|0)!=(45);
      $989 = $c;
      $990 = ($989|0)!=(43);
      $or$cond87 = $988 & $990;
      if ($or$cond87) {
       label = 306;
       continue L771;
      }
      $991 = $1;
      $992 = $c;
      _tokadd($991,$992);
      $993 = $c;
      $nondigit = $993;
      break;
     }
     case 95:  {
      $994 = $nondigit;
      $995 = ($994|0)!=(0);
      if ($995) {
       break L771;
      }
      $996 = $c;
      $nondigit = $996;
      break;
     }
     default: {
      break L771;
     }
     }
     $997 = $1;
     $998 = (_nextc($997)|0);
     $c = $998;
     label = 306;
    }
    if ((label|0) == 312) {
     $961 = $1;
     $962 = $c0;
     _pushback($961,$962);
    }
    else if ((label|0) == 315) {
     $973 = $1;
     $974 = $c;
     _pushback($973,$974);
     $975 = $nondigit;
     $c = $975;
    }
    $999 = $1;
    $1000 = $c;
    _pushback($999,$1000);
    $1001 = $nondigit;
    $1002 = ($1001|0)!=(0);
    if ($1002) {
     label = 323;
    }
   }
  } while(0);
  if ((label|0) == 323) {
   $1003 = $1;
   $1004 = $nondigit;
   _yyerror_i($1003,57477,$1004);
  }
  $1005 = $1;
  _tokfix($1005);
  $1006 = $is_float;
  $1007 = ($1006|0)!=(0);
  if (!($1007)) {
   $1035 = $1;
   $1036 = $1;
   $1037 = (_tok($1036)|0);
   $1038 = (_new_int($1035,$1037,10)|0);
   $1039 = $1;
   $1040 = ((($1039)) + 1132|0);
   $1041 = HEAP32[$1040>>2]|0;
   HEAP32[$1041>>2] = $1038;
   $0 = 313;
   $2013 = $0;
   STACKTOP = sp;return ($2013|0);
  }
  $1008 = (___errno_location()|0);
  HEAP32[$1008>>2] = 0;
  $1009 = $1;
  $1010 = (_tok($1009)|0);
  $1011 = (+_strtod($1010,$endp));
  $d = $1011;
  $1012 = $d;
  $1013 = $1012 == 0.0;
  if ($1013) {
   $1014 = HEAP32[$endp>>2]|0;
   $1015 = $1;
   $1016 = (_tok($1015)|0);
   $1017 = ($1014|0)==($1016|0);
   if ($1017) {
    $1018 = $1;
    $1019 = $1;
    $1020 = (_tok($1019)|0);
    _yywarning_s($1018,57501,$1020);
   } else {
    label = 328;
   }
  } else {
   label = 328;
  }
  if ((label|0) == 328) {
   $1021 = (___errno_location()|0);
   $1022 = HEAP32[$1021>>2]|0;
   $1023 = ($1022|0)==(34);
   if ($1023) {
    $1024 = $1;
    $1025 = $1;
    $1026 = (_tok($1025)|0);
    _yywarning_s($1024,57526,$1026);
    $1027 = (___errno_location()|0);
    HEAP32[$1027>>2] = 0;
   }
  }
  $1028 = $1;
  $1029 = $1;
  $1030 = (_tok($1029)|0);
  $1031 = (_new_float($1028,$1030)|0);
  $1032 = $1;
  $1033 = ((($1032)) + 1132|0);
  $1034 = HEAP32[$1033>>2]|0;
  HEAP32[$1034>>2] = $1031;
  $0 = 314;
  $2013 = $0;
  STACKTOP = sp;return ($2013|0);
 }
 else if ((label|0) == 333) {
  $1046 = $1;
  $1047 = ((($1046)) + 48|0);
  $1048 = HEAP32[$1047>>2]|0;
  $1049 = $1048 >>> 1;
  $1050 = $1;
  $1051 = ((($1050)) + 48|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = $1052 & 1;
  $1054 = $1049 | $1053;
  $1055 = $1;
  $1056 = ((($1055)) + 48|0);
  HEAP32[$1056>>2] = $1054;
  $1057 = $1;
  $1058 = ((($1057)) + 52|0);
  $1059 = HEAP32[$1058>>2]|0;
  $1060 = $1059 >>> 1;
  $1061 = $1;
  $1062 = ((($1061)) + 52|0);
  $1063 = HEAP32[$1062>>2]|0;
  $1064 = $1063 & 1;
  $1065 = $1060 | $1064;
  $1066 = $1;
  $1067 = ((($1066)) + 52|0);
  HEAP32[$1067>>2] = $1065;
  $1068 = $c;
  $1069 = ($1068|0)==(41);
  $1070 = $1;
  $1071 = ((($1070)) + 40|0);
  if ($1069) {
   HEAP32[$1071>>2] = 3;
  } else {
   HEAP32[$1071>>2] = 2;
  }
  $1072 = $c;
  $0 = $1072;
  $2013 = $0;
  STACKTOP = sp;return ($2013|0);
 }
 else if ((label|0) == 517) {
  while(1) {
   label = 0;
   $1730 = $1;
   $1731 = $c;
   _tokadd($1730,$1731);
   $1732 = $1;
   $1733 = (_nextc($1732)|0);
   $c = $1733;
   $1734 = $c;
   $1735 = ($1734|0)<(0);
   if ($1735) {
    break;
   }
   $1736 = $c;
   $1737 = $1736 | 32;
   $1738 = (($1737) - 97)|0;
   $1739 = ($1738>>>0)<(26);
   if ($1739) {
    label = 517;
    continue;
   }
   $1740 = $c;
   $1741 = (($1740) - 48)|0;
   $1742 = ($1741>>>0)<(10);
   $1743 = $c;
   $1744 = ($1743|0)==(95);
   $or$cond145 = $1742 | $1744;
   if ($or$cond145) {
    label = 517;
    continue;
   }
   $1745 = $c;
   $1746 = ($1745>>>0)<=(127);
   $1747 = $1746 ^ 1;
   if ($1747) {
    label = 517;
   } else {
    break;
   }
  }
  $1748 = $token_column;
  $1749 = ($1748|0)==(0);
  if ($1749) {
   $1750 = $1;
   $1751 = (_toklen($1750)|0);
   $1752 = ($1751|0)==(7);
   if ($1752) {
    $1753 = $c;
    $1754 = ($1753|0)<(0);
    $1755 = $c;
    $1756 = ($1755|0)==(10);
    $or$cond150 = $1754 | $1756;
    if ($or$cond150) {
     $1757 = $1;
     $1758 = (_tok($1757)|0);
     $1759 = $1;
     $1760 = (_toklen($1759)|0);
     $1761 = (_strncmp($1758,57887,$1760)|0);
     $1762 = ($1761|0)==(0);
     if ($1762) {
      $0 = -1;
      $2013 = $0;
      STACKTOP = sp;return ($2013|0);
     }
    }
   }
  }
  $1763 = $1;
  $1764 = (_tok($1763)|0);
  $1765 = HEAP8[$1764>>0]|0;
  $1766 = $1765 << 24 >> 24;
  L825: do {
   switch ($1766|0) {
   case 36: case 64:  {
    $1767 = $1;
    $1768 = $c;
    _pushback($1767,$1768);
    break;
   }
   default: {
    $1769 = $c;
    $1770 = ($1769|0)==(33);
    $1771 = $c;
    $1772 = ($1771|0)==(63);
    $or$cond153 = $1770 | $1772;
    if ($or$cond153) {
     $1773 = $1;
     $1774 = (_peek_n($1773,61,0)|0);
     $1775 = ($1774<<24>>24)!=(0);
     if (!($1775)) {
      $1776 = $1;
      $1777 = $c;
      _tokadd($1776,$1777);
      break L825;
     }
    }
    $1778 = $1;
    $1779 = $c;
    _pushback($1778,$1779);
   }
   }
  } while(0);
  $1780 = $1;
  _tokfix($1780);
  $result = 0;
  $1781 = $1;
  $1782 = (_tok($1781)|0);
  $1783 = HEAP8[$1782>>0]|0;
  $1784 = $1783 << 24 >> 24;
  L833: do {
   switch ($1784|0) {
   case 36:  {
    $1785 = $1;
    $1786 = ((($1785)) + 40|0);
    HEAP32[$1786>>2] = 1;
    $result = 308;
    break;
   }
   case 64:  {
    $1787 = $1;
    $1788 = ((($1787)) + 40|0);
    HEAP32[$1788>>2] = 1;
    $1789 = $1;
    $1790 = (_tok($1789)|0);
    $1791 = ((($1790)) + 1|0);
    $1792 = HEAP8[$1791>>0]|0;
    $1793 = $1792 << 24 >> 24;
    $1794 = ($1793|0)==(64);
    if ($1794) {
     $result = 311;
     break L833;
    } else {
     $result = 309;
     break L833;
    }
    break;
   }
   default: {
    $1795 = $1;
    $1796 = (_toklast($1795)|0);
    $1797 = ($1796|0)==(33);
    do {
     if ($1797) {
      label = 539;
     } else {
      $1798 = $1;
      $1799 = (_toklast($1798)|0);
      $1800 = ($1799|0)==(63);
      if ($1800) {
       label = 539;
      } else {
       $1801 = $1;
       $1802 = ((($1801)) + 40|0);
       $1803 = HEAP32[$1802>>2]|0;
       $1804 = ($1803|0)==(7);
       L838: do {
        if ($1804) {
         $1805 = $1;
         $1806 = (_nextc($1805)|0);
         $c = $1806;
         $1807 = ($1806|0)==(61);
         do {
          if ($1807) {
           $1808 = $1;
           $1809 = (_peek_n($1808,126,0)|0);
           $1810 = ($1809<<24>>24)!=(0);
           if (!($1810)) {
            $1811 = $1;
            $1812 = (_peek_n($1811,62,0)|0);
            $1813 = ($1812<<24>>24)!=(0);
            if (!($1813)) {
             $1814 = $1;
             $1815 = (_peek_n($1814,61,0)|0);
             $1816 = ($1815<<24>>24)!=(0);
             if ($1816) {
              $1817 = $1;
              $1818 = (_peek_n($1817,62,1)|0);
              $1819 = $1818&255;
              $1820 = ($1819|0)!=(0);
              if (!($1820)) {
               break;
              }
             }
             $result = 306;
             $1821 = $1;
             $1822 = $c;
             _tokadd($1821,$1822);
             $1823 = $1;
             _tokfix($1823);
             break L838;
            }
           }
          }
         } while(0);
         $1824 = $1;
         $1825 = $c;
         _pushback($1824,$1825);
        }
       } while(0);
       $1826 = $result;
       $1827 = ($1826|0)==(0);
       if ($1827) {
        $1828 = $1;
        $1829 = (_tok($1828)|0);
        $1830 = HEAP8[$1829>>0]|0;
        $1831 = $1830 << 24 >> 24;
        $1832 = (($1831) - 65)|0;
        $1833 = ($1832>>>0)<(26);
        if ($1833) {
         $result = 310;
         break;
        }
       }
       $result = 306;
      }
     }
    } while(0);
    if ((label|0) == 539) {
     $result = 307;
    }
    $1834 = $1;
    $1835 = ((($1834)) + 40|0);
    $1836 = HEAP32[$1835>>2]|0;
    $1837 = ($1836|0)!=(0);
    $1838 = $cmd_state;
    $1839 = ($1838|0)!=(0);
    $or$cond156 = $1837 | $1839;
    if ($or$cond156) {
     $1840 = $1;
     $1841 = ((($1840)) + 40|0);
     $1842 = HEAP32[$1841>>2]|0;
     $1843 = ($1842|0)==(4);
     if ($1843) {
      label = 555;
     } else {
      $1844 = $1;
      $1845 = ((($1844)) + 40|0);
      $1846 = HEAP32[$1845>>2]|0;
      $1847 = ($1846|0)==(5);
      if ($1847) {
       label = 555;
      }
     }
    } else {
     label = 555;
    }
    if ((label|0) == 555) {
     $1848 = $1;
     $1849 = (_peek_n($1848,58,0)|0);
     $1850 = $1849&255;
     $1851 = ($1850|0)!=(0);
     if ($1851) {
      $1852 = $1;
      $1853 = (_peek_n($1852,58,1)|0);
      $1854 = ($1853<<24>>24)!=(0);
      if (!($1854)) {
       $1855 = $1;
       $1856 = ((($1855)) + 40|0);
       HEAP32[$1856>>2] = 0;
       $1857 = $1;
       (_nextc($1857)|0);
       $1858 = $1;
       _tokfix($1858);
       $1859 = $1;
       $1860 = $1;
       $1861 = (_tok($1860)|0);
       $1862 = (_intern_cstr_gen($1859,$1861)|0);
       $1863 = $1;
       $1864 = ((($1863)) + 1132|0);
       $1865 = HEAP32[$1864>>2]|0;
       HEAP32[$1865>>2] = $1862;
       $0 = 312;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     }
    }
    $1866 = $1;
    $1867 = ((($1866)) + 40|0);
    $1868 = HEAP32[$1867>>2]|0;
    $1869 = ($1868|0)!=(8);
    if ($1869) {
     $1870 = $1;
     $1871 = (_tok($1870)|0);
     $1872 = $1;
     $1873 = (_toklen($1872)|0);
     $1874 = (_reserved_word($1871,$1873)|0);
     $kw = $1874;
     $1875 = $kw;
     $1876 = ($1875|0)!=(0|0);
     if ($1876) {
      $1877 = $1;
      $1878 = ((($1877)) + 40|0);
      $1879 = HEAP32[$1878>>2]|0;
      $state = $1879;
      $1880 = $1;
      $1881 = ((($1880)) + 32|0);
      $1882 = HEAP32[$1881>>2]|0;
      $1883 = $1;
      $1884 = ((($1883)) + 1132|0);
      $1885 = HEAP32[$1884>>2]|0;
      HEAP32[$1885>>2] = $1882;
      $1886 = $kw;
      $1887 = ((($1886)) + 12|0);
      $1888 = HEAP32[$1887>>2]|0;
      $1889 = $1;
      $1890 = ((($1889)) + 40|0);
      HEAP32[$1890>>2] = $1888;
      $1891 = $state;
      $1892 = ($1891|0)==(7);
      $1893 = $1;
      if ($1892) {
       $1894 = $kw;
       $1895 = HEAP32[$1894>>2]|0;
       $1896 = (_intern_cstr_gen($1893,$1895)|0);
       $1897 = $1;
       $1898 = ((($1897)) + 1132|0);
       $1899 = HEAP32[$1898>>2]|0;
       HEAP32[$1899>>2] = $1896;
       $1900 = $kw;
       $1901 = ((($1900)) + 4|0);
       $1902 = HEAP32[$1901>>2]|0;
       $0 = $1902;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
      $1903 = ((($1893)) + 40|0);
      $1904 = HEAP32[$1903>>2]|0;
      $1905 = ($1904|0)==(0);
      if ($1905) {
       $1906 = $1;
       $1907 = ((($1906)) + 72|0);
       $1908 = HEAP8[$1907>>0]|0;
       $1909 = $1908 & -2;
       $1910 = $1909 | 1;
       HEAP8[$1907>>0] = $1910;
      }
      $1911 = $kw;
      $1912 = ((($1911)) + 4|0);
      $1913 = HEAP32[$1912>>2]|0;
      $1914 = ($1913|0)==(281);
      if (!($1914)) {
       $1948 = $state;
       $1949 = ($1948|0)==(0);
       $1950 = $state;
       $1951 = ($1950|0)==(10);
       $or$cond165 = $1949 | $1951;
       $1952 = $kw;
       $1953 = ((($1952)) + 4|0);
       $1954 = HEAP32[$1953>>2]|0;
       if ($or$cond165) {
        $0 = $1954;
        $2013 = $0;
        STACKTOP = sp;return ($2013|0);
       }
       $1955 = $kw;
       $1956 = ((($1955)) + 4|0);
       $1957 = ((($1956)) + 4|0);
       $1958 = HEAP32[$1957>>2]|0;
       $1959 = ($1954|0)!=($1958|0);
       if ($1959) {
        $1960 = $1;
        $1961 = ((($1960)) + 40|0);
        HEAP32[$1961>>2] = 0;
       }
       $1962 = $kw;
       $1963 = ((($1962)) + 4|0);
       $1964 = ((($1963)) + 4|0);
       $1965 = HEAP32[$1964>>2]|0;
       $0 = $1965;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
      $1915 = $1;
      $1916 = ((($1915)) + 60|0);
      $1917 = HEAP32[$1916>>2]|0;
      $1918 = ($1917|0)!=(0);
      if ($1918) {
       $1919 = $1;
       $1920 = ((($1919)) + 60|0);
       $1921 = HEAP32[$1920>>2]|0;
       $1922 = $1;
       $1923 = ((($1922)) + 56|0);
       $1924 = HEAP32[$1923>>2]|0;
       $1925 = ($1921|0)==($1924|0);
       if ($1925) {
        $1926 = $1;
        $1927 = ((($1926)) + 60|0);
        HEAP32[$1927>>2] = 0;
        $1928 = $1;
        $1929 = ((($1928)) + 56|0);
        $1930 = HEAP32[$1929>>2]|0;
        $1931 = (($1930) + -1)|0;
        HEAP32[$1929>>2] = $1931;
        $0 = 284;
        $2013 = $0;
        STACKTOP = sp;return ($2013|0);
       }
      }
      $1932 = $1;
      $1933 = ((($1932)) + 48|0);
      $1934 = HEAP32[$1933>>2]|0;
      $1935 = $1934 & 1;
      $1936 = ($1935|0)!=(0);
      if ($1936) {
       $0 = 282;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
      $1937 = $1;
      $1938 = ((($1937)) + 52|0);
      $1939 = HEAP32[$1938>>2]|0;
      $1940 = $1939 & 1;
      $1941 = ($1940|0)!=(0);
      $1942 = $state;
      $1943 = ($1942|0)!=(5);
      $or$cond159 = $1941 & $1943;
      if ($or$cond159) {
       $0 = 283;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
      $1944 = $state;
      $1945 = ($1944|0)==(2);
      $1946 = $state;
      $1947 = ($1946|0)==(0);
      $or$cond162 = $1945 | $1947;
      if ($or$cond162) {
       $0 = 283;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      } else {
       $0 = 281;
       $2013 = $0;
       STACKTOP = sp;return ($2013|0);
      }
     }
    }
    $1966 = $1;
    $1967 = ((($1966)) + 40|0);
    $1968 = HEAP32[$1967>>2]|0;
    $1969 = ($1968|0)==(0);
    if (!($1969)) {
     $1970 = $1;
     $1971 = ((($1970)) + 40|0);
     $1972 = HEAP32[$1971>>2]|0;
     $1973 = ($1972|0)==(6);
     if (!($1973)) {
      $1974 = $1;
      $1975 = ((($1974)) + 40|0);
      $1976 = HEAP32[$1975>>2]|0;
      $1977 = ($1976|0)==(10);
      if (!($1977)) {
       $1978 = $1;
       $1979 = ((($1978)) + 40|0);
       $1980 = HEAP32[$1979>>2]|0;
       $1981 = ($1980|0)==(9);
       if (!($1981)) {
        $1982 = $1;
        $1983 = ((($1982)) + 40|0);
        $1984 = HEAP32[$1983>>2]|0;
        $1985 = ($1984|0)==(8);
        if (!($1985)) {
         $1986 = $1;
         $1987 = ((($1986)) + 40|0);
         $1988 = HEAP32[$1987>>2]|0;
         $1989 = ($1988|0)==(4);
         if (!($1989)) {
          $1990 = $1;
          $1991 = ((($1990)) + 40|0);
          $1992 = HEAP32[$1991>>2]|0;
          $1993 = ($1992|0)==(5);
          if (!($1993)) {
           $1998 = $1;
           $1999 = ((($1998)) + 40|0);
           $2000 = HEAP32[$1999>>2]|0;
           $2001 = ($2000|0)==(7);
           $2002 = $1;
           $2003 = ((($2002)) + 40|0);
           if ($2001) {
            HEAP32[$2003>>2] = 3;
            break L833;
           } else {
            HEAP32[$2003>>2] = 1;
            break L833;
           }
          }
         }
        }
       }
      }
     }
    }
    $1994 = $cmd_state;
    $1995 = ($1994|0)!=(0);
    $1996 = $1;
    $1997 = ((($1996)) + 40|0);
    if ($1995) {
     HEAP32[$1997>>2] = 5;
     break L833;
    } else {
     HEAP32[$1997>>2] = 4;
     break L833;
    }
   }
   }
  } while(0);
  $2004 = $1;
  $2005 = $1;
  $2006 = (_tok($2005)|0);
  $2007 = (_intern_cstr_gen($2004,$2006)|0);
  $ident = $2007;
  $2008 = $ident;
  $2009 = $1;
  $2010 = ((($2009)) + 1132|0);
  $2011 = HEAP32[$2010>>2]|0;
  HEAP32[$2011>>2] = $2008;
  $2012 = $result;
  $0 = $2012;
  $2013 = $0;
  STACKTOP = sp;return ($2013|0);
 }
 return (0)|0;
}
function _parse_string($p) {
 $p = $p|0;
 var $$old = 0, $$old4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $beg = 0, $buf = 0, $c = 0, $dup = 0, $enc = 0, $encp = 0, $end = 0;
 var $f = 0, $flag = 0, $flags = 0, $hinf = 0, $len = 0, $line_head = 0, $msg = 0, $nest_level = 0, $or$cond = 0, $or$cond5 = 0, $re_opt = 0, $s = 0, $s1 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 216|0;
 $flags = sp + 209|0;
 $enc = sp + 208|0;
 $msg = sp + 80|0;
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $type = $6;
 $7 = $1;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $nest_level = $13;
 $14 = $1;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21;
 $beg = $22;
 $23 = $1;
 $24 = ((($23)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31;
 $end = $32;
 $33 = $type;
 $34 = $33 & 64;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $1;
  $37 = (_parsing_heredoc_inf($36)|0);
  $38 = $37;
 } else {
  $38 = 0;
 }
 $hinf = $38;
 $39 = $1;
 (_newtok($39)|0);
 L4: while(1) {
  $40 = $1;
  $41 = (_nextc($40)|0);
  $c = $41;
  $42 = $end;
  $43 = ($41|0)!=($42|0);
  $44 = $nest_level;
  $45 = ($44|0)!=(0);
  $46 = $43 ? 1 : $45;
  if (!($46)) {
   label = 66;
   break;
  }
  $47 = $hinf;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $49 = $c;
   $50 = ($49|0)==(10);
   $51 = $c;
   $52 = ($51|0)<(0);
   $or$cond = $50 | $52;
   if ($or$cond) {
    label = 7;
    break;
   }
  }
  $123 = $c;
  $124 = ($123|0)<(0);
  if ($124) {
   label = 20;
   break;
  }
  $126 = $c;
  $127 = $beg;
  $128 = ($126|0)==($127|0);
  do {
   if ($128) {
    $129 = $nest_level;
    $130 = (($129) + 1)|0;
    $nest_level = $130;
    $131 = $nest_level;
    $132 = $131;
    $133 = $1;
    $134 = ((($133)) + 44|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($135)) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    HEAP32[$137>>2] = $132;
   } else {
    $138 = $c;
    $139 = $end;
    $140 = ($138|0)==($139|0);
    if ($140) {
     $141 = $nest_level;
     $142 = (($141) + -1)|0;
     $nest_level = $142;
     $143 = $nest_level;
     $144 = $143;
     $145 = $1;
     $146 = ((($145)) + 44|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ((($147)) + 4|0);
     $149 = HEAP32[$148>>2]|0;
     HEAP32[$149>>2] = $144;
     break;
    }
    $150 = $c;
    $151 = ($150|0)==(92);
    if (!($151)) {
     $218 = $c;
     $219 = ($218|0)==(35);
     if (!($219)) {
      break;
     }
     $220 = $type;
     $221 = $220 & 2;
     $222 = ($221|0)!=(0);
     if (!($222)) {
      break;
     }
     $223 = $1;
     $224 = (_nextc($223)|0);
     $c = $224;
     $225 = $c;
     $226 = ($225|0)==(123);
     $227 = $1;
     if ($226) {
      label = 50;
      break L4;
     }
     _tokadd($227,35);
     $249 = $1;
     $250 = $c;
     _pushback($249,$250);
     continue L4;
    }
    $152 = $1;
    $153 = (_nextc($152)|0);
    $c = $153;
    $154 = $type;
    $155 = $154 & 2;
    $156 = ($155|0)!=(0);
    $157 = $c;
    if ($156) {
     $158 = $end;
     $159 = ($157|0)==($158|0);
     if (!($159)) {
      $160 = $c;
      $161 = $beg;
      $162 = ($160|0)==($161|0);
      if (!($162)) {
       $165 = $c;
       $166 = ($165|0)==(10);
       if ($166) {
        $167 = $1;
        $168 = ((($167)) + 32|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (($169) + 1)|0;
        HEAP32[$168>>2] = $170;
        $171 = $1;
        $172 = ((($171)) + 36|0);
        HEAP32[$172>>2] = 0;
        $173 = $type;
        $174 = $173 & 32;
        $175 = ($174|0)!=(0);
        if (!($175)) {
         continue L4;
        }
        $176 = $1;
        _tokadd($176,10);
        continue L4;
       }
       $177 = $type;
       $178 = $177 & 4;
       $179 = ($178|0)!=(0);
       $180 = $1;
       if ($179) {
        _tokadd($180,92);
        $181 = $1;
        $182 = $c;
        _tokadd($181,$182);
        continue L4;
       }
       $183 = $c;
       _pushback($180,$183);
       $184 = $1;
       $185 = $1;
       $186 = (_read_escape($185)|0);
       _tokadd($184,$186);
       $187 = $hinf;
       $188 = ($187|0)!=(0|0);
       if (!($188)) {
        continue L4;
       }
       $189 = $hinf;
       $190 = HEAP8[$189>>0]|0;
       $191 = $190 & -3;
       HEAP8[$189>>0] = $191;
       continue L4;
      }
     }
     $163 = $1;
     $164 = $c;
     _tokadd($163,$164);
     continue L4;
    } else {
     $192 = $beg;
     $193 = ($157|0)!=($192|0);
     do {
      if ($193) {
       $194 = $c;
       $195 = $end;
       $196 = ($194|0)!=($195|0);
       if ($196) {
        $197 = $c;
        $198 = ($197|0)==(10);
        if ($198) {
         $199 = $1;
         $200 = ((($199)) + 32|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = (($201) + 1)|0;
         HEAP32[$200>>2] = $202;
         $203 = $1;
         $204 = ((($203)) + 36|0);
         HEAP32[$204>>2] = 0;
        }
        $205 = $c;
        $206 = ($205|0)==(92);
        if (!($206)) {
         $207 = $type;
         $208 = $207 & 32;
         $209 = ($208|0)!=(0);
         if ($209) {
          $210 = $c;
          $211 = ($210|0)==(32);
          if ($211) {
           break;
          }
          $212 = $c;
          $213 = (($212) - 9)|0;
          $214 = ($213>>>0)<(5);
          if ($214) {
           break;
          }
         }
         $215 = $1;
         _tokadd($215,92);
        }
       }
      }
     } while(0);
     $216 = $1;
     $217 = $c;
     _tokadd($216,$217);
     continue L4;
    }
   }
  } while(0);
  $251 = $type;
  $252 = $251 & 32;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $c;
   $255 = ($254|0)==(32);
   if ($255) {
    label = 57;
    break;
   }
   $256 = $c;
   $257 = (($256) - 9)|0;
   $258 = ($257>>>0)<(5);
   if ($258) {
    label = 57;
    break;
   }
  }
  $296 = $1;
  $297 = $c;
  _tokadd($296,$297);
 }
 if ((label|0) == 7) {
  $53 = $1;
  _tokadd($53,10);
  $54 = $1;
  _tokfix($54);
  $55 = $1;
  $56 = ((($55)) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$56>>2] = $58;
  $59 = $1;
  $60 = ((($59)) + 36|0);
  HEAP32[$60>>2] = 0;
  $61 = $hinf;
  $62 = HEAP8[$61>>0]|0;
  $63 = ($62&255) >>> 1;
  $64 = $63 & 1;
  $line_head = $64;
  $65 = $hinf;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 & -3;
  $68 = $67 | 2;
  HEAP8[$65>>0] = $68;
  $69 = $line_head;
  $70 = ($69<<24>>24)!=(0);
  if ($70) {
   $71 = $1;
   $72 = (_tok($71)|0);
   $s = $72;
   $73 = $1;
   $74 = (_toklen($73)|0);
   $len = $74;
   $75 = $hinf;
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 & 1;
   $78 = ($77<<24>>24)!=(0);
   L131: do {
    if ($78) {
     while(1) {
      $79 = $s;
      $80 = HEAP8[$79>>0]|0;
      $81 = $80 << 24 >> 24;
      $82 = ($81|0)==(32);
      if ($82) {
       $$old = $len;
       $$old4 = ($$old|0)>(0);
       if (!($$old4)) {
        break L131;
       }
      } else {
       $83 = $s;
       $84 = HEAP8[$83>>0]|0;
       $85 = $84 << 24 >> 24;
       $86 = (($85) - 9)|0;
       $87 = ($86>>>0)<(5);
       $88 = $len;
       $89 = ($88|0)>(0);
       $or$cond5 = $87 & $89;
       if (!($or$cond5)) {
        break L131;
       }
      }
      $90 = $s;
      $91 = ((($90)) + 1|0);
      $s = $91;
      $92 = $len;
      $93 = (($92) + -1)|0;
      $len = $93;
     }
    }
   } while(0);
   $94 = $len;
   $95 = (($94) - 1)|0;
   $96 = $hinf;
   $97 = ((($96)) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($95|0)==($98|0);
   if ($99) {
    $100 = $s;
    $101 = $hinf;
    $102 = ((($101)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $len;
    $105 = (($104) - 1)|0;
    $106 = (_strncmp($100,$103,$105)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     $0 = 365;
     $410 = $0;
     STACKTOP = sp;return ($410|0);
    }
   }
  }
  $108 = $c;
  $109 = ($108|0)<(0);
  if ($109) {
   $110 = $hinf;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   HEAP32[$vararg_buffer>>2] = $112;
   (_snprintf($buf,256,56872,$vararg_buffer)|0);
   $113 = $1;
   _yyerror($113,$buf);
   $0 = 0;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  } else {
   $114 = $1;
   $115 = $1;
   $116 = (_tok($115)|0);
   $117 = $1;
   $118 = (_toklen($117)|0);
   $119 = (_new_str($114,$116,$118)|0);
   $120 = $1;
   $121 = ((($120)) + 1132|0);
   $122 = HEAP32[$121>>2]|0;
   HEAP32[$122>>2] = $119;
   $0 = 369;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
 }
 else if ((label|0) == 20) {
  $125 = $1;
  _yyerror($125,56926);
  $0 = 0;
  $410 = $0;
  STACKTOP = sp;return ($410|0);
 }
 else if ((label|0) == 50) {
  _tokfix($227);
  $228 = $1;
  $229 = ((($228)) + 40|0);
  HEAP32[$229>>2] = 0;
  $230 = $1;
  $231 = ((($230)) + 72|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232 & -2;
  $234 = $233 | 1;
  HEAP8[$231>>0] = $234;
  $235 = $1;
  $236 = $1;
  $237 = (_tok($236)|0);
  $238 = $1;
  $239 = (_toklen($238)|0);
  $240 = (_new_str($235,$237,$239)|0);
  $241 = $1;
  $242 = ((($241)) + 1132|0);
  $243 = HEAP32[$242>>2]|0;
  HEAP32[$243>>2] = $240;
  $244 = $hinf;
  $245 = ($244|0)!=(0|0);
  if ($245) {
   $246 = $hinf;
   $247 = HEAP8[$246>>0]|0;
   $248 = $247 & -3;
   HEAP8[$246>>0] = $248;
   $0 = 368;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  } else {
   $0 = 319;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
 }
 else if ((label|0) == 57) {
  $259 = $1;
  $260 = (_toklen($259)|0);
  $261 = ($260|0)==(0);
  if (!($261)) {
   $284 = $1;
   $285 = $c;
   _pushback($284,$285);
   $286 = $1;
   _tokfix($286);
   $287 = $1;
   $288 = $1;
   $289 = (_tok($288)|0);
   $290 = $1;
   $291 = (_toklen($290)|0);
   $292 = (_new_str($287,$289,$291)|0);
   $293 = $1;
   $294 = ((($293)) + 1132|0);
   $295 = HEAP32[$294>>2]|0;
   HEAP32[$295>>2] = $292;
   $0 = 320;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
  while(1) {
   $262 = $c;
   $263 = ($262|0)==(10);
   if ($263) {
    $264 = $1;
    $265 = ((($264)) + 32|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = (($266) + 1)|0;
    HEAP32[$265>>2] = $267;
    $268 = $1;
    $269 = ((($268)) + 36|0);
    HEAP32[$269>>2] = 0;
    $270 = $1;
    _heredoc_treat_nextline($270);
    $271 = $1;
    $272 = ((($271)) + 1120|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($273|0)!=(0|0);
    if ($274) {
     label = 60;
     break;
    }
   }
   $275 = $1;
   $276 = (_nextc($275)|0);
   $c = $276;
   $277 = $c;
   $278 = ($277|0)==(32);
   if ($278) {
    continue;
   }
   $279 = $c;
   $280 = (($279) - 9)|0;
   $281 = ($280>>>0)<(5);
   if (!($281)) {
    label = 63;
    break;
   }
  }
  if ((label|0) == 60) {
   $0 = 367;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
  else if ((label|0) == 63) {
   $282 = $1;
   $283 = $c;
   _pushback($282,$283);
   $0 = 366;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
 }
 else if ((label|0) == 66) {
  $298 = $1;
  _tokfix($298);
  $299 = $1;
  $300 = ((($299)) + 40|0);
  HEAP32[$300>>2] = 1;
  $301 = $1;
  _end_strterm($301);
  $302 = $type;
  $303 = $302 & 128;
  $304 = ($303|0)!=(0);
  if ($304) {
   $305 = $1;
   $306 = $1;
   $307 = (_tok($306)|0);
   $308 = $1;
   $309 = (_toklen($308)|0);
   $310 = (_new_xstr($305,$307,$309)|0);
   $311 = $1;
   $312 = ((($311)) + 1132|0);
   $313 = HEAP32[$312>>2]|0;
   HEAP32[$313>>2] = $310;
   $0 = 316;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
  $314 = $type;
  $315 = $314 & 4;
  $316 = ($315|0)!=(0);
  if (!($316)) {
   $401 = $1;
   $402 = $1;
   $403 = (_tok($402)|0);
   $404 = $1;
   $405 = (_toklen($404)|0);
   $406 = (_new_str($401,$403,$405)|0);
   $407 = $1;
   $408 = ((($407)) + 1132|0);
   $409 = HEAP32[$408>>2]|0;
   HEAP32[$409>>2] = $406;
   $0 = 318;
   $410 = $0;
   STACKTOP = sp;return ($410|0);
  }
  $f = 0;
  $317 = $1;
  $318 = $1;
  $319 = (_tok($318)|0);
  $320 = $1;
  $321 = (_toklen($320)|0);
  $322 = (_parser_strndup($317,$319,$321)|0);
  $s1 = $322;
  $flag = $flags;
  HEAP8[$enc>>0] = 0;
  $323 = $1;
  (_newtok($323)|0);
  L65: while(1) {
   $324 = $1;
   $325 = (_nextc($324)|0);
   $re_opt = $325;
   $326 = $re_opt;
   $327 = ($326|0)>=(0);
   if (!($327)) {
    break;
   }
   $328 = $re_opt;
   $329 = $328 | 32;
   $330 = (($329) - 97)|0;
   $331 = ($330>>>0)<(26);
   if (!($331)) {
    break;
   }
   $332 = $re_opt;
   switch ($332|0) {
   case 105:  {
    $333 = $f;
    $334 = $333 | 1;
    $f = $334;
    continue L65;
    break;
   }
   case 120:  {
    $335 = $f;
    $336 = $335 | 2;
    $f = $336;
    continue L65;
    break;
   }
   case 109:  {
    $337 = $f;
    $338 = $337 | 4;
    $f = $338;
    continue L65;
    break;
   }
   case 117:  {
    $339 = $f;
    $340 = $339 | 16;
    $f = $340;
    continue L65;
    break;
   }
   case 110:  {
    $341 = $f;
    $342 = $341 | 32;
    $f = $342;
    continue L65;
    break;
   }
   default: {
    $343 = $1;
    $344 = $re_opt;
    _tokadd($343,$344);
    continue L65;
   }
   }
  }
  $345 = $1;
  $346 = $re_opt;
  _pushback($345,$346);
  $347 = $1;
  $348 = (_toklen($347)|0);
  $349 = ($348|0)!=(0);
  if ($349) {
   $350 = $1;
   _tokfix($350);
   $351 = $1;
   $352 = (_toklen($351)|0);
   $353 = ($352|0)>(1);
   $354 = $353 ? 57056 : 75436;
   $355 = $1;
   $356 = (_tok($355)|0);
   HEAP32[$vararg_buffer6>>2] = $354;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $356;
   (_snprintf($msg,128,57058,$vararg_buffer6)|0);
   $357 = $1;
   _yyerror($357,$msg);
  }
  $358 = $f;
  $359 = ($358|0)!=(0);
  if ($359) {
   $360 = $f;
   $361 = $360 & 1;
   $362 = ($361|0)!=(0);
   if ($362) {
    $363 = $flag;
    $364 = ((($363)) + 1|0);
    $flag = $364;
    HEAP8[$363>>0] = 105;
   }
   $365 = $f;
   $366 = $365 & 2;
   $367 = ($366|0)!=(0);
   if ($367) {
    $368 = $flag;
    $369 = ((($368)) + 1|0);
    $flag = $369;
    HEAP8[$368>>0] = 120;
   }
   $370 = $f;
   $371 = $370 & 4;
   $372 = ($371|0)!=(0);
   if ($372) {
    $373 = $flag;
    $374 = ((($373)) + 1|0);
    $flag = $374;
    HEAP8[$373>>0] = 109;
   }
   $375 = $f;
   $376 = $375 & 16;
   $377 = ($376|0)!=(0);
   if ($377) {
    HEAP8[$enc>>0] = 117;
   }
   $378 = $f;
   $379 = $378 & 32;
   $380 = ($379|0)!=(0);
   if ($380) {
    HEAP8[$enc>>0] = 110;
   }
  }
  $381 = $flag;
  $382 = ($381>>>0)>($flags>>>0);
  if ($382) {
   $383 = $1;
   $384 = $flag;
   $385 = $384;
   $386 = $flags;
   $387 = (($385) - ($386))|0;
   $388 = (_parser_strndup($383,$flags,$387)|0);
   $dup = $388;
  } else {
   $dup = 0;
  }
  $389 = HEAP8[$enc>>0]|0;
  $390 = ($389<<24>>24)!=(0);
  if ($390) {
   $391 = $1;
   $392 = (_parser_strndup($391,$enc,1)|0);
   $encp = $392;
  } else {
   $encp = 0;
  }
  $393 = $1;
  $394 = $s1;
  $395 = $dup;
  $396 = $encp;
  $397 = (_new_regx($393,$394,$395,$396)|0);
  $398 = $1;
  $399 = ((($398)) + 1132|0);
  $400 = HEAP32[$399>>2]|0;
  HEAP32[$400>>2] = $397;
  $0 = 317;
  $410 = $0;
  STACKTOP = sp;return ($410|0);
 }
 return (0)|0;
}
function _parsing_heredoc_inf($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 1120|0);
 $4 = HEAP32[$3>>2]|0;
 $nd = $4;
 $5 = $nd;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $7 = $nd;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _newtok($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1108|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - 1)|0;
 STACKTOP = sp;return ($6|0);
}
function _nextc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $c = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $1;
 do {
  if ($5) {
   $7 = ((($6)) + 80|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
   $c = $10;
   $11 = $1;
   $12 = ((($11)) + 80|0);
   $13 = HEAP32[$12>>2]|0;
   $tmp = $13;
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = ((($19)) + 80|0);
   HEAP32[$20>>2] = $18;
   $21 = $1;
   $22 = $tmp;
   _cons_free_gen($21,$22);
  } else {
   $23 = ((($6)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0|0);
   $26 = $1;
   if ($25) {
    $27 = ((($26)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_feof($28)|0);
    $30 = ($29|0)!=(0);
    if (!($30)) {
     $31 = $1;
     $32 = ((($31)) + 20|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (_fgetc($33)|0);
     $c = $34;
     $35 = $c;
     $36 = ($35|0)==(-1);
     if (!($36)) {
      break;
     }
    }
   } else {
    $37 = ((($26)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)!=(0|0);
    if ($39) {
     $40 = $1;
     $41 = ((($40)) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $1;
     $44 = ((($43)) + 16|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($42>>>0)>=($45>>>0);
     if (!($46)) {
      $47 = $1;
      $48 = ((($47)) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ((($49)) + 1|0);
      HEAP32[$48>>2] = $50;
      $51 = HEAP8[$49>>0]|0;
      $52 = $51&255;
      $c = $52;
      break;
     }
    }
   }
   $69 = $1;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)!=(0|0);
   if (!($72)) {
    $0 = -1;
    $81 = $0;
    STACKTOP = sp;return ($81|0);
   }
   $73 = $1;
   $74 = ((($73)) + 24|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($75)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $1;
   $79 = (FUNCTION_TABLE_ii[$77 & 255]($78)|0);
   $80 = ($79|0)<(0);
   if ($80) {
    $0 = -1;
    $81 = $0;
    STACKTOP = sp;return ($81|0);
   } else {
    $0 = -2;
    $81 = $0;
    STACKTOP = sp;return ($81|0);
   }
  }
 } while(0);
 $53 = $c;
 $54 = ($53|0)>=(0);
 if ($54) {
  $55 = $1;
  $56 = ((($55)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$56>>2] = $58;
 }
 $59 = $c;
 $60 = ($59|0)==(13);
 if (!($60)) {
  $68 = $c;
  $0 = $68;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $61 = $1;
 $62 = (_nextc($61)|0);
 $c = $62;
 $63 = $c;
 $64 = ($63|0)!=(10);
 if ($64) {
  $65 = $1;
  $66 = $c;
  _pushback($65,$66);
  $0 = 13;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 } else {
  $67 = $c;
  $0 = $67;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _cons_free_gen($p,$cons) {
 $p = $p|0;
 $cons = $cons|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $cons;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _pushback($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)>=(0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
 }
 $8 = $0;
 $9 = $1;
 $10 = $9;
 $11 = $0;
 $12 = ((($11)) + 80|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_cons_gen($8,$10,$13)|0);
 $15 = $0;
 $16 = ((($15)) + 80|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function _tokadd($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0;
 var $utf8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $utf8 = sp + 16|0;
 $0 = $p;
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)>=(0);
 $4 = $1;
 do {
  if ($3) {
   $5 = $4&255;
   HEAP8[$utf8>>0] = $5;
   $len = 1;
  } else {
   $6 = (0 - ($4))|0;
   $1 = $6;
   $7 = $1;
   $8 = ($7|0)<(128);
   $9 = $1;
   if ($8) {
    $10 = $9&255;
    HEAP8[$utf8>>0] = $10;
    $len = 1;
    break;
   }
   $11 = ($9|0)<(2048);
   $12 = $1;
   if ($11) {
    $13 = $12 >> 6;
    $14 = 192 | $13;
    $15 = $14&255;
    HEAP8[$utf8>>0] = $15;
    $16 = $1;
    $17 = $16 & 63;
    $18 = 128 | $17;
    $19 = $18&255;
    $20 = ((($utf8)) + 1|0);
    HEAP8[$20>>0] = $19;
    $len = 2;
    break;
   }
   $21 = ($12|0)<(65536);
   $22 = $1;
   if ($21) {
    $23 = $22 >> 12;
    $24 = 224 | $23;
    $25 = $24&255;
    HEAP8[$utf8>>0] = $25;
    $26 = $1;
    $27 = $26 >> 6;
    $28 = $27 & 63;
    $29 = 128 | $28;
    $30 = $29&255;
    $31 = ((($utf8)) + 1|0);
    HEAP8[$31>>0] = $30;
    $32 = $1;
    $33 = $32 & 63;
    $34 = 128 | $33;
    $35 = $34&255;
    $36 = ((($utf8)) + 2|0);
    HEAP8[$36>>0] = $35;
    $len = 3;
    break;
   } else {
    $37 = $22 >> 18;
    $38 = 240 | $37;
    $39 = $38&255;
    HEAP8[$utf8>>0] = $39;
    $40 = $1;
    $41 = $40 >> 12;
    $42 = $41 & 63;
    $43 = 128 | $42;
    $44 = $43&255;
    $45 = ((($utf8)) + 1|0);
    HEAP8[$45>>0] = $44;
    $46 = $1;
    $47 = $46 >> 6;
    $48 = $47 & 63;
    $49 = 128 | $48;
    $50 = $49&255;
    $51 = ((($utf8)) + 2|0);
    HEAP8[$51>>0] = $50;
    $52 = $1;
    $53 = $52 & 63;
    $54 = 128 | $53;
    $55 = $54&255;
    $56 = ((($utf8)) + 3|0);
    HEAP8[$56>>0] = $55;
    $len = 4;
    break;
   }
  }
 } while(0);
 $57 = $0;
 $58 = ((($57)) + 1108|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $len;
 $61 = (($59) + ($60))|0;
 $62 = ($61>>>0)<=(1024);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $63 = $i;
  $64 = $len;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $i;
  $67 = (($utf8) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $0;
  $70 = ((($69)) + 1108|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  $73 = $0;
  $74 = ((($73)) + 84|0);
  $75 = (($74) + ($71)|0);
  HEAP8[$75>>0] = $68;
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
 }
 STACKTOP = sp;return;
}
function _tokfix($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $imax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1108|0);
 $3 = HEAP32[$2>>2]|0;
 $i = $3;
 $imax = 1023;
 $4 = $i;
 $5 = $imax;
 $6 = ($4|0)>($5|0);
 if ($6) {
  $7 = $imax;
  $i = $7;
  $8 = $0;
  _yyerror($8,56813);
 }
 $9 = $i;
 $10 = $0;
 $11 = ((($10)) + 84|0);
 $12 = (($11) + ($9)|0);
 HEAP8[$12>>0] = 0;
 STACKTOP = sp;return;
}
function _yyerror($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $c = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = ((($2)) + 1148|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 1;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)!=(0);
 $8 = $0;
 if ($7) {
  $29 = ((($8)) + 1136|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30>>>0)<(10);
  if (!($31)) {
   $69 = $0;
   $70 = ((($69)) + 1136|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$70>>2] = $72;
   STACKTOP = sp;return;
  }
  $32 = $1;
  $33 = (_strlen($32)|0);
  $n = $33;
  $34 = $0;
  $35 = $n;
  $36 = (($35) + 1)|0;
  $37 = (_parser_palloc($34,$36)|0);
  $c = $37;
  $38 = $c;
  $39 = $1;
  $40 = $n;
  $41 = (($40) + 1)|0;
  _memcpy(($38|0),($39|0),($41|0))|0;
  $42 = $c;
  $43 = $0;
  $44 = ((($43)) + 1136|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  $47 = ((($46)) + 1152|0);
  $48 = (($47) + (($45*12)|0)|0);
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $42;
  $50 = $0;
  $51 = ((($50)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  $54 = ((($53)) + 1136|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = ((($56)) + 1152|0);
  $58 = (($57) + (($55*12)|0)|0);
  HEAP32[$58>>2] = $52;
  $59 = $0;
  $60 = ((($59)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $0;
  $63 = ((($62)) + 1136|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  $66 = ((($65)) + 1152|0);
  $67 = (($66) + (($64*12)|0)|0);
  $68 = ((($67)) + 4|0);
  HEAP32[$68>>2] = $61;
  $69 = $0;
  $70 = ((($69)) + 1136|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 }
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = HEAP32[637]|0;
 $13 = $0;
 if ($11) {
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  (_fprintf($12,56841,$vararg_buffer)|0);
  $69 = $0;
  $70 = ((($69)) + 1136|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 } else {
  $23 = ((($13)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  HEAP32[$vararg_buffer4>>2] = $24;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $27;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $28;
  (_fprintf($12,56856,$vararg_buffer4)|0);
  $69 = $0;
  $70 = ((($69)) + 1136|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 }
}
function _tok($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 84|0);
 STACKTOP = sp;return ($2|0);
}
function _toklen($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1108|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _new_str($p,$s,$len) {
 $p = $p|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $len;
 $3 = $0;
 $4 = $0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = (_parser_strndup($5,$6,$7)|0);
 $9 = $2;
 $10 = $9;
 $11 = (_cons_gen($4,$8,$10)|0);
 $12 = (_cons_gen($3,(55),$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _parser_strndup($p,$s,$len) {
 $p = $p|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $len;
 $3 = $0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $6 = (_parser_palloc($3,$5)|0);
 $b = $6;
 $7 = $b;
 $8 = $1;
 $9 = $2;
 _memcpy(($7|0),($8|0),($9|0))|0;
 $10 = $2;
 $11 = $b;
 $12 = (($11) + ($10)|0);
 HEAP8[$12>>0] = 0;
 $13 = $b;
 STACKTOP = sp;return ($13|0);
}
function _read_escape($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf1 = 0, $buf3 = 0, $c = 0, $i = 0, $i2 = 0, $i4 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 60|0;
 $i = sp + 56|0;
 $buf1 = sp + 48|0;
 $i2 = sp + 40|0;
 $buf3 = sp + 4|0;
 $i4 = sp;
 $1 = $p;
 $2 = $1;
 $3 = (_nextc($2)|0);
 $c = $3;
 L1: do {
  switch ($3|0) {
  case 92:  {
   $4 = $c;
   $0 = $4;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 110:  {
   $0 = 10;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 116:  {
   $0 = 9;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 114:  {
   $0 = 13;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 102:  {
   $0 = 12;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 118:  {
   $0 = 11;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 97:  {
   $0 = 7;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 101:  {
   $0 = 27;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
   $5 = $c;
   HEAP32[$buf>>2] = $5;
   HEAP32[$i>>2] = 1;
   while(1) {
    $6 = HEAP32[$i>>2]|0;
    $7 = ($6|0)<(3);
    if (!($7)) {
     break;
    }
    $8 = $1;
    $9 = (_nextc($8)|0);
    $10 = HEAP32[$i>>2]|0;
    $11 = (($buf) + ($10<<2)|0);
    HEAP32[$11>>2] = $9;
    $12 = HEAP32[$i>>2]|0;
    $13 = (($buf) + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)<(0);
    if ($15) {
     break L1;
    }
    $16 = HEAP32[$i>>2]|0;
    $17 = (($buf) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)<(48);
    if ($19) {
     label = 15;
     break;
    }
    $20 = HEAP32[$i>>2]|0;
    $21 = (($buf) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (55)<($22|0);
    if ($23) {
     label = 15;
     break;
    }
    $28 = HEAP32[$i>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$i>>2] = $29;
   }
   if ((label|0) == 15) {
    $24 = $1;
    $25 = HEAP32[$i>>2]|0;
    $26 = (($buf) + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    _pushback($24,$27);
   }
   $30 = HEAP32[$i>>2]|0;
   $31 = (_scan_oct($buf,$30,$i)|0);
   $c = $31;
   $32 = $c;
   $0 = $32;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 120:  {
   HEAP32[$i2>>2] = 0;
   while(1) {
    $33 = HEAP32[$i2>>2]|0;
    $34 = ($33|0)<(2);
    if (!($34)) {
     break;
    }
    $35 = $1;
    $36 = (_nextc($35)|0);
    $37 = HEAP32[$i2>>2]|0;
    $38 = (($buf1) + ($37<<2)|0);
    HEAP32[$38>>2] = $36;
    $39 = HEAP32[$i2>>2]|0;
    $40 = (($buf1) + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)<(0);
    if ($42) {
     break L1;
    }
    $43 = HEAP32[$i2>>2]|0;
    $44 = (($buf1) + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - 48)|0;
    $47 = ($46>>>0)<(10);
    if (!($47)) {
     $48 = HEAP32[$i2>>2]|0;
     $49 = (($buf1) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 | 32;
     $52 = (($51) - 97)|0;
     $53 = ($52>>>0)<(6);
     if (!($53)) {
      label = 23;
      break;
     }
    }
    $58 = HEAP32[$i2>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[$i2>>2] = $59;
   }
   if ((label|0) == 23) {
    $54 = $1;
    $55 = HEAP32[$i2>>2]|0;
    $56 = (($buf1) + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    _pushback($54,$57);
   }
   $60 = HEAP32[$i2>>2]|0;
   $61 = (_scan_hex($buf1,$60,$i2)|0);
   $c = $61;
   $62 = HEAP32[$i2>>2]|0;
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = $1;
    _yyerror($64,56997);
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   } else {
    $65 = $c;
    $0 = $65;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   break;
  }
  case 117:  {
   HEAP32[$i4>>2] = 0;
   $66 = $1;
   $67 = (_nextc($66)|0);
   HEAP32[$buf3>>2] = $67;
   $68 = HEAP32[$buf3>>2]|0;
   $69 = ($68|0)<(0);
   if (!($69)) {
    $70 = HEAP32[$buf3>>2]|0;
    $71 = ($70|0)==(123);
    L49: do {
     if ($71) {
      HEAP32[$i4>>2] = 0;
      while(1) {
       $72 = HEAP32[$i4>>2]|0;
       $73 = ($72|0)<(9);
       if (!($73)) {
        break L49;
       }
       $74 = $1;
       $75 = (_nextc($74)|0);
       $76 = HEAP32[$i4>>2]|0;
       $77 = (($buf3) + ($76<<2)|0);
       HEAP32[$77>>2] = $75;
       $78 = HEAP32[$i4>>2]|0;
       $79 = (($buf3) + ($78<<2)|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($80|0)<(0);
       if ($81) {
        break L1;
       }
       $82 = HEAP32[$i4>>2]|0;
       $83 = (($buf3) + ($82<<2)|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)==(125);
       if ($85) {
        break L49;
       }
       $86 = HEAP32[$i4>>2]|0;
       $87 = (($buf3) + ($86<<2)|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($88) - 48)|0;
       $90 = ($89>>>0)<(10);
       if (!($90)) {
        $91 = HEAP32[$i4>>2]|0;
        $92 = (($buf3) + ($91<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = $93 | 32;
        $95 = (($94) - 97)|0;
        $96 = ($95>>>0)<(6);
        if (!($96)) {
         break;
        }
       }
       $102 = HEAP32[$i4>>2]|0;
       $103 = (($102) + 1)|0;
       HEAP32[$i4>>2] = $103;
      }
      $97 = $1;
      _yyerror($97,56997);
      $98 = $1;
      $99 = HEAP32[$i4>>2]|0;
      $100 = (($buf3) + ($99<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      _pushback($98,$101);
      $0 = 0;
      $190 = $0;
      STACKTOP = sp;return ($190|0);
     } else {
      $104 = HEAP32[$buf3>>2]|0;
      $105 = (($104) - 48)|0;
      $106 = ($105>>>0)<(10);
      if (!($106)) {
       $107 = HEAP32[$buf3>>2]|0;
       $108 = $107 | 32;
       $109 = (($108) - 97)|0;
       $110 = ($109>>>0)<(6);
       if (!($110)) {
        $138 = $1;
        $139 = HEAP32[$buf3>>2]|0;
        _pushback($138,$139);
        break;
       }
      }
      HEAP32[$i4>>2] = 1;
      while(1) {
       $111 = HEAP32[$i4>>2]|0;
       $112 = ($111|0)<(4);
       if (!($112)) {
        break L49;
       }
       $113 = $1;
       $114 = (_nextc($113)|0);
       $115 = HEAP32[$i4>>2]|0;
       $116 = (($buf3) + ($115<<2)|0);
       HEAP32[$116>>2] = $114;
       $117 = HEAP32[$i4>>2]|0;
       $118 = (($buf3) + ($117<<2)|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)<(0);
       if ($120) {
        break L1;
       }
       $121 = HEAP32[$i4>>2]|0;
       $122 = (($buf3) + ($121<<2)|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($123) - 48)|0;
       $125 = ($124>>>0)<(10);
       if (!($125)) {
        $126 = HEAP32[$i4>>2]|0;
        $127 = (($buf3) + ($126<<2)|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = $128 | 32;
        $130 = (($129) - 97)|0;
        $131 = ($130>>>0)<(6);
        if (!($131)) {
         break;
        }
       }
       $136 = HEAP32[$i4>>2]|0;
       $137 = (($136) + 1)|0;
       HEAP32[$i4>>2] = $137;
      }
      $132 = $1;
      $133 = HEAP32[$i4>>2]|0;
      $134 = (($buf3) + ($133<<2)|0);
      $135 = HEAP32[$134>>2]|0;
      _pushback($132,$135);
     }
    } while(0);
    $140 = HEAP32[$i4>>2]|0;
    $141 = (_scan_hex($buf3,$140,$i4)|0);
    $c = $141;
    $142 = HEAP32[$i4>>2]|0;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $1;
     _yyerror($144,56997);
     $0 = 0;
     $190 = $0;
     STACKTOP = sp;return ($190|0);
    }
    $145 = $c;
    $146 = ($145|0)<(0);
    $147 = $c;
    $148 = ($147|0)>(1114111);
    $or$cond = $146 | $148;
    if (!($or$cond)) {
     $149 = $c;
     $150 = $149 & -2048;
     $151 = ($150|0)==(55296);
     if (!($151)) {
      $153 = $c;
      $154 = (0 - ($153))|0;
      $0 = $154;
      $190 = $0;
      STACKTOP = sp;return ($190|0);
     }
    }
    $152 = $1;
    _yyerror($152,57029);
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   break;
  }
  case 98:  {
   $0 = 8;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 115:  {
   $0 = 32;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
   break;
  }
  case 77:  {
   $155 = $1;
   $156 = (_nextc($155)|0);
   $c = $156;
   $157 = ($156|0)!=(45);
   $158 = $1;
   if ($157) {
    _yyerror($158,56997);
    $159 = $1;
    $160 = $c;
    _pushback($159,$160);
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   $161 = (_nextc($158)|0);
   $c = $161;
   $162 = ($161|0)==(92);
   if ($162) {
    $163 = $1;
    $164 = (_read_escape($163)|0);
    $165 = $164 | 128;
    $0 = $165;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   $166 = $c;
   $167 = ($166|0)<(0);
   if (!($167)) {
    $168 = $c;
    $169 = $168 & 255;
    $170 = $169 | 128;
    $0 = $170;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   break;
  }
  case 67:  {
   $171 = $1;
   $172 = (_nextc($171)|0);
   $c = $172;
   $173 = ($172|0)!=(45);
   if ($173) {
    $174 = $1;
    _yyerror($174,56997);
    $175 = $1;
    $176 = $c;
    _pushback($175,$176);
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   } else {
    label = 64;
   }
   break;
  }
  case 99:  {
   label = 64;
   break;
  }
  case -2: case -1:  {
   break;
  }
  default: {
   $189 = $c;
   $0 = $189;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
  }
  }
 } while(0);
 L103: do {
  if ((label|0) == 64) {
   $177 = $1;
   $178 = (_nextc($177)|0);
   $c = $178;
   $179 = ($178|0)==(92);
   do {
    if ($179) {
     $180 = $1;
     $181 = (_read_escape($180)|0);
     $c = $181;
    } else {
     $182 = $c;
     $183 = ($182|0)==(63);
     if (!($183)) {
      $184 = $c;
      $185 = ($184|0)<(0);
      if ($185) {
       break L103;
      } else {
       break;
      }
     }
     $0 = 127;
     $190 = $0;
     STACKTOP = sp;return ($190|0);
    }
   } while(0);
   $186 = $c;
   $187 = $186 & 159;
   $0 = $187;
   $190 = $0;
   STACKTOP = sp;return ($190|0);
  }
 } while(0);
 $188 = $1;
 _yyerror($188,56997);
 $0 = 0;
 $190 = $0;
 STACKTOP = sp;return ($190|0);
}
function _scan_oct($start,$len,$retlen) {
 $start = $start|0;
 $len = $len|0;
 $retlen = $retlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 $1 = $len;
 $2 = $retlen;
 $3 = $0;
 $s = $3;
 $retval = 0;
 while(1) {
  $4 = $1;
  $5 = (($4) + -1)|0;
  $1 = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $s;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>=(48);
  if (!($9)) {
   break;
  }
  $10 = $s;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)<=(55);
  if (!($12)) {
   break;
  }
  $13 = $retval;
  $14 = $13 << 3;
  $retval = $14;
  $15 = $s;
  $16 = ((($15)) + 4|0);
  $s = $16;
  $17 = HEAP32[$15>>2]|0;
  $18 = (($17) - 48)|0;
  $19 = $retval;
  $20 = $19 | $18;
  $retval = $20;
 }
 $21 = $s;
 $22 = $0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = $2;
 HEAP32[$27>>2] = $26;
 $28 = $retval;
 STACKTOP = sp;return ($28|0);
}
function _scan_hex($start,$len,$retlen) {
 $start = $start|0;
 $len = $len|0;
 $retlen = $retlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval = 0, $s = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 $1 = $len;
 $2 = $retlen;
 $3 = $0;
 $s = $3;
 $retval = 0;
 while(1) {
  $4 = $1;
  $5 = (($4) + -1)|0;
  $1 = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $s;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $s;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strchr(56964,$11)|0);
  $tmp = $12;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $retval;
  $15 = $14 << 4;
  $retval = $15;
  $16 = $tmp;
  $17 = $16;
  $18 = (($17) - (56964))|0;
  $19 = $18 & 15;
  $20 = $retval;
  $21 = $20 | $19;
  $retval = $21;
  $22 = $s;
  $23 = ((($22)) + 4|0);
  $s = $23;
 }
 $24 = $s;
 $25 = $0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 4)&-1;
 $30 = $2;
 HEAP32[$30>>2] = $29;
 $31 = $retval;
 STACKTOP = sp;return ($31|0);
}
function _heredoc_treat_nextline($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $m = 0, $n = 0, $n1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 1120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 $9 = $0;
 $10 = ((($9)) + 1116|0);
 $11 = HEAP32[$10>>2]|0;
 do {
  if ($8) {
   $12 = $0;
   $13 = ((($12)) + 1120|0);
   HEAP32[$13>>2] = $11;
   $14 = $0;
   $15 = ((($14)) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $0;
   $18 = ((($17)) + 1124|0);
   HEAP32[$18>>2] = $16;
   $19 = $0;
   $20 = $0;
   $21 = (_parsing_heredoc_inf($20)|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_new_strterm($19,$23,0,0)|0);
   $25 = $0;
   $26 = ((($25)) + 44|0);
   HEAP32[$26>>2] = $24;
   $27 = $0;
   $28 = ((($27)) + 1112|0);
   $29 = HEAP32[$28>>2]|0;
   $n = $29;
   $30 = $n;
   $31 = ($30|0)!=(0|0);
   if (!($31)) {
    $44 = $0;
    $45 = ((($44)) + 1120|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $0;
    $48 = ((($47)) + 1112|0);
    HEAP32[$48>>2] = $46;
    break;
   }
   while(1) {
    $32 = $n;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)!=(0|0);
    if (!($35)) {
     break;
    }
    $36 = $n;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $n = $38;
   }
   $39 = $0;
   $40 = ((($39)) + 1120|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $n;
   $43 = ((($42)) + 4|0);
   HEAP32[$43>>2] = $41;
  } else {
   $m = $11;
   while(1) {
    $49 = $m;
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)!=(0|0);
    if (!($52)) {
     break;
    }
    $53 = $m;
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $m = $55;
   }
   $56 = $0;
   $57 = ((($56)) + 1112|0);
   $58 = HEAP32[$57>>2]|0;
   $n1 = $58;
   $59 = $n1;
   $60 = $0;
   $61 = ((($60)) + 1120|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($59|0)==($62|0);
   if ($63) {
    $64 = $n1;
    $65 = $m;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = $64;
    $67 = $0;
    $68 = ((($67)) + 1116|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $0;
    $71 = ((($70)) + 1112|0);
    HEAP32[$71>>2] = $69;
    $72 = $0;
    $73 = ((($72)) + 1116|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $0;
    $76 = ((($75)) + 1120|0);
    HEAP32[$76>>2] = $74;
    break;
   }
   while(1) {
    $77 = $n1;
    $78 = ((($77)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $0;
    $81 = ((($80)) + 1120|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($79|0)!=($82|0);
    $84 = $n1;
    $85 = ((($84)) + 4|0);
    $86 = HEAP32[$85>>2]|0;
    if (!($83)) {
     break;
    }
    $n1 = $86;
   }
   $87 = $m;
   $88 = ((($87)) + 4|0);
   HEAP32[$88>>2] = $86;
   $89 = $0;
   $90 = ((($89)) + 1116|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $n1;
   $93 = ((($92)) + 4|0);
   HEAP32[$93>>2] = $91;
   $94 = $0;
   $95 = ((($94)) + 1116|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $0;
   $98 = ((($97)) + 1120|0);
   HEAP32[$98>>2] = $96;
  }
 } while(0);
 $99 = $0;
 $100 = ((($99)) + 1116|0);
 HEAP32[$100>>2] = 0;
 STACKTOP = sp;return;
}
function _new_strterm($p,$type,$term,$paren) {
 $p = $p|0;
 $type = $type|0;
 $term = $term|0;
 $paren = $paren|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $type;
 $2 = $term;
 $3 = $paren;
 $4 = $0;
 $5 = $1;
 $6 = $5;
 $7 = $0;
 $8 = $0;
 $9 = $3;
 $10 = $9;
 $11 = $2;
 $12 = $11;
 $13 = (_cons_gen($8,$10,$12)|0);
 $14 = (_cons_gen($7,0,$13)|0);
 $15 = (_cons_gen($4,$6,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _end_strterm($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _cons_free_gen($1,$8);
 $9 = $0;
 $10 = $0;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 _cons_free_gen($9,$14);
 $15 = $0;
 $16 = $0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 _cons_free_gen($15,$18);
 $19 = $0;
 $20 = ((($19)) + 44|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _new_xstr($p,$s,$len) {
 $p = $p|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $len;
 $3 = $0;
 $4 = $0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = (_parser_strndup($5,$6,$7)|0);
 $9 = $2;
 $10 = $9;
 $11 = (_cons_gen($4,$8,$10)|0);
 $12 = (_cons_gen($3,(57),$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _new_regx($p,$p1,$p2,$p3) {
 $p = $p|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $p1;
 $2 = $p2;
 $3 = $p3;
 $4 = $0;
 $5 = $0;
 $6 = $1;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = (_cons_gen($7,$8,$9)|0);
 $11 = (_cons_gen($5,$6,$10)|0);
 $12 = (_cons_gen($4,(59),$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _skip($p,$term) {
 $p = $p|0;
 $term = $term|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $term;
 while(1) {
  $2 = $0;
  $3 = (_nextc($2)|0);
  $c = $3;
  $4 = $c;
  $5 = ($4|0)<(0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = $c;
  $7 = $1;
  $8 = $7 << 24 >> 24;
  $9 = ($6|0)==($8|0);
  if ($9) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _intern_gen($p,$s,$len) {
 $p = $p|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $len;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $2;
 $7 = (_mrb_intern($4,$5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _intern_gen_c($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $p;
 HEAP8[$1>>0] = $c;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_mrb_intern($3,$1,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _yywarning($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 _yywarn($2,$3);
 STACKTOP = sp;return;
}
function _yywarn($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $c = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = ((($2)) + 1148|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 1;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)!=(0);
 $8 = $0;
 if ($7) {
  $29 = ((($8)) + 1140|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30>>>0)<(10);
  if (!($31)) {
   $69 = $0;
   $70 = ((($69)) + 1140|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$70>>2] = $72;
   STACKTOP = sp;return;
  }
  $32 = $1;
  $33 = (_strlen($32)|0);
  $n = $33;
  $34 = $0;
  $35 = $n;
  $36 = (($35) + 1)|0;
  $37 = (_parser_palloc($34,$36)|0);
  $c = $37;
  $38 = $c;
  $39 = $1;
  $40 = $n;
  $41 = (($40) + 1)|0;
  _memcpy(($38|0),($39|0),($41|0))|0;
  $42 = $c;
  $43 = $0;
  $44 = ((($43)) + 1140|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  $47 = ((($46)) + 1272|0);
  $48 = (($47) + (($45*12)|0)|0);
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $42;
  $50 = $0;
  $51 = ((($50)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  $54 = ((($53)) + 1140|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $0;
  $57 = ((($56)) + 1272|0);
  $58 = (($57) + (($55*12)|0)|0);
  HEAP32[$58>>2] = $52;
  $59 = $0;
  $60 = ((($59)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $0;
  $63 = ((($62)) + 1140|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  $66 = ((($65)) + 1272|0);
  $67 = (($66) + (($64*12)|0)|0);
  $68 = ((($67)) + 4|0);
  HEAP32[$68>>2] = $61;
  $69 = $0;
  $70 = ((($69)) + 1140|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 }
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = HEAP32[637]|0;
 $13 = $0;
 if ($11) {
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  (_fprintf($12,56841,$vararg_buffer)|0);
  $69 = $0;
  $70 = ((($69)) + 1140|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 } else {
  $23 = ((($13)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  HEAP32[$vararg_buffer4>>2] = $24;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $27;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $28;
  (_fprintf($12,56856,$vararg_buffer4)|0);
  $69 = $0;
  $70 = ((($69)) + 1140|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  STACKTOP = sp;return;
 }
}
function _peeks($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $s;
 $3 = $2;
 $4 = (_strlen($3)|0);
 $len = $4;
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $n = 0;
  while(1) {
   $9 = $2;
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   if (!($11)) {
    label = 6;
    break;
   }
   $12 = $1;
   $13 = $2;
   $14 = ((($13)) + 1|0);
   $2 = $14;
   $15 = HEAP8[$13>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = $n;
   $18 = (($17) + 1)|0;
   $n = $18;
   $19 = (_peek_n($12,$16,$17)|0);
   $20 = ($19<<24>>24)!=(0);
   if (!($20)) {
    label = 5;
    break;
   }
  }
  if ((label|0) == 5) {
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
  else if ((label|0) == 6) {
   $0 = 1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 } else {
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $1;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $len;
   $29 = (($27) + ($28)|0);
   $30 = $1;
   $31 = ((($30)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29>>>0)<=($32>>>0);
   if ($33) {
    $34 = $1;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $2;
    $38 = $len;
    $39 = (_memcmp($36,$37,$38)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $0 = 1;
     $41 = $0;
     STACKTOP = sp;return ($41|0);
    }
   }
  }
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _peek_n($p,$c,$n) {
 $p = $p|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $n;
 $3 = $0;
 $4 = $2;
 $5 = (_peekc_n($3,$4)|0);
 $6 = $1;
 $7 = ($5|0)==($6|0);
 $8 = $1;
 $9 = ($8|0)>=(0);
 $10 = $7 ? $9 : 0;
 $11 = $10&1;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function _peekc_n($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $n;
 $list = 0;
 while(1) {
  $3 = $1;
  $4 = (_nextc($3)|0);
  $c0 = $4;
  $5 = $c0;
  $6 = ($5|0)==(-1);
  if ($6) {
   label = 3;
   break;
  }
  $8 = $1;
  $9 = $list;
  $10 = $1;
  $11 = $c0;
  $12 = $11;
  $13 = (_list1_gen($10,$12)|0);
  $14 = (_append_gen($8,$9,$13)|0);
  $list = $14;
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
 }
 if ((label|0) == 3) {
  $7 = $c0;
  $0 = $7;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $18 = $1;
 $19 = ((($18)) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $1;
  $23 = $list;
  $24 = $1;
  $25 = ((($24)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_append_gen($22,$23,$26)|0);
  $28 = $1;
  $29 = ((($28)) + 80|0);
  HEAP32[$29>>2] = $27;
 } else {
  $30 = $list;
  $31 = $1;
  $32 = ((($31)) + 80|0);
  HEAP32[$32>>2] = $30;
 }
 $33 = $c0;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _skips($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $s;
 while(1) {
  $3 = $1;
  $4 = (_nextc($3)|0);
  $c = $4;
  $5 = $c;
  $6 = ($5|0)<(0);
  $7 = $c;
  if ($6) {
   label = 3;
   break;
  }
  $9 = ($7|0)==(10);
  if ($9) {
   $10 = $1;
   $11 = ((($10)) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 1)|0;
   HEAP32[$11>>2] = $13;
   $14 = $1;
   $15 = ((($14)) + 36|0);
   HEAP32[$15>>2] = 0;
  }
  $16 = $c;
  $17 = $2;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($16|0)==($19|0);
  if (!($20)) {
   continue;
  }
  $21 = $2;
  $22 = ((($21)) + 1|0);
  $2 = $22;
  $23 = $1;
  $24 = $2;
  $25 = (_peeks($23,$24)|0);
  $26 = ($25<<24>>24)!=(0);
  $27 = $2;
  if ($26) {
   break;
  }
  $41 = ((($27)) + -1|0);
  $2 = $41;
 }
 if ((label|0) == 3) {
  $8 = $7&255;
  $0 = $8;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $28 = (_strlen($27)|0);
 $len = $28;
 while(1) {
  $29 = $len;
  $30 = (($29) + -1)|0;
  $len = $30;
  $31 = ($29|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $1;
  $33 = (_nextc($32)|0);
  $34 = ($33|0)==(10);
  if (!($34)) {
   continue;
  }
  $35 = $1;
  $36 = ((($35)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$36>>2] = $38;
  $39 = $1;
  $40 = ((($39)) + 36|0);
  HEAP32[$40>>2] = 0;
 }
 $0 = 1;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _heredoc_identifier($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $indent = 0, $info = 0, $newnode = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond5$not = 0, $or$cond7 = 0, $or$cond9 = 0, $quote = 0;
 var $term = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $type = 65;
 $indent = 0;
 $quote = 0;
 $2 = $1;
 $3 = (_nextc($2)|0);
 $c = $3;
 $4 = $c;
 $5 = ($4|0)==(32);
 if (!($5)) {
  $6 = $c;
  $7 = (($6) - 9)|0;
  $8 = ($7>>>0)<(5);
  $9 = $c;
  $10 = ($9|0)==(61);
  $or$cond = $8 | $10;
  if (!($or$cond)) {
   $13 = $c;
   $14 = ($13|0)==(45);
   if ($14) {
    $indent = 1;
    $15 = $1;
    $16 = (_nextc($15)|0);
    $c = $16;
   }
   $17 = $c;
   $18 = ($17|0)==(39);
   $19 = $c;
   $20 = ($19|0)==(34);
   $or$cond3 = $18 | $20;
   $21 = $c;
   if ($or$cond3) {
    $term = $21;
    $22 = $c;
    $23 = ($22|0)==(39);
    if ($23) {
     $quote = 1;
    }
    $24 = $1;
    (_newtok($24)|0);
    while(1) {
     $25 = $1;
     $26 = (_nextc($25)|0);
     $c = $26;
     $27 = ($26|0)>=(0);
     if (!($27)) {
      break;
     }
     $28 = $c;
     $29 = $term;
     $30 = ($28|0)!=($29|0);
     if (!($30)) {
      break;
     }
     $31 = $c;
     $32 = ($31|0)==(10);
     if ($32) {
      label = 13;
      break;
     }
     $33 = $1;
     $34 = $c;
     _tokadd($33,$34);
    }
    if ((label|0) == 13) {
     $c = -1;
    }
    $35 = $c;
    $36 = ($35|0)<(0);
    if ($36) {
     $37 = $1;
     _yyerror($37,57167);
     $0 = 0;
     $128 = $0;
     STACKTOP = sp;return ($128|0);
    }
   } else {
    $38 = ($21|0)<(0);
    if ($38) {
     $0 = 0;
     $128 = $0;
     STACKTOP = sp;return ($128|0);
    }
    $39 = $c;
    $40 = $39 | 32;
    $41 = (($40) - 97)|0;
    $42 = ($41>>>0)<(26);
    if (!($42)) {
     $43 = $c;
     $44 = (($43) - 48)|0;
     $45 = ($44>>>0)<(10);
     $46 = $c;
     $47 = ($46|0)==(95);
     $or$cond5 = $45 | $47;
     $or$cond5$not = $or$cond5 ^ 1;
     $48 = $c;
     $49 = ($48>>>0)<=(127);
     $or$cond7 = $or$cond5$not & $49;
     if ($or$cond7) {
      $50 = $1;
      $51 = $c;
      _pushback($50,$51);
      $52 = $indent;
      $53 = ($52<<24>>24)!=(0);
      if ($53) {
       $54 = $1;
       _pushback($54,45);
      }
      $0 = 0;
      $128 = $0;
      STACKTOP = sp;return ($128|0);
     }
    }
    $55 = $1;
    (_newtok($55)|0);
    while(1) {
     $56 = $1;
     $57 = $c;
     _tokadd($56,$57);
     $58 = $1;
     $59 = (_nextc($58)|0);
     $c = $59;
     $60 = ($59|0)>=(0);
     if (!($60)) {
      break;
     }
     $61 = $c;
     $62 = $61 | 32;
     $63 = (($62) - 97)|0;
     $64 = ($63>>>0)<(26);
     if ($64) {
      continue;
     }
     $65 = $c;
     $66 = (($65) - 48)|0;
     $67 = ($66>>>0)<(10);
     $68 = $c;
     $69 = ($68|0)==(95);
     $or$cond9 = $67 | $69;
     if ($or$cond9) {
      continue;
     }
     $70 = $c;
     $71 = ($70>>>0)<=(127);
     $72 = $71 ^ 1;
     if (!($72)) {
      break;
     }
    }
    $73 = $1;
    $74 = $c;
    _pushback($73,$74);
   }
   $75 = $1;
   _tokfix($75);
   $76 = $1;
   $77 = (_new_heredoc($76)|0);
   $newnode = $77;
   $78 = $newnode;
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $info = $80;
   $81 = $1;
   $82 = $1;
   $83 = (_tok($82)|0);
   $84 = $1;
   $85 = (_toklen($84)|0);
   $86 = (_parser_strndup($81,$83,$85)|0);
   $87 = $info;
   $88 = ((($87)) + 8|0);
   HEAP32[$88>>2] = $86;
   $89 = $1;
   $90 = (_toklen($89)|0);
   $91 = $info;
   $92 = ((($91)) + 12|0);
   HEAP32[$92>>2] = $90;
   $93 = $quote;
   $94 = ($93<<24>>24)!=(0);
   if (!($94)) {
    $95 = $type;
    $96 = $95 | 2;
    $type = $96;
   }
   $97 = $type;
   $98 = $info;
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $97;
   $100 = $indent;
   $101 = $info;
   $102 = HEAP8[$101>>0]|0;
   $103 = $100 & 1;
   $104 = $102 & -2;
   $105 = $104 | $103;
   HEAP8[$101>>0] = $105;
   $106 = $info;
   $107 = HEAP8[$106>>0]|0;
   $108 = $107 & -3;
   $109 = $108 | 2;
   HEAP8[$106>>0] = $109;
   $110 = $info;
   $111 = ((($110)) + 16|0);
   HEAP32[$111>>2] = 0;
   $112 = $1;
   $113 = $1;
   $114 = ((($113)) + 1116|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $1;
   $117 = $newnode;
   $118 = (_list1_gen($116,$117)|0);
   $119 = (_append_gen($112,$115,$118)|0);
   $120 = $1;
   $121 = ((($120)) + 1116|0);
   HEAP32[$121>>2] = $119;
   $122 = $1;
   $123 = ((($122)) + 40|0);
   HEAP32[$123>>2] = 1;
   $124 = $newnode;
   $125 = $1;
   $126 = ((($125)) + 1132|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP32[$127>>2] = $124;
   $0 = 364;
   $128 = $0;
   STACKTOP = sp;return ($128|0);
  }
 }
 $11 = $1;
 $12 = $c;
 _pushback($11,$12);
 $0 = 0;
 $128 = $0;
 STACKTOP = sp;return ($128|0);
}
function _new_heredoc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $inf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_parser_palloc($1,20)|0);
 $inf = $2;
 $3 = $0;
 $4 = $inf;
 $5 = (_cons_gen($3,(99),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _arg_ambiguous($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 _yywarning($1,57312);
 STACKTOP = sp;return 1;
}
function _new_int($p,$s,$base) {
 $p = $p|0;
 $s = $s|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $base;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = (_parser_strdup($4,$5)|0);
 $7 = $2;
 $8 = $7;
 $9 = (_list3_gen($3,(50),$6,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _parser_strdup($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen($4)|0);
 $6 = (_parser_strndup($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _list3_gen($p,$a,$b,$c) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = $0;
 $7 = $2;
 $8 = $0;
 $9 = $3;
 $10 = (_cons_gen($8,$9,0)|0);
 $11 = (_cons_gen($6,$7,$10)|0);
 $12 = (_cons_gen($4,$5,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _yyerror_i($p,$fmt,$i) {
 $p = $p|0;
 $fmt = $fmt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 16|0;
 $0 = $p;
 $1 = $fmt;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf($buf,256,$3,$vararg_buffer)|0);
 $5 = $0;
 _yyerror($5,$buf);
 STACKTOP = sp;return;
}
function _yywarning_s($p,$fmt,$s) {
 $p = $p|0;
 $fmt = $fmt|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 16|0;
 $0 = $p;
 $1 = $fmt;
 $2 = $s;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf($buf,256,$3,$vararg_buffer)|0);
 $5 = $0;
 _yywarning($5,$buf);
 STACKTOP = sp;return;
}
function _new_float($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = $0;
 $4 = $1;
 $5 = (_parser_strdup($3,$4)|0);
 $6 = (_cons_gen($2,(51),$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _intern_cstr_gen($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (_mrb_intern_cstr($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_back_ref($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(46),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_nth_ref($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(45),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _toklast($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - 1)|0;
 $5 = $0;
 $6 = ((($5)) + 84|0);
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 STACKTOP = sp;return ($9|0);
}
function _reserved_word($str,$len) {
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $or$cond = 0, $or$cond3 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $str;
 $2 = $len;
 $3 = $2;
 $4 = ($3>>>0)<=(12);
 $5 = $2;
 $6 = ($5>>>0)>=(2);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $1;
  $8 = $2;
  $9 = (_hash($7,$8)|0);
  $key = $9;
  $10 = $key;
  $11 = ($10|0)<=(50);
  $12 = $key;
  $13 = ($12|0)>=(0);
  $or$cond3 = $11 & $13;
  if ($or$cond3) {
   $14 = $key;
   $15 = (504 + ($14<<4)|0);
   $16 = HEAP32[$15>>2]|0;
   $s = $16;
   $17 = $1;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = $s;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($19|0)==($22|0);
   if ($23) {
    $24 = $1;
    $25 = ((($24)) + 1|0);
    $26 = $s;
    $27 = ((($26)) + 1|0);
    $28 = (_strcmp($25,$27)|0);
    $29 = ($28|0)!=(0);
    if (!($29)) {
     $30 = $key;
     $31 = (504 + ($30<<4)|0);
     $0 = $31;
     $32 = $0;
     STACKTOP = sp;return ($32|0);
    }
   }
  }
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _hash($str,$len) {
 $str = $str|0;
 $len = $len|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hval = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $len;
 $2 = $1;
 $hval = $2;
 $3 = $hval;
 $$off = (($3) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  $4 = $0;
  $5 = ((($4)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (57895 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $hval;
  $12 = (($11) + ($10))|0;
  $hval = $12;
 }
 $13 = $0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (57895 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $hval;
 $20 = (($19) + ($18))|0;
 $hval = $20;
 $21 = $hval;
 $22 = $1;
 $23 = (($22) - 1)|0;
 $24 = $0;
 $25 = (($24) + ($23)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (57895 + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($21) + ($30))|0;
 STACKTOP = sp;return ($31|0);
}
function _new_scope($p,$body) {
 $p = $p|0;
 $body = $body|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $body;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = (_locals_node($4)|0);
 $6 = $1;
 $7 = (_cons_gen($3,$5,$6)|0);
 $8 = (_cons_gen($2,(3),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _locals_node($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $9 = 0;
  STACKTOP = sp;return ($9|0);
 }
 $5 = $0;
 $6 = ((($5)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 STACKTOP = sp;return ($9|0);
}
function _new_begin($p,$body) {
 $p = $p|0;
 $body = $body|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $body;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 if ($4) {
  $6 = $2;
  $7 = (_list2_gen($5,(17),$6)|0);
  $0 = $7;
 } else {
  $8 = (_cons_gen($5,(17),0)|0);
  $0 = $8;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _list2_gen($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $2;
 $7 = (_cons_gen($5,$6,0)|0);
 $8 = (_cons_gen($3,$4,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _local_switch($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $prev = $3;
 $4 = $0;
 $5 = (_cons_gen($4,0,0)|0);
 $6 = $0;
 $7 = ((($6)) + 76|0);
 HEAP32[$7>>2] = $5;
 $8 = $prev;
 STACKTOP = sp;return ($8|0);
}
function _local_resume($p,$prev) {
 $p = $p|0;
 $prev = $prev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $prev;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 76|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _new_rescue($p,$body,$resq,$els) {
 $p = $p|0;
 $body = $body|0;
 $resq = $resq|0;
 $els = $els|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $body;
 $2 = $resq;
 $3 = $els;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_list4_gen($4,(18),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _list4_gen($p,$a,$b,$c,$d) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = $0;
 $8 = $2;
 $9 = $0;
 $10 = $3;
 $11 = $0;
 $12 = $4;
 $13 = (_cons_gen($11,$12,0)|0);
 $14 = (_cons_gen($9,$10,$13)|0);
 $15 = (_cons_gen($7,$8,$14)|0);
 $16 = (_cons_gen($5,$6,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _new_ensure($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $0;
 $7 = $2;
 $8 = (_cons_gen($6,0,$7)|0);
 $9 = (_cons_gen($4,$5,$8)|0);
 $10 = (_cons_gen($3,(19),$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _new_nil($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(86))|0);
 STACKTOP = sp;return ($2|0);
}
function _new_alias($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $5;
 $7 = $2;
 $8 = $7;
 $9 = (_cons_gen($4,$6,$8)|0);
 $10 = (_cons_gen($3,(72),$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _cond($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _new_if($p,$a,$b,$c) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_list4_gen($4,(5),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_unless($p,$a,$b,$c) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = $2;
 $8 = (_list4_gen($4,(5),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_while($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(9),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_until($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(10),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_postexe($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(91),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_masgn($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(23),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_op_asgn($p,$a,$op,$b) {
 $p = $p|0;
 $a = $a|0;
 $op = $op|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $op;
 $3 = $b;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = $3;
 $9 = (_list4_gen($4,(28),$5,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _new_call($p,$a,$b,$c) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = $3;
 $9 = (_list4_gen($4,(29),$5,$7,$8)|0);
 $n = $9;
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $22 = $n;
  STACKTOP = sp;return ($22|0);
 }
 $12 = $1;
 $13 = ((($12)) + 10|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $n;
 $16 = ((($15)) + 10|0);
 HEAP16[$16>>1] = $14;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $n;
 $21 = ((($20)) + 8|0);
 HEAP16[$21>>1] = $19;
 $22 = $n;
 STACKTOP = sp;return ($22|0);
}
function _backref_error($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $0 = $p;
 $1 = $n;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $c = $5;
 $6 = $c;
 $7 = ($6|0)==(45);
 if ($7) {
  $8 = $0;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  _yyerror_i($8,59379,$12);
  STACKTOP = sp;return;
 }
 $13 = $c;
 $14 = ($13|0)==(46);
 $15 = $0;
 if (!($14)) {
  $20 = HEAP32[$15>>2]|0;
  $21 = $c;
  _mrb_fixnum_value_455($2,$21);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_bug($20,59425,$vararg_buffer);
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 _yyerror_i($15,59402,$19);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_455($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _new_array($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(34),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_asgn($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(24),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_and($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(20),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_or($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(21),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _call_uni_op($p,$recv,$m) {
 $p = $p|0;
 $recv = $recv|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $recv;
 $2 = $m;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $2;
 $7 = (_intern_cstr_gen($5,$6)|0);
 $8 = (_new_call($3,$4,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _local_nest($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_cons_gen($1,0,$4)|0);
 $6 = $0;
 $7 = ((($6)) + 76|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _new_block($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = (_locals_node($4)|0);
 $6 = $1;
 $7 = $2;
 $8 = (_list4_gen($3,(4),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _local_unnest($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 76|0);
 HEAP32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function _new_fcall($p,$b,$c) {
 $p = $p|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = (_new_self($3)|0);
 $n = $4;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 10|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $n;
  $11 = ((($10)) + 10|0);
  HEAP16[$11>>1] = $9;
  $12 = $2;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $n;
  $16 = ((($15)) + 8|0);
  HEAP16[$16>>1] = $14;
 }
 $17 = $0;
 $18 = $n;
 $19 = $1;
 $20 = $19;
 $21 = $2;
 $22 = (_list4_gen($17,(30),$18,$20,$21)|0);
 $n = $22;
 $23 = $2;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $35 = $n;
  STACKTOP = sp;return ($35|0);
 }
 $25 = $2;
 $26 = ((($25)) + 10|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $n;
 $29 = ((($28)) + 10|0);
 HEAP16[$29>>1] = $27;
 $30 = $2;
 $31 = ((($30)) + 8|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $n;
 $34 = ((($33)) + 8|0);
 HEAP16[$34>>1] = $32;
 $35 = $n;
 STACKTOP = sp;return ($35|0);
}
function _new_self($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(85))|0);
 STACKTOP = sp;return ($2|0);
}
function _args_with_block($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $0;
  _yyerror($9,59474);
 }
 $10 = $2;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _new_super($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(32),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_yield($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $14 = $1;
  $15 = (_cons_gen($14,(38),0)|0);
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  _yyerror($9,59474);
 }
 $10 = $1;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cons_gen($10,(38),$12)|0);
 $0 = $13;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _ret_args($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $n;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  _yyerror($7,59512);
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $16 = $1;
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  $19 = (_new_array($16,$18)|0);
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _new_return($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(37),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_break($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(13),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_next($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(14),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _assignable($p,$lhs) {
 $p = $p|0;
 $lhs = $lhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $lhs;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = ($4|0)==(39);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 _local_add($6,$10);
 STACKTOP = sp;return;
}
function _local_add($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = (_local_var_p($2,$3)|0);
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 _local_add_f($6,$7);
 STACKTOP = sp;return;
}
function _local_var_p($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $sym;
 $3 = $1;
 $4 = ((($3)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $l = $5;
 L1: while(1) {
  $6 = $l;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 9;
   break;
  }
  $8 = $l;
  $9 = HEAP32[$8>>2]|0;
  $n = $9;
  while(1) {
   $10 = $n;
   $11 = ($10|0)!=(0|0);
   if (!($11)) {
    break;
   }
   $12 = $n;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
   $15 = $2;
   $16 = ($14|0)==($15|0);
   if ($16) {
    label = 6;
    break L1;
   }
   $17 = $n;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $n = $19;
  }
  $20 = $l;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $l = $22;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _new_colon2($p,$b,$c) {
 $p = $p|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = (_cons_gen($4,$5,$7)|0);
 $9 = (_cons_gen($3,(77),$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _new_colon3($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(78),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_undef($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_list2_gen($2,(73),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_dot2($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(80),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_dot3($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(81),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _call_bin_op($p,$recv,$m,$arg1) {
 $p = $p|0;
 $recv = $recv|0;
 $m = $m|0;
 $arg1 = $arg1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $recv;
 $2 = $m;
 $3 = $arg1;
 $4 = $0;
 $5 = $1;
 $6 = $0;
 $7 = $2;
 $8 = (_intern_cstr_gen($6,$7)|0);
 $9 = $0;
 $10 = $0;
 $11 = $3;
 $12 = (_list1_gen($10,$11)|0);
 $13 = (_list1_gen($9,$12)|0);
 $14 = (_new_call($4,$5,$8,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _new_hash($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(36),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_block_arg($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(69),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_splat($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(66),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _call_with_block($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==((32)|0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==((33)|0);
  if (!($8)) {
   $22 = $1;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $n = $28;
   $29 = $n;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   $32 = $0;
   if ($31) {
    $36 = $n;
    $37 = HEAP32[$36>>2]|0;
    $38 = $2;
    _args_with_block($32,$37,$38);
    STACKTOP = sp;return;
   } else {
    $33 = $2;
    $34 = (_cons_gen($32,0,$33)|0);
    $35 = $n;
    HEAP32[$35>>2] = $34;
    STACKTOP = sp;return;
   }
  }
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $0;
 if ($12) {
  $18 = $1;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  _args_with_block($13,$20,$21);
  STACKTOP = sp;return;
 } else {
  $14 = $2;
  $15 = (_cons_gen($13,0,$14)|0);
  $16 = $1;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _new_lambda($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = (_locals_node($4)|0);
 $6 = $1;
 $7 = $2;
 $8 = (_list4_gen($3,(53),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_case($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $n2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = (_list2_gen($3,(6),$4)|0);
 $n = $5;
 $6 = $n;
 $n2 = $6;
 while(1) {
  $7 = $n2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $n2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $n2 = $13;
 }
 $14 = $2;
 $15 = $n2;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $n;
 STACKTOP = sp;return ($17|0);
}
function _new_for($p,$v,$o,$b) {
 $p = $p|0;
 $v = $v|0;
 $o = $o|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $v;
 $2 = $o;
 $3 = $b;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_list4_gen($4,(12),$5,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _new_class($p,$c,$s,$b) {
 $p = $p|0;
 $c = $c|0;
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $s;
 $3 = $b;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $0;
 $8 = $0;
 $9 = (_locals_node($8)|0);
 $10 = $3;
 $11 = (_cons_gen($7,$9,$10)|0);
 $12 = (_list4_gen($4,(74),$5,$6,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _new_sclass($p,$o,$b) {
 $p = $p|0;
 $o = $o|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $o;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $0;
 $7 = (_locals_node($6)|0);
 $8 = $2;
 $9 = (_cons_gen($5,$7,$8)|0);
 $10 = (_list3_gen($3,(76),$4,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _new_module($p,$m,$b) {
 $p = $p|0;
 $m = $m|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $m;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $0;
 $7 = (_locals_node($6)|0);
 $8 = $2;
 $9 = (_cons_gen($5,$7,$8)|0);
 $10 = (_list3_gen($3,(75),$4,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _new_def($p,$m,$a,$b) {
 $p = $p|0;
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $m;
 $2 = $a;
 $3 = $b;
 $4 = $0;
 $5 = $1;
 $6 = $5;
 $7 = $0;
 $8 = (_locals_node($7)|0);
 $9 = $2;
 $10 = $3;
 $11 = (_list5_gen($4,(70),$6,$8,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _list5_gen($p,$a,$b,$c,$d,$e) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $e;
 $6 = $0;
 $7 = $1;
 $8 = $0;
 $9 = $2;
 $10 = $0;
 $11 = $3;
 $12 = $0;
 $13 = $4;
 $14 = $0;
 $15 = $5;
 $16 = (_cons_gen($14,$15,0)|0);
 $17 = (_cons_gen($12,$13,$16)|0);
 $18 = (_cons_gen($10,$11,$17)|0);
 $19 = (_cons_gen($8,$9,$18)|0);
 $20 = (_cons_gen($6,$7,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function _new_sdef($p,$o,$m,$a,$b) {
 $p = $p|0;
 $o = $o|0;
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $o;
 $2 = $m;
 $3 = $a;
 $4 = $b;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $7;
 $9 = $0;
 $10 = (_locals_node($9)|0);
 $11 = $3;
 $12 = $4;
 $13 = (_list6_gen($5,(71),$6,$8,$10,$11,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _list6_gen($p,$a,$b,$c,$d,$e,$f) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 $e = $e|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $e;
 $6 = $f;
 $7 = $0;
 $8 = $1;
 $9 = $0;
 $10 = $2;
 $11 = $0;
 $12 = $3;
 $13 = $0;
 $14 = $4;
 $15 = $0;
 $16 = $5;
 $17 = $0;
 $18 = $6;
 $19 = (_cons_gen($17,$18,0)|0);
 $20 = (_cons_gen($15,$16,$19)|0);
 $21 = (_cons_gen($13,$14,$20)|0);
 $22 = (_cons_gen($11,$12,$21)|0);
 $23 = (_cons_gen($9,$10,$22)|0);
 $24 = (_cons_gen($7,$8,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _new_redo($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(15))|0);
 STACKTOP = sp;return ($2|0);
}
function _new_retry($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(16))|0);
 STACKTOP = sp;return ($2|0);
}
function _new_arg($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(63),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_args($p,$m,$opt,$rest,$m2,$blk) {
 $p = $p|0;
 $m = $m|0;
 $opt = $opt|0;
 $rest = $rest|0;
 $m2 = $m2|0;
 $blk = $blk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $m;
 $2 = $opt;
 $3 = $rest;
 $4 = $m2;
 $5 = $blk;
 $6 = $0;
 $7 = $4;
 $8 = $5;
 $9 = $8;
 $10 = (_cons_gen($6,$7,$9)|0);
 $n = $10;
 $11 = $0;
 $12 = $3;
 $13 = $12;
 $14 = $n;
 $15 = (_cons_gen($11,$13,$14)|0);
 $n = $15;
 $16 = $0;
 $17 = $2;
 $18 = $n;
 $19 = (_cons_gen($16,$17,$18)|0);
 $n = $19;
 $20 = $0;
 $21 = $1;
 $22 = $n;
 $23 = (_cons_gen($20,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _new_bv($p,$id) {
 $p = $p|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $id;
 STACKTOP = sp;return;
}
function _new_zsuper($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(33))|0);
 STACKTOP = sp;return ($2|0);
}
function _new_dstr($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(56),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_literal_delim($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_cons_gen($1,(100),0)|0);
 STACKTOP = sp;return ($2|0);
}
function _new_dxstr($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(58),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_dregx($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_cons_gen($4,$5,$6)|0);
 $8 = (_cons_gen($3,(60),$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _heredoc_end($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 1120|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = ((($8)) + 1120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = $0;
 if ($11) {
  $13 = ((($12)) + 40|0);
  HEAP32[$13>>2] = 0;
  $14 = $0;
  $15 = ((($14)) + 72|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & -2;
  $18 = $17 | 1;
  HEAP8[$15>>0] = $18;
  $19 = $0;
  _end_strterm($19);
  $20 = $0;
  $21 = ((($20)) + 1124|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = ((($23)) + 44|0);
  HEAP32[$24>>2] = $22;
  $25 = $0;
  $26 = ((($25)) + 1124|0);
  HEAP32[$26>>2] = 0;
  $27 = $0;
  $28 = ((($27)) + 1128|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 & -2;
  $31 = $30 | 1;
  HEAP8[$28>>0] = $31;
  STACKTOP = sp;return;
 } else {
  $32 = (_parsing_heredoc_inf($12)|0);
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34;
  $36 = $0;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$38>>2] = $35;
  STACKTOP = sp;return;
 }
}
function _new_words($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(101),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_sym($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(54),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_dsym($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $0;
 $4 = $1;
 $5 = (_new_dstr($3,$4)|0);
 $6 = (_cons_gen($2,(97),$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _new_strsym($p,$str) {
 $p = $p|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $str;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $s = $5;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $len = $11;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $s;
 $15 = $len;
 $16 = (_mrb_intern($13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _new_symbols($p,$a) {
 $p = $p|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(102),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _negate_lit($p,$n) {
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = (_cons_gen($2,(52),$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _new_lvar($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(39),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_ivar($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(42),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_gvar($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(41),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_cvar($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(44),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _new_const($p,$sym) {
 $p = $p|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $sym;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_cons_gen($2,(43),$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _var_reference($p,$lhs) {
 $p = $p|0;
 $lhs = $lhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $lhs;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = ($5|0)==(39);
 if ($6) {
  $7 = $1;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
  $12 = (_local_var_p($7,$11)|0);
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   $14 = $1;
   $15 = $2;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17;
   $19 = (_new_fcall($14,$18,0)|0);
   $n = $19;
   $20 = $1;
   $21 = $2;
   _cons_free_gen($20,$21);
   $22 = $n;
   $0 = $22;
   $24 = $0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $2;
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _new_true($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(87))|0);
 STACKTOP = sp;return ($2|0);
}
function _new_false($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (_list1_gen($1,(88))|0);
 STACKTOP = sp;return ($2|0);
}
function _yysyntax_error($yyresult,$yystate,$yychar) {
 $yyresult = $yyresult|0;
 $yystate = $yystate|0;
 $yychar = $yychar|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $yyarg = 0, $yychecklim = 0, $yycount = 0, $yyf = 0, $yyfmt = 0, $yyformat = 0, $yyi = 0;
 var $yyn = 0, $yyp = 0, $yyprefix = 0, $yysize = 0, $yysize0 = 0, $yysize1 = 0, $yysize_overflow = 0, $yytype = 0, $yyx = 0, $yyxbegin = 0, $yyxend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $yyarg = sp + 40|0;
 $yyformat = sp + 100|0;
 $1 = $yyresult;
 $2 = $yystate;
 $3 = $yychar;
 $4 = $2;
 $5 = (3044 + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $yyn = $7;
 $8 = $yyn;
 $9 = (-771)<($8|0);
 $10 = $yyn;
 $11 = ($10|0)<=(10639);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  $0 = 0;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 $12 = $3;
 $13 = ($12>>>0)<=(372);
 if ($13) {
  $14 = $3;
  $15 = (58359 + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17;
 } else {
  $18 = 2;
 }
 $yytype = $18;
 $19 = $yytype;
 $20 = (1320 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_yytnamerr(0,$21)|0);
 $yysize0 = $22;
 $23 = $yysize0;
 $yysize = $23;
 $yysize_overflow = 0;
 $yyprefix = 62710;
 $24 = $yyn;
 $25 = ($24|0)<(0);
 $26 = $yyn;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $27 : 0;
 $yyxbegin = $28;
 $29 = $yyn;
 $30 = (10639 - ($29))|0;
 $31 = (($30) + 1)|0;
 $yychecklim = $31;
 $32 = $yychecklim;
 $33 = ($32|0)<(144);
 $34 = $yychecklim;
 $35 = $33 ? $34 : 144;
 $yyxend = $35;
 $yycount = 1;
 $36 = $yytype;
 $37 = (1320 + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$yyarg>>2] = $38;
 $39 = (_yystpcpy($yyformat,62725)|0);
 $yyfmt = $39;
 $40 = $yyxbegin;
 $yyx = $40;
 while(1) {
  $41 = $yyx;
  $42 = $yyxend;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $yyx;
  $45 = $yyn;
  $46 = (($44) + ($45))|0;
  $47 = (4980 + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = $yyx;
  $51 = ($49|0)==($50|0);
  $52 = $yyx;
  $53 = ($52|0)!=(1);
  $or$cond3 = $51 & $53;
  if ($or$cond3) {
   $54 = $yycount;
   $55 = ($54|0)==(5);
   if ($55) {
    label = 9;
    break;
   }
   $58 = $yyx;
   $59 = (1320 + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $yycount;
   $62 = (($61) + 1)|0;
   $yycount = $62;
   $63 = (($yyarg) + ($61<<2)|0);
   HEAP32[$63>>2] = $60;
   $64 = $yysize;
   $65 = $yyx;
   $66 = (1320 + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_yytnamerr(0,$67)|0);
   $69 = (($64) + ($68))|0;
   $yysize1 = $69;
   $70 = $yysize1;
   $71 = $yysize;
   $72 = ($70>>>0)<($71>>>0);
   $73 = $72&1;
   $74 = $yysize_overflow;
   $75 = $74 | $73;
   $yysize_overflow = $75;
   $76 = $yysize1;
   $yysize = $76;
   $77 = $yyfmt;
   $78 = $yyprefix;
   $79 = (_yystpcpy($77,$78)|0);
   $yyfmt = $79;
   $yyprefix = 62753;
  }
  $80 = $yyx;
  $81 = (($80) + 1)|0;
  $yyx = $81;
 }
 if ((label|0) == 9) {
  $yycount = 1;
  $56 = $yysize0;
  $yysize = $56;
  $57 = ((($yyformat)) + 27|0);
  HEAP8[$57>>0] = 0;
 }
 $yyf = $yyformat;
 $82 = $yysize;
 $83 = $yyf;
 $84 = (_yystrlen($83)|0);
 $85 = (($82) + ($84))|0;
 $yysize1 = $85;
 $86 = $yysize1;
 $87 = $yysize;
 $88 = ($86>>>0)<($87>>>0);
 $89 = $88&1;
 $90 = $yysize_overflow;
 $91 = $90 | $89;
 $yysize_overflow = $91;
 $92 = $yysize1;
 $yysize = $92;
 $93 = $yysize_overflow;
 $94 = ($93|0)!=(0);
 if ($94) {
  $0 = -1;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 $95 = $1;
 $96 = ($95|0)!=(0|0);
 L22: do {
  if ($96) {
   $97 = $1;
   $yyp = $97;
   $yyi = 0;
   while(1) {
    $98 = $yyf;
    $99 = HEAP8[$98>>0]|0;
    $100 = $yyp;
    HEAP8[$100>>0] = $99;
    $101 = $99 << 24 >> 24;
    $102 = ($101|0)!=(0);
    if (!($102)) {
     break L22;
    }
    $103 = $yyp;
    $104 = HEAP8[$103>>0]|0;
    $105 = $104 << 24 >> 24;
    $106 = ($105|0)==(37);
    if ($106) {
     $107 = $yyf;
     $108 = ((($107)) + 1|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109 << 24 >> 24;
     $111 = ($110|0)==(115);
     if ($111) {
      $112 = $yyi;
      $113 = $yycount;
      $114 = ($112|0)<($113|0);
      if ($114) {
       $115 = $yyp;
       $116 = $yyi;
       $117 = (($116) + 1)|0;
       $yyi = $117;
       $118 = (($yyarg) + ($116<<2)|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (_yytnamerr($115,$119)|0);
       $121 = $yyp;
       $122 = (($121) + ($120)|0);
       $yyp = $122;
       $123 = $yyf;
       $124 = ((($123)) + 2|0);
       $yyf = $124;
       continue;
      }
     }
    }
    $125 = $yyp;
    $126 = ((($125)) + 1|0);
    $yyp = $126;
    $127 = $yyf;
    $128 = ((($127)) + 1|0);
    $yyf = $128;
   }
  }
 } while(0);
 $129 = $yysize;
 $0 = $129;
 $130 = $0;
 STACKTOP = sp;return ($130|0);
}
function _yytnamerr($yyres,$yystr) {
 $yyres = $yyres|0;
 $yystr = $yystr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yyn = 0, $yyp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $yyres;
 $2 = $yystr;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)==(34);
 L1: do {
  if ($6) {
   $yyn = 0;
   $7 = $2;
   $yyp = $7;
   L3: while(1) {
    $8 = $yyp;
    $9 = ((($8)) + 1|0);
    $yyp = $9;
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 << 24 >> 24;
    switch ($11|0) {
    case 44: case 39:  {
     break L1;
     break;
    }
    case 34:  {
     break L3;
     break;
    }
    case 92:  {
     $12 = $yyp;
     $13 = ((($12)) + 1|0);
     $yyp = $13;
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 << 24 >> 24;
     $16 = ($15|0)!=(92);
     if ($16) {
      break L1;
     }
     break;
    }
    default: {
    }
    }
    $17 = $1;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $yyp;
     $20 = HEAP8[$19>>0]|0;
     $21 = $yyn;
     $22 = $1;
     $23 = (($22) + ($21)|0);
     HEAP8[$23>>0] = $20;
    }
    $24 = $yyn;
    $25 = (($24) + 1)|0;
    $yyn = $25;
   }
   $26 = $1;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $yyn;
    $29 = $1;
    $30 = (($29) + ($28)|0);
    HEAP8[$30>>0] = 0;
   }
   $31 = $yyn;
   $0 = $31;
   $43 = $0;
   STACKTOP = sp;return ($43|0);
  }
 } while(0);
 $32 = $1;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $36 = $1;
  $37 = $2;
  $38 = (_yystpcpy($36,$37)|0);
  $39 = $1;
  $40 = $38;
  $41 = $39;
  $42 = (($40) - ($41))|0;
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $34 = $2;
  $35 = (_yystrlen($34)|0);
  $0 = $35;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _yystrlen($yystr) {
 $yystr = $yystr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $yylen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $yystr;
 $yylen = 0;
 while(1) {
  $1 = $yylen;
  $2 = $0;
  $3 = (($2) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  $6 = $yylen;
  if (!($5)) {
   break;
  }
  $7 = (($6) + 1)|0;
  $yylen = $7;
 }
 STACKTOP = sp;return ($6|0);
}
function _yystpcpy($yydest,$yysrc) {
 $yydest = $yydest|0;
 $yysrc = $yysrc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $yyd = 0, $yys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $yydest;
 $1 = $yysrc;
 $2 = $0;
 $yyd = $2;
 $3 = $1;
 $yys = $3;
 while(1) {
  $4 = $yys;
  $5 = ((($4)) + 1|0);
  $yys = $5;
  $6 = HEAP8[$4>>0]|0;
  $7 = $yyd;
  $8 = ((($7)) + 1|0);
  $yyd = $8;
  HEAP8[$7>>0] = $6;
  $9 = $6 << 24 >> 24;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
 }
 $11 = $yyd;
 $12 = ((($11)) + -1|0);
 STACKTOP = sp;return ($12|0);
}
function _yydestruct($yymsg,$yytype,$yyvaluep,$p) {
 $yymsg = $yymsg|0;
 $yytype = $yytype|0;
 $yyvaluep = $yyvaluep|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $yymsg;
 $1 = $yytype;
 $2 = $yyvaluep;
 $3 = $p;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $0 = 62791;
 STACKTOP = sp;return;
}
function _parser_update_cxt($p,$cxt) {
 $p = $p|0;
 $cxt = $cxt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $n = 0, $n0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $cxt;
 $i = 0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 1144|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = ($8|0)!=(3);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = ((($10)) + 1144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $n = $15;
 $n0 = $15;
 while(1) {
  $16 = $n;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
  $20 = $n;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $n = $22;
 }
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = $i;
 $28 = $27<<2;
 $29 = (_mrb_realloc($24,$26,$28)|0);
 $30 = $1;
 HEAP32[$30>>2] = $29;
 $31 = $i;
 $32 = $1;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $31;
 $i = 0;
 $34 = $n0;
 $n = $34;
 while(1) {
  $35 = $n;
  $36 = ($35|0)!=(0|0);
  if (!($36)) {
   break;
  }
  $37 = $n;
  $38 = HEAP32[$37>>2]|0;
  $39 = $38;
  $40 = $i;
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($40<<2)|0);
  HEAP32[$43>>2] = $39;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
  $46 = $n;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $n = $48;
 }
 STACKTOP = sp;return;
}
function _mrb_parser_dump($mrb,$tree,$offset) {
 $mrb = $mrb|0;
 $tree = $tree|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $first_lval = 0, $first_lval6 = 0, $n = 0, $n2 = 0, $n21 = 0, $n210 = 0;
 var $n22 = 0, $n23 = 0, $n24 = 0, $n25 = 0, $n28 = 0, $n3 = 0, $n7 = 0, $n9 = 0, $nodetype = 0, $t = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer106 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0;
 var $vararg_buffer118 = 0, $vararg_buffer120 = 0, $vararg_buffer122 = 0, $vararg_buffer124 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer132 = 0, $vararg_buffer134 = 0, $vararg_buffer136 = 0, $vararg_buffer138 = 0, $vararg_buffer140 = 0, $vararg_buffer142 = 0, $vararg_buffer144 = 0, $vararg_buffer146 = 0, $vararg_buffer148 = 0, $vararg_buffer15 = 0, $vararg_buffer150 = 0, $vararg_buffer152 = 0;
 var $vararg_buffer156 = 0, $vararg_buffer158 = 0, $vararg_buffer160 = 0, $vararg_buffer162 = 0, $vararg_buffer164 = 0, $vararg_buffer166 = 0, $vararg_buffer168 = 0, $vararg_buffer17 = 0, $vararg_buffer170 = 0, $vararg_buffer172 = 0, $vararg_buffer174 = 0, $vararg_buffer176 = 0, $vararg_buffer179 = 0, $vararg_buffer182 = 0, $vararg_buffer185 = 0, $vararg_buffer188 = 0, $vararg_buffer19 = 0, $vararg_buffer191 = 0, $vararg_buffer193 = 0, $vararg_buffer195 = 0;
 var $vararg_buffer197 = 0, $vararg_buffer200 = 0, $vararg_buffer203 = 0, $vararg_buffer206 = 0, $vararg_buffer208 = 0, $vararg_buffer21 = 0, $vararg_buffer212 = 0, $vararg_buffer215 = 0, $vararg_buffer217 = 0, $vararg_buffer221 = 0, $vararg_buffer223 = 0, $vararg_buffer227 = 0, $vararg_buffer229 = 0, $vararg_buffer23 = 0, $vararg_buffer233 = 0, $vararg_buffer235 = 0, $vararg_buffer238 = 0, $vararg_buffer241 = 0, $vararg_buffer244 = 0, $vararg_buffer246 = 0;
 var $vararg_buffer248 = 0, $vararg_buffer25 = 0, $vararg_buffer250 = 0, $vararg_buffer252 = 0, $vararg_buffer256 = 0, $vararg_buffer258 = 0, $vararg_buffer261 = 0, $vararg_buffer263 = 0, $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer27 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer276 = 0, $vararg_buffer278 = 0, $vararg_buffer280 = 0, $vararg_buffer283 = 0, $vararg_buffer286 = 0, $vararg_buffer289 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer291 = 0, $vararg_buffer293 = 0, $vararg_buffer295 = 0, $vararg_buffer297 = 0, $vararg_buffer3 = 0, $vararg_buffer300 = 0, $vararg_buffer302 = 0, $vararg_buffer304 = 0, $vararg_buffer307 = 0, $vararg_buffer309 = 0, $vararg_buffer31 = 0, $vararg_buffer311 = 0, $vararg_buffer313 = 0, $vararg_buffer316 = 0, $vararg_buffer319 = 0, $vararg_buffer321 = 0, $vararg_buffer324 = 0, $vararg_buffer326 = 0, $vararg_buffer329 = 0, $vararg_buffer331 = 0;
 var $vararg_buffer333 = 0, $vararg_buffer336 = 0, $vararg_buffer339 = 0, $vararg_buffer34 = 0, $vararg_buffer341 = 0, $vararg_buffer344 = 0, $vararg_buffer346 = 0, $vararg_buffer348 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0;
 var $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0;
 var $vararg_buffer96 = 0, $vararg_buffer98 = 0, $vararg_ptr101 = 0, $vararg_ptr155 = 0, $vararg_ptr211 = 0, $vararg_ptr220 = 0, $vararg_ptr226 = 0, $vararg_ptr232 = 0, $vararg_ptr255 = 0, $vararg_ptr351 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer348 = sp + 1208|0;
 $vararg_buffer346 = sp + 1200|0;
 $vararg_buffer344 = sp + 1192|0;
 $vararg_buffer341 = sp + 1184|0;
 $vararg_buffer339 = sp + 1176|0;
 $vararg_buffer336 = sp + 1168|0;
 $vararg_buffer333 = sp + 1160|0;
 $vararg_buffer331 = sp + 1152|0;
 $vararg_buffer329 = sp + 1144|0;
 $vararg_buffer326 = sp + 1136|0;
 $vararg_buffer324 = sp + 1128|0;
 $vararg_buffer321 = sp + 1120|0;
 $vararg_buffer319 = sp + 1112|0;
 $vararg_buffer316 = sp + 1104|0;
 $vararg_buffer313 = sp + 1096|0;
 $vararg_buffer311 = sp + 1088|0;
 $vararg_buffer309 = sp + 1080|0;
 $vararg_buffer307 = sp + 1072|0;
 $vararg_buffer304 = sp + 1064|0;
 $vararg_buffer302 = sp + 1056|0;
 $vararg_buffer300 = sp + 1048|0;
 $vararg_buffer297 = sp + 1040|0;
 $vararg_buffer295 = sp + 1032|0;
 $vararg_buffer293 = sp + 1024|0;
 $vararg_buffer291 = sp + 1016|0;
 $vararg_buffer289 = sp + 1008|0;
 $vararg_buffer286 = sp + 1000|0;
 $vararg_buffer283 = sp + 992|0;
 $vararg_buffer280 = sp + 984|0;
 $vararg_buffer278 = sp + 976|0;
 $vararg_buffer276 = sp + 968|0;
 $vararg_buffer274 = sp + 960|0;
 $vararg_buffer271 = sp + 952|0;
 $vararg_buffer268 = sp + 944|0;
 $vararg_buffer265 = sp + 936|0;
 $vararg_buffer263 = sp + 928|0;
 $vararg_buffer261 = sp + 920|0;
 $vararg_buffer258 = sp + 912|0;
 $vararg_buffer256 = sp + 904|0;
 $vararg_buffer252 = sp + 896|0;
 $vararg_buffer250 = sp + 888|0;
 $vararg_buffer248 = sp + 880|0;
 $vararg_buffer246 = sp + 872|0;
 $vararg_buffer244 = sp + 864|0;
 $vararg_buffer241 = sp + 856|0;
 $vararg_buffer238 = sp + 848|0;
 $vararg_buffer235 = sp + 840|0;
 $vararg_buffer233 = sp + 832|0;
 $vararg_buffer229 = sp + 824|0;
 $vararg_buffer227 = sp + 816|0;
 $vararg_buffer223 = sp + 808|0;
 $vararg_buffer221 = sp + 800|0;
 $vararg_buffer217 = sp + 792|0;
 $vararg_buffer215 = sp + 784|0;
 $vararg_buffer212 = sp + 776|0;
 $vararg_buffer208 = sp + 768|0;
 $vararg_buffer206 = sp + 760|0;
 $vararg_buffer203 = sp + 752|0;
 $vararg_buffer200 = sp + 744|0;
 $vararg_buffer197 = sp + 736|0;
 $vararg_buffer195 = sp + 728|0;
 $vararg_buffer193 = sp + 720|0;
 $vararg_buffer191 = sp + 712|0;
 $vararg_buffer188 = sp + 704|0;
 $vararg_buffer185 = sp + 696|0;
 $vararg_buffer182 = sp + 688|0;
 $vararg_buffer179 = sp + 680|0;
 $vararg_buffer176 = sp + 672|0;
 $vararg_buffer174 = sp + 664|0;
 $vararg_buffer172 = sp + 656|0;
 $vararg_buffer170 = sp + 648|0;
 $vararg_buffer168 = sp + 640|0;
 $vararg_buffer166 = sp + 632|0;
 $vararg_buffer164 = sp + 624|0;
 $vararg_buffer162 = sp + 616|0;
 $vararg_buffer160 = sp + 608|0;
 $vararg_buffer158 = sp + 600|0;
 $vararg_buffer156 = sp + 592|0;
 $vararg_buffer152 = sp + 584|0;
 $vararg_buffer150 = sp + 576|0;
 $vararg_buffer148 = sp + 568|0;
 $vararg_buffer146 = sp + 560|0;
 $vararg_buffer144 = sp + 552|0;
 $vararg_buffer142 = sp + 544|0;
 $vararg_buffer140 = sp + 536|0;
 $vararg_buffer138 = sp + 528|0;
 $vararg_buffer136 = sp + 520|0;
 $vararg_buffer134 = sp + 512|0;
 $vararg_buffer132 = sp + 504|0;
 $vararg_buffer130 = sp + 496|0;
 $vararg_buffer128 = sp + 488|0;
 $vararg_buffer126 = sp + 480|0;
 $vararg_buffer124 = sp + 472|0;
 $vararg_buffer122 = sp + 464|0;
 $vararg_buffer120 = sp + 456|0;
 $vararg_buffer118 = sp + 448|0;
 $vararg_buffer115 = sp + 440|0;
 $vararg_buffer112 = sp + 432|0;
 $vararg_buffer110 = sp + 424|0;
 $vararg_buffer108 = sp + 416|0;
 $vararg_buffer106 = sp + 408|0;
 $vararg_buffer104 = sp + 400|0;
 $vararg_buffer102 = sp + 392|0;
 $vararg_buffer98 = sp + 384|0;
 $vararg_buffer96 = sp + 376|0;
 $vararg_buffer94 = sp + 368|0;
 $vararg_buffer91 = sp + 360|0;
 $vararg_buffer89 = sp + 352|0;
 $vararg_buffer87 = sp + 344|0;
 $vararg_buffer85 = sp + 336|0;
 $vararg_buffer83 = sp + 328|0;
 $vararg_buffer81 = sp + 320|0;
 $vararg_buffer79 = sp + 312|0;
 $vararg_buffer77 = sp + 304|0;
 $vararg_buffer75 = sp + 296|0;
 $vararg_buffer73 = sp + 288|0;
 $vararg_buffer71 = sp + 280|0;
 $vararg_buffer69 = sp + 272|0;
 $vararg_buffer67 = sp + 264|0;
 $vararg_buffer65 = sp + 256|0;
 $vararg_buffer63 = sp + 248|0;
 $vararg_buffer61 = sp + 240|0;
 $vararg_buffer59 = sp + 232|0;
 $vararg_buffer57 = sp + 224|0;
 $vararg_buffer55 = sp + 216|0;
 $vararg_buffer53 = sp + 208|0;
 $vararg_buffer51 = sp + 200|0;
 $vararg_buffer49 = sp + 192|0;
 $vararg_buffer47 = sp + 184|0;
 $vararg_buffer45 = sp + 176|0;
 $vararg_buffer43 = sp + 168|0;
 $vararg_buffer41 = sp + 160|0;
 $vararg_buffer39 = sp + 152|0;
 $vararg_buffer36 = sp + 144|0;
 $vararg_buffer34 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = $tree;
 $2 = $offset;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 L3: while(1) {
  $5 = $1;
  $6 = $2;
  _dump_prefix($5,$6);
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
  $nodetype = $9;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $1 = $12;
  $13 = $nodetype;
  switch ($13|0) {
  case 17:  {
   label = 3;
   break L3;
   break;
  }
  case 18:  {
   label = 4;
   break L3;
   break;
  }
  case 19:  {
   label = 18;
   break L3;
   break;
  }
  case 53:  {
   label = 19;
   break L3;
   break;
  }
  case 4:  {
   break L3;
   break;
  }
  case 5:  {
   label = 34;
   break L3;
   break;
  }
  case 20:  {
   label = 36;
   break L3;
   break;
  }
  case 21:  {
   label = 37;
   break L3;
   break;
  }
  case 6:  {
   label = 38;
   break L3;
   break;
  }
  case 9:  {
   label = 43;
   break L3;
   break;
  }
  case 10:  {
   label = 44;
   break L3;
   break;
  }
  case 12:  {
   label = 45;
   break L3;
   break;
  }
  case 29: case 30:  {
   label = 66;
   break L3;
   break;
  }
  case 80:  {
   label = 69;
   break L3;
   break;
  }
  case 81:  {
   label = 70;
   break L3;
   break;
  }
  case 77:  {
   label = 71;
   break L3;
   break;
  }
  case 78:  {
   label = 72;
   break L3;
   break;
  }
  case 34:  {
   label = 73;
   break L3;
   break;
  }
  case 36:  {
   label = 74;
   break L3;
   break;
  }
  case 66:  {
   label = 77;
   break L3;
   break;
  }
  case 24:  {
   label = 78;
   break L3;
   break;
  }
  case 23:  {
   label = 79;
   break L3;
   break;
  }
  case 28:  {
   label = 90;
   break L3;
   break;
  }
  case 32:  {
   label = 91;
   break L3;
   break;
  }
  case 33:  {
   label = 94;
   break L3;
   break;
  }
  case 37:  {
   label = 95;
   break L3;
   break;
  }
  case 38:  {
   label = 96;
   break L3;
   break;
  }
  case 13:  {
   label = 97;
   break L3;
   break;
  }
  case 14:  {
   label = 98;
   break L3;
   break;
  }
  case 15:  {
   label = 99;
   break L3;
   break;
  }
  case 16:  {
   label = 100;
   break L3;
   break;
  }
  case 39:  {
   label = 101;
   break L3;
   break;
  }
  case 41:  {
   label = 102;
   break L3;
   break;
  }
  case 42:  {
   label = 103;
   break L3;
   break;
  }
  case 44:  {
   label = 104;
   break L3;
   break;
  }
  case 43:  {
   label = 105;
   break L3;
   break;
  }
  case 47:  {
   label = 106;
   break L3;
   break;
  }
  case 46:  {
   label = 107;
   break L3;
   break;
  }
  case 45:  {
   label = 108;
   break L3;
   break;
  }
  case 63:  {
   label = 109;
   break L3;
   break;
  }
  case 69:  {
   label = 110;
   break L3;
   break;
  }
  case 50:  {
   label = 111;
   break L3;
   break;
  }
  case 51:  {
   label = 112;
   break L3;
   break;
  }
  case 52:  {
   label = 113;
   break L3;
   break;
  }
  case 55:  {
   label = 114;
   break L3;
   break;
  }
  case 56:  {
   label = 115;
   break L3;
   break;
  }
  case 57:  {
   label = 116;
   break L3;
   break;
  }
  case 58:  {
   label = 117;
   break L3;
   break;
  }
  case 59:  {
   label = 118;
   break L3;
   break;
  }
  case 60:  {
   label = 119;
   break L3;
   break;
  }
  case 54:  {
   label = 120;
   break L3;
   break;
  }
  case 85:  {
   label = 121;
   break L3;
   break;
  }
  case 86:  {
   label = 122;
   break L3;
   break;
  }
  case 87:  {
   label = 123;
   break L3;
   break;
  }
  case 88:  {
   label = 124;
   break L3;
   break;
  }
  case 72:  {
   label = 125;
   break L3;
   break;
  }
  case 73:  {
   label = 126;
   break L3;
   break;
  }
  case 74:  {
   label = 130;
   break L3;
   break;
  }
  case 75:  {
   label = 138;
   break L3;
   break;
  }
  case 76:  {
   label = 144;
   break L3;
   break;
  }
  case 70:  {
   label = 145;
   break L3;
   break;
  }
  case 71:  {
   label = 170;
   break L3;
   break;
  }
  case 91:  {
   label = 184;
   break L3;
   break;
  }
  case 99:  {
   label = 185;
   break L3;
   break;
  }
  case 3:  {
   break;
  }
  default: {
   label = 186;
   break L3;
  }
  }
  (_printf(63227,$vararg_buffer85)|0);
  $422 = $1;
  $423 = HEAP32[$422>>2]|0;
  $n23 = $423;
  $first_lval = 1;
  $424 = $n23;
  $425 = ($424|0)!=(0|0);
  do {
   if ($425) {
    $426 = $n23;
    $427 = HEAP32[$426>>2]|0;
    $428 = ($427|0)!=(0|0);
    if (!($428)) {
     $429 = $n23;
     $430 = ((($429)) + 4|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ($431|0)!=(0|0);
     if (!($432)) {
      break;
     }
    }
    $433 = $n23;
    $434 = $2;
    $435 = (($434) + 1)|0;
    _dump_prefix($433,$435);
    (_printf(63240,$vararg_buffer87)|0);
    $436 = $n23;
    $437 = $2;
    $438 = (($437) + 2)|0;
    _dump_prefix($436,$438);
    while(1) {
     $439 = $n23;
     $440 = ($439|0)!=(0|0);
     if (!($440)) {
      break;
     }
     $441 = $n23;
     $442 = HEAP32[$441>>2]|0;
     $443 = ($442|0)!=(0|0);
     if ($443) {
      $444 = $first_lval;
      $445 = ($444<<24>>24)!=(0);
      if (!($445)) {
       (_printf(63258,$vararg_buffer89)|0);
      }
      $446 = $0;
      $447 = $n23;
      $448 = HEAP32[$447>>2]|0;
      $449 = $448;
      $450 = (_mrb_sym2name($446,$449)|0);
      HEAP32[$vararg_buffer91>>2] = $450;
      (_printf(63261,$vararg_buffer91)|0);
      $first_lval = 0;
     }
     $451 = $n23;
     $452 = ((($451)) + 4|0);
     $453 = HEAP32[$452>>2]|0;
     $n23 = $453;
    }
    (_printf(66199,$vararg_buffer94)|0);
   }
  } while(0);
  $454 = $1;
  $455 = ((($454)) + 4|0);
  $456 = HEAP32[$455>>2]|0;
  $1 = $456;
  $457 = $2;
  $458 = (($457) + 1)|0;
  $2 = $458;
 }
 switch (label|0) {
  case 3: {
   (_printf(62885,$vararg_buffer)|0);
   $14 = $0;
   $15 = $1;
   $16 = $2;
   $17 = (($16) + 1)|0;
   _dump_recur($14,$15,$17);
   STACKTOP = sp;return;
   break;
  }
  case 4: {
   (_printf(62898,$vararg_buffer1)|0);
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $1;
    $22 = $2;
    $23 = (($22) + 1)|0;
    _dump_prefix($21,$23);
    (_printf(62912,$vararg_buffer3)|0);
    $24 = $0;
    $25 = $1;
    $26 = HEAP32[$25>>2]|0;
    $27 = $2;
    $28 = (($27) + 2)|0;
    _mrb_parser_dump($24,$26,$28);
   }
   $29 = $1;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $1 = $31;
   $32 = $1;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   L31: do {
    if ($34) {
     $35 = $1;
     $36 = HEAP32[$35>>2]|0;
     $n2 = $36;
     $37 = $n2;
     $38 = $2;
     $39 = (($38) + 1)|0;
     _dump_prefix($37,$39);
     (_printf(62919,$vararg_buffer5)|0);
     while(1) {
      $40 = $n2;
      $41 = ($40|0)!=(0|0);
      if (!($41)) {
       break L31;
      }
      $42 = $n2;
      $43 = HEAP32[$42>>2]|0;
      $n3 = $43;
      $44 = $n3;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)!=(0|0);
      if ($46) {
       $47 = $n2;
       $48 = $2;
       $49 = (($48) + 2)|0;
       _dump_prefix($47,$49);
       (_printf(62928,$vararg_buffer7)|0);
       $50 = $0;
       $51 = $n3;
       $52 = HEAP32[$51>>2]|0;
       $53 = $2;
       $54 = (($53) + 3)|0;
       _dump_recur($50,$52,$54);
      }
      $55 = $n3;
      $56 = ((($55)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)!=(0|0);
      if ($59) {
       $60 = $n3;
       $61 = $2;
       $62 = (($61) + 2)|0;
       _dump_prefix($60,$62);
       (_printf(62945,$vararg_buffer9)|0);
       $63 = $0;
       $64 = $n3;
       $65 = ((($64)) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = HEAP32[$66>>2]|0;
       $68 = $2;
       $69 = (($68) + 3)|0;
       _mrb_parser_dump($63,$67,$69);
      }
      $70 = $n3;
      $71 = ((($70)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((($72)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)!=(0|0);
      if ($76) {
       $77 = $n3;
       $78 = $2;
       $79 = (($78) + 2)|0;
       _dump_prefix($77,$79);
       (_printf(62955,$vararg_buffer11)|0);
       $80 = $0;
       $81 = $n3;
       $82 = ((($81)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ((($83)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = HEAP32[$85>>2]|0;
       $87 = $2;
       $88 = (($87) + 3)|0;
       _mrb_parser_dump($80,$86,$88);
      }
      $89 = $n2;
      $90 = ((($89)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      $n2 = $91;
     }
    }
   } while(0);
   $92 = $1;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $1 = $94;
   $95 = $1;
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0|0);
   if (!($97)) {
    STACKTOP = sp;return;
   }
   $98 = $1;
   $99 = $2;
   $100 = (($99) + 1)|0;
   _dump_prefix($98,$100);
   (_printf(62969,$vararg_buffer13)|0);
   $101 = $0;
   $102 = $1;
   $103 = HEAP32[$102>>2]|0;
   $104 = $2;
   $105 = (($104) + 2)|0;
   _mrb_parser_dump($101,$103,$105);
   STACKTOP = sp;return;
   break;
  }
  case 18: {
   (_printf(62976,$vararg_buffer15)|0);
   $106 = $1;
   $107 = $2;
   $108 = (($107) + 1)|0;
   _dump_prefix($106,$108);
   (_printf(62912,$vararg_buffer17)|0);
   $109 = $0;
   $110 = $1;
   $111 = HEAP32[$110>>2]|0;
   $112 = $2;
   $113 = (($112) + 2)|0;
   _mrb_parser_dump($109,$111,$113);
   $114 = $1;
   $115 = $2;
   $116 = (($115) + 1)|0;
   _dump_prefix($114,$116);
   (_printf(62990,$vararg_buffer19)|0);
   $117 = $0;
   $118 = $1;
   $119 = ((($118)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $2;
   $124 = (($123) + 2)|0;
   _mrb_parser_dump($117,$122,$124);
   STACKTOP = sp;return;
   break;
  }
  case 19: {
   (_printf(62999,$vararg_buffer21)|0);
   break;
  }
  case 34: {
   (_printf(63090,$vararg_buffer41)|0);
   $224 = $1;
   $225 = $2;
   $226 = (($225) + 1)|0;
   _dump_prefix($224,$226);
   (_printf(63100,$vararg_buffer43)|0);
   $227 = $0;
   $228 = $1;
   $229 = HEAP32[$228>>2]|0;
   $230 = $2;
   $231 = (($230) + 2)|0;
   _mrb_parser_dump($227,$229,$231);
   $232 = $1;
   $233 = $2;
   $234 = (($233) + 1)|0;
   _dump_prefix($232,$234);
   (_printf(63107,$vararg_buffer45)|0);
   $235 = $0;
   $236 = $1;
   $237 = ((($236)) + 4|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = HEAP32[$238>>2]|0;
   $240 = $2;
   $241 = (($240) + 2)|0;
   _mrb_parser_dump($235,$239,$241);
   $242 = $1;
   $243 = ((($242)) + 4|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = ((($244)) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247|0)!=(0|0);
   if (!($248)) {
    STACKTOP = sp;return;
   }
   $249 = $1;
   $250 = $2;
   $251 = (($250) + 1)|0;
   _dump_prefix($249,$251);
   (_printf(62969,$vararg_buffer47)|0);
   $252 = $0;
   $253 = $1;
   $254 = ((($253)) + 4|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 4|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = HEAP32[$257>>2]|0;
   $259 = $2;
   $260 = (($259) + 2)|0;
   _mrb_parser_dump($252,$258,$260);
   STACKTOP = sp;return;
   break;
  }
  case 36: {
   (_printf(63114,$vararg_buffer49)|0);
   $261 = $0;
   $262 = $1;
   $263 = HEAP32[$262>>2]|0;
   $264 = $2;
   $265 = (($264) + 1)|0;
   _mrb_parser_dump($261,$263,$265);
   $266 = $0;
   $267 = $1;
   $268 = ((($267)) + 4|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $2;
   $271 = (($270) + 1)|0;
   _mrb_parser_dump($266,$269,$271);
   STACKTOP = sp;return;
   break;
  }
  case 37: {
   (_printf(63125,$vararg_buffer51)|0);
   $272 = $0;
   $273 = $1;
   $274 = HEAP32[$273>>2]|0;
   $275 = $2;
   $276 = (($275) + 1)|0;
   _mrb_parser_dump($272,$274,$276);
   $277 = $0;
   $278 = $1;
   $279 = ((($278)) + 4|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $2;
   $282 = (($281) + 1)|0;
   _mrb_parser_dump($277,$280,$282);
   STACKTOP = sp;return;
   break;
  }
  case 38: {
   (_printf(63135,$vararg_buffer53)|0);
   $283 = $1;
   $284 = HEAP32[$283>>2]|0;
   $285 = ($284|0)!=(0|0);
   if ($285) {
    $286 = $0;
    $287 = $1;
    $288 = HEAP32[$287>>2]|0;
    $289 = $2;
    $290 = (($289) + 1)|0;
    _mrb_parser_dump($286,$288,$290);
   }
   $291 = $1;
   $292 = ((($291)) + 4|0);
   $293 = HEAP32[$292>>2]|0;
   $1 = $293;
   while(1) {
    $294 = $1;
    $295 = ($294|0)!=(0|0);
    if (!($295)) {
     break;
    }
    $296 = $1;
    $297 = $2;
    $298 = (($297) + 1)|0;
    _dump_prefix($296,$298);
    (_printf(63147,$vararg_buffer55)|0);
    $299 = $0;
    $300 = $1;
    $301 = HEAP32[$300>>2]|0;
    $302 = HEAP32[$301>>2]|0;
    $303 = $2;
    $304 = (($303) + 2)|0;
    _dump_recur($299,$302,$304);
    $305 = $1;
    $306 = $2;
    $307 = (($306) + 1)|0;
    _dump_prefix($305,$307);
    (_printf(62912,$vararg_buffer57)|0);
    $308 = $0;
    $309 = $1;
    $310 = HEAP32[$309>>2]|0;
    $311 = ((($310)) + 4|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $2;
    $314 = (($313) + 2)|0;
    _mrb_parser_dump($308,$312,$314);
    $315 = $1;
    $316 = ((($315)) + 4|0);
    $317 = HEAP32[$316>>2]|0;
    $1 = $317;
   }
   STACKTOP = sp;return;
   break;
  }
  case 43: {
   (_printf(63154,$vararg_buffer59)|0);
   $318 = $1;
   $319 = $2;
   $320 = (($319) + 1)|0;
   _dump_prefix($318,$320);
   (_printf(63100,$vararg_buffer61)|0);
   $321 = $0;
   $322 = $1;
   $323 = HEAP32[$322>>2]|0;
   $324 = $2;
   $325 = (($324) + 2)|0;
   _mrb_parser_dump($321,$323,$325);
   $326 = $1;
   $327 = $2;
   $328 = (($327) + 1)|0;
   _dump_prefix($326,$328);
   (_printf(62912,$vararg_buffer63)|0);
   $329 = $0;
   $330 = $1;
   $331 = ((($330)) + 4|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $2;
   $334 = (($333) + 2)|0;
   _mrb_parser_dump($329,$332,$334);
   STACKTOP = sp;return;
   break;
  }
  case 44: {
   (_printf(63167,$vararg_buffer65)|0);
   $335 = $1;
   $336 = $2;
   $337 = (($336) + 1)|0;
   _dump_prefix($335,$337);
   (_printf(63100,$vararg_buffer67)|0);
   $338 = $0;
   $339 = $1;
   $340 = HEAP32[$339>>2]|0;
   $341 = $2;
   $342 = (($341) + 2)|0;
   _mrb_parser_dump($338,$340,$342);
   $343 = $1;
   $344 = $2;
   $345 = (($344) + 1)|0;
   _dump_prefix($343,$345);
   (_printf(62912,$vararg_buffer69)|0);
   $346 = $0;
   $347 = $1;
   $348 = ((($347)) + 4|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = $2;
   $351 = (($350) + 2)|0;
   _mrb_parser_dump($346,$349,$351);
   STACKTOP = sp;return;
   break;
  }
  case 45: {
   (_printf(63180,$vararg_buffer71)|0);
   $352 = $1;
   $353 = $2;
   $354 = (($353) + 1)|0;
   _dump_prefix($352,$354);
   (_printf(63191,$vararg_buffer73)|0);
   $355 = $1;
   $356 = HEAP32[$355>>2]|0;
   $n22 = $356;
   $357 = $n22;
   $358 = HEAP32[$357>>2]|0;
   $359 = ($358|0)!=(0|0);
   if ($359) {
    $360 = $n22;
    $361 = $2;
    $362 = (($361) + 2)|0;
    _dump_prefix($360,$362);
    (_printf(63197,$vararg_buffer75)|0);
    $363 = $0;
    $364 = $n22;
    $365 = HEAP32[$364>>2]|0;
    $366 = $2;
    $367 = (($366) + 3)|0;
    _dump_recur($363,$365,$367);
   }
   $368 = $n22;
   $369 = ((($368)) + 4|0);
   $370 = HEAP32[$369>>2]|0;
   $n22 = $370;
   $371 = $n22;
   $372 = ($371|0)!=(0|0);
   if ($372) {
    $373 = $n22;
    $374 = HEAP32[$373>>2]|0;
    $375 = ($374|0)!=(0|0);
    if ($375) {
     $376 = $n22;
     $377 = $2;
     $378 = (($377) + 2)|0;
     _dump_prefix($376,$378);
     (_printf(63203,$vararg_buffer77)|0);
     $379 = $0;
     $380 = $n22;
     $381 = HEAP32[$380>>2]|0;
     $382 = $2;
     $383 = (($382) + 3)|0;
     _mrb_parser_dump($379,$381,$383);
    }
    $384 = $n22;
    $385 = ((($384)) + 4|0);
    $386 = HEAP32[$385>>2]|0;
    $n22 = $386;
    $387 = $n22;
    $388 = ($387|0)!=(0|0);
    if ($388) {
     $389 = $n22;
     $390 = HEAP32[$389>>2]|0;
     $391 = ($390|0)!=(0|0);
     if ($391) {
      $392 = $n22;
      $393 = $2;
      $394 = (($393) + 2)|0;
      _dump_prefix($392,$394);
      (_printf(63210,$vararg_buffer79)|0);
      $395 = $0;
      $396 = $n22;
      $397 = HEAP32[$396>>2]|0;
      $398 = $2;
      $399 = (($398) + 3)|0;
      _dump_recur($395,$397,$399);
     }
    }
   }
   $400 = $1;
   $401 = ((($400)) + 4|0);
   $402 = HEAP32[$401>>2]|0;
   $1 = $402;
   $403 = $1;
   $404 = $2;
   $405 = (($404) + 1)|0;
   _dump_prefix($403,$405);
   (_printf(63217,$vararg_buffer81)|0);
   $406 = $0;
   $407 = $1;
   $408 = HEAP32[$407>>2]|0;
   $409 = $2;
   $410 = (($409) + 2)|0;
   _mrb_parser_dump($406,$408,$410);
   $411 = $1;
   $412 = ((($411)) + 4|0);
   $413 = HEAP32[$412>>2]|0;
   $1 = $413;
   $414 = $1;
   $415 = $2;
   $416 = (($415) + 1)|0;
   _dump_prefix($414,$416);
   (_printf(63222,$vararg_buffer83)|0);
   $417 = $0;
   $418 = $1;
   $419 = HEAP32[$418>>2]|0;
   $420 = $2;
   $421 = (($420) + 2)|0;
   _mrb_parser_dump($417,$419,$421);
   STACKTOP = sp;return;
   break;
  }
  case 66: {
   (_printf(63264,$vararg_buffer96)|0);
   $459 = $0;
   $460 = $1;
   $461 = HEAP32[$460>>2]|0;
   $462 = $2;
   $463 = (($462) + 1)|0;
   _mrb_parser_dump($459,$461,$463);
   $464 = $1;
   $465 = $2;
   $466 = (($465) + 1)|0;
   _dump_prefix($464,$466);
   $467 = $0;
   $468 = $1;
   $469 = ((($468)) + 4|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = HEAP32[$470>>2]|0;
   $472 = $471;
   $473 = (_mrb_sym2name($467,$472)|0);
   $474 = $1;
   $475 = ((($474)) + 4|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = HEAP32[$476>>2]|0;
   $478 = $477;
   HEAP32[$vararg_buffer98>>2] = $473;
   $vararg_ptr101 = ((($vararg_buffer98)) + 4|0);
   HEAP32[$vararg_ptr101>>2] = $478;
   (_printf(63276,$vararg_buffer98)|0);
   $479 = $1;
   $480 = ((($479)) + 4|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = ((($481)) + 4|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = HEAP32[$483>>2]|0;
   $1 = $484;
   $485 = $1;
   $486 = ($485|0)!=(0|0);
   if (!($486)) {
    STACKTOP = sp;return;
   }
   $487 = $1;
   $488 = $2;
   $489 = (($488) + 1)|0;
   _dump_prefix($487,$489);
   (_printf(63294,$vararg_buffer102)|0);
   $490 = $0;
   $491 = $1;
   $492 = HEAP32[$491>>2]|0;
   $493 = $2;
   $494 = (($493) + 2)|0;
   _dump_recur($490,$492,$494);
   $495 = $1;
   $496 = ((($495)) + 4|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = ($497|0)!=(0|0);
   if (!($498)) {
    STACKTOP = sp;return;
   }
   $499 = $1;
   $500 = $2;
   $501 = (($500) + 1)|0;
   _dump_prefix($499,$501);
   (_printf(63301,$vararg_buffer104)|0);
   $502 = $0;
   $503 = $1;
   $504 = ((($503)) + 4|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = $2;
   $507 = (($506) + 2)|0;
   _mrb_parser_dump($502,$505,$507);
   STACKTOP = sp;return;
   break;
  }
  case 69: {
   (_printf(63309,$vararg_buffer106)|0);
   $508 = $0;
   $509 = $1;
   $510 = HEAP32[$509>>2]|0;
   $511 = $2;
   $512 = (($511) + 1)|0;
   _mrb_parser_dump($508,$510,$512);
   $513 = $0;
   $514 = $1;
   $515 = ((($514)) + 4|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = $2;
   $518 = (($517) + 1)|0;
   _mrb_parser_dump($513,$516,$518);
   STACKTOP = sp;return;
   break;
  }
  case 70: {
   (_printf(63321,$vararg_buffer108)|0);
   $519 = $0;
   $520 = $1;
   $521 = HEAP32[$520>>2]|0;
   $522 = $2;
   $523 = (($522) + 1)|0;
   _mrb_parser_dump($519,$521,$523);
   $524 = $0;
   $525 = $1;
   $526 = ((($525)) + 4|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $2;
   $529 = (($528) + 1)|0;
   _mrb_parser_dump($524,$527,$529);
   STACKTOP = sp;return;
   break;
  }
  case 71: {
   (_printf(63333,$vararg_buffer110)|0);
   $530 = $0;
   $531 = $1;
   $532 = HEAP32[$531>>2]|0;
   $533 = $2;
   $534 = (($533) + 1)|0;
   _mrb_parser_dump($530,$532,$534);
   $535 = $1;
   $536 = $2;
   $537 = (($536) + 1)|0;
   _dump_prefix($535,$537);
   $538 = $0;
   $539 = $1;
   $540 = ((($539)) + 4|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = $541;
   $543 = (_mrb_sym2name($538,$542)|0);
   HEAP32[$vararg_buffer112>>2] = $543;
   (_printf(63347,$vararg_buffer112)|0);
   STACKTOP = sp;return;
   break;
  }
  case 72: {
   $544 = $0;
   $545 = $1;
   $546 = $545;
   $547 = (_mrb_sym2name($544,$546)|0);
   HEAP32[$vararg_buffer115>>2] = $547;
   (_printf(63353,$vararg_buffer115)|0);
   STACKTOP = sp;return;
   break;
  }
  case 73: {
   (_printf(63372,$vararg_buffer118)|0);
   $548 = $0;
   $549 = $1;
   $550 = $2;
   $551 = (($550) + 1)|0;
   _dump_recur($548,$549,$551);
   STACKTOP = sp;return;
   break;
  }
  case 74: {
   (_printf(63385,$vararg_buffer120)|0);
   while(1) {
    $552 = $1;
    $553 = ($552|0)!=(0|0);
    if (!($553)) {
     break;
    }
    $554 = $1;
    $555 = $2;
    $556 = (($555) + 1)|0;
    _dump_prefix($554,$556);
    (_printf(63397,$vararg_buffer122)|0);
    $557 = $0;
    $558 = $1;
    $559 = HEAP32[$558>>2]|0;
    $560 = HEAP32[$559>>2]|0;
    $561 = $2;
    $562 = (($561) + 2)|0;
    _mrb_parser_dump($557,$560,$562);
    $563 = $1;
    $564 = $2;
    $565 = (($564) + 1)|0;
    _dump_prefix($563,$565);
    (_printf(63403,$vararg_buffer124)|0);
    $566 = $0;
    $567 = $1;
    $568 = HEAP32[$567>>2]|0;
    $569 = ((($568)) + 4|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = $2;
    $572 = (($571) + 2)|0;
    _mrb_parser_dump($566,$570,$572);
    $573 = $1;
    $574 = ((($573)) + 4|0);
    $575 = HEAP32[$574>>2]|0;
    $1 = $575;
   }
   STACKTOP = sp;return;
   break;
  }
  case 77: {
   (_printf(63411,$vararg_buffer126)|0);
   $576 = $0;
   $577 = $1;
   $578 = $2;
   $579 = (($578) + 1)|0;
   _mrb_parser_dump($576,$577,$579);
   STACKTOP = sp;return;
   break;
  }
  case 78: {
   (_printf(63424,$vararg_buffer128)|0);
   $580 = $1;
   $581 = $2;
   $582 = (($581) + 1)|0;
   _dump_prefix($580,$582);
   (_printf(63436,$vararg_buffer130)|0);
   $583 = $0;
   $584 = $1;
   $585 = HEAP32[$584>>2]|0;
   $586 = $2;
   $587 = (($586) + 2)|0;
   _mrb_parser_dump($583,$585,$587);
   $588 = $1;
   $589 = $2;
   $590 = (($589) + 1)|0;
   _dump_prefix($588,$590);
   (_printf(63442,$vararg_buffer132)|0);
   $591 = $0;
   $592 = $1;
   $593 = ((($592)) + 4|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = $2;
   $596 = (($595) + 2)|0;
   _mrb_parser_dump($591,$594,$596);
   STACKTOP = sp;return;
   break;
  }
  case 79: {
   (_printf(63448,$vararg_buffer134)|0);
   $597 = $1;
   $598 = $2;
   $599 = (($598) + 1)|0;
   _dump_prefix($597,$599);
   (_printf(63461,$vararg_buffer136)|0);
   $600 = $1;
   $601 = HEAP32[$600>>2]|0;
   $n24 = $601;
   $602 = $n24;
   $603 = HEAP32[$602>>2]|0;
   $604 = ($603|0)!=(0|0);
   if ($604) {
    $605 = $1;
    $606 = $2;
    $607 = (($606) + 2)|0;
    _dump_prefix($605,$607);
    (_printf(63197,$vararg_buffer138)|0);
    $608 = $0;
    $609 = $n24;
    $610 = HEAP32[$609>>2]|0;
    $611 = $2;
    $612 = (($611) + 3)|0;
    _dump_recur($608,$610,$612);
   }
   $613 = $n24;
   $614 = ((($613)) + 4|0);
   $615 = HEAP32[$614>>2]|0;
   $n24 = $615;
   $616 = $n24;
   $617 = ($616|0)!=(0|0);
   if ($617) {
    $618 = $n24;
    $619 = HEAP32[$618>>2]|0;
    $620 = ($619|0)!=(0|0);
    do {
     if ($620) {
      $621 = $n24;
      $622 = $2;
      $623 = (($622) + 2)|0;
      _dump_prefix($621,$623);
      (_printf(63203,$vararg_buffer140)|0);
      $624 = $n24;
      $625 = HEAP32[$624>>2]|0;
      $626 = ($625|0)==((-1)|0);
      if ($626) {
       $627 = $n24;
       $628 = $2;
       $629 = (($628) + 2)|0;
       _dump_prefix($627,$629);
       (_printf(63468,$vararg_buffer142)|0);
       break;
      } else {
       $630 = $0;
       $631 = $n24;
       $632 = HEAP32[$631>>2]|0;
       $633 = $2;
       $634 = (($633) + 3)|0;
       _mrb_parser_dump($630,$632,$634);
       break;
      }
     }
    } while(0);
    $635 = $n24;
    $636 = ((($635)) + 4|0);
    $637 = HEAP32[$636>>2]|0;
    $n24 = $637;
    $638 = $n24;
    $639 = ($638|0)!=(0|0);
    if ($639) {
     $640 = $n24;
     $641 = HEAP32[$640>>2]|0;
     $642 = ($641|0)!=(0|0);
     if ($642) {
      $643 = $n24;
      $644 = $2;
      $645 = (($644) + 2)|0;
      _dump_prefix($643,$645);
      (_printf(63210,$vararg_buffer144)|0);
      $646 = $0;
      $647 = $n24;
      $648 = HEAP32[$647>>2]|0;
      $649 = $2;
      $650 = (($649) + 3)|0;
      _dump_recur($646,$648,$650);
     }
    }
   }
   $651 = $1;
   $652 = $2;
   $653 = (($652) + 1)|0;
   _dump_prefix($651,$653);
   (_printf(63442,$vararg_buffer146)|0);
   $654 = $0;
   $655 = $1;
   $656 = ((($655)) + 4|0);
   $657 = HEAP32[$656>>2]|0;
   $658 = $2;
   $659 = (($658) + 2)|0;
   _mrb_parser_dump($654,$657,$659);
   STACKTOP = sp;return;
   break;
  }
  case 90: {
   (_printf(63477,$vararg_buffer148)|0);
   $660 = $1;
   $661 = $2;
   $662 = (($661) + 1)|0;
   _dump_prefix($660,$662);
   (_printf(63436,$vararg_buffer150)|0);
   $663 = $0;
   $664 = $1;
   $665 = HEAP32[$664>>2]|0;
   $666 = $2;
   $667 = (($666) + 2)|0;
   _mrb_parser_dump($663,$665,$667);
   $668 = $1;
   $669 = ((($668)) + 4|0);
   $670 = HEAP32[$669>>2]|0;
   $1 = $670;
   $671 = $1;
   $672 = $2;
   $673 = (($672) + 1)|0;
   _dump_prefix($671,$673);
   $674 = $0;
   $675 = $1;
   $676 = HEAP32[$675>>2]|0;
   $677 = $676;
   $678 = (_mrb_sym2name($674,$677)|0);
   $679 = $1;
   $680 = HEAP32[$679>>2]|0;
   $681 = $680;
   HEAP32[$vararg_buffer152>>2] = $678;
   $vararg_ptr155 = ((($vararg_buffer152)) + 4|0);
   HEAP32[$vararg_ptr155>>2] = $681;
   (_printf(63492,$vararg_buffer152)|0);
   $682 = $1;
   $683 = ((($682)) + 4|0);
   $684 = HEAP32[$683>>2]|0;
   $1 = $684;
   $685 = $0;
   $686 = $1;
   $687 = HEAP32[$686>>2]|0;
   $688 = $2;
   $689 = (($688) + 1)|0;
   _mrb_parser_dump($685,$687,$689);
   STACKTOP = sp;return;
   break;
  }
  case 91: {
   (_printf(63506,$vararg_buffer156)|0);
   $690 = $1;
   $691 = ($690|0)!=(0|0);
   if (!($691)) {
    STACKTOP = sp;return;
   }
   $692 = $1;
   $693 = $2;
   $694 = (($693) + 1)|0;
   _dump_prefix($692,$694);
   (_printf(63294,$vararg_buffer158)|0);
   $695 = $0;
   $696 = $1;
   $697 = HEAP32[$696>>2]|0;
   $698 = $2;
   $699 = (($698) + 2)|0;
   _dump_recur($695,$697,$699);
   $700 = $1;
   $701 = ((($700)) + 4|0);
   $702 = HEAP32[$701>>2]|0;
   $703 = ($702|0)!=(0|0);
   if (!($703)) {
    STACKTOP = sp;return;
   }
   $704 = $1;
   $705 = $2;
   $706 = (($705) + 1)|0;
   _dump_prefix($704,$706);
   (_printf(63301,$vararg_buffer160)|0);
   $707 = $0;
   $708 = $1;
   $709 = ((($708)) + 4|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = $2;
   $712 = (($711) + 2)|0;
   _mrb_parser_dump($707,$710,$712);
   STACKTOP = sp;return;
   break;
  }
  case 94: {
   (_printf(63519,$vararg_buffer162)|0);
   STACKTOP = sp;return;
   break;
  }
  case 95: {
   (_printf(63532,$vararg_buffer164)|0);
   $713 = $0;
   $714 = $1;
   $715 = $2;
   $716 = (($715) + 1)|0;
   _mrb_parser_dump($713,$714,$716);
   STACKTOP = sp;return;
   break;
  }
  case 96: {
   (_printf(63546,$vararg_buffer166)|0);
   $717 = $0;
   $718 = $1;
   $719 = $2;
   $720 = (($719) + 1)|0;
   _dump_recur($717,$718,$720);
   STACKTOP = sp;return;
   break;
  }
  case 97: {
   (_printf(63559,$vararg_buffer168)|0);
   $721 = $0;
   $722 = $1;
   $723 = $2;
   $724 = (($723) + 1)|0;
   _mrb_parser_dump($721,$722,$724);
   STACKTOP = sp;return;
   break;
  }
  case 98: {
   (_printf(63572,$vararg_buffer170)|0);
   $725 = $0;
   $726 = $1;
   $727 = $2;
   $728 = (($727) + 1)|0;
   _mrb_parser_dump($725,$726,$728);
   STACKTOP = sp;return;
   break;
  }
  case 99: {
   (_printf(63584,$vararg_buffer172)|0);
   STACKTOP = sp;return;
   break;
  }
  case 100: {
   (_printf(63595,$vararg_buffer174)|0);
   STACKTOP = sp;return;
   break;
  }
  case 101: {
   $729 = $0;
   $730 = $1;
   $731 = $730;
   $732 = (_mrb_sym2name($729,$731)|0);
   HEAP32[$vararg_buffer176>>2] = $732;
   (_printf(63607,$vararg_buffer176)|0);
   STACKTOP = sp;return;
   break;
  }
  case 102: {
   $733 = $0;
   $734 = $1;
   $735 = $734;
   $736 = (_mrb_sym2name($733,$735)|0);
   HEAP32[$vararg_buffer179>>2] = $736;
   (_printf(63621,$vararg_buffer179)|0);
   STACKTOP = sp;return;
   break;
  }
  case 103: {
   $737 = $0;
   $738 = $1;
   $739 = $738;
   $740 = (_mrb_sym2name($737,$739)|0);
   HEAP32[$vararg_buffer182>>2] = $740;
   (_printf(63635,$vararg_buffer182)|0);
   STACKTOP = sp;return;
   break;
  }
  case 104: {
   $741 = $0;
   $742 = $1;
   $743 = $742;
   $744 = (_mrb_sym2name($741,$743)|0);
   HEAP32[$vararg_buffer185>>2] = $744;
   (_printf(63649,$vararg_buffer185)|0);
   STACKTOP = sp;return;
   break;
  }
  case 105: {
   $745 = $0;
   $746 = $1;
   $747 = $746;
   $748 = (_mrb_sym2name($745,$747)|0);
   HEAP32[$vararg_buffer188>>2] = $748;
   (_printf(63663,$vararg_buffer188)|0);
   STACKTOP = sp;return;
   break;
  }
  case 106: {
   (_printf(63678,$vararg_buffer191)|0);
   $749 = $1;
   $750 = $2;
   $751 = (($750) + 1)|0;
   _dump_prefix($749,$751);
   (_printf(63436,$vararg_buffer193)|0);
   $752 = $0;
   $753 = $1;
   $754 = HEAP32[$753>>2]|0;
   $755 = $2;
   $756 = (($755) + 2)|0;
   _mrb_parser_dump($752,$754,$756);
   $757 = $1;
   $758 = $2;
   $759 = (($758) + 1)|0;
   _dump_prefix($757,$759);
   (_printf(63442,$vararg_buffer195)|0);
   $760 = $0;
   $761 = $1;
   $762 = ((($761)) + 4|0);
   $763 = HEAP32[$762>>2]|0;
   $764 = $2;
   $765 = (($764) + 2)|0;
   _mrb_parser_dump($760,$763,$765);
   STACKTOP = sp;return;
   break;
  }
  case 107: {
   $766 = $1;
   $767 = $766;
   HEAP32[$vararg_buffer197>>2] = $767;
   (_printf(63691,$vararg_buffer197)|0);
   STACKTOP = sp;return;
   break;
  }
  case 108: {
   $768 = $1;
   $769 = $768;
   HEAP32[$vararg_buffer200>>2] = $769;
   (_printf(63711,$vararg_buffer200)|0);
   STACKTOP = sp;return;
   break;
  }
  case 109: {
   $770 = $0;
   $771 = $1;
   $772 = $771;
   $773 = (_mrb_sym2name($770,$772)|0);
   HEAP32[$vararg_buffer203>>2] = $773;
   (_printf(63730,$vararg_buffer203)|0);
   STACKTOP = sp;return;
   break;
  }
  case 110: {
   (_printf(63743,$vararg_buffer206)|0);
   $774 = $0;
   $775 = $1;
   $776 = $2;
   $777 = (($776) + 1)|0;
   _mrb_parser_dump($774,$775,$777);
   STACKTOP = sp;return;
   break;
  }
  case 111: {
   $778 = $1;
   $779 = HEAP32[$778>>2]|0;
   $780 = $1;
   $781 = ((($780)) + 4|0);
   $782 = HEAP32[$781>>2]|0;
   $783 = HEAP32[$782>>2]|0;
   $784 = $783;
   HEAP32[$vararg_buffer208>>2] = $779;
   $vararg_ptr211 = ((($vararg_buffer208)) + 4|0);
   HEAP32[$vararg_ptr211>>2] = $784;
   (_printf(63760,$vararg_buffer208)|0);
   STACKTOP = sp;return;
   break;
  }
  case 112: {
   $785 = $1;
   HEAP32[$vararg_buffer212>>2] = $785;
   (_printf(63781,$vararg_buffer212)|0);
   STACKTOP = sp;return;
   break;
  }
  case 113: {
   (_printf(63796,$vararg_buffer215)|0);
   $786 = $0;
   $787 = $1;
   $788 = $2;
   $789 = (($788) + 1)|0;
   _mrb_parser_dump($786,$787,$789);
   STACKTOP = sp;return;
   break;
  }
  case 114: {
   $790 = $1;
   $791 = HEAP32[$790>>2]|0;
   $792 = $1;
   $793 = ((($792)) + 4|0);
   $794 = HEAP32[$793>>2]|0;
   $795 = $794;
   HEAP32[$vararg_buffer217>>2] = $791;
   $vararg_ptr220 = ((($vararg_buffer217)) + 4|0);
   HEAP32[$vararg_ptr220>>2] = $795;
   (_printf(63809,$vararg_buffer217)|0);
   STACKTOP = sp;return;
   break;
  }
  case 115: {
   (_printf(63831,$vararg_buffer221)|0);
   $796 = $0;
   $797 = $1;
   $798 = $2;
   $799 = (($798) + 1)|0;
   _dump_recur($796,$797,$799);
   STACKTOP = sp;return;
   break;
  }
  case 116: {
   $800 = $1;
   $801 = HEAP32[$800>>2]|0;
   $802 = $1;
   $803 = ((($802)) + 4|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = $804;
   HEAP32[$vararg_buffer223>>2] = $801;
   $vararg_ptr226 = ((($vararg_buffer223)) + 4|0);
   HEAP32[$vararg_ptr226>>2] = $805;
   (_printf(63842,$vararg_buffer223)|0);
   STACKTOP = sp;return;
   break;
  }
  case 117: {
   (_printf(63865,$vararg_buffer227)|0);
   $806 = $0;
   $807 = $1;
   $808 = $2;
   $809 = (($808) + 1)|0;
   _dump_recur($806,$807,$809);
   STACKTOP = sp;return;
   break;
  }
  case 118: {
   $810 = $1;
   $811 = HEAP32[$810>>2]|0;
   $812 = $1;
   $813 = ((($812)) + 4|0);
   $814 = HEAP32[$813>>2]|0;
   HEAP32[$vararg_buffer229>>2] = $811;
   $vararg_ptr232 = ((($vararg_buffer229)) + 4|0);
   HEAP32[$vararg_ptr232>>2] = $814;
   (_printf(63877,$vararg_buffer229)|0);
   STACKTOP = sp;return;
   break;
  }
  case 119: {
   (_printf(63895,$vararg_buffer233)|0);
   $815 = $0;
   $816 = $1;
   $817 = HEAP32[$816>>2]|0;
   $818 = $2;
   $819 = (($818) + 1)|0;
   _dump_recur($815,$817,$819);
   $820 = $1;
   $821 = $2;
   _dump_prefix($820,$821);
   $822 = $1;
   $823 = ((($822)) + 4|0);
   $824 = HEAP32[$823>>2]|0;
   $825 = ((($824)) + 4|0);
   $826 = HEAP32[$825>>2]|0;
   $827 = HEAP32[$826>>2]|0;
   HEAP32[$vararg_buffer235>>2] = $827;
   (_printf(63907,$vararg_buffer235)|0);
   $828 = $1;
   $829 = $2;
   _dump_prefix($828,$829);
   $830 = $1;
   $831 = ((($830)) + 4|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = ((($832)) + 4|0);
   $834 = HEAP32[$833>>2]|0;
   $835 = ((($834)) + 4|0);
   $836 = HEAP32[$835>>2]|0;
   HEAP32[$vararg_buffer238>>2] = $836;
   (_printf(63917,$vararg_buffer238)|0);
   STACKTOP = sp;return;
   break;
  }
  case 120: {
   $837 = $0;
   $838 = $1;
   $839 = $838;
   $840 = (_mrb_sym2name($837,$839)|0);
   HEAP32[$vararg_buffer241>>2] = $840;
   (_printf(63926,$vararg_buffer241)|0);
   STACKTOP = sp;return;
   break;
  }
  case 121: {
   (_printf(63940,$vararg_buffer244)|0);
   STACKTOP = sp;return;
   break;
  }
  case 122: {
   (_printf(63951,$vararg_buffer246)|0);
   STACKTOP = sp;return;
   break;
  }
  case 123: {
   (_printf(63961,$vararg_buffer248)|0);
   STACKTOP = sp;return;
   break;
  }
  case 124: {
   (_printf(63972,$vararg_buffer250)|0);
   STACKTOP = sp;return;
   break;
  }
  case 125: {
   $841 = $0;
   $842 = $1;
   $843 = HEAP32[$842>>2]|0;
   $844 = $843;
   $845 = (_mrb_sym2name($841,$844)|0);
   $846 = $0;
   $847 = $1;
   $848 = ((($847)) + 4|0);
   $849 = HEAP32[$848>>2]|0;
   $850 = $849;
   $851 = (_mrb_sym2name($846,$850)|0);
   HEAP32[$vararg_buffer252>>2] = $845;
   $vararg_ptr255 = ((($vararg_buffer252)) + 4|0);
   HEAP32[$vararg_ptr255>>2] = $851;
   (_printf(63984,$vararg_buffer252)|0);
   STACKTOP = sp;return;
   break;
  }
  case 126: {
   (_printf(64003,$vararg_buffer256)|0);
   $852 = $1;
   $t = $852;
   while(1) {
    $853 = $t;
    $854 = ($853|0)!=(0|0);
    if (!($854)) {
     break;
    }
    $855 = $0;
    $856 = $t;
    $857 = HEAP32[$856>>2]|0;
    $858 = $857;
    $859 = (_mrb_sym2name($855,$858)|0);
    HEAP32[$vararg_buffer258>>2] = $859;
    (_printf(64014,$vararg_buffer258)|0);
    $860 = $t;
    $861 = ((($860)) + 4|0);
    $862 = HEAP32[$861>>2]|0;
    $t = $862;
   }
   (_printf(64018,$vararg_buffer261)|0);
   STACKTOP = sp;return;
   break;
  }
  case 130: {
   (_printf(64021,$vararg_buffer263)|0);
   $863 = $1;
   $864 = HEAP32[$863>>2]|0;
   $865 = HEAP32[$864>>2]|0;
   $866 = ($865|0)==(0|0);
   $867 = $1;
   do {
    if ($866) {
     $868 = $2;
     $869 = (($868) + 1)|0;
     _dump_prefix($867,$869);
     $870 = $0;
     $871 = $1;
     $872 = HEAP32[$871>>2]|0;
     $873 = ((($872)) + 4|0);
     $874 = HEAP32[$873>>2]|0;
     $875 = $874;
     $876 = (_mrb_sym2name($870,$875)|0);
     HEAP32[$vararg_buffer265>>2] = $876;
     (_printf(64034,$vararg_buffer265)|0);
    } else {
     $877 = HEAP32[$867>>2]|0;
     $878 = HEAP32[$877>>2]|0;
     $879 = ($878|0)==((1)|0);
     if ($879) {
      $880 = $1;
      $881 = $2;
      $882 = (($881) + 1)|0;
      _dump_prefix($880,$882);
      $883 = $0;
      $884 = $1;
      $885 = HEAP32[$884>>2]|0;
      $886 = ((($885)) + 4|0);
      $887 = HEAP32[$886>>2]|0;
      $888 = $887;
      $889 = (_mrb_sym2name($883,$888)|0);
      HEAP32[$vararg_buffer268>>2] = $889;
      (_printf(63347,$vararg_buffer268)|0);
      break;
     } else {
      $890 = $0;
      $891 = $1;
      $892 = HEAP32[$891>>2]|0;
      $893 = HEAP32[$892>>2]|0;
      $894 = $2;
      $895 = (($894) + 1)|0;
      _mrb_parser_dump($890,$893,$895);
      $896 = $1;
      $897 = $2;
      $898 = (($897) + 1)|0;
      _dump_prefix($896,$898);
      $899 = $0;
      $900 = $1;
      $901 = HEAP32[$900>>2]|0;
      $902 = ((($901)) + 4|0);
      $903 = HEAP32[$902>>2]|0;
      $904 = $903;
      $905 = (_mrb_sym2name($899,$904)|0);
      HEAP32[$vararg_buffer271>>2] = $905;
      (_printf(63347,$vararg_buffer271)|0);
      break;
     }
    }
   } while(0);
   $906 = $1;
   $907 = ((($906)) + 4|0);
   $908 = HEAP32[$907>>2]|0;
   $909 = HEAP32[$908>>2]|0;
   $910 = ($909|0)!=(0|0);
   if ($910) {
    $911 = $1;
    $912 = $2;
    $913 = (($912) + 1)|0;
    _dump_prefix($911,$913);
    (_printf(64039,$vararg_buffer274)|0);
    $914 = $0;
    $915 = $1;
    $916 = ((($915)) + 4|0);
    $917 = HEAP32[$916>>2]|0;
    $918 = HEAP32[$917>>2]|0;
    $919 = $2;
    $920 = (($919) + 2)|0;
    _mrb_parser_dump($914,$918,$920);
   }
   $921 = $1;
   $922 = $2;
   $923 = (($922) + 1)|0;
   _dump_prefix($921,$923);
   (_printf(62912,$vararg_buffer276)|0);
   $924 = $0;
   $925 = $1;
   $926 = ((($925)) + 4|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = ((($927)) + 4|0);
   $929 = HEAP32[$928>>2]|0;
   $930 = HEAP32[$929>>2]|0;
   $931 = ((($930)) + 4|0);
   $932 = HEAP32[$931>>2]|0;
   $933 = $2;
   $934 = (($933) + 2)|0;
   _mrb_parser_dump($924,$932,$934);
   STACKTOP = sp;return;
   break;
  }
  case 138: {
   (_printf(64047,$vararg_buffer278)|0);
   $935 = $1;
   $936 = HEAP32[$935>>2]|0;
   $937 = HEAP32[$936>>2]|0;
   $938 = ($937|0)==(0|0);
   $939 = $1;
   do {
    if ($938) {
     $940 = $2;
     $941 = (($940) + 1)|0;
     _dump_prefix($939,$941);
     $942 = $0;
     $943 = $1;
     $944 = HEAP32[$943>>2]|0;
     $945 = ((($944)) + 4|0);
     $946 = HEAP32[$945>>2]|0;
     $947 = $946;
     $948 = (_mrb_sym2name($942,$947)|0);
     HEAP32[$vararg_buffer280>>2] = $948;
     (_printf(64034,$vararg_buffer280)|0);
    } else {
     $949 = HEAP32[$939>>2]|0;
     $950 = HEAP32[$949>>2]|0;
     $951 = ($950|0)==((1)|0);
     if ($951) {
      $952 = $1;
      $953 = $2;
      $954 = (($953) + 1)|0;
      _dump_prefix($952,$954);
      $955 = $0;
      $956 = $1;
      $957 = HEAP32[$956>>2]|0;
      $958 = ((($957)) + 4|0);
      $959 = HEAP32[$958>>2]|0;
      $960 = $959;
      $961 = (_mrb_sym2name($955,$960)|0);
      HEAP32[$vararg_buffer283>>2] = $961;
      (_printf(63347,$vararg_buffer283)|0);
      break;
     } else {
      $962 = $0;
      $963 = $1;
      $964 = HEAP32[$963>>2]|0;
      $965 = HEAP32[$964>>2]|0;
      $966 = $2;
      $967 = (($966) + 1)|0;
      _mrb_parser_dump($962,$965,$967);
      $968 = $1;
      $969 = $2;
      $970 = (($969) + 1)|0;
      _dump_prefix($968,$970);
      $971 = $0;
      $972 = $1;
      $973 = HEAP32[$972>>2]|0;
      $974 = ((($973)) + 4|0);
      $975 = HEAP32[$974>>2]|0;
      $976 = $975;
      $977 = (_mrb_sym2name($971,$976)|0);
      HEAP32[$vararg_buffer286>>2] = $977;
      (_printf(63347,$vararg_buffer286)|0);
      break;
     }
    }
   } while(0);
   $978 = $1;
   $979 = $2;
   $980 = (($979) + 1)|0;
   _dump_prefix($978,$980);
   (_printf(62912,$vararg_buffer289)|0);
   $981 = $0;
   $982 = $1;
   $983 = ((($982)) + 4|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = HEAP32[$984>>2]|0;
   $986 = ((($985)) + 4|0);
   $987 = HEAP32[$986>>2]|0;
   $988 = $2;
   $989 = (($988) + 2)|0;
   _mrb_parser_dump($981,$987,$989);
   STACKTOP = sp;return;
   break;
  }
  case 144: {
   (_printf(64061,$vararg_buffer291)|0);
   $990 = $0;
   $991 = $1;
   $992 = HEAP32[$991>>2]|0;
   $993 = $2;
   $994 = (($993) + 1)|0;
   _mrb_parser_dump($990,$992,$994);
   $995 = $1;
   $996 = $2;
   $997 = (($996) + 1)|0;
   _dump_prefix($995,$997);
   (_printf(62912,$vararg_buffer293)|0);
   $998 = $0;
   $999 = $1;
   $1000 = ((($999)) + 4|0);
   $1001 = HEAP32[$1000>>2]|0;
   $1002 = HEAP32[$1001>>2]|0;
   $1003 = ((($1002)) + 4|0);
   $1004 = HEAP32[$1003>>2]|0;
   $1005 = $2;
   $1006 = (($1005) + 2)|0;
   _mrb_parser_dump($998,$1004,$1006);
   STACKTOP = sp;return;
   break;
  }
  case 145: {
   (_printf(64075,$vararg_buffer295)|0);
   $1007 = $1;
   $1008 = $2;
   $1009 = (($1008) + 1)|0;
   _dump_prefix($1007,$1009);
   $1010 = $0;
   $1011 = $1;
   $1012 = HEAP32[$1011>>2]|0;
   $1013 = $1012;
   $1014 = (_mrb_sym2name($1010,$1013)|0);
   HEAP32[$vararg_buffer297>>2] = $1014;
   (_printf(64086,$vararg_buffer297)|0);
   $1015 = $1;
   $1016 = ((($1015)) + 4|0);
   $1017 = HEAP32[$1016>>2]|0;
   $1 = $1017;
   $1018 = $1;
   $1019 = HEAP32[$1018>>2]|0;
   $n25 = $1019;
   $first_lval6 = 1;
   $1020 = $n25;
   $1021 = ($1020|0)!=(0|0);
   do {
    if ($1021) {
     $1022 = $n25;
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = ($1023|0)!=(0|0);
     if (!($1024)) {
      $1025 = $n25;
      $1026 = ((($1025)) + 4|0);
      $1027 = HEAP32[$1026>>2]|0;
      $1028 = ($1027|0)!=(0|0);
      if (!($1028)) {
       break;
      }
     }
     $1029 = $n25;
     $1030 = $2;
     $1031 = (($1030) + 1)|0;
     _dump_prefix($1029,$1031);
     (_printf(63240,$vararg_buffer300)|0);
     $1032 = $n25;
     $1033 = $2;
     $1034 = (($1033) + 2)|0;
     _dump_prefix($1032,$1034);
     while(1) {
      $1035 = $n25;
      $1036 = ($1035|0)!=(0|0);
      if (!($1036)) {
       break;
      }
      $1037 = $n25;
      $1038 = HEAP32[$1037>>2]|0;
      $1039 = ($1038|0)!=(0|0);
      if ($1039) {
       $1040 = $first_lval6;
       $1041 = ($1040<<24>>24)!=(0);
       if (!($1041)) {
        (_printf(63258,$vararg_buffer302)|0);
       }
       $1042 = $0;
       $1043 = $n25;
       $1044 = HEAP32[$1043>>2]|0;
       $1045 = $1044;
       $1046 = (_mrb_sym2name($1042,$1045)|0);
       HEAP32[$vararg_buffer304>>2] = $1046;
       (_printf(63261,$vararg_buffer304)|0);
       $first_lval6 = 0;
      }
      $1047 = $n25;
      $1048 = ((($1047)) + 4|0);
      $1049 = HEAP32[$1048>>2]|0;
      $n25 = $1049;
     }
     (_printf(66199,$vararg_buffer307)|0);
    }
   } while(0);
   $1050 = $1;
   $1051 = ((($1050)) + 4|0);
   $1052 = HEAP32[$1051>>2]|0;
   $1 = $1052;
   $1053 = $1;
   $1054 = HEAP32[$1053>>2]|0;
   $1055 = ($1054|0)!=(0|0);
   if ($1055) {
    $1056 = $1;
    $1057 = HEAP32[$1056>>2]|0;
    $n7 = $1057;
    $1058 = $n7;
    $1059 = HEAP32[$1058>>2]|0;
    $1060 = ($1059|0)!=(0|0);
    if ($1060) {
     $1061 = $n7;
     $1062 = $2;
     $1063 = (($1062) + 1)|0;
     _dump_prefix($1061,$1063);
     (_printf(63012,$vararg_buffer309)|0);
     $1064 = $0;
     $1065 = $n7;
     $1066 = HEAP32[$1065>>2]|0;
     $1067 = $2;
     $1068 = (($1067) + 2)|0;
     _dump_recur($1064,$1066,$1068);
    }
    $1069 = $n7;
    $1070 = ((($1069)) + 4|0);
    $1071 = HEAP32[$1070>>2]|0;
    $n7 = $1071;
    $1072 = $n7;
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = ($1073|0)!=(0|0);
    L255: do {
     if ($1074) {
      $1075 = $n7;
      $1076 = $2;
      $1077 = (($1076) + 1)|0;
      _dump_prefix($1075,$1077);
      (_printf(63029,$vararg_buffer311)|0);
      $1078 = $n7;
      $1079 = HEAP32[$1078>>2]|0;
      $n28 = $1079;
      while(1) {
       $1080 = $n28;
       $1081 = ($1080|0)!=(0|0);
       if (!($1081)) {
        break L255;
       }
       $1082 = $n28;
       $1083 = $2;
       $1084 = (($1083) + 2)|0;
       _dump_prefix($1082,$1084);
       $1085 = $0;
       $1086 = $n28;
       $1087 = HEAP32[$1086>>2]|0;
       $1088 = HEAP32[$1087>>2]|0;
       $1089 = $1088;
       $1090 = (_mrb_sym2name($1085,$1089)|0);
       HEAP32[$vararg_buffer313>>2] = $1090;
       (_printf(63045,$vararg_buffer313)|0);
       $1091 = $0;
       $1092 = $n28;
       $1093 = HEAP32[$1092>>2]|0;
       $1094 = ((($1093)) + 4|0);
       $1095 = HEAP32[$1094>>2]|0;
       _mrb_parser_dump($1091,$1095,0);
       $1096 = $n28;
       $1097 = ((($1096)) + 4|0);
       $1098 = HEAP32[$1097>>2]|0;
       $n28 = $1098;
      }
     }
    } while(0);
    $1099 = $n7;
    $1100 = ((($1099)) + 4|0);
    $1101 = HEAP32[$1100>>2]|0;
    $n7 = $1101;
    $1102 = $n7;
    $1103 = HEAP32[$1102>>2]|0;
    $1104 = ($1103|0)!=(0|0);
    if ($1104) {
     $1105 = $n7;
     $1106 = $2;
     $1107 = (($1106) + 1)|0;
     _dump_prefix($1105,$1107);
     $1108 = $0;
     $1109 = $n7;
     $1110 = HEAP32[$1109>>2]|0;
     $1111 = $1110;
     $1112 = (_mrb_sym2name($1108,$1111)|0);
     HEAP32[$vararg_buffer316>>2] = $1112;
     (_printf(63049,$vararg_buffer316)|0);
    }
    $1113 = $n7;
    $1114 = ((($1113)) + 4|0);
    $1115 = HEAP32[$1114>>2]|0;
    $n7 = $1115;
    $1116 = $n7;
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = ($1117|0)!=(0|0);
    if ($1118) {
     $1119 = $n7;
     $1120 = $2;
     $1121 = (($1120) + 1)|0;
     _dump_prefix($1119,$1121);
     (_printf(63059,$vararg_buffer319)|0);
     $1122 = $0;
     $1123 = $n7;
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = $2;
     $1126 = (($1125) + 2)|0;
     _dump_recur($1122,$1124,$1126);
    }
    $1127 = $n7;
    $1128 = ((($1127)) + 4|0);
    $1129 = HEAP32[$1128>>2]|0;
    $1130 = ($1129|0)!=(0|0);
    if ($1130) {
     $1131 = $n7;
     $1132 = $2;
     $1133 = (($1132) + 1)|0;
     _dump_prefix($1131,$1133);
     $1134 = $0;
     $1135 = $n7;
     $1136 = ((($1135)) + 4|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = $1137;
     $1139 = (_mrb_sym2name($1134,$1138)|0);
     HEAP32[$vararg_buffer321>>2] = $1139;
     (_printf(63081,$vararg_buffer321)|0);
    }
   }
   $1140 = $0;
   $1141 = $1;
   $1142 = ((($1141)) + 4|0);
   $1143 = HEAP32[$1142>>2]|0;
   $1144 = HEAP32[$1143>>2]|0;
   $1145 = $2;
   $1146 = (($1145) + 1)|0;
   _mrb_parser_dump($1140,$1144,$1146);
   STACKTOP = sp;return;
   break;
  }
  case 170: {
   (_printf(64090,$vararg_buffer324)|0);
   $1147 = $0;
   $1148 = $1;
   $1149 = HEAP32[$1148>>2]|0;
   $1150 = $2;
   $1151 = (($1150) + 1)|0;
   _mrb_parser_dump($1147,$1149,$1151);
   $1152 = $1;
   $1153 = ((($1152)) + 4|0);
   $1154 = HEAP32[$1153>>2]|0;
   $1 = $1154;
   $1155 = $1;
   $1156 = $2;
   $1157 = (($1156) + 1)|0;
   _dump_prefix($1155,$1157);
   $1158 = $0;
   $1159 = $1;
   $1160 = HEAP32[$1159>>2]|0;
   $1161 = $1160;
   $1162 = (_mrb_sym2name($1158,$1161)|0);
   HEAP32[$vararg_buffer326>>2] = $1162;
   (_printf(64034,$vararg_buffer326)|0);
   $1163 = $1;
   $1164 = ((($1163)) + 4|0);
   $1165 = HEAP32[$1164>>2]|0;
   $1166 = ((($1165)) + 4|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1 = $1167;
   $1168 = $1;
   $1169 = HEAP32[$1168>>2]|0;
   $1170 = ($1169|0)!=(0|0);
   if ($1170) {
    $1171 = $1;
    $1172 = HEAP32[$1171>>2]|0;
    $n9 = $1172;
    $1173 = $n9;
    $1174 = HEAP32[$1173>>2]|0;
    $1175 = ($1174|0)!=(0|0);
    if ($1175) {
     $1176 = $n9;
     $1177 = $2;
     $1178 = (($1177) + 1)|0;
     _dump_prefix($1176,$1178);
     (_printf(63012,$vararg_buffer329)|0);
     $1179 = $0;
     $1180 = $n9;
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = $2;
     $1183 = (($1182) + 2)|0;
     _dump_recur($1179,$1181,$1183);
    }
    $1184 = $n9;
    $1185 = ((($1184)) + 4|0);
    $1186 = HEAP32[$1185>>2]|0;
    $n9 = $1186;
    $1187 = $n9;
    $1188 = HEAP32[$1187>>2]|0;
    $1189 = ($1188|0)!=(0|0);
    L276: do {
     if ($1189) {
      $1190 = $n9;
      $1191 = $2;
      $1192 = (($1191) + 1)|0;
      _dump_prefix($1190,$1192);
      (_printf(63029,$vararg_buffer331)|0);
      $1193 = $n9;
      $1194 = HEAP32[$1193>>2]|0;
      $n210 = $1194;
      while(1) {
       $1195 = $n210;
       $1196 = ($1195|0)!=(0|0);
       if (!($1196)) {
        break L276;
       }
       $1197 = $n210;
       $1198 = $2;
       $1199 = (($1198) + 2)|0;
       _dump_prefix($1197,$1199);
       $1200 = $0;
       $1201 = $n210;
       $1202 = HEAP32[$1201>>2]|0;
       $1203 = HEAP32[$1202>>2]|0;
       $1204 = $1203;
       $1205 = (_mrb_sym2name($1200,$1204)|0);
       HEAP32[$vararg_buffer333>>2] = $1205;
       (_printf(63045,$vararg_buffer333)|0);
       $1206 = $0;
       $1207 = $n210;
       $1208 = HEAP32[$1207>>2]|0;
       $1209 = ((($1208)) + 4|0);
       $1210 = HEAP32[$1209>>2]|0;
       _mrb_parser_dump($1206,$1210,0);
       $1211 = $n210;
       $1212 = ((($1211)) + 4|0);
       $1213 = HEAP32[$1212>>2]|0;
       $n210 = $1213;
      }
     }
    } while(0);
    $1214 = $n9;
    $1215 = ((($1214)) + 4|0);
    $1216 = HEAP32[$1215>>2]|0;
    $n9 = $1216;
    $1217 = $n9;
    $1218 = HEAP32[$1217>>2]|0;
    $1219 = ($1218|0)!=(0|0);
    if ($1219) {
     $1220 = $n9;
     $1221 = $2;
     $1222 = (($1221) + 1)|0;
     _dump_prefix($1220,$1222);
     $1223 = $0;
     $1224 = $n9;
     $1225 = HEAP32[$1224>>2]|0;
     $1226 = $1225;
     $1227 = (_mrb_sym2name($1223,$1226)|0);
     HEAP32[$vararg_buffer336>>2] = $1227;
     (_printf(63049,$vararg_buffer336)|0);
    }
    $1228 = $n9;
    $1229 = ((($1228)) + 4|0);
    $1230 = HEAP32[$1229>>2]|0;
    $n9 = $1230;
    $1231 = $n9;
    $1232 = HEAP32[$1231>>2]|0;
    $1233 = ($1232|0)!=(0|0);
    if ($1233) {
     $1234 = $n9;
     $1235 = $2;
     $1236 = (($1235) + 1)|0;
     _dump_prefix($1234,$1236);
     (_printf(63059,$vararg_buffer339)|0);
     $1237 = $0;
     $1238 = $n9;
     $1239 = HEAP32[$1238>>2]|0;
     $1240 = $2;
     $1241 = (($1240) + 2)|0;
     _dump_recur($1237,$1239,$1241);
    }
    $1242 = $n9;
    $1243 = ((($1242)) + 4|0);
    $1244 = HEAP32[$1243>>2]|0;
    $n9 = $1244;
    $1245 = $n9;
    $1246 = ($1245|0)!=(0|0);
    if ($1246) {
     $1247 = $n9;
     $1248 = $2;
     $1249 = (($1248) + 1)|0;
     _dump_prefix($1247,$1249);
     $1250 = $0;
     $1251 = $n9;
     $1252 = $1251;
     $1253 = (_mrb_sym2name($1250,$1252)|0);
     HEAP32[$vararg_buffer341>>2] = $1253;
     (_printf(63081,$vararg_buffer341)|0);
    }
   }
   $1254 = $1;
   $1255 = ((($1254)) + 4|0);
   $1256 = HEAP32[$1255>>2]|0;
   $1 = $1256;
   $1257 = $0;
   $1258 = $1;
   $1259 = HEAP32[$1258>>2]|0;
   $1260 = $2;
   $1261 = (($1260) + 1)|0;
   _mrb_parser_dump($1257,$1259,$1261);
   STACKTOP = sp;return;
   break;
  }
  case 184: {
   (_printf(64102,$vararg_buffer344)|0);
   $1262 = $0;
   $1263 = $1;
   $1264 = $2;
   $1265 = (($1264) + 1)|0;
   _mrb_parser_dump($1262,$1263,$1265);
   STACKTOP = sp;return;
   break;
  }
  case 185: {
   (_printf(64117,$vararg_buffer346)|0);
   $1266 = $0;
   $1267 = $1;
   $1268 = ((($1267)) + 16|0);
   $1269 = HEAP32[$1268>>2]|0;
   $1270 = $2;
   $1271 = (($1270) + 1)|0;
   _mrb_parser_dump($1266,$1269,$1271);
   STACKTOP = sp;return;
   break;
  }
  case 186: {
   $1272 = $nodetype;
   $1273 = $nodetype;
   HEAP32[$vararg_buffer348>>2] = $1272;
   $vararg_ptr351 = ((($vararg_buffer348)) + 4|0);
   HEAP32[$vararg_ptr351>>2] = $1273;
   (_printf(64132,$vararg_buffer348)|0);
   STACKTOP = sp;return;
   break;
  }
 }
 (_printf(62999,$vararg_buffer23)|0);
 $125 = $1;
 $126 = ((($125)) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $1 = $127;
 $128 = $1;
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = $1;
  $132 = HEAP32[$131>>2]|0;
  $n = $132;
  $133 = $n;
  $134 = HEAP32[$133>>2]|0;
  $135 = ($134|0)!=(0|0);
  if ($135) {
   $136 = $n;
   $137 = $2;
   $138 = (($137) + 1)|0;
   _dump_prefix($136,$138);
   (_printf(63012,$vararg_buffer25)|0);
   $139 = $0;
   $140 = $n;
   $141 = HEAP32[$140>>2]|0;
   $142 = $2;
   $143 = (($142) + 2)|0;
   _dump_recur($139,$141,$143);
  }
  $144 = $n;
  $145 = ((($144)) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $n = $146;
  $147 = $n;
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)!=(0|0);
  L301: do {
   if ($149) {
    $150 = $n;
    $151 = $2;
    $152 = (($151) + 1)|0;
    _dump_prefix($150,$152);
    (_printf(63029,$vararg_buffer27)|0);
    $153 = $n;
    $154 = HEAP32[$153>>2]|0;
    $n21 = $154;
    while(1) {
     $155 = $n21;
     $156 = ($155|0)!=(0|0);
     if (!($156)) {
      break L301;
     }
     $157 = $n21;
     $158 = $2;
     $159 = (($158) + 2)|0;
     _dump_prefix($157,$159);
     $160 = $0;
     $161 = $n21;
     $162 = HEAP32[$161>>2]|0;
     $163 = HEAP32[$162>>2]|0;
     $164 = $163;
     $165 = (_mrb_sym2name($160,$164)|0);
     HEAP32[$vararg_buffer29>>2] = $165;
     (_printf(63045,$vararg_buffer29)|0);
     $166 = $0;
     $167 = $n21;
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($168)) + 4|0);
     $170 = HEAP32[$169>>2]|0;
     _mrb_parser_dump($166,$170,0);
     $171 = $n21;
     $172 = ((($171)) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $n21 = $173;
    }
   }
  } while(0);
  $174 = $n;
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $n = $176;
  $177 = $n;
  $178 = HEAP32[$177>>2]|0;
  $179 = ($178|0)!=(0|0);
  if ($179) {
   $180 = $n;
   $181 = $2;
   $182 = (($181) + 1)|0;
   _dump_prefix($180,$182);
   $183 = $0;
   $184 = $n;
   $185 = HEAP32[$184>>2]|0;
   $186 = $185;
   $187 = (_mrb_sym2name($183,$186)|0);
   HEAP32[$vararg_buffer31>>2] = $187;
   (_printf(63049,$vararg_buffer31)|0);
  }
  $188 = $n;
  $189 = ((($188)) + 4|0);
  $190 = HEAP32[$189>>2]|0;
  $n = $190;
  $191 = $n;
  $192 = HEAP32[$191>>2]|0;
  $193 = ($192|0)!=(0|0);
  if ($193) {
   $194 = $n;
   $195 = $2;
   $196 = (($195) + 1)|0;
   _dump_prefix($194,$196);
   (_printf(63059,$vararg_buffer34)|0);
   $197 = $0;
   $198 = $n;
   $199 = HEAP32[$198>>2]|0;
   $200 = $2;
   $201 = (($200) + 2)|0;
   _dump_recur($197,$199,$201);
  }
  $202 = $n;
  $203 = ((($202)) + 4|0);
  $204 = HEAP32[$203>>2]|0;
  $n = $204;
  $205 = $n;
  $206 = ($205|0)!=(0|0);
  if ($206) {
   $207 = $n;
   $208 = $2;
   $209 = (($208) + 1)|0;
   _dump_prefix($207,$209);
   $210 = $0;
   $211 = $n;
   $212 = $211;
   $213 = (_mrb_sym2name($210,$212)|0);
   HEAP32[$vararg_buffer36>>2] = $213;
   (_printf(63081,$vararg_buffer36)|0);
  }
 }
 $214 = $1;
 $215 = $2;
 $216 = (($215) + 1)|0;
 _dump_prefix($214,$216);
 (_printf(62912,$vararg_buffer39)|0);
 $217 = $0;
 $218 = $1;
 $219 = ((($218)) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = HEAP32[$220>>2]|0;
 $222 = $2;
 $223 = (($222) + 2)|0;
 _mrb_parser_dump($217,$221,$223);
 STACKTOP = sp;return;
}
function _dump_prefix($tree,$offset) {
 $tree = $tree|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $tree;
 $1 = $offset;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 HEAP32[$vararg_buffer>>2] = $5;
 (_printf(62879,$vararg_buffer)|0);
 while(1) {
  $6 = $1;
  $7 = (($6) + -1)|0;
  $1 = $7;
  $8 = ($6|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[695]|0;
  (_putc(32,$9)|0);
  $10 = HEAP32[695]|0;
  (_putc(32,$10)|0);
 }
 STACKTOP = sp;return;
}
function _dump_recur($mrb,$tree,$offset) {
 $mrb = $mrb|0;
 $tree = $tree|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $tree;
 $2 = $offset;
 while(1) {
  $3 = $1;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  _mrb_parser_dump($5,$7,$8);
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
 }
 STACKTOP = sp;return;
}
function _mrb_parser_new($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $1;
 $3 = (_mrb_pool_open($2)|0);
 $pool = $3;
 $4 = $pool;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $6 = $pool;
 $7 = (_mrb_pool_alloc($6,1408)|0);
 $p = $7;
 $8 = $p;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $p;
  _memcpy(($10|0),(73160|0),1408)|0;
  $11 = $1;
  $12 = $p;
  HEAP32[$12>>2] = $11;
  $13 = $pool;
  $14 = $p;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $13;
  $16 = $p;
  $17 = ((($16)) + 16|0);
  HEAP32[$17>>2] = 0;
  $18 = $p;
  $19 = ((($18)) + 12|0);
  HEAP32[$19>>2] = 0;
  $20 = $p;
  $21 = ((($20)) + 20|0);
  HEAP32[$21>>2] = 0;
  $22 = $p;
  $23 = ((($22)) + 72|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 & -2;
  $26 = $25 | 1;
  HEAP8[$23>>0] = $26;
  $27 = $p;
  $28 = ((($27)) + 68|0);
  HEAP32[$28>>2] = 0;
  $29 = $p;
  $30 = ((($29)) + 64|0);
  HEAP32[$30>>2] = 0;
  $31 = $p;
  $32 = ((($31)) + 1148|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 & -3;
  HEAP8[$32>>0] = $34;
  $35 = $p;
  $36 = ((($35)) + 32|0);
  HEAP32[$36>>2] = 1;
  $37 = $p;
  $38 = ((($37)) + 36|0);
  HEAP32[$38>>2] = 0;
  $39 = $p;
  $40 = ((($39)) + 44|0);
  HEAP32[$40>>2] = 0;
  $41 = $p;
  $42 = ((($41)) + 1120|0);
  HEAP32[$42>>2] = 0;
  $43 = $p;
  $44 = ((($43)) + 1112|0);
  HEAP32[$44>>2] = 0;
  $45 = $p;
  $46 = ((($45)) + 1124|0);
  HEAP32[$46>>2] = 0;
  $47 = $p;
  $48 = ((($47)) + 1400|0);
  HEAP32[$48>>2] = -1;
  $49 = $p;
  $50 = ((($49)) + 1392|0);
  HEAP32[$50>>2] = 0;
  $51 = $p;
  $52 = ((($51)) + 1396|0);
  HEAP32[$52>>2] = 0;
  $53 = $p;
  $0 = $53;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 } else {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _mrb_parser_free($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _mrb_pool_close($3);
 STACKTOP = sp;return;
}
function _mrbc_context_new($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_calloc($1,1,32)|0);
 STACKTOP = sp;return ($2|0);
}
function _mrbc_context_free($mrb,$cxt) {
 $mrb = $mrb|0;
 $cxt = $cxt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $cxt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 _mrb_free($2,$4);
 $5 = $0;
 $6 = $1;
 _mrb_free($5,$6);
 STACKTOP = sp;return;
}
function _mrbc_filename($mrb,$c,$s) {
 $mrb = $mrb|0;
 $c = $c|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $s;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = (_strlen($5)|0);
  $len = $6;
  $7 = $0;
  $8 = $len;
  $9 = (($8) + 1)|0;
  $10 = (_mrb_alloca($7,$9)|0);
  $p = $10;
  $11 = $p;
  $12 = $2;
  $13 = $len;
  $14 = (($13) + 1)|0;
  _memcpy(($11|0),($12|0),($14|0))|0;
  $15 = $p;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $15;
 }
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _mrbc_partial_hook($mrb,$c,$func,$data) {
 $mrb = $mrb|0;
 $c = $c|0;
 $func = $func|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $func;
 $3 = $data;
 $4 = $2;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 $7 = $3;
 $8 = $1;
 $9 = ((($8)) + 20|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _mrb_parser_get_filename($p,$idx) {
 $p = $p|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $idx;
 $3 = $2;
 $4 = $3&65535;
 $5 = $1;
 $6 = ((($5)) + 1396|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = $11&65535;
  $13 = $1;
  $14 = ((($13)) + 1392|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_mrb_sym2name_len($10,$17,0)|0);
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _mrb_parse_file($mrb,$f,$c) {
 $mrb = $mrb|0;
 $f = $f|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $f;
 $3 = $c;
 $4 = $1;
 $5 = (_mrb_parser_new($4)|0);
 $p = $5;
 $6 = $p;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $p;
  $9 = ((($8)) + 16|0);
  HEAP32[$9>>2] = 0;
  $10 = $p;
  $11 = ((($10)) + 12|0);
  HEAP32[$11>>2] = 0;
  $12 = $2;
  $13 = $p;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = $12;
  $15 = $p;
  $16 = $3;
  _mrb_parser_parse($15,$16);
  $17 = $p;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _mrb_load_file_cxt($agg$result,$mrb,$f,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $f = $f|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $f;
 $2 = $c;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_mrb_parse_file($4,$5,$6)|0);
 $8 = $2;
 _load_exec($agg$result,$3,$7,$8);
 STACKTOP = sp;return;
}
function _load_exec($agg$result,$mrb,$p,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 $c = $c|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $keep = 0, $n = 0, $proc = 0, $target = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 104|0;
 $$byval_copy = sp + 96|0;
 $vararg_buffer = sp;
 $v = sp + 64|0;
 $buf = sp + 112|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $0 = $mrb;
 $1 = $p;
 $2 = $c;
 $9 = $0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $target = $11;
 $keep = 0;
 $12 = $1;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  _mrb_undef_value_557($agg$result);
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 1144|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 1136|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $52 = $0;
   $53 = $1;
   $54 = (_mrb_generate_code($52,$53)|0);
   $proc = $54;
   $55 = $1;
   _mrb_parser_free($55);
   $56 = $proc;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $58 = $0;
    $59 = $0;
    $60 = (_mrb_class_get($59,67747)|0);
    $61 = $0;
    _mrb_str_new_static($6,$61,64191,13);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;
    _mrb_exc_new_str($7,$58,$60,$$byval_copy2);
    $62 = HEAP32[$7>>2]|0;
    $63 = $0;
    $64 = ((($63)) + 20|0);
    HEAP32[$64>>2] = $62;
    _mrb_undef_value_557($agg$result);
    STACKTOP = sp;return;
   }
   $65 = $2;
   $66 = ($65|0)!=(0|0);
   do {
    if ($66) {
     $67 = $2;
     $68 = ((($67)) + 28|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69&255) >>> 1;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)!=(0);
     if ($72) {
      $73 = $0;
      $74 = $proc;
      _mrb_codedump_all($73,$74);
     }
     $75 = $2;
     $76 = ((($75)) + 28|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = ($77&255) >>> 2;
     $79 = $78 & 1;
     $80 = ($79<<24>>24)!=(0);
     if ($80) {
      $81 = $proc;
      _mrb_obj_value_559($agg$result,$81);
      STACKTOP = sp;return;
     }
     $82 = $2;
     $83 = ((($82)) + 24|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)!=(0|0);
     if ($85) {
      $86 = $2;
      $87 = ((($86)) + 24|0);
      $88 = HEAP32[$87>>2]|0;
      $target = $88;
     }
     $89 = $2;
     $90 = ((($89)) + 28|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = ($91&255) >>> 3;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)!=(0);
     $95 = $2;
     if ($94) {
      $96 = ((($95)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (($97) + 1)|0;
      $keep = $98;
      break;
     } else {
      $99 = ((($95)) + 28|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100 & -9;
      $102 = $101 | 8;
      HEAP8[$99>>0] = $102;
      break;
     }
    }
   } while(0);
   $103 = $target;
   $104 = $proc;
   $105 = ((($104)) + 16|0);
   HEAP32[$105>>2] = $103;
   $106 = $0;
   $107 = ((($106)) + 12|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($108)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = $target;
    $113 = $0;
    $114 = ((($113)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($115)) + 16|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($117)) + 44|0);
    HEAP32[$118>>2] = $112;
   }
   $119 = $0;
   $120 = $proc;
   $121 = $keep;
   _mrb_toplevel_run_keep($8,$119,$120,$121);
   ;HEAP32[$v>>2]=HEAP32[$8>>2]|0;HEAP32[$v+4>>2]=HEAP32[$8+4>>2]|0;
   $122 = $0;
   $123 = ((($122)) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($124|0)!=(0|0);
   if ($125) {
    _mrb_nil_value_560($agg$result);
    STACKTOP = sp;return;
   } else {
    ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $22 = $1;
 $23 = ((($22)) + 1148|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24&255) >>> 1;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)!=(0);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 1152|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ((($31)) + 1152|0);
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $34;
  $35 = (_snprintf($buf,256,64178,$vararg_buffer)|0);
  $n = $35;
  $36 = $0;
  $37 = $0;
  $38 = (_mrb_class_get($37,67759)|0);
  $39 = $n;
  _mrb_exc_new($3,$36,$38,$buf,$39);
  $40 = HEAP32[$3>>2]|0;
  $41 = $0;
  $42 = ((($41)) + 20|0);
  HEAP32[$42>>2] = $40;
  $43 = $1;
  _mrb_parser_free($43);
  _mrb_undef_value_557($agg$result);
  STACKTOP = sp;return;
 } else {
  $44 = $0;
  $45 = $0;
  $46 = (_mrb_class_get($45,67759)|0);
  $47 = $0;
  _mrb_str_new_static($4,$47,62760,12);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
  _mrb_exc_new_str($5,$44,$46,$$byval_copy);
  $48 = HEAP32[$5>>2]|0;
  $49 = $0;
  $50 = ((($49)) + 20|0);
  HEAP32[$50>>2] = $48;
  $51 = $1;
  _mrb_parser_free($51);
  _mrb_undef_value_557($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_undef_value_557($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 5;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_value_559($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_nil_value_560($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_new_capa($agg$result,$mrb,$capa) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $capa = $capa|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $capa;
 $2 = $0;
 $3 = $1;
 $4 = (_ary_new_capa($2,$3)|0);
 $a = $4;
 $5 = $a;
 _mrb_obj_value_565($agg$result,$5);
 STACKTOP = sp;return;
}
function _ary_new_capa($mrb,$capa) {
 $mrb = $mrb|0;
 $capa = $capa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $blen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $capa;
 $2 = $1;
 $3 = ($2|0)>(536870911);
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (_mrb_class_get($5,68855)|0);
  _mrb_raise($4,$6,64205);
  // unreachable;
 }
 $7 = $1;
 $8 = $7<<3;
 $blen = $8;
 $9 = $blen;
 $10 = $1;
 $11 = ($9|0)<($10|0);
 $12 = $0;
 $13 = $0;
 if ($11) {
  $14 = (_mrb_class_get($13,68855)|0);
  _mrb_raise($12,$14,64205);
  // unreachable;
 } else {
  $15 = ((($13)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_mrb_obj_alloc($12,14,$16)|0);
  $a = $17;
  $18 = $0;
  $19 = $blen;
  $20 = (_mrb_malloc($18,$19)|0);
  $21 = $a;
  $22 = ((($21)) + 20|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = $a;
  $25 = ((($24)) + 16|0);
  HEAP32[$25>>2] = $23;
  $26 = $a;
  $27 = ((($26)) + 12|0);
  HEAP32[$27>>2] = 0;
  $28 = $a;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _mrb_obj_value_565($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_new($agg$result,$mrb) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_ary_new_capa($agg$result,$1,0);
 STACKTOP = sp;return;
}
function _mrb_ary_new_from_values($agg$result,$mrb,$size,$vals) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $size = $size|0;
 $vals = $vals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $vals;
 $3 = $0;
 $4 = $1;
 $5 = (_ary_new_capa($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $1;
 _array_copy($8,$9,$10);
 $11 = $1;
 $12 = $a;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = $11;
 $14 = $a;
 _mrb_obj_value_565($agg$result,$14);
 STACKTOP = sp;return;
}
function _array_copy($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $src;
 $2 = $size;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<3)|0);
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9<<3)|0);
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 STACKTOP = sp;return;
}
function _mrb_assoc_new($agg$result,$mrb,$car,$cdr) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $car = $car|0;
 $cdr = $cdr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_ary_new_capa($1,2)|0);
 $a = $2;
 $3 = $a;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$5>>2]=HEAP32[$car>>2]|0;HEAP32[$5+4>>2]=HEAP32[$car+4>>2]|0;
 $6 = $a;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 ;HEAP32[$9>>2]=HEAP32[$cdr>>2]|0;HEAP32[$9+4>>2]=HEAP32[$cdr+4>>2]|0;
 $10 = $a;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 2;
 $12 = $a;
 _mrb_obj_value_565($agg$result,$12);
 STACKTOP = sp;return;
}
function _ary_modify($mrb,$a) {
 $mrb = $mrb|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0, $ptr = 0, $shared = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 256;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $shared = $9;
 $10 = $shared;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $shared;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)==($18|0);
  if ($19) {
   $20 = $shared;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = ((($23)) + 20|0);
   HEAP32[$24>>2] = $22;
   $25 = $1;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 16|0);
   HEAP32[$29>>2] = $27;
   $30 = $0;
   $31 = $shared;
   _mrb_free($30,$31);
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $32 = $1;
  $33 = ((($32)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $p = $34;
  $35 = $1;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37<<3;
  $len = $38;
  $39 = $0;
  $40 = $len;
  $41 = (_mrb_malloc($39,$40)|0);
  $ptr = $41;
  $42 = $p;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = $ptr;
   $45 = $p;
   $46 = $1;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   _array_copy($44,$45,$48);
  }
  $49 = $ptr;
  $50 = $1;
  $51 = ((($50)) + 20|0);
  HEAP32[$51>>2] = $49;
  $52 = $1;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $1;
  $56 = ((($55)) + 16|0);
  HEAP32[$56>>2] = $54;
  $57 = $0;
  $58 = $shared;
  _mrb_ary_decref($57,$58);
 }
 $59 = $1;
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 >>> 11;
 $62 = $61 & -257;
 $63 = HEAP32[$59>>2]|0;
 $64 = $62 & 2097151;
 $65 = $64 << 11;
 $66 = $63 & 2047;
 $67 = $66 | $65;
 HEAP32[$59>>2] = $67;
 STACKTOP = sp;return;
}
function _mrb_ary_decref($mrb,$shared) {
 $mrb = $mrb|0;
 $shared = $shared|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $shared;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 _mrb_free($8,$11);
 $12 = $0;
 $13 = $1;
 _mrb_free($12,$13);
 STACKTOP = sp;return;
}
function _ary_shrink_capa($mrb,$a) {
 $mrb = $mrb|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $capa = $4;
 $5 = $capa;
 $6 = ($5|0)<(8);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $capa;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10*5)|0;
 $12 = ($7|0)<=($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = $capa;
  $14 = (($13|0) / 2)&-1;
  $capa = $14;
  $15 = $capa;
  $16 = ($15|0)<(4);
  if ($16) {
   label = 4;
   break;
  }
  $17 = $capa;
  $18 = $1;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20*5)|0;
  $22 = ($17|0)>($21|0);
  if (!($22)) {
   break;
  }
 }
 if ((label|0) == 4) {
  $capa = 4;
 }
 $23 = $capa;
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23|0)>($26|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $capa;
 $29 = $1;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)<($31|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $capa;
 $34 = $1;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = $33;
 $36 = $0;
 $37 = $1;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $capa;
 $41 = $40<<3;
 $42 = (_mrb_realloc($36,$39,$41)|0);
 $43 = $1;
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = $42;
 STACKTOP = sp;return;
}
function _ary_expand_capa($mrb,$a,$len) {
 $mrb = $mrb|0;
 $a = $a|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capa = 0, $expanded_ptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $len;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $capa = $5;
 $6 = $2;
 $7 = ($6|0)>(536870911);
 if ($7) {
  $8 = $0;
  $9 = $0;
  $10 = (_mrb_class_get($9,68855)|0);
  _mrb_raise($8,$10,64205);
  // unreachable;
 }
 $11 = $capa;
 $12 = ($11|0)==(0);
 if ($12) {
  $capa = 4;
 }
 while(1) {
  $13 = $capa;
  $14 = $2;
  $15 = ($13|0)<($14|0);
  $16 = $capa;
  if (!($15)) {
   break;
  }
  $17 = $16<<1;
  $capa = $17;
 }
 $18 = ($16|0)>(536870911);
 if ($18) {
  $capa = 536870911;
 }
 $19 = $capa;
 $20 = $1;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)>($22|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = $1;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $capa;
 $29 = $28<<3;
 $30 = (_mrb_realloc($24,$27,$29)|0);
 $expanded_ptr = $30;
 $31 = $capa;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = $31;
 $34 = $expanded_ptr;
 $35 = $1;
 $36 = ((($35)) + 20|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _ary_fill_with_nil($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $nil = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $nil = sp;
 $0 = $ptr;
 $1 = $size;
 _mrb_nil_value_576($nil);
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $0 = $6;
  ;HEAP32[$5>>2]=HEAP32[$nil>>2]|0;HEAP32[$5+4>>2]=HEAP32[$nil+4>>2]|0;
 }
 STACKTOP = sp;return;
}
function _mrb_nil_value_576($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_concat($mrb,$self,$other) {
 $mrb = $mrb|0;
 $self = $self|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$other>>2]|0;
 $a2 = $1;
 $2 = $0;
 $3 = HEAP32[$self>>2]|0;
 $4 = $a2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _ary_concat($2,$3,$6,$9);
 STACKTOP = sp;return;
}
function _ary_concat($mrb,$a,$ptr,$blen) {
 $mrb = $mrb|0;
 $a = $a|0;
 $ptr = $ptr|0;
 $blen = $blen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $ptr;
 $3 = $blen;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($6) + ($7))|0;
 $len = $8;
 $9 = $0;
 $10 = $1;
 _ary_modify($9,$10);
 $11 = $1;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $len;
 $15 = ($13|0)<($14|0);
 if ($15) {
  $16 = $0;
  $17 = $1;
  $18 = $len;
  _ary_expand_capa($16,$17,$18);
 }
 $19 = $1;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) + ($24<<3)|0);
 $26 = $2;
 $27 = $3;
 _array_copy($25,$26,$27);
 $28 = $0;
 $29 = $1;
 _mrb_write_barrier($28,$29);
 $30 = $len;
 $31 = $1;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _mrb_ary_replace($mrb,$self,$other) {
 $mrb = $mrb|0;
 $self = $self|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$other>>2]|0;
 $a2 = $1;
 $2 = $0;
 $3 = HEAP32[$self>>2]|0;
 $4 = $a2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _ary_replace($2,$3,$6,$9);
 STACKTOP = sp;return;
}
function _ary_replace($mrb,$a,$argv,$len) {
 $mrb = $mrb|0;
 $a = $a|0;
 $argv = $argv|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $argv;
 $3 = $len;
 $4 = $0;
 $5 = $1;
 _ary_modify($4,$5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = $0;
  $12 = $1;
  $13 = $3;
  _ary_expand_capa($11,$12,$13);
 }
 $14 = $1;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = $3;
 _array_copy($16,$17,$18);
 $19 = $0;
 $20 = $1;
 _mrb_write_barrier($19,$20);
 $21 = $3;
 $22 = $1;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _mrb_ary_push($mrb,$ary,$elem) {
 $mrb = $mrb|0;
 $ary = $ary|0;
 $elem = $elem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$ary>>2]|0;
 $a = $1;
 $2 = $0;
 $3 = $a;
 _ary_modify($2,$3);
 $4 = $a;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)==($9|0);
 if ($10) {
  $11 = $0;
  $12 = $a;
  $13 = $a;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  _ary_expand_capa($11,$12,$16);
 }
 $17 = $a;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$18>>2] = $20;
 $21 = $a;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($19<<3)|0);
 ;HEAP32[$24>>2]=HEAP32[$elem>>2]|0;HEAP32[$24+4>>2]=HEAP32[$elem+4>>2]|0;
 $25 = ((($elem)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)<(8);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $0;
 $29 = $a;
 $30 = HEAP32[$elem>>2]|0;
 _mrb_field_write_barrier($28,$29,$30);
 STACKTOP = sp;return;
}
function _mrb_ary_pop($agg$result,$mrb,$ary) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$ary>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _mrb_nil_value_576($agg$result);
  STACKTOP = sp;return;
 } else {
  $6 = $a;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $a;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<3)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$13>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_ary_shift($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $ptr = 0, $size = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _mrb_nil_value_576($agg$result);
  STACKTOP = sp;return;
 }
 $6 = $a;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & 256;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $22 = $a;
   $23 = ((($22)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)>(10);
   if ($25) {
    $26 = $0;
    $27 = $a;
    _ary_make_shared($26,$27);
    break;
   }
   $28 = $a;
   $29 = ((($28)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $ptr = $30;
   $31 = $a;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $size = $33;
   $34 = $ptr;
   ;HEAP32[$val>>2]=HEAP32[$34>>2]|0;HEAP32[$val+4>>2]=HEAP32[$34+4>>2]|0;
   while(1) {
    $35 = $size;
    $36 = (($35) + -1)|0;
    $size = $36;
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
    $38 = $ptr;
    $39 = $ptr;
    $40 = ((($39)) + 8|0);
    ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;
    $41 = $ptr;
    $42 = ((($41)) + 8|0);
    $ptr = $42;
   }
   $43 = $a;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + -1)|0;
   HEAP32[$44>>2] = $46;
   ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $11 = $a;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$val>>2]=HEAP32[$13>>2]|0;HEAP32[$val+4>>2]=HEAP32[$13+4>>2]|0;
 $14 = $a;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 HEAP32[$15>>2] = $17;
 $18 = $a;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
 STACKTOP = sp;return;
}
function _ary_make_shared($mrb,$a) {
 $mrb = $mrb|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shared = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 256;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = (_mrb_malloc($7,12)|0);
 $shared = $8;
 $9 = $shared;
 HEAP32[$9>>2] = 1;
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)>($15|0);
 if ($16) {
  $17 = $0;
  $18 = $1;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23<<3;
  $25 = (($24) + 1)|0;
  $26 = (_mrb_realloc($17,$20,$25)|0);
  $27 = $shared;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $1;
  $30 = ((($29)) + 20|0);
  HEAP32[$30>>2] = $26;
 } else {
  $31 = $1;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $shared;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $shared;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $38;
 $41 = $shared;
 $42 = $1;
 $43 = ((($42)) + 16|0);
 HEAP32[$43>>2] = $41;
 $44 = $1;
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 >>> 11;
 $47 = $46 | 256;
 $48 = HEAP32[$44>>2]|0;
 $49 = $47 & 2097151;
 $50 = $49 << 11;
 $51 = $48 & 2047;
 $52 = $51 | $50;
 HEAP32[$44>>2] = $52;
 STACKTOP = sp;return;
}
function _mrb_ary_unshift($agg$result,$mrb,$self,$item) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 256;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $a;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   $12 = $a;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $a;
   $16 = ((($15)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $14;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $23 = (($22|0) / 8)&-1;
   $24 = ($23|0)>=(1);
   if ($24) {
    $25 = $a;
    $26 = ((($25)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($27)) + -8|0);
    HEAP32[$26>>2] = $28;
    $29 = $a;
    $30 = ((($29)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    ;HEAP32[$31>>2]=HEAP32[$item>>2]|0;HEAP32[$31+4>>2]=HEAP32[$item+4>>2]|0;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $32 = $0;
  $33 = $a;
  _ary_modify($32,$33);
  $34 = $a;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $a;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  $41 = ($36|0)<($40|0);
  if ($41) {
   $42 = $0;
   $43 = $a;
   $44 = $a;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 1)|0;
   _ary_expand_capa($42,$43,$47);
  }
  $48 = $a;
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 8|0);
  $52 = $a;
  $53 = ((($52)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $a;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  _value_move_587($51,$54,$57);
  $58 = $a;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  ;HEAP32[$60>>2]=HEAP32[$item>>2]|0;HEAP32[$60+4>>2]=HEAP32[$item+4>>2]|0;
 }
 $61 = $a;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 $65 = ((($item)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66>>>0)<(8);
 if ($67) {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = $a;
 $70 = HEAP32[$item>>2]|0;
 _mrb_field_write_barrier($68,$69,$70);
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _value_move_587($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s1;
 $1 = $s2;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = ($3>>>0)>($4>>>0);
 if ($5) {
  $6 = $0;
  $7 = $1;
  $8 = $2;
  $9 = (($7) + ($8<<3)|0);
  $10 = ($6>>>0)<($9>>>0);
  if ($10) {
   $11 = $2;
   $12 = $0;
   $13 = (($12) + ($11<<3)|0);
   $0 = $13;
   $14 = $2;
   $15 = $1;
   $16 = (($15) + ($14<<3)|0);
   $1 = $16;
   while(1) {
    $17 = $2;
    $18 = (($17) + -1)|0;
    $2 = $18;
    $19 = ($17>>>0)>(0);
    if (!($19)) {
     break;
    }
    $20 = $0;
    $21 = ((($20)) + -8|0);
    $0 = $21;
    $22 = $1;
    $23 = ((($22)) + -8|0);
    $1 = $23;
    ;HEAP32[$21>>2]=HEAP32[$23>>2]|0;HEAP32[$21+4>>2]=HEAP32[$23+4>>2]|0;
   }
   STACKTOP = sp;return;
  }
 }
 $24 = $0;
 $25 = $1;
 $26 = ($24|0)!=($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $27 = $2;
  $28 = (($27) + -1)|0;
  $2 = $28;
  $29 = ($27>>>0)>(0);
  if (!($29)) {
   break;
  }
  $30 = $0;
  $31 = ((($30)) + 8|0);
  $0 = $31;
  $32 = $1;
  $33 = ((($32)) + 8|0);
  $1 = $33;
  ;HEAP32[$30>>2]=HEAP32[$32>>2]|0;HEAP32[$30+4>>2]=HEAP32[$32+4>>2]|0;
 }
 STACKTOP = sp;return;
}
function _mrb_ary_ref($agg$result,$mrb,$ary,$n) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $n;
 $2 = HEAP32[$ary>>2]|0;
 $a = $2;
 $3 = $1;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $a;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = (($8) + ($7))|0;
  $1 = $9;
 }
 $10 = $1;
 $11 = ($10|0)<(0);
 if (!($11)) {
  $12 = $a;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = ($14|0)<=($15|0);
  if (!($16)) {
   $17 = $1;
   $18 = $a;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($17<<3)|0);
   ;HEAP32[$agg$result>>2]=HEAP32[$21>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$21+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_576($agg$result);
 STACKTOP = sp;return;
}
function _mrb_ary_set($mrb,$ary,$n,$val) {
 $mrb = $mrb|0;
 $ary = $ary|0;
 $n = $n|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $n;
 $3 = HEAP32[$ary>>2]|0;
 $a = $3;
 $4 = $0;
 $5 = $a;
 _ary_modify($4,$5);
 $6 = $1;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $a;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + ($10))|0;
  $1 = $12;
  $13 = $1;
  $14 = ($13|0)<(0);
  if ($14) {
   $15 = $0;
   $16 = $0;
   $17 = (_mrb_class_get($16,68712)|0);
   $18 = $1;
   $19 = $a;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) - ($21))|0;
   _mrb_fixnum_value_593($2,$22);
   ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
   _mrb_raisef($15,$17,64224,$vararg_buffer);
   // unreachable;
  }
 }
 $23 = $a;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = ($25|0)<=($26|0);
 if ($27) {
  $28 = $a;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ($30|0)<=($31|0);
  if ($32) {
   $33 = $0;
   $34 = $a;
   $35 = $1;
   $36 = (($35) + 1)|0;
   _ary_expand_capa($33,$34,$36);
  }
  $37 = $a;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $a;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39) + ($42<<3)|0);
  $44 = $1;
  $45 = (($44) + 1)|0;
  $46 = $a;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($45) - ($48))|0;
  _ary_fill_with_nil($43,$49);
  $50 = $1;
  $51 = (($50) + 1)|0;
  $52 = $a;
  $53 = ((($52)) + 12|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $1;
 $55 = $a;
 $56 = ((($55)) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + ($54<<3)|0);
 ;HEAP32[$58>>2]=HEAP32[$val>>2]|0;HEAP32[$58+4>>2]=HEAP32[$val+4>>2]|0;
 $59 = ((($val)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60>>>0)<(8);
 if ($61) {
  STACKTOP = sp;return;
 }
 $62 = $0;
 $63 = $a;
 $64 = HEAP32[$val>>2]|0;
 _mrb_field_write_barrier($62,$63,$64);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_593($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_splice($agg$result,$mrb,$ary,$head,$len,$rpl) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 $head = $head|0;
 $len = $len|0;
 $rpl = $rpl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $argc = 0, $argv = 0, $i = 0, $size = 0, $tail = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $0 = $mrb;
 $1 = $head;
 $2 = $len;
 $4 = HEAP32[$ary>>2]|0;
 $a = $4;
 $5 = $0;
 $6 = $a;
 _ary_modify($5,$6);
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $0;
  $10 = $0;
  $11 = (_mrb_class_get($10,68712)|0);
  $12 = $2;
  _mrb_fixnum_value_593($3,$12);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$3+7>>0]|0;
  _mrb_raisef($9,$11,64246,$vararg_buffer);
  // unreachable;
 }
 $13 = $1;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = $a;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = (($18) + ($17))|0;
  $1 = $19;
  $20 = $1;
  $21 = ($20|0)<(0);
  if ($21) {
   $22 = $0;
   $23 = $0;
   $24 = (_mrb_class_get($23,68712)|0);
   _mrb_raise($22,$24,64267);
   // unreachable;
  }
 }
 $25 = $a;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $2;
 $29 = ($27|0)<($28|0);
 if ($29) {
  label = 8;
 } else {
  $30 = $a;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = $2;
  $35 = (($33) + ($34))|0;
  $36 = ($32|0)<($35|0);
  if ($36) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $37 = $a;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = (($39) - ($40))|0;
  $2 = $41;
 }
 $42 = $1;
 $43 = $2;
 $44 = (($42) + ($43))|0;
 $tail = $44;
 $45 = ((($rpl)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(14);
 if ($47) {
  $48 = HEAP32[$rpl>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $argc = $50;
  $51 = HEAP32[$rpl>>2]|0;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $argv = $53;
 } else {
  $argc = 1;
  $argv = $rpl;
 }
 $54 = $1;
 $55 = $argc;
 $56 = (($54) + ($55))|0;
 $size = $56;
 $57 = $tail;
 $58 = $a;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($57|0)<($60|0);
 if ($61) {
  $62 = $a;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $tail;
  $66 = (($64) - ($65))|0;
  $67 = $size;
  $68 = (($67) + ($66))|0;
  $size = $68;
 }
 $69 = $size;
 $70 = $a;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69|0)>($72|0);
 if ($73) {
  $74 = $0;
  $75 = $a;
  $76 = $size;
  _ary_expand_capa($74,$75,$76);
 }
 $77 = $1;
 $78 = $a;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($77|0)>($80|0);
 if ($81) {
  $82 = $a;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $a;
  $86 = ((($85)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84) + ($87<<3)|0);
  $89 = $1;
  $90 = $a;
  $91 = ((($90)) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($89) - ($92))|0;
  _ary_fill_with_nil($88,$93);
 } else {
  $94 = $1;
  $95 = $a;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($94|0)<($97|0);
  if ($98) {
   $99 = $a;
   $100 = ((($99)) + 20|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $1;
   $103 = (($101) + ($102<<3)|0);
   $104 = $argc;
   $105 = (($103) + ($104<<3)|0);
   $106 = $a;
   $107 = ((($106)) + 20|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $tail;
   $110 = (($108) + ($109<<3)|0);
   $111 = $a;
   $112 = ((($111)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $tail;
   $115 = (($113) - ($114))|0;
   _value_move_587($105,$110,$115);
  }
 }
 $i = 0;
 while(1) {
  $116 = $i;
  $117 = $argc;
  $118 = ($116|0)<($117|0);
  if (!($118)) {
   break;
  }
  $119 = $a;
  $120 = ((($119)) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $1;
  $123 = (($121) + ($122<<3)|0);
  $124 = $i;
  $125 = (($123) + ($124<<3)|0);
  $126 = $argv;
  $127 = $i;
  $128 = (($126) + ($127<<3)|0);
  ;HEAP32[$125>>2]=HEAP32[$128>>2]|0;HEAP32[$125+4>>2]=HEAP32[$128+4>>2]|0;
  $129 = $i;
  $130 = $argv;
  $131 = (($130) + ($129<<3)|0);
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133>>>0)<(8);
  if (!($134)) {
   $135 = $0;
   $136 = $a;
   $137 = $i;
   $138 = $argv;
   $139 = (($138) + ($137<<3)|0);
   $140 = HEAP32[$139>>2]|0;
   _mrb_field_write_barrier($135,$136,$140);
  }
  $141 = $i;
  $142 = (($141) + 1)|0;
  $i = $142;
 }
 $143 = $size;
 $144 = $a;
 $145 = ((($144)) + 12|0);
 HEAP32[$145>>2] = $143;
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_splat($agg$result,$mrb,$v) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v$byval_copy = 0, $v$byval_copy1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy1 = sp + 16|0;
 $v$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = ((($v)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(14);
 if ($3) {
  ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $0;
 $6 = (_mrb_intern_static($5,64289,4)|0);
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 $7 = (_mrb_respond_to($4,$v$byval_copy,$6)|0);
 $8 = ($7<<24>>24)!=(0);
 $9 = $0;
 if ($8) {
  ;HEAP32[$v$byval_copy1>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy1+4>>2]=HEAP32[$v+4>>2]|0;
  _mrb_funcall($agg$result,$9,$v$byval_copy1,64289,0,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _mrb_ary_new_from_values($agg$result,$9,1,$v);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_clear($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 256;
 $6 = ($5|0)!=(0);
 $7 = $0;
 $8 = $a;
 if ($6) {
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  _mrb_ary_decref($7,$10);
  $11 = $a;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 11;
  $14 = $13 & -257;
  $15 = HEAP32[$11>>2]|0;
  $16 = $14 & 2097151;
  $17 = $16 << 11;
  $18 = $15 & 2047;
  $19 = $18 | $17;
  HEAP32[$11>>2] = $19;
 } else {
  $20 = ((($8)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _mrb_free($7,$21);
 }
 $22 = $a;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = 0;
 $24 = $a;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = 0;
 $26 = $a;
 $27 = ((($26)) + 20|0);
 HEAP32[$27>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_entry($agg$result,$ary,$offset) {
 $agg$result = $agg$result|0;
 $ary = $ary|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ary$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ary$byval_copy = sp + 8|0;
 $0 = $offset;
 $1 = $0;
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = HEAP32[$ary>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $0;
  $7 = (($6) + ($5))|0;
  $0 = $7;
 }
 $8 = $0;
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 _ary_elt($agg$result,$ary$byval_copy,$8);
 STACKTOP = sp;return;
}
function _ary_elt($agg$result,$ary,$offset) {
 $agg$result = $agg$result|0;
 $ary = $ary|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = $0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $3 = HEAP32[$ary>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $0;
  $7 = ($5|0)<=($6|0);
  if (!($7)) {
   $8 = $0;
   $9 = HEAP32[$ary>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($8<<3)|0);
   ;HEAP32[$agg$result>>2]=HEAP32[$12>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$12+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_576($agg$result);
 STACKTOP = sp;return;
}
function _mrb_ary_join($agg$result,$mrb,$ary,$sep) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 $sep = $sep|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ary$byval_copy = 0, $sep$byval_copy = 0, $sep$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $sep$byval_copy1 = sp + 40|0;
 $ary$byval_copy = sp + 32|0;
 $sep$byval_copy = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 ;HEAP32[$sep$byval_copy>>2]=HEAP32[$sep>>2]|0;HEAP32[$sep$byval_copy+4>>2]=HEAP32[$sep+4>>2]|0;
 _mrb_obj_as_string($1,$3,$sep$byval_copy);
 ;HEAP32[$sep>>2]=HEAP32[$1>>2]|0;HEAP32[$sep+4>>2]=HEAP32[$1+4>>2]|0;
 $4 = $0;
 $5 = $0;
 _mrb_ary_new($2,$5);
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$sep$byval_copy1>>2]=HEAP32[$sep>>2]|0;HEAP32[$sep$byval_copy1+4>>2]=HEAP32[$sep+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _join_ary($agg$result,$4,$ary$byval_copy,$sep$byval_copy1,$$byval_copy);
 STACKTOP = sp;return;
}
function _join_ary($agg$result,$mrb,$ary,$sep,$list) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 $sep = $sep|0;
 $list = $list|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ary$byval_copy = 0, $ary$byval_copy1 = 0, $i = 0, $list$byval_copy = 0, $list$byval_copy3 = 0, $list$byval_copy9 = 0, $result = 0, $result$byval_copy = 0, $result$byval_copy4 = 0, $sep$byval_copy = 0, $sep$byval_copy2 = 0, $tmp = 0, $val = 0;
 var $val$byval_copy = 0, $val$byval_copy5 = 0, $val$byval_copy6 = 0, $val$byval_copy7 = 0, $val$byval_copy8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list$byval_copy9 = sp + 208|0;
 $val$byval_copy8 = sp + 200|0;
 $val$byval_copy7 = sp + 192|0;
 $val$byval_copy6 = sp + 184|0;
 $val$byval_copy5 = sp + 176|0;
 $result$byval_copy4 = sp + 168|0;
 $list$byval_copy3 = sp + 160|0;
 $sep$byval_copy2 = sp + 152|0;
 $val$byval_copy = sp + 144|0;
 $sep$byval_copy = sp + 136|0;
 $result$byval_copy = sp + 128|0;
 $ary$byval_copy1 = sp + 120|0;
 $list$byval_copy = sp + 112|0;
 $$byval_copy = sp + 104|0;
 $ary$byval_copy = sp + 96|0;
 $result = sp + 80|0;
 $val = sp + 72|0;
 $tmp = sp + 64|0;
 $1 = sp + 56|0;
 $2 = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $0 = $mrb;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = HEAP32[$list>>2]|0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  $14 = $0;
  if (!($13)) {
   break;
  }
  $15 = $i;
  $16 = HEAP32[$list>>2]|0;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<3)|0);
  ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;
  $20 = (_mrb_obj_equal($14,$ary$byval_copy,$$byval_copy)|0);
  $21 = ($20<<24>>24)!=(0);
  if ($21) {
   label = 4;
   break;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 if ((label|0) == 4) {
  $22 = $0;
  $23 = $0;
  $24 = (_mrb_class_get($23,68855)|0);
  _mrb_raise($22,$24,64294);
  // unreachable;
 }
 ;HEAP32[$list$byval_copy>>2]=HEAP32[$list>>2]|0;HEAP32[$list$byval_copy+4>>2]=HEAP32[$list+4>>2]|0;
 ;HEAP32[$ary$byval_copy1>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy1+4>>2]=HEAP32[$ary+4>>2]|0;
 _mrb_ary_push($14,$list$byval_copy,$ary$byval_copy1);
 $27 = $0;
 _mrb_str_buf_new($1,$27,64);
 ;HEAP32[$result>>2]=HEAP32[$1>>2]|0;HEAP32[$result+4>>2]=HEAP32[$1+4>>2]|0;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = HEAP32[$ary>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $i;
  $34 = ($33|0)>(0);
  do {
   if ($34) {
    $35 = ((($sep)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = HEAP32[$sep>>2]|0;
     $39 = ($38|0)!=(0);
     if (!($39)) {
      break;
     }
    }
    $40 = $0;
    ;HEAP32[$result$byval_copy>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy+4>>2]=HEAP32[$result+4>>2]|0;
    ;HEAP32[$sep$byval_copy>>2]=HEAP32[$sep>>2]|0;HEAP32[$sep$byval_copy+4>>2]=HEAP32[$sep+4>>2]|0;
    _mrb_str_cat_str($2,$40,$result$byval_copy,$sep$byval_copy);
   }
  } while(0);
  $41 = $i;
  $42 = HEAP32[$ary>>2]|0;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41<<3)|0);
  ;HEAP32[$val>>2]=HEAP32[$45>>2]|0;HEAP32[$val+4>>2]=HEAP32[$45+4>>2]|0;
  $46 = ((($val)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  L17: do {
   switch ($47|0) {
   case 14:  {
    label = 13;
    break;
   }
   case 16:  {
    break;
   }
   default: {
    $52 = $0;
    ;HEAP32[$val$byval_copy6>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy6+4>>2]=HEAP32[$val+4>>2]|0;
    _mrb_check_string_type($5,$52,$val$byval_copy6);
    ;HEAP32[$tmp>>2]=HEAP32[$5>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$5+4>>2]|0;
    $53 = ((($tmp)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = HEAP32[$tmp>>2]|0;
     $57 = ($56|0)!=(0);
     if (!($57)) {
      $58 = $0;
      ;HEAP32[$val$byval_copy7>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy7+4>>2]=HEAP32[$val+4>>2]|0;
      _mrb_check_convert_type($6,$58,$val$byval_copy7,14,64904,64910);
      ;HEAP32[$tmp>>2]=HEAP32[$6>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$6+4>>2]|0;
      $59 = ((($tmp)) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0);
      if ($61) {
       $62 = HEAP32[$tmp>>2]|0;
       $63 = ($62|0)!=(0);
       if (!($63)) {
        $64 = $0;
        ;HEAP32[$val$byval_copy8>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy8+4>>2]=HEAP32[$val+4>>2]|0;
        _mrb_obj_as_string($7,$64,$val$byval_copy8);
        ;HEAP32[$val>>2]=HEAP32[$7>>2]|0;HEAP32[$val+4>>2]=HEAP32[$7+4>>2]|0;
        break L17;
       }
      }
      ;HEAP32[$val>>2]=HEAP32[$tmp>>2]|0;HEAP32[$val+4>>2]=HEAP32[$tmp+4>>2]|0;
      label = 13;
      break L17;
     }
    }
    ;HEAP32[$val>>2]=HEAP32[$tmp>>2]|0;HEAP32[$val+4>>2]=HEAP32[$tmp+4>>2]|0;
   }
   }
  } while(0);
  if ((label|0) == 13) {
   label = 0;
   $48 = $0;
   ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
   ;HEAP32[$sep$byval_copy2>>2]=HEAP32[$sep>>2]|0;HEAP32[$sep$byval_copy2+4>>2]=HEAP32[$sep+4>>2]|0;
   ;HEAP32[$list$byval_copy3>>2]=HEAP32[$list>>2]|0;HEAP32[$list$byval_copy3+4>>2]=HEAP32[$list+4>>2]|0;
   _join_ary($3,$48,$val$byval_copy,$sep$byval_copy2,$list$byval_copy3);
   ;HEAP32[$val>>2]=HEAP32[$3>>2]|0;HEAP32[$val+4>>2]=HEAP32[$3+4>>2]|0;
  }
  $49 = $0;
  ;HEAP32[$result$byval_copy4>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy4+4>>2]=HEAP32[$result+4>>2]|0;
  ;HEAP32[$val$byval_copy5>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy5+4>>2]=HEAP32[$val+4>>2]|0;
  _mrb_str_cat_str($4,$49,$result$byval_copy4,$val$byval_copy5);
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $65 = $0;
 ;HEAP32[$list$byval_copy9>>2]=HEAP32[$list>>2]|0;HEAP32[$list$byval_copy9+4>>2]=HEAP32[$list+4>>2]|0;
 _mrb_ary_pop($8,$65,$list$byval_copy9);
 ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_init_array($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,64904,$4)|0);
 $a = $5;
 $6 = $0;
 $7 = ((($6)) + 52|0);
 HEAP32[$7>>2] = $5;
 $8 = $a;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & -256;
 $12 = $11 | 14;
 $13 = $a;
 $14 = HEAP32[$13>>2]|0;
 $15 = $12 & 2097151;
 $16 = $15 << 11;
 $17 = $14 & 2047;
 $18 = $17 | $16;
 HEAP32[$13>>2] = $18;
 $19 = $0;
 $20 = $a;
 _mrb_define_class_method($19,$20,68841,208,4096);
 $21 = $0;
 $22 = $a;
 _mrb_define_method($21,$22,64315,209,262144);
 $23 = $0;
 $24 = $a;
 _mrb_define_method($23,$24,68114,210,262144);
 $25 = $0;
 $26 = $a;
 _mrb_define_method($25,$26,64339,211,262144);
 $27 = $0;
 $28 = $a;
 _mrb_define_method($27,$28,68841,212,4096);
 $29 = $0;
 $30 = $a;
 _mrb_define_method($29,$30,64349,213,4096);
 $31 = $0;
 $32 = $a;
 _mrb_define_method($31,$32,64358,214,0);
 $33 = $0;
 $34 = $a;
 _mrb_define_method($33,$34,64364,215,262144);
 $35 = $0;
 $36 = $a;
 _mrb_define_method($35,$36,64371,216,262144);
 $37 = $0;
 $38 = $a;
 _mrb_define_method($37,$38,64381,217,0);
 $39 = $0;
 $40 = $a;
 _mrb_define_method($39,$40,68938,218,8192);
 $41 = $0;
 $42 = $a;
 _mrb_define_method($41,$42,64411,219,262144);
 $43 = $0;
 $44 = $a;
 _mrb_define_method($43,$44,68999,220,262144);
 $45 = $0;
 $46 = $a;
 _mrb_define_method($45,$46,64419,221,4096);
 $47 = $0;
 $48 = $a;
 _mrb_define_method($47,$48,68964,222,4096);
 $49 = $0;
 $50 = $a;
 _mrb_define_method($49,$50,64428,223,0);
 $51 = $0;
 $52 = $a;
 _mrb_define_method($51,$52,64435,224,0);
 $53 = $0;
 $54 = $a;
 _mrb_define_method($53,$54,64439,211,4096);
 $55 = $0;
 $56 = $a;
 _mrb_define_method($55,$56,64444,220,262144);
 $57 = $0;
 $58 = $a;
 _mrb_define_method($57,$58,64452,225,0);
 $59 = $0;
 $60 = $a;
 _mrb_define_method($59,$60,64460,226,0);
 $61 = $0;
 $62 = $a;
 _mrb_define_method($61,$62,64469,227,262144);
 $63 = $0;
 $64 = $a;
 _mrb_define_method($63,$64,64476,228,0);
 $65 = $0;
 $66 = $a;
 _mrb_define_method($65,$66,64482,223,0);
 $67 = $0;
 $68 = $a;
 _mrb_define_method($67,$68,64487,212,4096);
 $69 = $0;
 $70 = $a;
 _mrb_define_method($69,$70,64493,229,4096);
 $71 = $0;
 $72 = $a;
 _mrb_define_method($71,$72,64501,230,262144);
 $73 = $0;
 $74 = $a;
 _mrb_define_method($73,$74,64510,231,262144);
 $75 = $0;
 $76 = $a;
 _mrb_define_method($75,$76,64520,219,262144);
 STACKTOP = sp;return;
}
function _mrb_ary_s_create($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $len = 0, $vals = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vals = sp + 12|0;
 $len = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $vals;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 (_mrb_get_args($1,68114,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$len>>2]|0;
 $4 = HEAP32[$vals>>2]|0;
 _mrb_ary_new_from_values($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function _mrb_ary_plus($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, $blen = 0, $ptr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ptr = sp + 12|0;
 $blen = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a1 = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $ptr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $blen;
 (_mrb_get_args($2,64317,$vararg_buffer)|0);
 $3 = HEAP32[$blen>>2]|0;
 $4 = (536870911 - ($3))|0;
 $5 = $a1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 $9 = $0;
 if ($8) {
  $10 = $0;
  $11 = (_mrb_class_get($10,68855)|0);
  _mrb_raise($9,$11,64205);
  // unreachable;
 } else {
  $12 = $a1;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$blen>>2]|0;
  $16 = (($14) + ($15))|0;
  $17 = (_ary_new_capa($9,$16)|0);
  $a2 = $17;
  $18 = $a2;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $a1;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $a1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  _array_copy($20,$23,$26);
  $27 = $a2;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $a1;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32<<3)|0);
  $34 = HEAP32[$ptr>>2]|0;
  $35 = HEAP32[$blen>>2]|0;
  _array_copy($33,$34,$35);
  $36 = $a1;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$blen>>2]|0;
  $40 = (($38) + ($39))|0;
  $41 = $a2;
  $42 = ((($41)) + 12|0);
  HEAP32[$42>>2] = $40;
  $43 = $a2;
  _mrb_obj_value_565($agg$result,$43);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_times($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, $ptr = 0, $times = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $times = sp + 4|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a1 = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $times;
 (_mrb_get_args($2,64319,$vararg_buffer)|0);
 $3 = HEAP32[$times>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $0;
  $6 = $0;
  $7 = (_mrb_class_get($6,68855)|0);
  _mrb_raise($5,$7,64321);
  // unreachable;
 }
 $8 = HEAP32[$times>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $0;
  _mrb_ary_new($agg$result,$10);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$times>>2]|0;
 $12 = (536870911 / ($11|0))&-1;
 $13 = $a1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)<($15|0);
 $17 = $0;
 if ($16) {
  $18 = $0;
  $19 = (_mrb_class_get($18,68855)|0);
  _mrb_raise($17,$19,64205);
  // unreachable;
 }
 $20 = $a1;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$times>>2]|0;
 $24 = Math_imul($22, $23)|0;
 $25 = (_ary_new_capa($17,$24)|0);
 $a2 = $25;
 $26 = $a2;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $ptr = $28;
 while(1) {
  $29 = HEAP32[$times>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$times>>2] = $30;
  $31 = ($29|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $ptr;
  $33 = $a1;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $a1;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  _array_copy($32,$35,$38);
  $39 = $a1;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $ptr;
  $43 = (($42) + ($41<<3)|0);
  $ptr = $43;
  $44 = $a1;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $a2;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46))|0;
  HEAP32[$48>>2] = $50;
 }
 $51 = $a2;
 _mrb_obj_value_565($agg$result,$51);
 STACKTOP = sp;return;
}
function _mrb_ary_push_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $argv = 0, $len = 0, $self$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $argv = sp + 12|0;
 $len = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 (_mrb_get_args($1,68114,$vararg_buffer)|0);
 while(1) {
  $2 = HEAP32[$len>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[$len>>2] = $3;
  $4 = ($2|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP32[$argv>>2]|0;
  $7 = ((($6)) + 8|0);
  HEAP32[$argv>>2] = $7;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
  _mrb_ary_push($5,$self$byval_copy,$$byval_copy);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_aget($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $i = 0, $index = 0, $index$byval_copy = 0, $index$byval_copy2 = 0, $index$byval_copy4 = 0, $len = 0, $self$byval_copy = 0, $self$byval_copy3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $index$byval_copy4 = sp + 64|0;
 $self$byval_copy3 = sp + 56|0;
 $index$byval_copy2 = sp + 48|0;
 $self$byval_copy = sp + 40|0;
 $index$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $i = sp + 20|0;
 $len = sp + 16|0;
 $index = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $index;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $3 = (_mrb_get_args($2,64342,$vararg_buffer)|0);
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($index)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  switch ($6|0) {
  case 17:  {
   $7 = $0;
   $8 = $a;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   ;HEAP32[$index$byval_copy>>2]=HEAP32[$index>>2]|0;HEAP32[$index$byval_copy+4>>2]=HEAP32[$index+4>>2]|0;
   $11 = (_mrb_range_beg_len($7,$index$byval_copy,$i,$len,$10)|0);
   $12 = ($11<<24>>24)!=(0);
   if ($12) {
    $13 = $0;
    $14 = $a;
    $15 = HEAP32[$i>>2]|0;
    $16 = HEAP32[$len>>2]|0;
    _ary_subseq($agg$result,$13,$14,$15,$16);
    STACKTOP = sp;return;
   } else {
    _mrb_nil_value_576($agg$result);
    STACKTOP = sp;return;
   }
   break;
  }
  case 3:  {
   $17 = $0;
   $18 = HEAP32[$index>>2]|0;
   ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
   _mrb_ary_ref($agg$result,$17,$self$byval_copy,$18);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $19 = $0;
   $20 = $0;
   ;HEAP32[$index$byval_copy2>>2]=HEAP32[$index>>2]|0;HEAP32[$index$byval_copy2+4>>2]=HEAP32[$index+4>>2]|0;
   $21 = (_aget_index($20,$index$byval_copy2)|0);
   ;HEAP32[$self$byval_copy3>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy3+4>>2]=HEAP32[$self+4>>2]|0;
   _mrb_ary_ref($agg$result,$19,$self$byval_copy3,$21);
   STACKTOP = sp;return;
  }
  }
 }
 $22 = $0;
 ;HEAP32[$index$byval_copy4>>2]=HEAP32[$index>>2]|0;HEAP32[$index$byval_copy4+4>>2]=HEAP32[$index+4>>2]|0;
 $23 = (_aget_index($22,$index$byval_copy4)|0);
 HEAP32[$i>>2] = $23;
 $24 = HEAP32[$i>>2]|0;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = $a;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$i>>2]|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$i>>2] = $30;
 }
 $31 = HEAP32[$i>>2]|0;
 $32 = ($31|0)<(0);
 if (!($32)) {
  $33 = $a;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$i>>2]|0;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   $38 = HEAP32[$len>>2]|0;
   $39 = ($38|0)<(0);
   if ($39) {
    _mrb_nil_value_576($agg$result);
    STACKTOP = sp;return;
   }
   $40 = $a;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[$i>>2]|0;
   $44 = ($42|0)==($43|0);
   if ($44) {
    $45 = $0;
    _mrb_ary_new($agg$result,$45);
    STACKTOP = sp;return;
   }
   $46 = HEAP32[$len>>2]|0;
   $47 = $a;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$i>>2]|0;
   $51 = (($49) - ($50))|0;
   $52 = ($46|0)>($51|0);
   if ($52) {
    $53 = $a;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$i>>2]|0;
    $57 = (($55) - ($56))|0;
    HEAP32[$len>>2] = $57;
   }
   $58 = $0;
   $59 = $a;
   $60 = HEAP32[$i>>2]|0;
   $61 = HEAP32[$len>>2]|0;
   _ary_subseq($agg$result,$58,$59,$60,$61);
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_576($agg$result);
 STACKTOP = sp;return;
}
function _ary_subseq($agg$result,$mrb,$a,$beg,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $a = $a|0;
 $beg = $beg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $a;
 $2 = $beg;
 $3 = $len;
 $4 = $0;
 $5 = $1;
 _ary_make_shared($4,$5);
 $6 = $0;
 $7 = $0;
 $8 = ((($7)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mrb_obj_alloc($6,14,$9)|0);
 $b = $10;
 $11 = $1;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = (($13) + ($14<<3)|0);
 $16 = $b;
 $17 = ((($16)) + 20|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = $b;
 $20 = ((($19)) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $b;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = $23;
 $26 = $b;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$28>>2] = $30;
 $31 = $b;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 11;
 $34 = $33 | 256;
 $35 = HEAP32[$31>>2]|0;
 $36 = $34 & 2097151;
 $37 = $36 << 11;
 $38 = $35 & 2047;
 $39 = $38 | $37;
 HEAP32[$31>>2] = $39;
 $40 = $b;
 _mrb_obj_value_565($agg$result,$40);
 STACKTOP = sp;return;
}
function _aget_index($mrb,$index) {
 $mrb = $mrb|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $argc = 0, $argv = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $i = sp + 20|0;
 $argc = sp + 16|0;
 $argv = sp + 12|0;
 $1 = $mrb;
 $2 = ((($index)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = HEAP32[$index>>2]|0;
  $0 = $5;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $6 = ((($index)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(6);
 if ($8) {
  $9 = +HEAPF32[$index>>2];
  $10 = (~~(($9)));
  $0 = $10;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $11 = $1;
  HEAP32[$vararg_buffer>>2] = $i;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $argv;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $argc;
  (_mrb_get_args($11,64346,$vararg_buffer)|0);
  $12 = HEAP32[$i>>2]|0;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _mrb_ary_aset($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $self$byval_copy = 0, $self$byval_copy10 = 0, $self$byval_copy3 = 0, $self$byval_copy6 = 0, $v1 = 0, $v1$byval_copy = 0, $v1$byval_copy5 = 0, $v1$byval_copy8 = 0, $v2 = 0, $v2$byval_copy = 0, $v2$byval_copy4 = 0;
 var $v2$byval_copy7 = 0, $v2$byval_copy9 = 0, $v3 = 0, $v3$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v3$byval_copy = sp + 160|0;
 $self$byval_copy10 = sp + 152|0;
 $v2$byval_copy9 = sp + 144|0;
 $v1$byval_copy8 = sp + 136|0;
 $v2$byval_copy7 = sp + 128|0;
 $self$byval_copy6 = sp + 120|0;
 $v1$byval_copy5 = sp + 112|0;
 $v2$byval_copy4 = sp + 104|0;
 $self$byval_copy3 = sp + 96|0;
 $v2$byval_copy = sp + 88|0;
 $self$byval_copy = sp + 80|0;
 $v1$byval_copy = sp + 72|0;
 $vararg_buffer = sp;
 $v1 = sp + 56|0;
 $v2 = sp + 48|0;
 $v3 = sp + 40|0;
 $i = sp + 36|0;
 $len = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $v1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $v2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $v3;
 $4 = (_mrb_get_args($3,64353,$vararg_buffer)|0);
 $5 = ($4|0)==(2);
 if (!($5)) {
  $22 = $0;
  $23 = $0;
  ;HEAP32[$v1$byval_copy8>>2]=HEAP32[$v1>>2]|0;HEAP32[$v1$byval_copy8+4>>2]=HEAP32[$v1+4>>2]|0;
  $24 = (_aget_index($23,$v1$byval_copy8)|0);
  $25 = $0;
  ;HEAP32[$v2$byval_copy9>>2]=HEAP32[$v2>>2]|0;HEAP32[$v2$byval_copy9+4>>2]=HEAP32[$v2+4>>2]|0;
  $26 = (_aget_index($25,$v2$byval_copy9)|0);
  ;HEAP32[$self$byval_copy10>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy10+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$v3$byval_copy>>2]=HEAP32[$v3>>2]|0;HEAP32[$v3$byval_copy+4>>2]=HEAP32[$v3+4>>2]|0;
  _mrb_ary_splice($2,$22,$self$byval_copy10,$24,$26,$v3$byval_copy);
  ;HEAP32[$agg$result>>2]=HEAP32[$v3>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v3+4>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = ((($v1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 17:  {
  $8 = $0;
  $9 = HEAP32[$self>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  ;HEAP32[$v1$byval_copy>>2]=HEAP32[$v1>>2]|0;HEAP32[$v1$byval_copy+4>>2]=HEAP32[$v1+4>>2]|0;
  $12 = (_mrb_range_beg_len($8,$v1$byval_copy,$i,$len,$11)|0);
  $13 = ($12<<24>>24)!=(0);
  if ($13) {
   $14 = $0;
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[$len>>2]|0;
   ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
   ;HEAP32[$v2$byval_copy>>2]=HEAP32[$v2>>2]|0;HEAP32[$v2$byval_copy+4>>2]=HEAP32[$v2+4>>2]|0;
   _mrb_ary_splice($1,$14,$self$byval_copy,$15,$16,$v2$byval_copy);
  }
  break;
 }
 case 3:  {
  $17 = $0;
  $18 = HEAP32[$v1>>2]|0;
  ;HEAP32[$self$byval_copy3>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy3+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$v2$byval_copy4>>2]=HEAP32[$v2>>2]|0;HEAP32[$v2$byval_copy4+4>>2]=HEAP32[$v2+4>>2]|0;
  _mrb_ary_set($17,$self$byval_copy3,$18,$v2$byval_copy4);
  break;
 }
 default: {
  $19 = $0;
  $20 = $0;
  ;HEAP32[$v1$byval_copy5>>2]=HEAP32[$v1>>2]|0;HEAP32[$v1$byval_copy5+4>>2]=HEAP32[$v1+4>>2]|0;
  $21 = (_aget_index($20,$v1$byval_copy5)|0);
  ;HEAP32[$self$byval_copy6>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy6+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$v2$byval_copy7>>2]=HEAP32[$v2>>2]|0;HEAP32[$v2$byval_copy7+4>>2]=HEAP32[$v2+4>>2]|0;
  _mrb_ary_set($19,$self$byval_copy6,$21,$v2$byval_copy7);
 }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$v2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v2+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_concat_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $blen = 0, $ptr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ptr = sp + 12|0;
 $blen = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ptr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $blen;
 (_mrb_get_args($1,64317,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$self>>2]|0;
 $4 = HEAP32[$ptr>>2]|0;
 $5 = HEAP32[$blen>>2]|0;
 _ary_concat($2,$3,$4,$5);
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_delete_at($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $index = 0, $len = 0, $ptr = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $index = sp + 24|0;
 $val = sp + 16|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $index;
 (_mrb_get_args($2,64319,$vararg_buffer)|0);
 $3 = HEAP32[$index>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $a;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$index>>2]|0;
  $9 = (($8) + ($7))|0;
  HEAP32[$index>>2] = $9;
 }
 $10 = HEAP32[$index>>2]|0;
 $11 = ($10|0)<(0);
 if (!($11)) {
  $12 = $a;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$index>>2]|0;
  $16 = ($14|0)<=($15|0);
  if (!($16)) {
   $17 = $0;
   $18 = $a;
   _ary_modify($17,$18);
   $19 = HEAP32[$index>>2]|0;
   $20 = $a;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($19<<3)|0);
   ;HEAP32[$val>>2]=HEAP32[$23>>2]|0;HEAP32[$val+4>>2]=HEAP32[$23+4>>2]|0;
   $24 = $a;
   $25 = ((($24)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$index>>2]|0;
   $28 = (($26) + ($27<<3)|0);
   $ptr = $28;
   $29 = $a;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$index>>2]|0;
   $33 = (($31) - ($32))|0;
   $len = $33;
   while(1) {
    $34 = $len;
    $35 = (($34) + -1)|0;
    $len = $35;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     break;
    }
    $37 = $ptr;
    $38 = $ptr;
    $39 = ((($38)) + 8|0);
    ;HEAP32[$37>>2]=HEAP32[$39>>2]|0;HEAP32[$37+4>>2]=HEAP32[$39+4>>2]|0;
    $40 = $ptr;
    $41 = ((($40)) + 8|0);
    $ptr = $41;
   }
   $42 = $a;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + -1)|0;
   HEAP32[$43>>2] = $45;
   $46 = $0;
   $47 = $a;
   _ary_shrink_capa($46,$47);
   ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _mrb_nil_value_576($agg$result);
 STACKTOP = sp;return;
}
function _mrb_ary_empty_p($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = $5&1;
 $7 = $6&255;
 _mrb_bool_value_618($agg$result,$7);
 STACKTOP = sp;return;
}
function _mrb_bool_value_618($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_first($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $size = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $size = sp + 4|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $size;
 $3 = (_mrb_get_args($2,64388,$vararg_buffer)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $a;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = $a;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   ;HEAP32[$agg$result>>2]=HEAP32[$11>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$11+4>>2]|0;
   STACKTOP = sp;return;
  } else {
   _mrb_nil_value_576($agg$result);
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[$size>>2]|0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = $0;
  $15 = $0;
  $16 = (_mrb_class_get($15,68855)|0);
  _mrb_raise($14,$16,64391);
  // unreachable;
 }
 $17 = HEAP32[$size>>2]|0;
 $18 = $a;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)>($20|0);
 if ($21) {
  $22 = $a;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$size>>2] = $24;
 }
 $25 = $a;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 >>> 11;
 $28 = $27 & 256;
 $29 = ($28|0)!=(0);
 $30 = $0;
 if ($29) {
  $31 = $a;
  $32 = HEAP32[$size>>2]|0;
  _ary_subseq($agg$result,$30,$31,0,$32);
  STACKTOP = sp;return;
 } else {
  $33 = HEAP32[$size>>2]|0;
  $34 = $a;
  $35 = ((($34)) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  _mrb_ary_new_from_values($agg$result,$30,$33,$36);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_index_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $obj = 0;
 var $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $obj = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[$self>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $0;
  $8 = $i;
  $9 = HEAP32[$self>>2]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  $13 = (_mrb_equal($7,$$byval_copy,$obj$byval_copy)|0);
  $14 = ($13<<24>>24)!=(0);
  $15 = $i;
  if ($14) {
   label = 4;
   break;
  }
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 4) {
  _mrb_fixnum_value_593($agg$result,$15);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  _mrb_nil_value_576($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_replace_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $other = 0, $other$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $other$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $other = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $other;
 (_mrb_get_args($1,64417,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$other$byval_copy>>2]=HEAP32[$other>>2]|0;HEAP32[$other$byval_copy+4>>2]=HEAP32[$other+4>>2]|0;
 _mrb_ary_replace($2,$self$byval_copy,$other$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_join_m($agg$result,$mrb,$ary) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary = $ary|0;
 var $0 = 0, $1 = 0, $2 = 0, $ary$byval_copy = 0, $sep = 0, $sep$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sep$byval_copy = sp + 32|0;
 $ary$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $sep = sp + 8|0;
 $0 = $mrb;
 _mrb_nil_value_576($sep);
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $sep;
 (_mrb_get_args($1,64424,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$sep$byval_copy>>2]=HEAP32[$sep>>2]|0;HEAP32[$sep$byval_copy+4>>2]=HEAP32[$sep+4>>2]|0;
 _mrb_ary_join($agg$result,$2,$ary$byval_copy,$sep$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_ary_last($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $or$cond = 0, $size = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $size = sp + 4|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $size;
 $3 = (_mrb_get_args($2,64388,$vararg_buffer)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $a;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = $a;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) - 1)|0;
   $13 = $a;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($12<<3)|0);
   ;HEAP32[$agg$result>>2]=HEAP32[$16>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$16+4>>2]|0;
   STACKTOP = sp;return;
  } else {
   _mrb_nil_value_576($agg$result);
   STACKTOP = sp;return;
  }
 }
 $17 = HEAP32[$size>>2]|0;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = $0;
  $20 = $0;
  $21 = (_mrb_class_get($20,68855)|0);
  _mrb_raise($19,$21,64391);
  // unreachable;
 }
 $22 = HEAP32[$size>>2]|0;
 $23 = $a;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22|0)>($25|0);
 if ($26) {
  $27 = $a;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$size>>2] = $29;
 }
 $30 = $a;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 11;
 $33 = $32 & 256;
 $34 = ($33|0)!=(0);
 $35 = HEAP32[$size>>2]|0;
 $36 = ($35|0)>(4);
 $or$cond = $34 | $36;
 $37 = $0;
 if ($or$cond) {
  $38 = $a;
  $39 = $a;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$size>>2]|0;
  $43 = (($41) - ($42))|0;
  $44 = HEAP32[$size>>2]|0;
  _ary_subseq($agg$result,$37,$38,$43,$44);
  STACKTOP = sp;return;
 } else {
  $45 = HEAP32[$size>>2]|0;
  $46 = $a;
  $47 = ((($46)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $a;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($48) + ($51<<3)|0);
  $53 = HEAP32[$size>>2]|0;
  $54 = (0 - ($53))|0;
  $55 = (($52) + ($54<<3)|0);
  _mrb_ary_new_from_values($agg$result,$37,$45,$55);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_size($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _mrb_fixnum_value_593($agg$result,$4);
 STACKTOP = sp;return;
}
function _mrb_ary_reverse($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, $e = 0, $p1 = 0, $p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 $3 = $a;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_ary_new_capa($2,$5)|0);
 $b = $6;
 $7 = $a;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  $39 = $b;
  _mrb_obj_value_565($agg$result,$39);
  STACKTOP = sp;return;
 }
 $11 = $a;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $p1 = $13;
 $14 = $p1;
 $15 = $a;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17<<3)|0);
 $e = $18;
 $19 = $b;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) + ($24<<3)|0);
 $26 = ((($25)) + -8|0);
 $p2 = $26;
 while(1) {
  $27 = $p1;
  $28 = $e;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $p2;
  $31 = ((($30)) + -8|0);
  $p2 = $31;
  $32 = $p1;
  $33 = ((($32)) + 8|0);
  $p1 = $33;
  ;HEAP32[$30>>2]=HEAP32[$32>>2]|0;HEAP32[$30+4>>2]=HEAP32[$32+4>>2]|0;
 }
 $34 = $a;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $b;
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = $b;
 _mrb_obj_value_565($agg$result,$39);
 STACKTOP = sp;return;
}
function _mrb_ary_reverse_bang($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $p1 = 0, $p2 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $a;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(1);
 if (!($5)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $a;
 _ary_modify($6,$7);
 $8 = $a;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $p1 = $10;
 $11 = $a;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + ($16<<3)|0);
 $18 = ((($17)) + -8|0);
 $p2 = $18;
 while(1) {
  $19 = $p1;
  $20 = $p2;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $p1;
  ;HEAP32[$tmp>>2]=HEAP32[$22>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$22+4>>2]|0;
  $23 = $p1;
  $24 = ((($23)) + 8|0);
  $p1 = $24;
  $25 = $p2;
  ;HEAP32[$23>>2]=HEAP32[$25>>2]|0;HEAP32[$23+4>>2]=HEAP32[$25+4>>2]|0;
  $26 = $p2;
  $27 = ((($26)) + -8|0);
  $p2 = $27;
  ;HEAP32[$26>>2]=HEAP32[$tmp>>2]|0;HEAP32[$26+4>>2]=HEAP32[$tmp+4>>2]|0;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_rindex_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $obj = 0, $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $obj = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = HEAP32[$self>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - 1)|0;
 $i = $5;
 while(1) {
  $6 = $i;
  $7 = ($6|0)>=(0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $0;
  $9 = $i;
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  $14 = (_mrb_equal($8,$$byval_copy,$obj$byval_copy)|0);
  $15 = ($14<<24>>24)!=(0);
  $16 = $i;
  if ($15) {
   label = 4;
   break;
  }
  $17 = (($16) + -1)|0;
  $i = $17;
 }
 if ((label|0) == 4) {
  _mrb_fixnum_value_593($agg$result,$16);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  _mrb_nil_value_576($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_ary_unshift_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $a = 0, $len = 0, $vals = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vals = sp + 12|0;
 $len = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $a = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $vals;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 (_mrb_get_args($2,68114,$vararg_buffer)|0);
 $3 = $a;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 256;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $a;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = $a;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $a;
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $15;
   $22 = $20;
   $23 = (($21) - ($22))|0;
   $24 = (($23|0) / 8)&-1;
   $25 = HEAP32[$len>>2]|0;
   $26 = ($24|0)>=($25|0);
   if ($26) {
    $27 = HEAP32[$len>>2]|0;
    $28 = $a;
    $29 = ((($28)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (0 - ($27))|0;
    $32 = (($30) + ($31<<3)|0);
    HEAP32[$29>>2] = $32;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $33 = $0;
  $34 = $a;
  _ary_modify($33,$34);
  $35 = HEAP32[$len>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
   STACKTOP = sp;return;
  }
  $37 = $a;
  $38 = ((($37)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $a;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$len>>2]|0;
  $44 = (($42) + ($43))|0;
  $45 = ($39|0)<($44|0);
  if ($45) {
   $46 = $0;
   $47 = $a;
   $48 = $a;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$len>>2]|0;
   $52 = (($50) + ($51))|0;
   _ary_expand_capa($46,$47,$52);
  }
  $53 = $a;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$len>>2]|0;
  $57 = (($55) + ($56<<3)|0);
  $58 = $a;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $a;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  _value_move_587($57,$60,$63);
 }
 $64 = $a;
 $65 = ((($64)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$vals>>2]|0;
 $68 = HEAP32[$len>>2]|0;
 _array_copy($66,$67,$68);
 $69 = HEAP32[$len>>2]|0;
 $70 = $a;
 $71 = ((($70)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($69))|0;
 HEAP32[$71>>2] = $73;
 while(1) {
  $74 = HEAP32[$len>>2]|0;
  $75 = (($74) + -1)|0;
  HEAP32[$len>>2] = $75;
  $76 = ($74|0)!=(0);
  if (!($76)) {
   break;
  }
  $77 = HEAP32[$len>>2]|0;
  $78 = HEAP32[$vals>>2]|0;
  $79 = (($78) + ($77<<3)|0);
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81>>>0)<(8);
  if ($82) {
   continue;
  }
  $83 = $0;
  $84 = $a;
  $85 = HEAP32[$len>>2]|0;
  $86 = HEAP32[$vals>>2]|0;
  $87 = (($86) + ($85<<3)|0);
  $88 = HEAP32[$87>>2]|0;
  _mrb_field_write_barrier($83,$84,$88);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_eq($agg$result,$mrb,$ary1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary1 = $ary1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ary1$byval_copy = 0, $ary2 = 0, $ary2$byval_copy = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ary2$byval_copy = sp + 32|0;
 $ary1$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $ary2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ary2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$ary1$byval_copy>>2]=HEAP32[$ary1>>2]|0;HEAP32[$ary1$byval_copy+4>>2]=HEAP32[$ary1+4>>2]|0;
 ;HEAP32[$ary2$byval_copy>>2]=HEAP32[$ary2>>2]|0;HEAP32[$ary2$byval_copy+4>>2]=HEAP32[$ary2+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$ary1$byval_copy,$ary2$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  _mrb_true_value_641($agg$result);
  STACKTOP = sp;return;
 }
 $5 = ((($ary2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(14);
 if (!($7)) {
  _mrb_false_value_642($agg$result);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$ary1>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$ary2>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  _mrb_false_value_642($agg$result);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$ary2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary2+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_true_value_641($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_false_value_642($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_ary_cmp($agg$result,$mrb,$ary1) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $ary1 = $ary1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ary1$byval_copy = 0, $ary2 = 0, $ary2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ary2$byval_copy = sp + 32|0;
 $ary1$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $ary2 = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $ary2;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$ary1$byval_copy>>2]=HEAP32[$ary1>>2]|0;HEAP32[$ary1$byval_copy+4>>2]=HEAP32[$ary1+4>>2]|0;
 ;HEAP32[$ary2$byval_copy>>2]=HEAP32[$ary2>>2]|0;HEAP32[$ary2$byval_copy+4>>2]=HEAP32[$ary2+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$ary1$byval_copy,$ary2$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  _mrb_fixnum_value_593($agg$result,0);
  STACKTOP = sp;return;
 }
 $5 = ((($ary2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(14);
 if ($7) {
  ;HEAP32[$agg$result>>2]=HEAP32[$ary2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary2+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_576($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_value_647($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _exc_output_backtrace($mrb,$exc,$func,$stream) {
 $mrb = $mrb|0;
 $exc = $exc|0;
 $func = $func|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $lastpc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lastpc = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $exc;
 $2 = $func;
 $3 = $stream;
 $6 = $0;
 $7 = $1;
 $8 = $0;
 $9 = (_mrb_intern_static($8,67980,6)|0);
 _mrb_obj_iv_get($4,$6,$7,$9);
 ;HEAP32[$lastpc>>2]=HEAP32[$4>>2]|0;HEAP32[$lastpc+4>>2]=HEAP32[$4+4>>2]|0;
 $10 = ((($lastpc)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$lastpc>>2]|0;
  $14 = ($13|0)!=(0);
  if ($14) {
   label = 4;
  } else {
   $code = 0;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[$lastpc>>2]|0;
  $code = $15;
 }
 $16 = $0;
 $17 = $0;
 $18 = $1;
 $19 = $0;
 $20 = (_mrb_intern_static($19,67505,5)|0);
 _mrb_obj_iv_get($5,$17,$18,$20);
 $21 = HEAP32[$5>>2]|0;
 $22 = $code;
 $23 = $2;
 $24 = $3;
 _output_backtrace($16,$21,$22,$23,$24);
 STACKTOP = sp;return;
}
function _output_backtrace($mrb,$ciidx,$pc0,$func,$data) {
 $mrb = $mrb|0;
 $ciidx = $ciidx|0;
 $pc0 = $pc0|0;
 $func = $func|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0;
 var $i = 0, $irep = 0, $loc = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $loc = sp + 16|0;
 $0 = $mrb;
 $1 = $ciidx;
 $2 = $pc0;
 $3 = $func;
 $4 = $data;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / 48)&-1;
 $20 = ($5|0)>=($19|0);
 if ($20) {
  $1 = 10;
 }
 $21 = $1;
 $i = $21;
 while(1) {
  $22 = $i;
  $23 = ($22|0)>=(0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + (($24*48)|0)|0);
  $ci = $30;
  $31 = $ci;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $ci;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 >>> 11;
   $40 = $39 & 128;
   $41 = ($40|0)!=(0);
   if (!($41)) {
    $42 = $ci;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $irep = $46;
    $47 = $i;
    $48 = $0;
    $49 = ((($48)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + (($47*48)|0)|0);
    $54 = ((($53)) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)!=(0|0);
    $57 = $i;
    do {
     if ($56) {
      $58 = $0;
      $59 = ((($58)) + 12|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($60)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (($62) + (($57*48)|0)|0);
      $64 = ((($63)) + 32|0);
      $65 = HEAP32[$64>>2]|0;
      $pc = $65;
     } else {
      $66 = (($57) + 1)|0;
      $67 = $1;
      $68 = ($66|0)<=($67|0);
      if ($68) {
       $69 = $i;
       $70 = (($69) + 1)|0;
       $71 = $0;
       $72 = ((($71)) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ((($73)) + 20|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($75) + (($70*48)|0)|0);
       $77 = ((($76)) + 28|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($78)) + -4|0);
       $pc = $79;
       break;
      } else {
       $80 = $2;
       $pc = $80;
       break;
      }
     }
    } while(0);
    $81 = $irep;
    $82 = $pc;
    $83 = $irep;
    $84 = ((($83)) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $82;
    $87 = $85;
    $88 = (($86) - ($87))|0;
    $89 = (($88|0) / 4)&-1;
    $90 = (_mrb_debug_get_filename($81,$89)|0);
    $91 = ((($loc)) + 8|0);
    HEAP32[$91>>2] = $90;
    $92 = $irep;
    $93 = $pc;
    $94 = $irep;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93;
    $98 = $96;
    $99 = (($97) - ($98))|0;
    $100 = (($99|0) / 4)&-1;
    $101 = (_mrb_debug_get_line($92,$100)|0);
    $102 = ((($loc)) + 4|0);
    HEAP32[$102>>2] = $101;
    $103 = ((($loc)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(-1);
    if (!($105)) {
     $106 = $ci;
     $107 = ((($106)) + 44|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $ci;
     $110 = ((($109)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ((($111)) + 16|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($108|0)==($113|0);
     $115 = ((($loc)) + 16|0);
     if ($114) {
      HEAP32[$115>>2] = 72376;
     } else {
      HEAP32[$115>>2] = 64532;
     }
     $116 = ((($loc)) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)!=(0|0);
     if (!($118)) {
      $119 = ((($loc)) + 8|0);
      HEAP32[$119>>2] = 64534;
     }
     $120 = $0;
     $121 = $ci;
     $122 = HEAP32[$121>>2]|0;
     $123 = (_mrb_sym2name($120,$122)|0);
     $124 = ((($loc)) + 12|0);
     HEAP32[$124>>2] = $123;
     $125 = $0;
     $126 = $ci;
     $127 = ((($126)) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($128)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (_mrb_class_name($125,$130)|0);
     $132 = ((($loc)) + 20|0);
     HEAP32[$132>>2] = $131;
     $133 = $i;
     HEAP32[$loc>>2] = $133;
     $134 = $3;
     $135 = $0;
     $136 = $4;
     FUNCTION_TABLE_viii[$134 & 511]($135,$loc,$136);
    }
   }
  }
  $137 = $i;
  $138 = (($137) + -1)|0;
  $i = $138;
 }
 STACKTOP = sp;return;
}
function _mrb_exc_backtrace($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ary = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ary = sp + 8|0;
 $1 = sp;
 $0 = $mrb;
 $2 = $0;
 _mrb_ary_new($1,$2);
 ;HEAP32[$ary>>2]=HEAP32[$1>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$1+4>>2]|0;
 $3 = $0;
 $4 = HEAP32[$self>>2]|0;
 $5 = HEAP32[$ary>>2]|0;
 _exc_output_backtrace($3,$4,232,$5);
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _get_backtrace_i($mrb,$loc,$data) {
 $mrb = $mrb|0;
 $loc = $loc|0;
 $data = $data|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $ary = 0, $ary$byval_copy = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy1 = 0, $str$byval_copy3 = 0, $str$byval_copy4 = 0, $str$byval_copy5 = 0;
 var $str$byval_copy6 = 0, $str$byval_copy7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy7 = sp + 184|0;
 $ary$byval_copy = sp + 176|0;
 $str$byval_copy6 = sp + 168|0;
 $str$byval_copy5 = sp + 160|0;
 $str$byval_copy4 = sp + 152|0;
 $str$byval_copy3 = sp + 144|0;
 $$byval_copy2 = sp + 136|0;
 $str$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 120|0;
 $str$byval_copy = sp + 112|0;
 $ary = sp + 88|0;
 $str = sp + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 56|0;
 $5 = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $0 = $mrb;
 $1 = $loc;
 $2 = $data;
 $12 = $0;
 $13 = (_mrb_gc_arena_save($12)|0);
 $ai = $13;
 $14 = $2;
 _mrb_obj_value_647($3,$14);
 ;HEAP32[$ary>>2]=HEAP32[$3>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$3+4>>2]|0;
 $15 = $0;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 _mrb_str_new_cstr($4,$15,$18);
 ;HEAP32[$str>>2]=HEAP32[$4>>2]|0;HEAP32[$str+4>>2]=HEAP32[$4+4>>2]|0;
 $19 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($5,$19,$str$byval_copy,67713,1);
 $20 = $0;
 $21 = $0;
 $22 = $1;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 _mrb_fixnum_value_660($7,$24);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 _mrb_fixnum_to_str($6,$21,$$byval_copy,10);
 ;HEAP32[$str$byval_copy1>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy1+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;
 _mrb_str_concat($20,$str$byval_copy1,$$byval_copy2);
 $25 = $1;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $46 = $0;
  ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_ary_push($46,$ary$byval_copy,$str$byval_copy7);
  $47 = $0;
  $48 = $ai;
  _mrb_gc_arena_restore($47,$48);
  STACKTOP = sp;return;
 }
 $29 = $0;
 ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($8,$29,$str$byval_copy3,64544,4);
 $30 = $1;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $0;
  $35 = $1;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat_cstr($9,$34,$str$byval_copy4,$37);
  $38 = $0;
  $39 = $1;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat_cstr($10,$38,$str$byval_copy5,$41);
 }
 $42 = $0;
 $43 = $1;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat_cstr($11,$42,$str$byval_copy6,$45);
 $46 = $0;
 ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
 ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_ary_push($46,$ary$byval_copy,$str$byval_copy7);
 $47 = $0;
 $48 = $ai;
 _mrb_gc_arena_restore($47,$48);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_660($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _kh_alloc_mt($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0;
 var $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $sz = $3;
 $len = 8;
 $4 = $0;
 $5 = $sz;
 $6 = $5;
 $7 = (($6>>>0) / 4)&-1;
 $8 = $len;
 $9 = $sz;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10))|0;
 $12 = (_mrb_malloc($4,$11)|0);
 $p = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = $p;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 HEAP32[$19>>2] = $17;
 $20 = $p;
 $21 = $sz;
 $22 = $21<<2;
 $23 = (($20) + ($22)|0);
 $24 = $1;
 $25 = ((($24)) + 20|0);
 HEAP32[$25>>2] = $23;
 $26 = $p;
 $27 = $len;
 $28 = $sz;
 $29 = Math_imul($27, $28)|0;
 $30 = (($26) + ($29)|0);
 $31 = $1;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $sz;
 $37 = (($36>>>0) / 4)&-1;
 _kh_fill_flags_662($35,-86,$37);
 STACKTOP = sp;return;
}
function _kh_fill_flags_662($p,$c,$len) {
 $p = $p|0;
 $c = $c|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)|0;
  $2 = $4;
  $5 = ($3>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
  HEAP8[$7>>0] = $6;
 }
 STACKTOP = sp;return;
}
function _kh_init_mt_size($mrb,$size) {
 $mrb = $mrb|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $0;
 $3 = (_mrb_calloc($2,1,24)|0);
 $h = $3;
 $4 = $1;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $1 = 8;
 }
 $6 = $1;
 $7 = (($6) + -1)|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 1;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 2;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 4;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = $1;
 $27 = $26 | $25;
 $1 = $27;
 $28 = $1;
 $29 = (($28) + 1)|0;
 $1 = $29;
 $30 = $1;
 $31 = $h;
 HEAP32[$31>>2] = $30;
 $32 = $0;
 $33 = $h;
 _kh_alloc_mt($32,$33);
 $34 = $h;
 STACKTOP = sp;return ($34|0);
}
function _kh_init_mt($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_kh_init_mt_size($1,8)|0);
 STACKTOP = sp;return ($2|0);
}
function _kh_destroy_mt($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _mrb_free($4,$7);
 $8 = $0;
 $9 = $1;
 _mrb_free($8,$9);
 STACKTOP = sp;return;
}
function _kh_get_mt($mrb,$h,$key) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $h;
 $3 = $key;
 $4 = $3;
 $5 = $3;
 $6 = $5 << 2;
 $7 = $4 ^ $6;
 $8 = $3;
 $9 = $8 >>> 2;
 $10 = $7 ^ $9;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = $10 & $13;
 $k = $14;
 $step = 0;
 while(1) {
  $15 = $k;
  $16 = (($15>>>0) / 4)&-1;
  $17 = $2;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $k;
  $24 = (($23>>>0) % 4)&-1;
  $25 = (64549 + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $22 & $27;
  $29 = ($28|0)!=(0);
  $30 = $29 ^ 1;
  if (!($30)) {
   label = 7;
   break;
  }
  $31 = $k;
  $32 = (($31>>>0) / 4)&-1;
  $33 = $2;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $k;
  $40 = (($39>>>0) % 4)&-1;
  $41 = (64553 + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $38 & $43;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = $k;
   $47 = $2;
   $48 = ((($47)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $3;
   $53 = ($51|0)==($52|0);
   if ($53) {
    label = 5;
    break;
   }
  }
  $55 = $k;
  $56 = $step;
  $57 = (($56) + 1)|0;
  $step = $57;
  $58 = (($55) + ($57))|0;
  $59 = $2;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) - 1)|0;
  $62 = $58 & $61;
  $k = $62;
 }
 if ((label|0) == 5) {
  $54 = $k;
  $0 = $54;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 7) {
  $63 = $2;
  $64 = HEAP32[$63>>2]|0;
  $0 = $64;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _kh_resize_mt($mrb,$h,$new_n_buckets) {
 $mrb = $mrb|0;
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$new_n_buckets = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $hh = 0, $i = 0;
 var $k = 0, $old_ed_flags = 0, $old_keys = 0, $old_n_buckets = 0, $old_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hh = sp + 24|0;
 $0 = $mrb;
 $1 = $h;
 $2 = $new_n_buckets;
 $3 = $2;
 $4 = ($3>>>0)<(8);
 $$new_n_buckets = $4 ? 8 : $new_n_buckets;
 $2 = $$new_n_buckets;
 $5 = $2;
 $6 = (($5) + -1)|0;
 $2 = $6;
 $7 = $2;
 $8 = $7 >>> 1;
 $9 = $2;
 $10 = $9 | $8;
 $2 = $10;
 $11 = $2;
 $12 = $11 >>> 2;
 $13 = $2;
 $14 = $13 | $12;
 $2 = $14;
 $15 = $2;
 $16 = $15 >>> 4;
 $17 = $2;
 $18 = $17 | $16;
 $2 = $18;
 $19 = $2;
 $20 = $19 >>> 8;
 $21 = $2;
 $22 = $21 | $20;
 $2 = $22;
 $23 = $2;
 $24 = $23 >>> 16;
 $25 = $2;
 $26 = $25 | $24;
 $2 = $26;
 $27 = $2;
 $28 = (($27) + 1)|0;
 $2 = $28;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $old_ed_flags = $31;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $old_keys = $34;
 $35 = $1;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $old_vals = $37;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $old_n_buckets = $39;
 $40 = $2;
 HEAP32[$hh>>2] = $40;
 $41 = $0;
 _kh_alloc_mt($41,$hh);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $old_n_buckets;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  $46 = (($45>>>0) / 4)&-1;
  $47 = $old_ed_flags;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $i;
  $52 = (($51>>>0) % 4)&-1;
  $53 = (64557 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $50 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $0;
   $59 = $i;
   $60 = $old_keys;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_kh_put_mt($58,$hh,$62,0)|0);
   $k = $63;
   $64 = $i;
   $65 = $old_vals;
   $66 = (($65) + ($64<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $k;
   $69 = ((($hh)) + 20|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($68<<2)|0);
   HEAP32[$71>>2] = $67;
  }
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = $1;
 ;HEAP32[$74>>2]=HEAP32[$hh>>2]|0;HEAP32[$74+4>>2]=HEAP32[$hh+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$hh+8>>2]|0;HEAP32[$74+12>>2]=HEAP32[$hh+12>>2]|0;HEAP32[$74+16>>2]=HEAP32[$hh+16>>2]|0;HEAP32[$74+20>>2]=HEAP32[$hh+20>>2]|0;
 $75 = $0;
 $76 = $old_keys;
 _mrb_free($75,$76);
 STACKTOP = sp;return;
}
function _kh_put_mt($mrb,$h,$key,$ret) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $del_k = 0, $k = 0;
 var $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $h;
 $3 = $key;
 $4 = $ret;
 $step = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 2;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 1;
 $14 = $10 | $13;
 $15 = ($7>>>0)>=($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = $2;
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<1;
  _kh_resize_mt($16,$17,$20);
 }
 $21 = $3;
 $22 = $3;
 $23 = $22 << 2;
 $24 = $21 ^ $23;
 $25 = $3;
 $26 = $25 >>> 2;
 $27 = $24 ^ $26;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1)|0;
 $31 = $27 & $30;
 $k = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $del_k = $33;
 while(1) {
  $34 = $k;
  $35 = (($34>>>0) / 4)&-1;
  $36 = $2;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $k;
  $43 = (($42>>>0) % 4)&-1;
  $44 = (64549 + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $41 & $46;
  $48 = ($47|0)!=(0);
  $49 = $48 ^ 1;
  if (!($49)) {
   break;
  }
  $50 = $k;
  $51 = (($50>>>0) / 4)&-1;
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $k;
  $59 = (($58>>>0) % 4)&-1;
  $60 = (64553 + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $57 & $62;
  $64 = ($63|0)!=(0);
  if ($64) {
   $77 = $del_k;
   $78 = $2;
   $79 = HEAP32[$78>>2]|0;
   $80 = ($77|0)==($79|0);
   if ($80) {
    $81 = $k;
    $del_k = $81;
   }
  } else {
   $65 = $k;
   $66 = $2;
   $67 = ((($66)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + ($65<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $3;
   $72 = ($70|0)==($71|0);
   if ($72) {
    label = 7;
    break;
   }
  }
  $82 = $k;
  $83 = $step;
  $84 = (($83) + 1)|0;
  $step = $84;
  $85 = (($82) + ($84))|0;
  $86 = $2;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) - 1)|0;
  $89 = $85 & $88;
  $k = $89;
 }
 if ((label|0) == 7) {
  $73 = $4;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $75 = $4;
   HEAP32[$75>>2] = 0;
  }
  $76 = $k;
  $0 = $76;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $90 = $del_k;
 $91 = $2;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($90|0)!=($92|0);
 $94 = $3;
 if ($93) {
  $95 = $del_k;
  $96 = $2;
  $97 = ((($96)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95<<2)|0);
  HEAP32[$99>>2] = $94;
  $100 = $del_k;
  $101 = (($100>>>0) % 4)&-1;
  $102 = (64553 + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 ^ -1;
  $106 = $del_k;
  $107 = (($106>>>0) / 4)&-1;
  $108 = $2;
  $109 = ((($108)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + ($107)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = $113 & $105;
  $115 = $114&255;
  HEAP8[$111>>0] = $115;
  $116 = $2;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 1)|0;
  HEAP32[$117>>2] = $119;
  $120 = $4;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $122 = $4;
   HEAP32[$122>>2] = 2;
  }
  $123 = $del_k;
  $0 = $123;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 } else {
  $124 = $k;
  $125 = $2;
  $126 = ((($125)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($124<<2)|0);
  HEAP32[$128>>2] = $94;
  $129 = $k;
  $130 = (($129>>>0) % 4)&-1;
  $131 = (64549 + ($130)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = $133 ^ -1;
  $135 = $k;
  $136 = (($135>>>0) / 4)&-1;
  $137 = $2;
  $138 = ((($137)) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + ($136)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = $142 & $134;
  $144 = $143&255;
  HEAP8[$140>>0] = $144;
  $145 = $2;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 1)|0;
  HEAP32[$146>>2] = $148;
  $149 = $2;
  $150 = ((($149)) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + 1)|0;
  HEAP32[$150>>2] = $152;
  $153 = $4;
  $154 = ($153|0)!=(0|0);
  if ($154) {
   $155 = $4;
   HEAP32[$155>>2] = 1;
  }
  $156 = $k;
  $0 = $156;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _kh_del_mt($mrb,$h,$x) {
 $mrb = $mrb|0;
 $h = $h|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $x;
 $3 = $2;
 $4 = (($3>>>0) % 4)&-1;
 $5 = (64553 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $2;
 $9 = (($8>>>0) / 4)&-1;
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | $7;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = $1;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _kh_copy_mt($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h2 = 0, $k = 0, $k2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $0;
 $3 = (_kh_init_mt($2)|0);
 $h2 = $3;
 $k = 0;
 while(1) {
  $4 = $k;
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)!=($6|0);
  if (!($7)) {
   break;
  }
  $8 = $k;
  $9 = (($8>>>0) / 4)&-1;
  $10 = $1;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $k;
  $17 = (($16>>>0) % 4)&-1;
  $18 = (64557 + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $15 & $20;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   $23 = $0;
   $24 = $h2;
   $25 = $k;
   $26 = $1;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($25<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_kh_put_mt($23,$24,$30,0)|0);
   $k2 = $31;
   $32 = $k;
   $33 = $1;
   $34 = ((($33)) + 20|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $k2;
   $39 = $h2;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   HEAP32[$42>>2] = $37;
  }
  $43 = $k;
  $44 = (($43) + 1)|0;
  $k = $44;
 }
 $45 = $h2;
 STACKTOP = sp;return ($45|0);
}
function _mrb_gc_mark_mt($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0;
 var $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $h = $4;
 $5 = $h;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $k = 0;
 while(1) {
  $7 = $k;
  $8 = $h;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $k;
  $12 = (($11>>>0) / 4)&-1;
  $13 = $h;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $k;
  $20 = (($19>>>0) % 4)&-1;
  $21 = (64557 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $18 & $23;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = $k;
   $27 = $h;
   $28 = ((($27)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $m = $31;
   $32 = $m;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = $0;
    $35 = $m;
    _mrb_gc_mark($34,$35);
   }
  }
  $36 = $k;
  $37 = (($36) + 1)|0;
  $k = $37;
 }
 STACKTOP = sp;return;
}
function _mrb_gc_mark_mt_size($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $c;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $h = $5;
 $6 = $h;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $h;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _mrb_gc_free_mt($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _kh_destroy_mt($2,$5);
 STACKTOP = sp;return;
}
function _mrb_class_outer_module($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $outer = sp + 8|0;
 $3 = sp;
 $1 = $mrb;
 $2 = $c;
 $4 = $1;
 $5 = $2;
 $6 = $1;
 $7 = (_mrb_intern_static($6,64561,9)|0);
 _mrb_obj_iv_get($3,$4,$5,$7);
 ;HEAP32[$outer>>2]=HEAP32[$3>>2]|0;HEAP32[$outer+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = ((($outer)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$outer>>2]|0;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $0 = 0;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $13 = HEAP32[$outer>>2]|0;
 $0 = $13;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _define_module($mrb,$name,$outer) {
 $mrb = $mrb|0;
 $name = $name|0;
 $outer = $outer|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $4 = sp;
 $1 = $mrb;
 $2 = $name;
 $3 = $outer;
 $5 = $1;
 $6 = $3;
 _mrb_obj_value_675($4,$6);
 $7 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 $8 = (_mrb_const_defined_at($5,$$byval_copy,$7)|0);
 $9 = ($8<<24>>24)!=(0);
 $10 = $1;
 if ($9) {
  $11 = $3;
  $12 = $2;
  $13 = (_module_from_sym($10,$11,$12)|0);
  $0 = $13;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $14 = (_mrb_module_new($10)|0);
  $m = $14;
  $15 = $1;
  $16 = $3;
  $17 = $m;
  $18 = $2;
  _setup_class($15,$16,$17,$18);
  $19 = $m;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _mrb_obj_value_675($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _module_from_sym($mrb,$klass,$id) {
 $mrb = $mrb|0;
 $klass = $klass|0;
 $id = $id|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c = 0, $c$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c$byval_copy = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $c = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $klass;
 $2 = $id;
 $4 = $0;
 $5 = $1;
 _mrb_obj_value_675($3,$5);
 $6 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_const_get($c,$4,$$byval_copy,$6);
 $7 = $0;
 ;HEAP32[$c$byval_copy>>2]=HEAP32[$c>>2]|0;HEAP32[$c$byval_copy+4>>2]=HEAP32[$c+4>>2]|0;
 _mrb_check_type($7,$c$byval_copy,10);
 $8 = HEAP32[$c>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _mrb_module_new($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_obj_alloc($1,10,$4)|0);
 $m = $5;
 $6 = $0;
 $7 = $m;
 _boot_initmod($6,$7);
 $8 = $m;
 STACKTOP = sp;return ($8|0);
}
function _boot_initmod($mrb,$mod) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $mod;
 $2 = $0;
 $3 = (_kh_init_mt($2)|0);
 $4 = $1;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _setup_class($mrb,$outer,$c,$id) {
 $mrb = $mrb|0;
 $outer = $outer|0;
 $c = $c|0;
 $id = $id|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $outer;
 $2 = $c;
 $3 = $id;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 _name_class($6,$7,$8);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $2;
 _mrb_obj_value_675($4,$12);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_obj_iv_set($9,$10,$11,$$byval_copy);
 $13 = $1;
 $14 = $0;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)!=($16|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $2;
 $20 = $0;
 $21 = (_mrb_intern_static($20,64561,9)|0);
 $22 = $1;
 _mrb_obj_value_675($5,$22);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;
 _mrb_obj_iv_set($18,$19,$21,$$byval_copy1);
 STACKTOP = sp;return;
}
function _name_class($mrb,$c,$name) {
 $mrb = $mrb|0;
 $c = $c|0;
 $name = $name|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $name;
 $4 = $0;
 $5 = $1;
 $6 = $0;
 $7 = (_mrb_intern_static($6,64571,11)|0);
 $8 = $2;
 _mrb_symbol_value_677($3,$8);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_obj_iv_set($4,$5,$7,$$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_symbol_value_677($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_define_module($mrb,$name) {
 $mrb = $mrb|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $0;
 $3 = $0;
 $4 = $1;
 $5 = (_mrb_intern_cstr($3,$4)|0);
 $6 = $0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_define_module($2,$5,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _mrb_vm_define_module($mrb,$outer,$id) {
 $mrb = $mrb|0;
 $outer = $outer|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $outer$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $outer$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $0;
 ;HEAP32[$outer$byval_copy>>2]=HEAP32[$outer>>2]|0;HEAP32[$outer$byval_copy+4>>2]=HEAP32[$outer+4>>2]|0;
 _check_if_class_or_module($2,$outer$byval_copy);
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$outer>>2]|0;
 $6 = (_define_module($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _check_if_class_or_module($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($obj)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 10: case 12: case 9:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $4 = $0;
  $5 = $0;
  $6 = (_mrb_class_get($5,68905)|0);
  $7 = $0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_inspect($1,$7,$obj$byval_copy);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$1>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$1+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$1+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$1+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$1+7>>0]|0;
  _mrb_raisef($4,$6,64583,$vararg_buffer);
  // unreachable;
 }
 }
}
function _mrb_class_get($mrb,$name) {
 $mrb = $mrb|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (_mrb_class_get_under($2,$5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _mrb_class_get_under($mrb,$outer,$name) {
 $mrb = $mrb|0;
 $outer = $outer|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $outer;
 $2 = $name;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $2;
 $7 = (_mrb_intern_cstr($5,$6)|0);
 $8 = (_class_from_sym($3,$4,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _class_from_sym($mrb,$klass,$id) {
 $mrb = $mrb|0;
 $klass = $klass|0;
 $id = $id|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c = 0, $c$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c$byval_copy = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $c = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $klass;
 $2 = $id;
 $4 = $0;
 $5 = $1;
 _mrb_obj_value_675($3,$5);
 $6 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_const_get($c,$4,$$byval_copy,$6);
 $7 = $0;
 ;HEAP32[$c$byval_copy>>2]=HEAP32[$c>>2]|0;HEAP32[$c$byval_copy+4>>2]=HEAP32[$c+4>>2]|0;
 _mrb_check_type($7,$c$byval_copy,9);
 $8 = HEAP32[$c>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _mrb_define_class_id($mrb,$name,$super) {
 $mrb = $mrb|0;
 $name = $name|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $0 = $mrb;
 $1 = $name;
 $2 = $super;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = $0;
  $7 = $0;
  $8 = $1;
  _mrb_sym2str($3,$7,$8);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$3+7>>0]|0;
  _mrb_warn($6,64608,$vararg_buffer);
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_define_class($9,$10,$11,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _define_class($mrb,$name,$super,$outer) {
 $mrb = $mrb|0;
 $name = $name|0;
 $super = $super|0;
 $outer = $outer|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer = sp;
 $5 = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $1 = $mrb;
 $2 = $name;
 $3 = $super;
 $4 = $outer;
 $9 = $1;
 $10 = $4;
 _mrb_obj_value_675($5,$10);
 $11 = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 $12 = (_mrb_const_defined_at($9,$$byval_copy,$11)|0);
 $13 = ($12<<24>>24)!=(0);
 $14 = $1;
 if (!($13)) {
  $53 = $3;
  $54 = (_mrb_class_new($14,$53)|0);
  $c = $54;
  $55 = $1;
  $56 = $4;
  $57 = $c;
  $58 = $2;
  _setup_class($55,$56,$57,$58);
  $59 = $c;
  $0 = $59;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 $15 = $4;
 $16 = $2;
 $17 = (_class_from_sym($14,$15,$16)|0);
 $c = $17;
 $18 = $c;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 & 524288;
 $22 = ($21|0)!=(0);
 L5: do {
  if ($22) {
   $23 = $c;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $c = $25;
   while(1) {
    $26 = $c;
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 >>> 11;
    $29 = $28 & 1048576;
    $30 = ($29|0)!=(0);
    $31 = $30 ^ 1;
    if (!($31)) {
     break L5;
    }
    $32 = $c;
    $33 = ((($32)) + 20|0);
    $34 = HEAP32[$33>>2]|0;
    $c = $34;
   }
  }
 } while(0);
 $35 = $3;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $c;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_mrb_class_real($39)|0);
  $41 = $3;
  $42 = ($40|0)!=($41|0);
  if ($42) {
   $43 = $1;
   $44 = $1;
   $45 = (_mrb_class_get($44,68905)|0);
   $46 = $1;
   $47 = $2;
   _mrb_sym2str($6,$46,$47);
   $48 = $c;
   $49 = ((($48)) + 20|0);
   $50 = HEAP32[$49>>2]|0;
   _mrb_obj_value_675($7,$50);
   $51 = $3;
   _mrb_obj_value_675($8,$51);
   ;HEAP8[$vararg_buffer>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$6+7>>0]|0;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   ;HEAP8[$vararg_ptr1>>0]=HEAP8[$7>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$7+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$7+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$7+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$7+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$7+7>>0]|0;
   $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
   ;HEAP8[$vararg_ptr2>>0]=HEAP8[$8>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$8+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$8+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$8+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$8+7>>0]|0;
   _mrb_raisef($43,$45,64648,$vararg_buffer);
   // unreachable;
  }
 }
 $52 = $c;
 $0 = $52;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _mrb_class_real($cl) {
 $cl = $cl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cl;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 while(1) {
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 255;
  $7 = ($6|0)==(12);
  if ($7) {
   $16 = 1;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 255;
   $11 = ($10|0)==(11);
   $16 = $11;
  }
  $12 = $1;
  if (!($16)) {
   break;
  }
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
 }
 $0 = $12;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _mrb_class_new($mrb,$super) {
 $mrb = $mrb|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $super;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = $1;
  _mrb_check_inheritable($4,$5);
 }
 $6 = $0;
 $7 = $1;
 $8 = (_boot_defclass($6,$7)|0);
 $c = $8;
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $28 = $0;
  $29 = $c;
  _prepare_singleton_class($28,$29);
  $30 = $c;
  STACKTOP = sp;return ($30|0);
 }
 $11 = $c;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & -256;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 255;
 $19 = $18&255;
 $20 = $19 << 24 >> 24;
 $21 = $14 | $20;
 $22 = $c;
 $23 = HEAP32[$22>>2]|0;
 $24 = $21 & 2097151;
 $25 = $24 << 11;
 $26 = $23 & 2047;
 $27 = $26 | $25;
 HEAP32[$22>>2] = $27;
 $28 = $0;
 $29 = $c;
 _prepare_singleton_class($28,$29);
 $30 = $c;
 STACKTOP = sp;return ($30|0);
}
function _mrb_check_inheritable($mrb,$super) {
 $mrb = $mrb|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $0 = $mrb;
 $1 = $super;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 255;
 $6 = ($5|0)!=(9);
 if ($6) {
  $7 = $0;
  $8 = $0;
  $9 = (_mrb_class_get($8,68905)|0);
  $10 = $1;
  _mrb_obj_value_675($2,$10);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_raisef($7,$9,64693,$vararg_buffer);
  // unreachable;
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 255;
 $14 = ($13|0)==(12);
 if ($14) {
  $15 = $0;
  $16 = $0;
  $17 = (_mrb_class_get($16,68905)|0);
  _mrb_raise($15,$17,64731);
  // unreachable;
 }
 $18 = $1;
 $19 = $0;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)==($21|0);
 if ($22) {
  $23 = $0;
  $24 = $0;
  $25 = (_mrb_class_get($24,68905)|0);
  _mrb_raise($23,$25,64770);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _boot_defclass($mrb,$super) {
 $mrb = $mrb|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $super;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mrb_obj_alloc($2,9,$5)|0);
 $c = $6;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = $c;
  $11 = ((($10)) + 20|0);
  HEAP32[$11>>2] = $9;
  $12 = $0;
  $13 = $c;
  $14 = $1;
  _mrb_field_write_barrier($12,$13,$14);
 } else {
  $15 = $0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $c;
  $19 = ((($18)) + 20|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $0;
 $21 = (_kh_init_mt($20)|0);
 $22 = $c;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $21;
 $24 = $c;
 STACKTOP = sp;return ($24|0);
}
function _prepare_singleton_class($mrb,$o) {
 $mrb = $mrb|0;
 $o = $o|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $c = 0, $sc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $o;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 255;
 $8 = ($7|0)==(12);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $0;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_mrb_obj_alloc($9,12,$12)|0);
 $sc = $13;
 $14 = $0;
 $15 = (_kh_init_mt($14)|0);
 $16 = $sc;
 $17 = ((($16)) + 16|0);
 HEAP32[$17>>2] = $15;
 $18 = $sc;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 255;
 $23 = ($22|0)==(9);
 $24 = $1;
 do {
  if ($23) {
   $c = $24;
   $25 = $c;
   $26 = ((($25)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $34 = $c;
    $35 = ((($34)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $sc;
    $40 = ((($39)) + 20|0);
    HEAP32[$40>>2] = $38;
    break;
   } else {
    $29 = $0;
    $30 = ((($29)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $sc;
    $33 = ((($32)) + 20|0);
    HEAP32[$33>>2] = $31;
    break;
   }
  } else {
   $41 = HEAP32[$24>>2]|0;
   $42 = $41 & 255;
   $43 = ($42|0)==(12);
   $44 = $1;
   if (!($43)) {
    $65 = ((($44)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $sc;
    $68 = ((($67)) + 20|0);
    HEAP32[$68>>2] = $66;
    break;
   }
   $c = $44;
   while(1) {
    $45 = $c;
    $46 = ((($45)) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & 255;
    $50 = ($49|0)==(11);
    if (!($50)) {
     break;
    }
    $51 = $c;
    $52 = ((($51)) + 20|0);
    $53 = HEAP32[$52>>2]|0;
    $c = $53;
   }
   $54 = $0;
   $55 = $c;
   $56 = ((($55)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   _prepare_singleton_class($54,$57);
   $58 = $c;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $sc;
   $64 = ((($63)) + 20|0);
   HEAP32[$64>>2] = $62;
  }
 } while(0);
 $69 = $sc;
 $70 = $1;
 $71 = ((($70)) + 4|0);
 HEAP32[$71>>2] = $69;
 $72 = $0;
 $73 = $1;
 $74 = $sc;
 _mrb_field_write_barrier($72,$73,$74);
 $75 = $0;
 $76 = $sc;
 $77 = $1;
 _mrb_field_write_barrier($75,$76,$77);
 $78 = $0;
 $79 = $sc;
 $80 = $0;
 $81 = (_mrb_intern_static($80,67899,12)|0);
 $82 = $1;
 _mrb_obj_value_675($2,$82);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_obj_iv_set($78,$79,$81,$$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_define_class($mrb,$name,$super) {
 $mrb = $mrb|0;
 $name = $name|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $name;
 $2 = $super;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = (_mrb_intern_cstr($4,$5)|0);
 $7 = $2;
 $8 = (_mrb_define_class_id($3,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _mrb_vm_define_class($mrb,$outer,$super,$id) {
 $mrb = $mrb|0;
 $outer = $outer|0;
 $super = $super|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $outer$byval_copy = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $outer$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = $id;
 $2 = ((($super)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$super>>2]|0;
  $6 = ($5|0)!=(0);
  if ($6) {
   label = 3;
  } else {
   $s = 0;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($super)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(9);
   if ($9) {
    $10 = $0;
    $11 = $0;
    $12 = (_mrb_class_get($11,68905)|0);
    ;HEAP8[$vararg_buffer>>0]=HEAP8[$super>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$super+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$super+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$super+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$super+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$super+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$super+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$super+7>>0]|0;
    _mrb_raisef($10,$12,64693,$vararg_buffer);
    // unreachable;
   } else {
    $13 = HEAP32[$super>>2]|0;
    $s = $13;
    break;
   }
  }
 } while(0);
 $14 = $0;
 ;HEAP32[$outer$byval_copy>>2]=HEAP32[$outer>>2]|0;HEAP32[$outer$byval_copy+4>>2]=HEAP32[$outer+4>>2]|0;
 _check_if_class_or_module($14,$outer$byval_copy);
 $15 = $0;
 $16 = $1;
 $17 = $s;
 $18 = HEAP32[$outer>>2]|0;
 $19 = (_define_class($15,$16,$17,$18)|0);
 $c = $19;
 $20 = $0;
 $21 = $c;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_mrb_class_real($23)|0);
 $25 = $c;
 _mrb_class_inherited($20,$24,$25);
 $26 = $c;
 STACKTOP = sp;return ($26|0);
}
function _mrb_class_inherited($mrb,$super,$klass) {
 $mrb = $mrb|0;
 $super = $super|0;
 $klass = $klass|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $0 = $mrb;
 $1 = $super;
 $2 = $klass;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $0;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 $11 = $0;
 $12 = $1;
 _mrb_obj_value_675($3,$12);
 $13 = $2;
 _mrb_obj_value_675($4,$13);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_funcall($5,$11,$$byval_copy,64799,1,$vararg_buffer);
 STACKTOP = sp;return;
}
function _mrb_class_defined($mrb,$name) {
 $mrb = $mrb|0;
 $name = $name|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $sym = sp + 8|0;
 $3 = sp;
 $1 = $mrb;
 $2 = $name;
 $4 = $1;
 $5 = $2;
 _mrb_check_intern_cstr($sym,$4,$5);
 $6 = ((($sym)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[$sym>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $0 = 0;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $11 = $1;
 $12 = $1;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 _mrb_obj_value_675($3,$14);
 $15 = HEAP32[$sym>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 $16 = (_mrb_const_defined($11,$$byval_copy,$15)|0);
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _mrb_define_method_raw($mrb,$c,$mid,$p) {
 $mrb = $mrb|0;
 $c = $c|0;
 $mid = $mid|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $mid;
 $3 = $p;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 11;
 $7 = $6 & 524288;
 $8 = ($7|0)!=(0);
 L1: do {
  if ($8) {
   $9 = $1;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $1 = $11;
   while(1) {
    $12 = $1;
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 >>> 11;
    $15 = $14 & 1048576;
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    if (!($17)) {
     break L1;
    }
    $18 = $1;
    $19 = ((($18)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $1 = $20;
   }
  }
 } while(0);
 $21 = $1;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $h = $23;
 $24 = $h;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $26 = $0;
  $27 = (_kh_init_mt($26)|0);
  $28 = $1;
  $29 = ((($28)) + 16|0);
  HEAP32[$29>>2] = $27;
  $h = $27;
 }
 $30 = $0;
 $31 = $h;
 $32 = $2;
 $33 = (_kh_put_mt($30,$31,$32,0)|0);
 $k = $33;
 $34 = $3;
 $35 = $k;
 $36 = $h;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35<<2)|0);
 HEAP32[$39>>2] = $34;
 $40 = $3;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $0;
 $43 = $1;
 $44 = $3;
 _mrb_field_write_barrier($42,$43,$44);
 STACKTOP = sp;return;
}
function _mrb_define_method_id($mrb,$c,$mid,$func,$aspec) {
 $mrb = $mrb|0;
 $c = $c|0;
 $mid = $mid|0;
 $func = $func|0;
 $aspec = $aspec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $mid;
 $3 = $func;
 $4 = $aspec;
 $5 = $0;
 $6 = (_mrb_gc_arena_save($5)|0);
 $ai = $6;
 $7 = $0;
 $8 = $3;
 $9 = (_mrb_proc_new_cfunc($7,$8)|0);
 $p = $9;
 $10 = $1;
 $11 = $p;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $p;
 _mrb_define_method_raw($13,$14,$15,$16);
 $17 = $0;
 $18 = $ai;
 _mrb_gc_arena_restore($17,$18);
 STACKTOP = sp;return;
}
function _mrb_define_method($mrb,$c,$name,$func,$aspec) {
 $mrb = $mrb|0;
 $c = $c|0;
 $name = $name|0;
 $func = $func|0;
 $aspec = $aspec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $name;
 $3 = $func;
 $4 = $aspec;
 $5 = $0;
 $6 = $1;
 $7 = $0;
 $8 = $2;
 $9 = (_mrb_intern_cstr($7,$8)|0);
 $10 = $3;
 $11 = $4;
 _mrb_define_method_id($5,$6,$9,$10,$11);
 STACKTOP = sp;return;
}
function _mrb_nil_value_703($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_get_args($mrb,$format,$varargs) {
 $mrb = $mrb|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0;
 var $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a8 = 0, $aa = 0, $ap = 0, $argc = 0, $arglist_current = 0;
 var $arglist_current12 = 0, $arglist_current15 = 0, $arglist_current18 = 0, $arglist_current21 = 0, $arglist_current24 = 0, $arglist_current27 = 0, $arglist_current3 = 0, $arglist_current30 = 0, $arglist_current33 = 0, $arglist_current36 = 0, $arglist_current39 = 0, $arglist_current42 = 0, $arglist_current45 = 0, $arglist_current48 = 0, $arglist_current51 = 0, $arglist_current54 = 0, $arglist_current57 = 0, $arglist_current6 = 0, $arglist_current9 = 0, $arglist_next = 0;
 var $arglist_next10 = 0, $arglist_next13 = 0, $arglist_next16 = 0, $arglist_next19 = 0, $arglist_next22 = 0, $arglist_next25 = 0, $arglist_next28 = 0, $arglist_next31 = 0, $arglist_next34 = 0, $arglist_next37 = 0, $arglist_next4 = 0, $arglist_next40 = 0, $arglist_next43 = 0, $arglist_next46 = 0, $arglist_next49 = 0, $arglist_next52 = 0, $arglist_next55 = 0, $arglist_next58 = 0, $arglist_next7 = 0, $b = 0;
 var $boolp = 0, $bp = 0, $c = 0, $datap = 0, $expanded = 0, $expanded10 = 0, $expanded100 = 0, $expanded101 = 0, $expanded103 = 0, $expanded104 = 0, $expanded105 = 0, $expanded107 = 0, $expanded108 = 0, $expanded110 = 0, $expanded111 = 0, $expanded112 = 0, $expanded114 = 0, $expanded115 = 0, $expanded117 = 0, $expanded118 = 0;
 var $expanded119 = 0, $expanded12 = 0, $expanded121 = 0, $expanded122 = 0, $expanded124 = 0, $expanded125 = 0, $expanded126 = 0, $expanded128 = 0, $expanded129 = 0, $expanded13 = 0, $expanded131 = 0, $expanded132 = 0, $expanded133 = 0, $expanded135 = 0, $expanded136 = 0, $expanded138 = 0, $expanded139 = 0, $expanded14 = 0, $expanded140 = 0, $expanded142 = 0;
 var $expanded143 = 0, $expanded145 = 0, $expanded146 = 0, $expanded147 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded23 = 0, $expanded24 = 0, $expanded26 = 0, $expanded27 = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0, $expanded33 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0;
 var $expanded38 = 0, $expanded40 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded47 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded54 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0, $expanded61 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0;
 var $expanded66 = 0, $expanded68 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded75 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded82 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0, $expanded89 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0;
 var $expanded94 = 0, $expanded96 = 0, $expanded97 = 0, $expanded98 = 0, $f = 0.0, $given = 0, $i = 0, $opt = 0, $or$cond = 0, $p = 0, $p1 = 0, $p10 = 0, $p11 = 0, $p13 = 0, $p14 = 0, $p2 = 0, $p3 = 0, $p4 = 0, $pb = 0, $pl = 0;
 var $pl15 = 0, $pl9 = 0, $ps = 0, $ps7 = 0, $sp = 0, $ss = 0, $ss12 = 0, $ss12$byval_copy = 0, $ss5 = 0, $ss6 = 0, $symp = 0, $type = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 368|0;
 $ss12$byval_copy = sp + 360|0;
 $$byval_copy8 = sp + 352|0;
 $$byval_copy7 = sp + 344|0;
 $$byval_copy6 = sp + 336|0;
 $$byval_copy5 = sp + 328|0;
 $$byval_copy4 = sp + 320|0;
 $$byval_copy3 = sp + 312|0;
 $$byval_copy2 = sp + 304|0;
 $$byval_copy = sp + 296|0;
 $vararg_buffer59 = sp + 8|0;
 $vararg_buffer = sp;
 $c = sp + 378|0;
 $ap = sp + 264|0;
 $ss = sp + 240|0;
 $2 = sp + 224|0;
 $3 = sp + 208|0;
 $4 = sp + 192|0;
 $ss5 = sp + 184|0;
 $5 = sp + 168|0;
 $ss6 = sp + 160|0;
 $6 = sp + 144|0;
 $aa = sp + 136|0;
 $7 = sp + 112|0;
 $8 = sp + 88|0;
 $b = sp + 72|0;
 $ss12 = sp + 56|0;
 $9 = sp + 16|0;
 $0 = $mrb;
 $1 = $format;
 $i = 0;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $sp = $15;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $argc = $22;
 $opt = 0;
 $given = 1;
 HEAP32[$ap>>2] = $varargs;
 $23 = $argc;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $a = $31;
  $32 = $a;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $argc = $34;
  $35 = $a;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $sp = $37;
 }
 L3: while(1) {
  $38 = $1;
  $39 = ((($38)) + 1|0);
  $1 = $39;
  $40 = HEAP8[$38>>0]|0;
  HEAP8[$c>>0] = $40;
  $41 = ($40<<24>>24)!=(0);
  $42 = HEAP8[$c>>0]|0;
  if (!($41)) {
   label = 98;
   break;
  }
  $43 = $42 << 24 >> 24;
  switch ($43|0) {
  case 63: case 38: case 42: case 124:  {
   break;
  }
  default: {
   $44 = $argc;
   $45 = $i;
   $46 = ($44|0)<=($45|0);
   if ($46) {
    $47 = $opt;
    $48 = ($47<<24>>24)!=(0);
    if (!($48)) {
     label = 8;
     break L3;
    }
    $given = 0;
   }
  }
  }
  $52 = HEAP8[$c>>0]|0;
  $53 = $52 << 24 >> 24;
  do {
   switch ($53|0) {
   case 111:  {
    $arglist_current = HEAP32[$ap>>2]|0;
    $54 = $arglist_current;
    $55 = ((0) + 4|0);
    $expanded10 = $55;
    $expanded = (($expanded10) - 1)|0;
    $56 = (($54) + ($expanded))|0;
    $57 = ((0) + 4|0);
    $expanded14 = $57;
    $expanded13 = (($expanded14) - 1)|0;
    $expanded12 = $expanded13 ^ -1;
    $58 = $56 & $expanded12;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $arglist_next = ((($59)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next;
    $p = $60;
    $61 = $i;
    $62 = $argc;
    $63 = ($61|0)<($62|0);
    if (!($63)) {
     continue L3;
    }
    $64 = $p;
    $65 = $sp;
    $66 = ((($65)) + 8|0);
    $sp = $66;
    ;HEAP32[$64>>2]=HEAP32[$65>>2]|0;HEAP32[$64+4>>2]=HEAP32[$65+4>>2]|0;
    $67 = $i;
    $68 = (($67) + 1)|0;
    $i = $68;
    continue L3;
    break;
   }
   case 67:  {
    $arglist_current3 = HEAP32[$ap>>2]|0;
    $69 = $arglist_current3;
    $70 = ((0) + 4|0);
    $expanded17 = $70;
    $expanded16 = (($expanded17) - 1)|0;
    $71 = (($69) + ($expanded16))|0;
    $72 = ((0) + 4|0);
    $expanded21 = $72;
    $expanded20 = (($expanded21) - 1)|0;
    $expanded19 = $expanded20 ^ -1;
    $73 = $71 & $expanded19;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $arglist_next4 = ((($74)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next4;
    $p1 = $75;
    $76 = $i;
    $77 = $argc;
    $78 = ($76|0)<($77|0);
    if (!($78)) {
     continue L3;
    }
    $79 = $sp;
    $80 = ((($79)) + 8|0);
    $sp = $80;
    ;HEAP32[$ss>>2]=HEAP32[$79>>2]|0;HEAP32[$ss+4>>2]=HEAP32[$79+4>>2]|0;
    $81 = ((($ss)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    switch ($82|0) {
    case 12: case 10: case 9:  {
     break;
    }
    default: {
     label = 14;
     break L3;
    }
    }
    $86 = $p1;
    ;HEAP32[$86>>2]=HEAP32[$ss>>2]|0;HEAP32[$86+4>>2]=HEAP32[$ss+4>>2]|0;
    $87 = $i;
    $88 = (($87) + 1)|0;
    $i = $88;
    continue L3;
    break;
   }
   case 83:  {
    $arglist_current6 = HEAP32[$ap>>2]|0;
    $89 = $arglist_current6;
    $90 = ((0) + 4|0);
    $expanded24 = $90;
    $expanded23 = (($expanded24) - 1)|0;
    $91 = (($89) + ($expanded23))|0;
    $92 = ((0) + 4|0);
    $expanded28 = $92;
    $expanded27 = (($expanded28) - 1)|0;
    $expanded26 = $expanded27 ^ -1;
    $93 = $91 & $expanded26;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $arglist_next7 = ((($94)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next7;
    $p2 = $95;
    $96 = $1;
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    $99 = ($98|0)==(33);
    if ($99) {
     $100 = $1;
     $101 = ((($100)) + 1|0);
     $1 = $101;
     $102 = $i;
     $103 = $argc;
     $104 = ($102|0)<($103|0);
     if ($104) {
      $105 = $sp;
      $106 = ((($105)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)==(0);
      if ($108) {
       $109 = $sp;
       $110 = HEAP32[$109>>2]|0;
       $111 = ($110|0)!=(0);
       if (!($111)) {
        $112 = $p2;
        $113 = $sp;
        $114 = ((($113)) + 8|0);
        $sp = $114;
        ;HEAP32[$112>>2]=HEAP32[$113>>2]|0;HEAP32[$112+4>>2]=HEAP32[$113+4>>2]|0;
        $115 = $i;
        $116 = (($115) + 1)|0;
        $i = $116;
        continue L3;
       }
      }
     }
    }
    $117 = $i;
    $118 = $argc;
    $119 = ($117|0)<($118|0);
    if (!($119)) {
     continue L3;
    }
    $120 = $p2;
    $121 = $0;
    $122 = $sp;
    $123 = ((($122)) + 8|0);
    $sp = $123;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$122+4>>2]|0;
    _to_str($2,$121,$$byval_copy);
    ;HEAP32[$120>>2]=HEAP32[$2>>2]|0;HEAP32[$120+4>>2]=HEAP32[$2+4>>2]|0;
    $124 = $i;
    $125 = (($124) + 1)|0;
    $i = $125;
    continue L3;
    break;
   }
   case 65:  {
    $arglist_current9 = HEAP32[$ap>>2]|0;
    $126 = $arglist_current9;
    $127 = ((0) + 4|0);
    $expanded31 = $127;
    $expanded30 = (($expanded31) - 1)|0;
    $128 = (($126) + ($expanded30))|0;
    $129 = ((0) + 4|0);
    $expanded35 = $129;
    $expanded34 = (($expanded35) - 1)|0;
    $expanded33 = $expanded34 ^ -1;
    $130 = $128 & $expanded33;
    $131 = $130;
    $132 = HEAP32[$131>>2]|0;
    $arglist_next10 = ((($131)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next10;
    $p3 = $132;
    $133 = $1;
    $134 = HEAP8[$133>>0]|0;
    $135 = $134 << 24 >> 24;
    $136 = ($135|0)==(33);
    if ($136) {
     $137 = $1;
     $138 = ((($137)) + 1|0);
     $1 = $138;
     $139 = $i;
     $140 = $argc;
     $141 = ($139|0)<($140|0);
     if ($141) {
      $142 = $sp;
      $143 = ((($142)) + 4|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($144|0)==(0);
      if ($145) {
       $146 = $sp;
       $147 = HEAP32[$146>>2]|0;
       $148 = ($147|0)!=(0);
       if (!($148)) {
        $149 = $p3;
        $150 = $sp;
        $151 = ((($150)) + 8|0);
        $sp = $151;
        ;HEAP32[$149>>2]=HEAP32[$150>>2]|0;HEAP32[$149+4>>2]=HEAP32[$150+4>>2]|0;
        $152 = $i;
        $153 = (($152) + 1)|0;
        $i = $153;
        continue L3;
       }
      }
     }
    }
    $154 = $i;
    $155 = $argc;
    $156 = ($154|0)<($155|0);
    if (!($156)) {
     continue L3;
    }
    $157 = $p3;
    $158 = $0;
    $159 = $sp;
    $160 = ((($159)) + 8|0);
    $sp = $160;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$159>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$159+4>>2]|0;
    _to_ary($3,$158,$$byval_copy2);
    ;HEAP32[$157>>2]=HEAP32[$3>>2]|0;HEAP32[$157+4>>2]=HEAP32[$3+4>>2]|0;
    $161 = $i;
    $162 = (($161) + 1)|0;
    $i = $162;
    continue L3;
    break;
   }
   case 72:  {
    $arglist_current12 = HEAP32[$ap>>2]|0;
    $163 = $arglist_current12;
    $164 = ((0) + 4|0);
    $expanded38 = $164;
    $expanded37 = (($expanded38) - 1)|0;
    $165 = (($163) + ($expanded37))|0;
    $166 = ((0) + 4|0);
    $expanded42 = $166;
    $expanded41 = (($expanded42) - 1)|0;
    $expanded40 = $expanded41 ^ -1;
    $167 = $165 & $expanded40;
    $168 = $167;
    $169 = HEAP32[$168>>2]|0;
    $arglist_next13 = ((($168)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next13;
    $p4 = $169;
    $170 = $1;
    $171 = HEAP8[$170>>0]|0;
    $172 = $171 << 24 >> 24;
    $173 = ($172|0)==(33);
    if ($173) {
     $174 = $1;
     $175 = ((($174)) + 1|0);
     $1 = $175;
     $176 = $i;
     $177 = $argc;
     $178 = ($176|0)<($177|0);
     if ($178) {
      $179 = $sp;
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0);
      if ($182) {
       $183 = $sp;
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)!=(0);
       if (!($185)) {
        $186 = $p4;
        $187 = $sp;
        $188 = ((($187)) + 8|0);
        $sp = $188;
        ;HEAP32[$186>>2]=HEAP32[$187>>2]|0;HEAP32[$186+4>>2]=HEAP32[$187+4>>2]|0;
        $189 = $i;
        $190 = (($189) + 1)|0;
        $i = $190;
        continue L3;
       }
      }
     }
    }
    $191 = $i;
    $192 = $argc;
    $193 = ($191|0)<($192|0);
    if (!($193)) {
     continue L3;
    }
    $194 = $p4;
    $195 = $0;
    $196 = $sp;
    $197 = ((($196)) + 8|0);
    $sp = $197;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$196>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$196+4>>2]|0;
    _to_hash($4,$195,$$byval_copy3);
    ;HEAP32[$194>>2]=HEAP32[$4>>2]|0;HEAP32[$194+4>>2]=HEAP32[$4+4>>2]|0;
    $198 = $i;
    $199 = (($198) + 1)|0;
    $i = $199;
    continue L3;
    break;
   }
   case 115:  {
    $ps = 0;
    $pl = 0;
    $arglist_current15 = HEAP32[$ap>>2]|0;
    $200 = $arglist_current15;
    $201 = ((0) + 4|0);
    $expanded45 = $201;
    $expanded44 = (($expanded45) - 1)|0;
    $202 = (($200) + ($expanded44))|0;
    $203 = ((0) + 4|0);
    $expanded49 = $203;
    $expanded48 = (($expanded49) - 1)|0;
    $expanded47 = $expanded48 ^ -1;
    $204 = $202 & $expanded47;
    $205 = $204;
    $206 = HEAP32[$205>>2]|0;
    $arglist_next16 = ((($205)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next16;
    $ps = $206;
    $arglist_current18 = HEAP32[$ap>>2]|0;
    $207 = $arglist_current18;
    $208 = ((0) + 4|0);
    $expanded52 = $208;
    $expanded51 = (($expanded52) - 1)|0;
    $209 = (($207) + ($expanded51))|0;
    $210 = ((0) + 4|0);
    $expanded56 = $210;
    $expanded55 = (($expanded56) - 1)|0;
    $expanded54 = $expanded55 ^ -1;
    $211 = $209 & $expanded54;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $arglist_next19 = ((($212)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next19;
    $pl = $213;
    $214 = $1;
    $215 = HEAP8[$214>>0]|0;
    $216 = $215 << 24 >> 24;
    $217 = ($216|0)==(33);
    if ($217) {
     $218 = $1;
     $219 = ((($218)) + 1|0);
     $1 = $219;
     $220 = $i;
     $221 = $argc;
     $222 = ($220|0)<($221|0);
     if ($222) {
      $223 = $sp;
      $224 = ((($223)) + 4|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = ($225|0)==(0);
      if ($226) {
       $227 = $sp;
       $228 = HEAP32[$227>>2]|0;
       $229 = ($228|0)!=(0);
       if (!($229)) {
        $230 = $ps;
        HEAP32[$230>>2] = 0;
        $231 = $pl;
        HEAP32[$231>>2] = 0;
        $232 = $i;
        $233 = (($232) + 1)|0;
        $i = $233;
        continue L3;
       }
      }
     }
    }
    $234 = $i;
    $235 = $argc;
    $236 = ($234|0)<($235|0);
    if (!($236)) {
     continue L3;
    }
    $237 = $0;
    $238 = $sp;
    $239 = ((($238)) + 8|0);
    $sp = $239;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$238>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$238+4>>2]|0;
    _to_str($5,$237,$$byval_copy4);
    ;HEAP32[$ss5>>2]=HEAP32[$5>>2]|0;HEAP32[$ss5+4>>2]=HEAP32[$5+4>>2]|0;
    $240 = HEAP32[$ss5>>2]|0;
    $241 = HEAP32[$240>>2]|0;
    $242 = $241 >>> 11;
    $243 = $242 & 8;
    $244 = ($243|0)!=(0);
    $245 = HEAP32[$ss5>>2]|0;
    $246 = ((($245)) + 12|0);
    if ($244) {
     $250 = $246;
    } else {
     $247 = ((($246)) + 8|0);
     $248 = HEAP32[$247>>2]|0;
     $250 = $248;
    }
    $249 = $ps;
    HEAP32[$249>>2] = $250;
    $251 = HEAP32[$ss5>>2]|0;
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 >>> 11;
    $254 = $253 & 8;
    $255 = ($254|0)!=(0);
    $256 = HEAP32[$ss5>>2]|0;
    if ($255) {
     $257 = HEAP32[$256>>2]|0;
     $258 = $257 >>> 11;
     $259 = $258 & 496;
     $260 = $259 >> 4;
     $264 = $260;
    } else {
     $261 = ((($256)) + 12|0);
     $262 = HEAP32[$261>>2]|0;
     $264 = $262;
    }
    $263 = $pl;
    HEAP32[$263>>2] = $264;
    $265 = $i;
    $266 = (($265) + 1)|0;
    $i = $266;
    continue L3;
    break;
   }
   case 122:  {
    $arglist_current21 = HEAP32[$ap>>2]|0;
    $267 = $arglist_current21;
    $268 = ((0) + 4|0);
    $expanded59 = $268;
    $expanded58 = (($expanded59) - 1)|0;
    $269 = (($267) + ($expanded58))|0;
    $270 = ((0) + 4|0);
    $expanded63 = $270;
    $expanded62 = (($expanded63) - 1)|0;
    $expanded61 = $expanded62 ^ -1;
    $271 = $269 & $expanded61;
    $272 = $271;
    $273 = HEAP32[$272>>2]|0;
    $arglist_next22 = ((($272)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next22;
    $ps7 = $273;
    $274 = $1;
    $275 = HEAP8[$274>>0]|0;
    $276 = $275 << 24 >> 24;
    $277 = ($276|0)==(33);
    if ($277) {
     $278 = $1;
     $279 = ((($278)) + 1|0);
     $1 = $279;
     $280 = $i;
     $281 = $argc;
     $282 = ($280|0)<($281|0);
     if ($282) {
      $283 = $sp;
      $284 = ((($283)) + 4|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = ($285|0)==(0);
      if ($286) {
       $287 = $sp;
       $288 = HEAP32[$287>>2]|0;
       $289 = ($288|0)!=(0);
       if (!($289)) {
        $290 = $ps7;
        HEAP32[$290>>2] = 0;
        $291 = $i;
        $292 = (($291) + 1)|0;
        $i = $292;
        $293 = $sp;
        $294 = ((($293)) + 8|0);
        $sp = $294;
        continue L3;
       }
      }
     }
    }
    $295 = $i;
    $296 = $argc;
    $297 = ($295|0)<($296|0);
    if (!($297)) {
     continue L3;
    }
    $298 = $0;
    $299 = $sp;
    $300 = ((($299)) + 8|0);
    $sp = $300;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$299>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$299+4>>2]|0;
    _to_str($6,$298,$$byval_copy5);
    ;HEAP32[$ss6>>2]=HEAP32[$6>>2]|0;HEAP32[$ss6+4>>2]=HEAP32[$6+4>>2]|0;
    $301 = $0;
    $302 = (_mrb_string_value_cstr($301,$ss6)|0);
    $303 = $ps7;
    HEAP32[$303>>2] = $302;
    $304 = $i;
    $305 = (($304) + 1)|0;
    $i = $305;
    continue L3;
    break;
   }
   case 97:  {
    $arglist_current24 = HEAP32[$ap>>2]|0;
    $306 = $arglist_current24;
    $307 = ((0) + 4|0);
    $expanded66 = $307;
    $expanded65 = (($expanded66) - 1)|0;
    $308 = (($306) + ($expanded65))|0;
    $309 = ((0) + 4|0);
    $expanded70 = $309;
    $expanded69 = (($expanded70) - 1)|0;
    $expanded68 = $expanded69 ^ -1;
    $310 = $308 & $expanded68;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $arglist_next25 = ((($311)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next25;
    $pb = $312;
    $arglist_current27 = HEAP32[$ap>>2]|0;
    $313 = $arglist_current27;
    $314 = ((0) + 4|0);
    $expanded73 = $314;
    $expanded72 = (($expanded73) - 1)|0;
    $315 = (($313) + ($expanded72))|0;
    $316 = ((0) + 4|0);
    $expanded77 = $316;
    $expanded76 = (($expanded77) - 1)|0;
    $expanded75 = $expanded76 ^ -1;
    $317 = $315 & $expanded75;
    $318 = $317;
    $319 = HEAP32[$318>>2]|0;
    $arglist_next28 = ((($318)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next28;
    $pl9 = $319;
    $320 = $1;
    $321 = HEAP8[$320>>0]|0;
    $322 = $321 << 24 >> 24;
    $323 = ($322|0)==(33);
    if ($323) {
     $324 = $1;
     $325 = ((($324)) + 1|0);
     $1 = $325;
     $326 = $i;
     $327 = $argc;
     $328 = ($326|0)<($327|0);
     if ($328) {
      $329 = $sp;
      $330 = ((($329)) + 4|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = ($331|0)==(0);
      if ($332) {
       $333 = $sp;
       $334 = HEAP32[$333>>2]|0;
       $335 = ($334|0)!=(0);
       if (!($335)) {
        $336 = $pb;
        HEAP32[$336>>2] = 0;
        $337 = $pl9;
        HEAP32[$337>>2] = 0;
        $338 = $i;
        $339 = (($338) + 1)|0;
        $i = $339;
        $340 = $sp;
        $341 = ((($340)) + 8|0);
        $sp = $341;
        continue L3;
       }
      }
     }
    }
    $342 = $i;
    $343 = $argc;
    $344 = ($342|0)<($343|0);
    if (!($344)) {
     continue L3;
    }
    $345 = $0;
    $346 = $sp;
    $347 = ((($346)) + 8|0);
    $sp = $347;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$346>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$346+4>>2]|0;
    _to_ary($7,$345,$$byval_copy6);
    ;HEAP32[$aa>>2]=HEAP32[$7>>2]|0;HEAP32[$aa+4>>2]=HEAP32[$7+4>>2]|0;
    $348 = HEAP32[$aa>>2]|0;
    $a8 = $348;
    $349 = $a8;
    $350 = ((($349)) + 20|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = $pb;
    HEAP32[$352>>2] = $351;
    $353 = $a8;
    $354 = ((($353)) + 12|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $pl9;
    HEAP32[$356>>2] = $355;
    $357 = $i;
    $358 = (($357) + 1)|0;
    $i = $358;
    continue L3;
    break;
   }
   case 102:  {
    $arglist_current30 = HEAP32[$ap>>2]|0;
    $359 = $arglist_current30;
    $360 = ((0) + 4|0);
    $expanded80 = $360;
    $expanded79 = (($expanded80) - 1)|0;
    $361 = (($359) + ($expanded79))|0;
    $362 = ((0) + 4|0);
    $expanded84 = $362;
    $expanded83 = (($expanded84) - 1)|0;
    $expanded82 = $expanded83 ^ -1;
    $363 = $361 & $expanded82;
    $364 = $363;
    $365 = HEAP32[$364>>2]|0;
    $arglist_next31 = ((($364)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next31;
    $p10 = $365;
    $366 = $i;
    $367 = $argc;
    $368 = ($366|0)<($367|0);
    if (!($368)) {
     continue L3;
    }
    $369 = $0;
    $370 = $sp;
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$370>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$370+4>>2]|0;
    $371 = (+_mrb_to_flo($369,$$byval_copy7));
    $372 = $p10;
    HEAPF32[$372>>2] = $371;
    $373 = $sp;
    $374 = ((($373)) + 8|0);
    $sp = $374;
    $375 = $i;
    $376 = (($375) + 1)|0;
    $i = $376;
    continue L3;
    break;
   }
   case 105:  {
    $arglist_current33 = HEAP32[$ap>>2]|0;
    $377 = $arglist_current33;
    $378 = ((0) + 4|0);
    $expanded87 = $378;
    $expanded86 = (($expanded87) - 1)|0;
    $379 = (($377) + ($expanded86))|0;
    $380 = ((0) + 4|0);
    $expanded91 = $380;
    $expanded90 = (($expanded91) - 1)|0;
    $expanded89 = $expanded90 ^ -1;
    $381 = $379 & $expanded89;
    $382 = $381;
    $383 = HEAP32[$382>>2]|0;
    $arglist_next34 = ((($382)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next34;
    $p11 = $383;
    $384 = $i;
    $385 = $argc;
    $386 = ($384|0)<($385|0);
    if (!($386)) {
     continue L3;
    }
    $387 = $sp;
    $388 = ((($387)) + 4|0);
    $389 = HEAP32[$388>>2]|0;
    switch ($389|0) {
    case 16:  {
     label = 72;
     break L3;
     break;
    }
    case 3:  {
     $390 = $sp;
     $391 = HEAP32[$390>>2]|0;
     $392 = $p11;
     HEAP32[$392>>2] = $391;
     break;
    }
    case 6:  {
     $393 = $sp;
     $394 = +HEAPF32[$393>>2];
     $f = $394;
     $395 = $f;
     $396 = $395 <= 2147483648.0;
     $397 = $f;
     $398 = $397 >= -2147483648.0;
     $or$cond = $396 & $398;
     if (!($or$cond)) {
      label = 70;
      break L3;
     }
     $402 = $f;
     $403 = (~~(($402)));
     $404 = $p11;
     HEAP32[$404>>2] = $403;
     break;
    }
    default: {
     $408 = $0;
     $409 = $sp;
     ;HEAP32[$$byval_copy8>>2]=HEAP32[$409>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$409+4>>2]|0;
     _mrb_Integer($8,$408,$$byval_copy8);
     $410 = HEAP32[$8>>2]|0;
     $411 = $p11;
     HEAP32[$411>>2] = $410;
    }
    }
    $412 = $sp;
    $413 = ((($412)) + 8|0);
    $sp = $413;
    $414 = $i;
    $415 = (($414) + 1)|0;
    $i = $415;
    continue L3;
    break;
   }
   case 98:  {
    $arglist_current36 = HEAP32[$ap>>2]|0;
    $416 = $arglist_current36;
    $417 = ((0) + 4|0);
    $expanded94 = $417;
    $expanded93 = (($expanded94) - 1)|0;
    $418 = (($416) + ($expanded93))|0;
    $419 = ((0) + 4|0);
    $expanded98 = $419;
    $expanded97 = (($expanded98) - 1)|0;
    $expanded96 = $expanded97 ^ -1;
    $420 = $418 & $expanded96;
    $421 = $420;
    $422 = HEAP32[$421>>2]|0;
    $arglist_next37 = ((($421)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next37;
    $boolp = $422;
    $423 = $i;
    $424 = $argc;
    $425 = ($423|0)<($424|0);
    if (!($425)) {
     continue L3;
    }
    $426 = $sp;
    $427 = ((($426)) + 8|0);
    $sp = $427;
    ;HEAP32[$b>>2]=HEAP32[$426>>2]|0;HEAP32[$b+4>>2]=HEAP32[$426+4>>2]|0;
    $428 = ((($b)) + 4|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = ($429|0)!=(0);
    $431 = $430&1;
    $432 = $431&255;
    $433 = $boolp;
    HEAP8[$433>>0] = $432;
    $434 = $i;
    $435 = (($434) + 1)|0;
    $i = $435;
    continue L3;
    break;
   }
   case 110:  {
    $arglist_current39 = HEAP32[$ap>>2]|0;
    $436 = $arglist_current39;
    $437 = ((0) + 4|0);
    $expanded101 = $437;
    $expanded100 = (($expanded101) - 1)|0;
    $438 = (($436) + ($expanded100))|0;
    $439 = ((0) + 4|0);
    $expanded105 = $439;
    $expanded104 = (($expanded105) - 1)|0;
    $expanded103 = $expanded104 ^ -1;
    $440 = $438 & $expanded103;
    $441 = $440;
    $442 = HEAP32[$441>>2]|0;
    $arglist_next40 = ((($441)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next40;
    $symp = $442;
    $443 = $i;
    $444 = $argc;
    $445 = ($443|0)<($444|0);
    if (!($445)) {
     continue L3;
    }
    $446 = $sp;
    $447 = ((($446)) + 8|0);
    $sp = $447;
    ;HEAP32[$ss12>>2]=HEAP32[$446>>2]|0;HEAP32[$ss12+4>>2]=HEAP32[$446+4>>2]|0;
    $448 = $0;
    ;HEAP32[$ss12$byval_copy>>2]=HEAP32[$ss12>>2]|0;HEAP32[$ss12$byval_copy+4>>2]=HEAP32[$ss12+4>>2]|0;
    $449 = (_to_sym($448,$ss12$byval_copy)|0);
    $450 = $symp;
    HEAP32[$450>>2] = $449;
    $451 = $i;
    $452 = (($451) + 1)|0;
    $i = $452;
    continue L3;
    break;
   }
   case 100:  {
    $arglist_current42 = HEAP32[$ap>>2]|0;
    $453 = $arglist_current42;
    $454 = ((0) + 4|0);
    $expanded108 = $454;
    $expanded107 = (($expanded108) - 1)|0;
    $455 = (($453) + ($expanded107))|0;
    $456 = ((0) + 4|0);
    $expanded112 = $456;
    $expanded111 = (($expanded112) - 1)|0;
    $expanded110 = $expanded111 ^ -1;
    $457 = $455 & $expanded110;
    $458 = $457;
    $459 = HEAP32[$458>>2]|0;
    $arglist_next43 = ((($458)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next43;
    $datap = $459;
    $arglist_current45 = HEAP32[$ap>>2]|0;
    $460 = $arglist_current45;
    $461 = ((0) + 4|0);
    $expanded115 = $461;
    $expanded114 = (($expanded115) - 1)|0;
    $462 = (($460) + ($expanded114))|0;
    $463 = ((0) + 4|0);
    $expanded119 = $463;
    $expanded118 = (($expanded119) - 1)|0;
    $expanded117 = $expanded118 ^ -1;
    $464 = $462 & $expanded117;
    $465 = $464;
    $466 = HEAP32[$465>>2]|0;
    $arglist_next46 = ((($465)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next46;
    $type = $466;
    $467 = $1;
    $468 = HEAP8[$467>>0]|0;
    $469 = $468 << 24 >> 24;
    $470 = ($469|0)==(33);
    if ($470) {
     $471 = $1;
     $472 = ((($471)) + 1|0);
     $1 = $472;
     $473 = $i;
     $474 = $argc;
     $475 = ($473|0)<($474|0);
     if ($475) {
      $476 = $sp;
      $477 = ((($476)) + 4|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478|0)==(0);
      if ($479) {
       $480 = $sp;
       $481 = HEAP32[$480>>2]|0;
       $482 = ($481|0)!=(0);
       if (!($482)) {
        $483 = $datap;
        HEAP32[$483>>2] = 0;
        $484 = $i;
        $485 = (($484) + 1)|0;
        $i = $485;
        $486 = $sp;
        $487 = ((($486)) + 8|0);
        $sp = $487;
        continue L3;
       }
      }
     }
    }
    $488 = $i;
    $489 = $argc;
    $490 = ($488|0)<($489|0);
    if (!($490)) {
     continue L3;
    }
    $491 = $0;
    $492 = $sp;
    $493 = ((($492)) + 8|0);
    $sp = $493;
    $494 = $type;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$492>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$492+4>>2]|0;
    $495 = (_mrb_data_get_ptr($491,$$byval_copy9,$494)|0);
    $496 = $datap;
    HEAP32[$496>>2] = $495;
    $497 = $i;
    $498 = (($497) + 1)|0;
    $i = $498;
    continue L3;
    break;
   }
   case 38:  {
    $arglist_current48 = HEAP32[$ap>>2]|0;
    $499 = $arglist_current48;
    $500 = ((0) + 4|0);
    $expanded122 = $500;
    $expanded121 = (($expanded122) - 1)|0;
    $501 = (($499) + ($expanded121))|0;
    $502 = ((0) + 4|0);
    $expanded126 = $502;
    $expanded125 = (($expanded126) - 1)|0;
    $expanded124 = $expanded125 ^ -1;
    $503 = $501 & $expanded124;
    $504 = $503;
    $505 = HEAP32[$504>>2]|0;
    $arglist_next49 = ((($504)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next49;
    $p13 = $505;
    $506 = $0;
    $507 = ((($506)) + 12|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = ((($508)) + 16|0);
    $510 = HEAP32[$509>>2]|0;
    $511 = ((($510)) + 36|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = ($512|0)<(0);
    $514 = $0;
    $515 = ((($514)) + 12|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = ((($516)) + 4|0);
    $518 = HEAP32[$517>>2]|0;
    if ($513) {
     $519 = ((($518)) + 16|0);
     $bp = $519;
    } else {
     $520 = $0;
     $521 = ((($520)) + 12|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = ((($522)) + 16|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = ((($524)) + 36|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = (($518) + ($526<<3)|0);
     $528 = ((($527)) + 8|0);
     $bp = $528;
    }
    $529 = $p13;
    $530 = $bp;
    ;HEAP32[$529>>2]=HEAP32[$530>>2]|0;HEAP32[$529+4>>2]=HEAP32[$530+4>>2]|0;
    continue L3;
    break;
   }
   case 124:  {
    $opt = 1;
    continue L3;
    break;
   }
   case 63:  {
    $arglist_current51 = HEAP32[$ap>>2]|0;
    $531 = $arglist_current51;
    $532 = ((0) + 4|0);
    $expanded129 = $532;
    $expanded128 = (($expanded129) - 1)|0;
    $533 = (($531) + ($expanded128))|0;
    $534 = ((0) + 4|0);
    $expanded133 = $534;
    $expanded132 = (($expanded133) - 1)|0;
    $expanded131 = $expanded132 ^ -1;
    $535 = $533 & $expanded131;
    $536 = $535;
    $537 = HEAP32[$536>>2]|0;
    $arglist_next52 = ((($536)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next52;
    $p14 = $537;
    $538 = $given;
    $539 = $p14;
    HEAP8[$539>>0] = $538;
    continue L3;
    break;
   }
   case 42:  {
    $arglist_current54 = HEAP32[$ap>>2]|0;
    $540 = $arglist_current54;
    $541 = ((0) + 4|0);
    $expanded136 = $541;
    $expanded135 = (($expanded136) - 1)|0;
    $542 = (($540) + ($expanded135))|0;
    $543 = ((0) + 4|0);
    $expanded140 = $543;
    $expanded139 = (($expanded140) - 1)|0;
    $expanded138 = $expanded139 ^ -1;
    $544 = $542 & $expanded138;
    $545 = $544;
    $546 = HEAP32[$545>>2]|0;
    $arglist_next55 = ((($545)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next55;
    $var = $546;
    $arglist_current57 = HEAP32[$ap>>2]|0;
    $547 = $arglist_current57;
    $548 = ((0) + 4|0);
    $expanded143 = $548;
    $expanded142 = (($expanded143) - 1)|0;
    $549 = (($547) + ($expanded142))|0;
    $550 = ((0) + 4|0);
    $expanded147 = $550;
    $expanded146 = (($expanded147) - 1)|0;
    $expanded145 = $expanded146 ^ -1;
    $551 = $549 & $expanded145;
    $552 = $551;
    $553 = HEAP32[$552>>2]|0;
    $arglist_next58 = ((($552)) + 4|0);
    HEAP32[$ap>>2] = $arglist_next58;
    $pl15 = $553;
    $554 = $argc;
    $555 = $i;
    $556 = ($554|0)>($555|0);
    if (!($556)) {
     $571 = $pl15;
     HEAP32[$571>>2] = 0;
     $572 = $var;
     HEAP32[$572>>2] = 0;
     continue L3;
    }
    $557 = $argc;
    $558 = $i;
    $559 = (($557) - ($558))|0;
    $560 = $pl15;
    HEAP32[$560>>2] = $559;
    $561 = $pl15;
    $562 = HEAP32[$561>>2]|0;
    $563 = ($562|0)>(0);
    if ($563) {
     $564 = $sp;
     $565 = $var;
     HEAP32[$565>>2] = $564;
    }
    $566 = $argc;
    $i = $566;
    $567 = $pl15;
    $568 = HEAP32[$567>>2]|0;
    $569 = $sp;
    $570 = (($569) + ($568<<3)|0);
    $sp = $570;
    continue L3;
    break;
   }
   default: {
    label = 97;
    break L3;
   }
   }
  } while(0);
 }
 if ((label|0) == 8) {
  $49 = $0;
  $50 = $0;
  $51 = (_mrb_class_get($50,68855)|0);
  _mrb_raise($49,$51,64829);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $83 = $0;
  $84 = $0;
  $85 = (_mrb_class_get($84,68905)|0);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$ss>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$ss+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$ss+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$ss+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$ss+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$ss+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$ss+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$ss+7>>0]|0;
  _mrb_raisef($83,$85,64855,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 70) {
  $399 = $0;
  $400 = $0;
  $401 = (_mrb_class_get($400,64930)|0);
  _mrb_raise($399,$401,64941);
  // unreachable;
 }
 else if ((label|0) == 72) {
  $405 = $0;
  $406 = $0;
  $407 = (_mrb_class_get($406,68905)|0);
  _mrb_raise($405,$407,64963);
  // unreachable;
 }
 else if ((label|0) == 97) {
  $573 = $0;
  $574 = $0;
  $575 = (_mrb_class_get($574,68855)|0);
  $576 = $0;
  _mrb_str_new($9,$576,$c,1);
  ;HEAP8[$vararg_buffer59>>0]=HEAP8[$9>>0]|0;HEAP8[$vararg_buffer59+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$vararg_buffer59+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$vararg_buffer59+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$vararg_buffer59+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$vararg_buffer59+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$vararg_buffer59+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$vararg_buffer59+7>>0]=HEAP8[$9+7>>0]|0;
  _mrb_raisef($573,$575,65009,$vararg_buffer59);
  // unreachable;
 }
 else if ((label|0) == 98) {
  $577 = ($42<<24>>24)!=(0);
  if ($577) {
   $584 = $i;
   STACKTOP = sp;return ($584|0);
  }
  $578 = $argc;
  $579 = $i;
  $580 = ($578|0)>($579|0);
  if ($580) {
   $581 = $0;
   $582 = $0;
   $583 = (_mrb_class_get($582,68855)|0);
   _mrb_raise($581,$583,64829);
   // unreachable;
  } else {
   $584 = $i;
   STACKTOP = sp;return ($584|0);
  }
 }
 return (0)|0;
}
function _to_str($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _check_type($agg$result,$1,$val$byval_copy,16,64878,64885);
 STACKTOP = sp;return;
}
function _check_type($agg$result,$mrb,$val,$t,$c,$m) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 $t = $t|0;
 $c = $c|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $tmp = 0, $val$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $tmp = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $0 = $mrb;
 $1 = $t;
 $2 = $c;
 $3 = $m;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_check_convert_type($4,$6,$val$byval_copy,$7,$8,$9);
 ;HEAP32[$tmp>>2]=HEAP32[$4>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$4+4>>2]|0;
 $10 = ((($tmp)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$tmp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$tmp+4>>2]|0;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$tmp>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  ;HEAP32[$agg$result>>2]=HEAP32[$tmp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$tmp+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $15 = $0;
  $16 = $0;
  $17 = (_mrb_class_get($16,68905)|0);
  $18 = $0;
  $19 = $2;
  _mrb_str_new_cstr($5,$18,$19);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$5+7>>0]|0;
  _mrb_raisef($15,$17,64892,$vararg_buffer);
  // unreachable;
 }
}
function _to_ary($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _check_type($agg$result,$1,$val$byval_copy,14,64904,64910);
 STACKTOP = sp;return;
}
function _to_hash($agg$result,$mrb,$val) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _check_type($agg$result,$1,$val$byval_copy,15,64917,64922);
 STACKTOP = sp;return;
}
function _to_sym($mrb,$ss) {
 $mrb = $mrb|0;
 $ss = $ss|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, $ss$byval_copy = 0;
 var $ss$byval_copy3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ss$byval_copy3 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $ss$byval_copy = sp + 40|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $obj = sp + 16|0;
 $1 = $mrb;
 $3 = ((($ss)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(4);
 if ($5) {
  $6 = HEAP32[$ss>>2]|0;
  $0 = $6;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $7 = ((($ss)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(16);
 $10 = $1;
 if (!($9)) {
  ;HEAP32[$ss$byval_copy3>>2]=HEAP32[$ss>>2]|0;HEAP32[$ss$byval_copy3+4>>2]=HEAP32[$ss+4>>2]|0;
  _mrb_funcall($obj,$10,$ss$byval_copy3,68986,0,$vararg_buffer);
  $13 = $1;
  $14 = $1;
  $15 = (_mrb_class_get($14,68905)|0);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$obj>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$obj+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$obj+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$obj+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$obj+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$obj+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$obj+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$obj+7>>0]|0;
  _mrb_raisef($13,$15,68517,$vararg_buffer1);
  // unreachable;
 }
 $11 = $1;
 ;HEAP32[$ss$byval_copy>>2]=HEAP32[$ss>>2]|0;HEAP32[$ss$byval_copy+4>>2]=HEAP32[$ss+4>>2]|0;
 _to_str($2,$11,$ss$byval_copy);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 $12 = (_mrb_intern_str($10,$$byval_copy)|0);
 $0 = $12;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _mrb_include_module($mrb,$c,$m) {
 $mrb = $mrb|0;
 $c = $c|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $changed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $m;
 $3 = $0;
 $4 = $1;
 $5 = $1;
 $6 = (_find_origin($5)|0);
 $7 = $2;
 $8 = (_include_module_at($3,$4,$6,$7,1)|0);
 $changed = $8;
 $9 = $changed;
 $10 = ($9|0)<(0);
 if ($10) {
  $11 = $0;
  $12 = $0;
  $13 = (_mrb_class_get($12,68855)|0);
  _mrb_raise($11,$13,65039);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _find_origin($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 524288;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $0 = $8;
 while(1) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 11;
  $12 = $11 & 1048576;
  $13 = ($12|0)!=(0);
  $14 = $13 ^ 1;
  if (!($14)) {
   break;
  }
  $15 = $0;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _include_module_at($mrb,$c,$ins_pos,$m,$search_super) {
 $mrb = $mrb|0;
 $c = $c|0;
 $ins_pos = $ins_pos|0;
 $m = $m|0;
 $search_super = $search_super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $ic = 0, $klass_mt = 0, $p = 0, $superclass_seen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $c;
 $3 = $ins_pos;
 $4 = $m;
 $5 = $search_super;
 $6 = $2;
 $7 = (_find_origin($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $klass_mt = $9;
 L1: while(1) {
  $10 = $4;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 19;
   break;
  }
  $superclass_seen = 0;
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 >>> 11;
  $15 = $14 & 524288;
  $16 = ($15|0)!=(0);
  do {
   if (!($16)) {
    $17 = $klass_mt;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $klass_mt;
     $20 = $4;
     $21 = ((($20)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($19|0)==($22|0);
     if ($23) {
      label = 6;
      break L1;
     }
    }
    $24 = $2;
    $25 = ((($24)) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    $p = $26;
    while(1) {
     $27 = $p;
     $28 = ($27|0)!=(0|0);
     if (!($28)) {
      label = 17;
      break;
     }
     $29 = $p;
     $30 = HEAP32[$29>>2]|0;
     $31 = $30 & 255;
     $32 = ($31|0)==(11);
     $33 = $p;
     if ($32) {
      $34 = ((($33)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $4;
      $37 = ((($36)) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($35|0)==($38|0);
      if ($39) {
       break;
      }
     } else {
      $43 = HEAP32[$33>>2]|0;
      $44 = $43 & 255;
      $45 = ($44|0)==(9);
      if ($45) {
       $46 = $5;
       $47 = ($46|0)!=(0);
       if (!($47)) {
        label = 17;
        break;
       }
       $superclass_seen = 1;
      }
     }
     $48 = $p;
     $49 = ((($48)) + 20|0);
     $50 = HEAP32[$49>>2]|0;
     $p = $50;
    }
    if ((label|0) == 17) {
     label = 0;
     $51 = $1;
     $52 = $4;
     $53 = $3;
     $54 = ((($53)) + 20|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (_include_class_new($51,$52,$55)|0);
     $ic = $56;
     $57 = $ic;
     $58 = $3;
     $59 = ((($58)) + 20|0);
     HEAP32[$59>>2] = $57;
     $60 = $1;
     $61 = $3;
     $62 = $3;
     $63 = ((($62)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     _mrb_field_write_barrier($60,$61,$64);
     $65 = $ic;
     $3 = $65;
     break;
    }
    $40 = $superclass_seen;
    $41 = ($40|0)!=(0);
    if (!($41)) {
     $42 = $p;
     $3 = $42;
    }
   }
  } while(0);
  $66 = $4;
  $67 = ((($66)) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $4 = $68;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _include_class_new($mrb,$m,$super) {
 $mrb = $mrb|0;
 $m = $m|0;
 $super = $super|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $m;
 $2 = $super;
 $3 = $0;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_mrb_obj_alloc($3,11,$6)|0);
 $ic = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 255;
 $11 = ($10|0)==(11);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
 }
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 524288;
 $19 = ($18|0)!=(0);
 L4: do {
  if ($19) {
   $20 = $1;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $1 = $22;
   while(1) {
    $23 = $1;
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 >>> 11;
    $26 = $25 & 1048576;
    $27 = ($26|0)!=(0);
    $28 = $27 ^ 1;
    if (!($28)) {
     break L4;
    }
    $29 = $1;
    $30 = ((($29)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $1 = $31;
   }
  }
 } while(0);
 $32 = $1;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $ic;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 $37 = $1;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $ic;
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = $39;
 $42 = $2;
 $43 = $ic;
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = $42;
 $45 = $1;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & 255;
 $48 = ($47|0)==(11);
 $49 = $1;
 if ($48) {
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $ic;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
  $56 = $ic;
  STACKTOP = sp;return ($56|0);
 } else {
  $54 = $ic;
  $55 = ((($54)) + 4|0);
  HEAP32[$55>>2] = $49;
  $56 = $ic;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _mrb_prepend_module($mrb,$c,$m) {
 $mrb = $mrb|0;
 $c = $c|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $changed = 0;
 var $origin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $m;
 $changed = 0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 524288;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $0;
  $9 = $1;
  $10 = (_mrb_obj_alloc($8,11,$9)|0);
  $origin = $10;
  $11 = $origin;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 11;
  $14 = $13 | 1048576;
  $15 = HEAP32[$11>>2]|0;
  $16 = $14 & 2097151;
  $17 = $16 << 11;
  $18 = $15 & 2047;
  $19 = $18 | $17;
  HEAP32[$11>>2] = $19;
  $20 = $1;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $origin;
  $24 = ((($23)) + 20|0);
  HEAP32[$24>>2] = $22;
  $25 = $origin;
  $26 = $1;
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = $25;
  $28 = $1;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $origin;
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = $30;
  $33 = $0;
  $34 = (_kh_init_mt($33)|0);
  $35 = $1;
  $36 = ((($35)) + 16|0);
  HEAP32[$36>>2] = $34;
  $37 = $0;
  $38 = $1;
  $39 = $origin;
  _mrb_field_write_barrier($37,$38,$39);
  $40 = $1;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 11;
  $43 = $42 | 524288;
  $44 = HEAP32[$40>>2]|0;
  $45 = $43 & 2097151;
  $46 = $45 << 11;
  $47 = $44 & 2047;
  $48 = $47 | $46;
  HEAP32[$40>>2] = $48;
 }
 $49 = $0;
 $50 = $1;
 $51 = $1;
 $52 = $2;
 $53 = (_include_module_at($49,$50,$51,$52,0)|0);
 $changed = $53;
 $54 = $changed;
 $55 = ($54|0)<(0);
 if ($55) {
  $56 = $0;
  $57 = $0;
  $58 = (_mrb_class_get($57,68855)|0);
  _mrb_raise($56,$58,65063);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _mrb_singleton_class($agg$result,$mrb,$v) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $v = $v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $1 = sp;
 $0 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = ((($v)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[$v>>2]|0;
   $8 = ($7|0)!=(0);
   if (!($8)) {
    $9 = $0;
    $10 = ((($9)) + 76|0);
    $11 = HEAP32[$10>>2]|0;
    _mrb_obj_value_675($agg$result,$11);
    STACKTOP = sp;return;
   }
  }
  $12 = $0;
  $13 = ((($12)) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  _mrb_obj_value_675($agg$result,$14);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $15 = $0;
  $16 = ((($15)) + 68|0);
  $17 = HEAP32[$16>>2]|0;
  _mrb_obj_value_675($agg$result,$17);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $18 = $0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  _mrb_obj_value_675($agg$result,$20);
  STACKTOP = sp;return;
  break;
 }
 case 6: case 3: case 4:  {
  $21 = $0;
  $22 = $0;
  $23 = (_mrb_class_get($22,68905)|0);
  _mrb_raise($21,$23,65087);
  // unreachable;
  break;
 }
 default: {
  $24 = HEAP32[$v>>2]|0;
  $obj = $24;
  $25 = $0;
  $26 = $obj;
  _prepare_singleton_class($25,$26);
  $27 = $0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = $0;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $0;
    $38 = ((($37)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)!=(0|0);
    if ($44) {
     $45 = $0;
     $46 = $obj;
     $47 = ((($46)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $0;
     $50 = (_mrb_intern_static($49,64561,9)|0);
     $51 = $0;
     $52 = ((($51)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($55)) + 44|0);
     $57 = HEAP32[$56>>2]|0;
     _mrb_obj_value_675($1,$57);
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
     _mrb_obj_iv_set($45,$48,$50,$$byval_copy);
    }
   }
  }
  $58 = $obj;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  _mrb_obj_value_675($agg$result,$60);
  STACKTOP = sp;return;
 }
 }
}
function _mrb_define_singleton_method($mrb,$o,$name,$func,$aspec) {
 $mrb = $mrb|0;
 $o = $o|0;
 $name = $name|0;
 $func = $func|0;
 $aspec = $aspec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $o;
 $2 = $name;
 $3 = $func;
 $4 = $aspec;
 $5 = $0;
 $6 = $1;
 _prepare_singleton_class($5,$6);
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $2;
 $13 = (_mrb_intern_cstr($11,$12)|0);
 $14 = $3;
 $15 = $4;
 _mrb_define_method_id($7,$10,$13,$14,$15);
 STACKTOP = sp;return;
}
function _mrb_define_class_method($mrb,$c,$name,$func,$aspec) {
 $mrb = $mrb|0;
 $c = $c|0;
 $name = $name|0;
 $func = $func|0;
 $aspec = $aspec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $name;
 $3 = $func;
 $4 = $aspec;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _mrb_define_singleton_method($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function _mrb_method_search_vm($mrb,$cp,$mid) {
 $mrb = $mrb|0;
 $cp = $cp|0;
 $mid = $mid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $h = 0, $k = 0, $m = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $cp;
 $3 = $mid;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $c = $5;
 while(1) {
  $6 = $c;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $c;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $h = $10;
  $11 = $h;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = $h;
   $15 = $3;
   $16 = (_kh_get_mt($13,$14,$15)|0);
   $k = $16;
   $17 = $k;
   $18 = $h;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)!=($19|0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $32 = $c;
  $33 = ((($32)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $c = $34;
 }
 if ((label|0) == 5) {
  $21 = $k;
  $22 = $h;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $m = $26;
  $27 = $m;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $c;
   $30 = $2;
   HEAP32[$30>>2] = $29;
   $31 = $m;
   $0 = $31;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _mrb_method_search($mrb,$c,$mid) {
 $mrb = $mrb|0;
 $c = $c|0;
 $mid = $mid|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $inspect = 0, $m = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 88|0;
 $$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 72|0;
 $inspect = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $0 = $mrb;
 HEAP32[$1>>2] = $c;
 $2 = $mid;
 $7 = $0;
 $8 = $2;
 $9 = (_mrb_method_search_vm($7,$1,$8)|0);
 $m = $9;
 $10 = $m;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $37 = $m;
  STACKTOP = sp;return ($37|0);
 }
 $12 = $0;
 $13 = HEAP32[$1>>2]|0;
 _mrb_obj_value_675($3,$13);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_funcall($inspect,$12,$$byval_copy,68986,0,$vararg_buffer);
 $14 = ((($inspect)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(16);
 if ($16) {
  $17 = HEAP32[$inspect>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 11;
  $20 = $19 & 8;
  $21 = ($20|0)!=(0);
  $22 = HEAP32[$inspect>>2]|0;
  if ($21) {
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 >>> 11;
   $25 = $24 & 496;
   $26 = $25 >> 4;
   $29 = $26;
  } else {
   $27 = ((($22)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28;
  }
  $30 = ($29|0)>(64);
  if ($30) {
   $31 = $0;
   $32 = HEAP32[$1>>2]|0;
   _mrb_obj_value_675($4,$32);
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$4+4>>2]|0;
   _mrb_any_to_s($5,$31,$$byval_copy4);
   ;HEAP32[$inspect>>2]=HEAP32[$5>>2]|0;HEAP32[$inspect+4>>2]=HEAP32[$5+4>>2]|0;
  }
 }
 $33 = $0;
 $34 = $2;
 $35 = $0;
 $36 = $2;
 _mrb_sym2str($6,$35,$36);
 ;HEAP8[$vararg_buffer1>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$6+7>>0]|0;
 $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
 ;HEAP8[$vararg_ptr3>>0]=HEAP8[$inspect>>0]|0;HEAP8[$vararg_ptr3+1>>0]=HEAP8[$inspect+1>>0]|0;HEAP8[$vararg_ptr3+2>>0]=HEAP8[$inspect+2>>0]|0;HEAP8[$vararg_ptr3+3>>0]=HEAP8[$inspect+3>>0]|0;HEAP8[$vararg_ptr3+4>>0]=HEAP8[$inspect+4>>0]|0;HEAP8[$vararg_ptr3+5>>0]=HEAP8[$inspect+5>>0]|0;HEAP8[$vararg_ptr3+6>>0]=HEAP8[$inspect+6>>0]|0;HEAP8[$vararg_ptr3+7>>0]=HEAP8[$inspect+7>>0]|0;
 _mrb_name_error($33,$34,65110,$vararg_buffer1);
 // unreachable;
 return (0)|0;
}
function _mrb_instance_new($agg$result,$mrb,$cv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $cv = $cv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $blk = 0, $blk$byval_copy = 0, $cv$byval_copy = 0, $obj = 0, $obj$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $blk$byval_copy = sp + 80|0;
 $obj$byval_copy = sp + 72|0;
 $cv$byval_copy = sp + 64|0;
 $vararg_buffer = sp;
 $obj = sp + 48|0;
 $blk = sp + 40|0;
 $argv = sp + 36|0;
 $argc = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $blk;
 (_mrb_get_args($3,65145,$vararg_buffer)|0);
 $4 = $0;
 ;HEAP32[$cv$byval_copy>>2]=HEAP32[$cv>>2]|0;HEAP32[$cv$byval_copy+4>>2]=HEAP32[$cv+4>>2]|0;
 _mrb_instance_alloc($1,$4,$cv$byval_copy);
 ;HEAP32[$obj>>2]=HEAP32[$1>>2]|0;HEAP32[$obj+4>>2]=HEAP32[$1+4>>2]|0;
 $5 = $0;
 $6 = $0;
 $7 = (_mrb_intern_static($6,68953,10)|0);
 $8 = HEAP32[$argc>>2]|0;
 $9 = HEAP32[$argv>>2]|0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 ;HEAP32[$blk$byval_copy>>2]=HEAP32[$blk>>2]|0;HEAP32[$blk$byval_copy+4>>2]=HEAP32[$blk+4>>2]|0;
 _mrb_funcall_with_block($2,$5,$obj$byval_copy,$7,$8,$9,$blk$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$obj>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$obj+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_instance_alloc($agg$result,$mrb,$cv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $cv = $cv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c = 0, $o = 0, $ttype = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$cv>>2]|0;
 $c = $1;
 $2 = $c;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $4 & 255;
 $ttype = $5;
 $6 = $c;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 255;
 $9 = ($8|0)==(12);
 if ($9) {
  $10 = $0;
  $11 = $0;
  $12 = (_mrb_class_get($11,68905)|0);
  _mrb_raise($10,$12,65148);
  // unreachable;
 }
 $13 = $ttype;
 $14 = ($13|0)==(0);
 if ($14) {
  $ttype = 8;
 }
 $15 = $0;
 $16 = $ttype;
 $17 = $c;
 $18 = (_mrb_obj_alloc($15,$16,$17)|0);
 $o = $18;
 $19 = $o;
 _mrb_obj_value_675($agg$result,$19);
 STACKTOP = sp;return;
}
function _mrb_obj_new($agg$result,$mrb,$c,$argc,$argv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $obj = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $argc;
 $3 = $argv;
 $7 = $0;
 $8 = $1;
 _mrb_obj_value_675($4,$8);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_instance_alloc($5,$7,$$byval_copy);
 ;HEAP32[$obj>>2]=HEAP32[$5>>2]|0;HEAP32[$obj+4>>2]=HEAP32[$5+4>>2]|0;
 $9 = $0;
 $10 = $0;
 $11 = (_mrb_intern_static($10,68953,10)|0);
 $12 = $2;
 $13 = $3;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_funcall_argv($6,$9,$obj$byval_copy,$11,$12,$13);
 ;HEAP32[$agg$result>>2]=HEAP32[$obj>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$obj+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_method_missing($mrb,$name,$self,$args) {
 $mrb = $mrb|0;
 $name = $name|0;
 $self = $self|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $args$byval_copy = 0, $inspect = 0, $repr = 0, $self$byval_copy = 0, $self$byval_copy2 = 0;
 var $self$byval_copy3 = 0, $self$byval_copy4 = 0, $self$byval_copy5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args$byval_copy = sp + 120|0;
 $self$byval_copy5 = sp + 112|0;
 $self$byval_copy4 = sp + 104|0;
 $self$byval_copy3 = sp + 96|0;
 $self$byval_copy2 = sp + 88|0;
 $self$byval_copy = sp + 80|0;
 $vararg_buffer = sp;
 $repr = sp + 56|0;
 $2 = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $0 = $mrb;
 $1 = $name;
 $7 = $0;
 $8 = (_mrb_intern_static($7,68986,7)|0);
 $inspect = $8;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($13>>>0)>($18>>>0);
 if ($19) {
  $20 = $0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + -48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $inspect;
  $28 = ($26|0)==($27|0);
  if ($28) {
   $29 = $0;
   ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
   _mrb_any_to_s($2,$29,$self$byval_copy);
   ;HEAP32[$repr>>2]=HEAP32[$2>>2]|0;HEAP32[$repr+4>>2]=HEAP32[$2+4>>2]|0;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $30 = $0;
   $31 = $inspect;
   ;HEAP32[$self$byval_copy2>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy2+4>>2]=HEAP32[$self+4>>2]|0;
   $32 = (_mrb_respond_to($30,$self$byval_copy2,$31)|0);
   $33 = $32&255;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $0;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $0;
    $41 = ((($40)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $39;
    $46 = $44;
    $47 = (($45) - ($46))|0;
    $48 = (($47|0) / 48)&-1;
    $49 = ($48|0)<(64);
    if ($49) {
     $50 = $0;
     $51 = $inspect;
     ;HEAP32[$self$byval_copy3>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy3+4>>2]=HEAP32[$self+4>>2]|0;
     _mrb_funcall_argv($3,$50,$self$byval_copy3,$51,0,0);
     ;HEAP32[$repr>>2]=HEAP32[$3>>2]|0;HEAP32[$repr+4>>2]=HEAP32[$3+4>>2]|0;
     $52 = ((($repr)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(16);
     if (!($54)) {
      break;
     }
     $55 = HEAP32[$repr>>2]|0;
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 >>> 11;
     $58 = $57 & 8;
     $59 = ($58|0)!=(0);
     $60 = HEAP32[$repr>>2]|0;
     if ($59) {
      $61 = HEAP32[$60>>2]|0;
      $62 = $61 >>> 11;
      $63 = $62 & 496;
      $64 = $63 >> 4;
      $67 = $64;
     } else {
      $65 = ((($60)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $66;
     }
     $68 = ($67|0)>(64);
     if (!($68)) {
      break;
     }
     $69 = $0;
     ;HEAP32[$self$byval_copy4>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy4+4>>2]=HEAP32[$self+4>>2]|0;
     _mrb_any_to_s($4,$69,$self$byval_copy4);
     ;HEAP32[$repr>>2]=HEAP32[$4>>2]|0;HEAP32[$repr+4>>2]=HEAP32[$4+4>>2]|0;
     break;
    }
   }
   $70 = $0;
   ;HEAP32[$self$byval_copy5>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy5+4>>2]=HEAP32[$self+4>>2]|0;
   _mrb_any_to_s($5,$70,$self$byval_copy5);
   ;HEAP32[$repr>>2]=HEAP32[$5>>2]|0;HEAP32[$repr+4>>2]=HEAP32[$5+4>>2]|0;
  }
 } while(0);
 $71 = $0;
 $72 = $1;
 $73 = $0;
 $74 = $1;
 _mrb_sym2str($6,$73,$74);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$6>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$6+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$6+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$6+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$6+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$6+7>>0]|0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 ;HEAP8[$vararg_ptr1>>0]=HEAP8[$repr>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$repr+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$repr+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$repr+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$repr+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$repr+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$repr+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$repr+7>>0]|0;
 ;HEAP32[$args$byval_copy>>2]=HEAP32[$args>>2]|0;HEAP32[$args$byval_copy+4>>2]=HEAP32[$args+4>>2]|0;
 _mrb_no_method_error($71,$72,$args$byval_copy,65189,$vararg_buffer);
 // unreachable;
}
function _mrb_respond_to($mrb,$obj,$mid) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $mid = $mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $mid;
 $2 = $0;
 $3 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $4 = (_mrb_class_741($3,$obj$byval_copy)|0);
 $5 = $1;
 $6 = (_mrb_obj_respond_to($2,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _mrb_class_741($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = HEAP32[$v>>2]|0;
   $5 = ($4|0)!=(0);
   $6 = $1;
   if ($5) {
    $7 = ((($6)) + 72|0);
    $8 = HEAP32[$7>>2]|0;
    $0 = $8;
    break L1;
   } else {
    $9 = ((($6)) + 76|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break L1;
   }
   break;
  }
  case 2:  {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   break;
  }
  case 4:  {
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   break;
  }
  case 3:  {
   $17 = $1;
   $18 = ((($17)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $0 = $19;
   break;
  }
  case 6:  {
   $20 = $1;
   $21 = ((($20)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $0 = $22;
   break;
  }
  case 7:  {
   $23 = $1;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $0 = $25;
   break;
  }
  case 20:  {
   $0 = 0;
   break;
  }
  default: {
   $26 = HEAP32[$v>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
  }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _mrb_obj_respond_to($mrb,$c,$mid) {
 $mrb = $mrb|0;
 $c = $c|0;
 $mid = $mid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $c;
 $3 = $mid;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 9;
   break;
  }
  $6 = $2;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $h = $8;
  $9 = $h;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $1;
   $12 = $h;
   $13 = $3;
   $14 = (_kh_get_mt($11,$12,$13)|0);
   $k = $14;
   $15 = $k;
   $16 = $h;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15|0)!=($17|0);
   if ($18) {
    break;
   }
  }
  $26 = $2;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $2 = $28;
 }
 if ((label|0) == 9) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $19 = $k;
 $20 = $h;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _mrb_class_path($agg$result,$mrb,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $base$byval_copy = 0, $classpath = 0, $len = 0, $name = 0, $outer = 0, $path = 0, $path$byval_copy = 0, $path$byval_copy1 = 0, $path$byval_copy2 = 0, $path$byval_copy3 = 0, $path$byval_copy4 = 0, $path$byval_copy5 = 0;
 var $path$byval_copy6 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path$byval_copy6 = sp + 176|0;
 $path$byval_copy5 = sp + 168|0;
 $path$byval_copy4 = sp + 160|0;
 $base$byval_copy = sp + 152|0;
 $path$byval_copy3 = sp + 144|0;
 $path$byval_copy2 = sp + 136|0;
 $$byval_copy = sp + 128|0;
 $path$byval_copy1 = sp + 120|0;
 $path$byval_copy = sp + 112|0;
 $path = sp + 96|0;
 $2 = sp + 80|0;
 $len = sp + 64|0;
 $base = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $0 = $mrb;
 $1 = $c;
 $10 = $0;
 $11 = (_mrb_intern_static($10,65218,13)|0);
 $classpath = $11;
 $12 = $0;
 $13 = $1;
 $14 = $classpath;
 _mrb_obj_iv_get($2,$12,$13,$14);
 ;HEAP32[$path>>2]=HEAP32[$2>>2]|0;HEAP32[$path+4>>2]=HEAP32[$2+4>>2]|0;
 $15 = ((($path)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[$path>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   $20 = $0;
   $21 = $1;
   $22 = (_mrb_class_outer_module($20,$21)|0);
   $outer = $22;
   $23 = $0;
   $24 = $1;
   $25 = $outer;
   $26 = (_mrb_class_sym($23,$24,$25)|0);
   $sym = $26;
   $27 = $sym;
   $28 = ($27|0)==(0);
   if ($28) {
    _mrb_nil_value_703($agg$result);
    STACKTOP = sp;return;
   }
   $29 = $outer;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $outer;
    $32 = $0;
    $33 = ((($32)) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($31|0)!=($34|0);
    if ($35) {
     $36 = $0;
     $37 = $outer;
     _mrb_class_path($base,$36,$37);
     $38 = $0;
     _mrb_str_buf_new($3,$38,0);
     ;HEAP32[$path>>2]=HEAP32[$3>>2]|0;HEAP32[$path+4>>2]=HEAP32[$3+4>>2]|0;
     $39 = ((($base)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$base>>2]|0;
      $43 = ($42|0)!=(0);
      if ($43) {
       label = 10;
      } else {
       $44 = $0;
       ;HEAP32[$path$byval_copy>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy+4>>2]=HEAP32[$path+4>>2]|0;
       _mrb_str_cat($4,$44,$path$byval_copy,65232,8);
       $45 = $0;
       $46 = $0;
       $47 = $outer;
       _mrb_ptr_to_str($5,$46,$47);
       ;HEAP32[$path$byval_copy1>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy1+4>>2]=HEAP32[$path+4>>2]|0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
       _mrb_str_concat($45,$path$byval_copy1,$$byval_copy);
       $48 = $0;
       ;HEAP32[$path$byval_copy2>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy2+4>>2]=HEAP32[$path+4>>2]|0;
       _mrb_str_cat($6,$48,$path$byval_copy2,65241,1);
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      $49 = $0;
      ;HEAP32[$path$byval_copy3>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy3+4>>2]=HEAP32[$path+4>>2]|0;
      ;HEAP32[$base$byval_copy>>2]=HEAP32[$base>>2]|0;HEAP32[$base$byval_copy+4>>2]=HEAP32[$base+4>>2]|0;
      _mrb_str_concat($49,$path$byval_copy3,$base$byval_copy);
     }
     $50 = $0;
     ;HEAP32[$path$byval_copy4>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy4+4>>2]=HEAP32[$path+4>>2]|0;
     _mrb_str_cat($7,$50,$path$byval_copy4,65243,2);
     $51 = $0;
     $52 = $sym;
     $53 = (_mrb_sym2name_len($51,$52,$len)|0);
     $name = $53;
     $54 = $0;
     $55 = $name;
     $56 = HEAP32[$len>>2]|0;
     ;HEAP32[$path$byval_copy5>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy5+4>>2]=HEAP32[$path+4>>2]|0;
     _mrb_str_cat($8,$54,$path$byval_copy5,$55,$56);
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    $57 = $0;
    $58 = $sym;
    $59 = (_mrb_sym2name_len($57,$58,$len)|0);
    $name = $59;
    $60 = $0;
    $61 = $name;
    $62 = HEAP32[$len>>2]|0;
    _mrb_str_new($9,$60,$61,$62);
    ;HEAP32[$path>>2]=HEAP32[$9>>2]|0;HEAP32[$path+4>>2]=HEAP32[$9+4>>2]|0;
   }
   $63 = $0;
   $64 = $1;
   $65 = $classpath;
   ;HEAP32[$path$byval_copy6>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy6+4>>2]=HEAP32[$path+4>>2]|0;
   _mrb_obj_iv_set($63,$64,$65,$path$byval_copy6);
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$path>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$path+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_class_name($mrb,$c) {
 $mrb = $mrb|0;
 $c = $c|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path = 0, $path$byval_copy = 0, $path$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $path$byval_copy = sp + 40|0;
 $path = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $c;
 $5 = $0;
 $6 = $1;
 _mrb_class_path($path,$5,$6);
 $7 = ((($path)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$path>>2]|0;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $0;
   _mrb_str_new_static($2,$12,65232,8);
   ;HEAP32[$path>>2]=HEAP32[$2>>2]|0;HEAP32[$path+4>>2]=HEAP32[$2+4>>2]|0;
   $13 = $0;
   $14 = $0;
   $15 = $1;
   _mrb_ptr_to_str($3,$14,$15);
   ;HEAP32[$path$byval_copy>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy+4>>2]=HEAP32[$path+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
   _mrb_str_concat($13,$path$byval_copy,$$byval_copy);
   $16 = $0;
   ;HEAP32[$path$byval_copy1>>2]=HEAP32[$path>>2]|0;HEAP32[$path$byval_copy1+4>>2]=HEAP32[$path+4>>2]|0;
   _mrb_str_cat($4,$16,$path$byval_copy1,65241,1);
  }
 }
 $17 = HEAP32[$path>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 8;
 $21 = ($20|0)!=(0);
 $22 = HEAP32[$path>>2]|0;
 $23 = ((($22)) + 12|0);
 if ($21) {
  $26 = $23;
  STACKTOP = sp;return ($26|0);
 } else {
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _mrb_obj_classname($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $3 = (_mrb_obj_class($2,$obj$byval_copy)|0);
 $4 = (_mrb_class_name($1,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mrb_obj_class($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $2 = (_mrb_class_741($1,$obj$byval_copy)|0);
 $3 = (_mrb_class_real($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _mrb_alias_method($mrb,$c,$a,$b) {
 $mrb = $mrb|0;
 $c = $c|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $a;
 $3 = $b;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = (_mrb_method_search($4,$5,$6)|0);
 $m = $7;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $m;
 _mrb_define_method_raw($8,$9,$10,$11);
 STACKTOP = sp;return;
}
function _mrb_undef_method($mrb,$c,$name) {
 $mrb = $mrb|0;
 $c = $c|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $c;
 $2 = $name;
 $3 = $0;
 $4 = $1;
 $5 = $0;
 $6 = $2;
 $7 = (_mrb_intern_cstr($5,$6)|0);
 _undef_method($3,$4,$7);
 STACKTOP = sp;return;
}
function _undef_method($mrb,$c,$a) {
 $mrb = $mrb|0;
 $c = $c|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $0 = $mrb;
 $1 = $c;
 $2 = $a;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = (_mrb_obj_respond_to($5,$6,$7)|0);
 $9 = ($8<<24>>24)!=(0);
 $10 = $0;
 if ($9) {
  $15 = $1;
  $16 = $2;
  _mrb_define_method_raw($10,$15,$16,0);
  STACKTOP = sp;return;
 } else {
  $11 = $2;
  $12 = $0;
  $13 = $2;
  _mrb_sym2str($3,$12,$13);
  $14 = $1;
  _mrb_obj_value_675($4,$14);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$3+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$4+7>>0]|0;
  _mrb_name_error($10,$11,65246,$vararg_buffer);
  // unreachable;
 }
}
function _mrb_undef_class_method($mrb,$c,$name) {
 $mrb = $mrb|0;
 $c = $c|0;
 $name = $name|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $name;
 $5 = $0;
 $6 = $0;
 $7 = $1;
 _mrb_obj_value_675($3,$7);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_singleton_class($4,$6,$$byval_copy);
 $8 = HEAP32[$4>>2]|0;
 $9 = $2;
 _mrb_undef_method($5,$8,$9);
 STACKTOP = sp;return;
}
function _mrb_mod_module_function($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $argc = 0, $argv = 0, $i = 0;
 var $method_rproc = 0, $mid = 0, $mod$byval_copy = 0, $rclass = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $mod$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $argv = sp + 32|0;
 $argc = sp + 28|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_check_type($1,$mod$byval_copy,10);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($2,68114,$vararg_buffer)|0);
 $3 = HEAP32[$argc>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = HEAP32[$argc>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = $i;
  $10 = HEAP32[$argv>>2]|0;
  $11 = (($10) + ($9<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$11+4>>2]|0;
  _mrb_check_type($8,$$byval_copy,4);
  $12 = $i;
  $13 = HEAP32[$argv>>2]|0;
  $14 = (($13) + ($12<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  $mid = $15;
  $16 = HEAP32[$mod>>2]|0;
  $rclass = $16;
  $17 = $0;
  $18 = $rclass;
  $19 = $mid;
  $20 = (_mrb_method_search($17,$18,$19)|0);
  $method_rproc = $20;
  $21 = $0;
  $22 = $rclass;
  _prepare_singleton_class($21,$22);
  $23 = $0;
  $24 = (_mrb_gc_arena_save($23)|0);
  $ai = $24;
  $25 = $0;
  $26 = $rclass;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $mid;
  $30 = $method_rproc;
  _mrb_define_method_raw($25,$28,$29,$30);
  $31 = $0;
  $32 = $ai;
  _mrb_gc_arena_restore($31,$32);
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_init_class($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bob = 0, $cls = 0, $mod = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 96|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 80|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $6 = $0;
 $7 = (_boot_defclass($6,0)|0);
 $bob = $7;
 $8 = $0;
 $9 = $bob;
 $10 = (_boot_defclass($8,$9)|0);
 $obj = $10;
 $11 = $obj;
 $12 = $0;
 $13 = ((($12)) + 32|0);
 HEAP32[$13>>2] = $11;
 $14 = $0;
 $15 = $obj;
 $16 = (_boot_defclass($14,$15)|0);
 $mod = $16;
 $17 = $mod;
 $18 = $0;
 $19 = ((($18)) + 40|0);
 HEAP32[$19>>2] = $17;
 $20 = $0;
 $21 = $mod;
 $22 = (_boot_defclass($20,$21)|0);
 $cls = $22;
 $23 = $cls;
 $24 = $0;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = $23;
 $26 = $cls;
 $27 = $cls;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $mod;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $26;
 $31 = $obj;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $26;
 $33 = $bob;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = $26;
 $35 = $0;
 $36 = $bob;
 _prepare_singleton_class($35,$36);
 $37 = $0;
 $38 = $obj;
 _prepare_singleton_class($37,$38);
 $39 = $0;
 $40 = $mod;
 _prepare_singleton_class($39,$40);
 $41 = $0;
 $42 = $cls;
 _prepare_singleton_class($41,$42);
 $43 = $0;
 $44 = $bob;
 $45 = $bob;
 _mrb_obj_value_675($1,$45);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_define_const($43,$44,65283,$$byval_copy);
 $46 = $0;
 $47 = $obj;
 $48 = $bob;
 _mrb_obj_value_675($2,$48);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_define_const($46,$47,65283,$$byval_copy1);
 $49 = $0;
 $50 = $obj;
 $51 = $obj;
 _mrb_obj_value_675($3,$51);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_define_const($49,$50,65295,$$byval_copy2);
 $52 = $0;
 $53 = $obj;
 $54 = $mod;
 _mrb_obj_value_675($4,$54);
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_define_const($52,$53,65302,$$byval_copy3);
 $55 = $0;
 $56 = $obj;
 $57 = $cls;
 _mrb_obj_value_675($5,$57);
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$5+4>>2]|0;
 _mrb_define_const($55,$56,65309,$$byval_copy4);
 $58 = $0;
 $59 = $bob;
 $60 = $0;
 $61 = (_mrb_intern_static($60,65283,11)|0);
 _name_class($58,$59,$61);
 $62 = $0;
 $63 = $obj;
 $64 = $0;
 $65 = (_mrb_intern_static($64,65295,6)|0);
 _name_class($62,$63,$65);
 $66 = $0;
 $67 = $mod;
 $68 = $0;
 $69 = (_mrb_intern_static($68,65302,6)|0);
 _name_class($66,$67,$69);
 $70 = $0;
 $71 = $cls;
 $72 = $0;
 $73 = (_mrb_intern_static($72,65309,5)|0);
 _name_class($70,$71,$73);
 $74 = $0;
 $75 = $0;
 $76 = ((($75)) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (_mrb_define_class($74,65315,$77)|0);
 $79 = $0;
 $80 = ((($79)) + 44|0);
 HEAP32[$80>>2] = $78;
 $81 = $0;
 $82 = ((($81)) + 44|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 >>> 11;
 $86 = $85 & -256;
 $87 = $86 | 13;
 $88 = $0;
 $89 = ((($88)) + 44|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$90>>2]|0;
 $92 = $87 & 2097151;
 $93 = $92 << 11;
 $94 = $91 & 2047;
 $95 = $94 | $93;
 HEAP32[$90>>2] = $95;
 $96 = $cls;
 $97 = HEAP32[$96>>2]|0;
 $98 = $97 >>> 11;
 $99 = $98 & -256;
 $100 = $99 | 9;
 $101 = $cls;
 $102 = HEAP32[$101>>2]|0;
 $103 = $100 & 2097151;
 $104 = $103 << 11;
 $105 = $102 & 2047;
 $106 = $105 | $104;
 HEAP32[$101>>2] = $106;
 $107 = $0;
 $108 = $bob;
 _mrb_define_method($107,$108,68953,233,0);
 $109 = $0;
 $110 = $bob;
 _mrb_define_method($109,$110,65320,234,0);
 $111 = $0;
 $112 = $bob;
 _mrb_define_method($111,$112,65322,235,4096);
 $113 = $0;
 $114 = $cls;
 _mrb_define_class_method($113,$114,67683,236,8192);
 $115 = $0;
 $116 = $cls;
 _mrb_define_method($115,$116,65344,237,0);
 $117 = $0;
 $118 = $cls;
 _mrb_define_method($117,$118,67683,238,4096);
 $119 = $0;
 $120 = $cls;
 _mrb_define_method($119,$120,68953,239,8192);
 $121 = $0;
 $122 = $cls;
 _mrb_define_method($121,$122,64799,233,262144);
 $123 = $mod;
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 >>> 11;
 $126 = $125 & -256;
 $127 = $126 | 10;
 $128 = $mod;
 $129 = HEAP32[$128>>2]|0;
 $130 = $127 & 2097151;
 $131 = $130 << 11;
 $132 = $129 & 2047;
 $133 = $132 | $131;
 HEAP32[$128>>2] = $133;
 $134 = $0;
 $135 = $mod;
 _mrb_define_method($134,$135,65355,240,262144);
 $136 = $0;
 $137 = $mod;
 _mrb_define_method($136,$137,65424,241,262144);
 $138 = $0;
 $139 = $mod;
 _mrb_define_method($138,$139,65443,242,524288);
 $140 = $0;
 $141 = $mod;
 _mrb_define_method($140,$141,68155,243,262144);
 $142 = $0;
 $143 = $mod;
 _mrb_define_method($142,$143,68169,233,262144);
 $144 = $0;
 $145 = $mod;
 _mrb_define_method($144,$145,65462,244,4096);
 $146 = $0;
 $147 = $mod;
 _mrb_define_method($146,$147,65487,233,262144);
 $148 = $0;
 $149 = $mod;
 _mrb_define_method($148,$149,65470,245,262144);
 $150 = $0;
 $151 = $mod;
 _mrb_define_method($150,$151,65497,246,4096);
 $152 = $0;
 $153 = $mod;
 _mrb_define_method($152,$153,68944,247,262144);
 $154 = $0;
 $155 = $mod;
 _mrb_define_method($154,$155,65505,248,262144);
 $156 = $0;
 $157 = $mod;
 _mrb_define_method($156,$157,65530,249,4096);
 $158 = $0;
 $159 = $mod;
 _mrb_define_method($158,$159,65521,233,262144);
 $160 = $0;
 $161 = $mod;
 _mrb_define_method($160,$161,65541,250,0);
 $162 = $0;
 $163 = $mod;
 _mrb_define_method($162,$163,68953,251,0);
 $164 = $0;
 $165 = $mod;
 _mrb_define_method($164,$165,65561,252,4096);
 $166 = $0;
 $167 = $mod;
 _mrb_define_method($166,$167,65578,253,262144);
 $168 = $0;
 $169 = $mod;
 _mrb_define_method($168,$169,65594,249,4096);
 $170 = $0;
 $171 = $mod;
 _mrb_define_method($170,$171,65606,254,4096);
 $172 = $0;
 $173 = $mod;
 _mrb_define_method($172,$173,65622,255,4096);
 $174 = $0;
 $175 = $mod;
 _mrb_define_method($174,$175,65630,255,4096);
 $176 = $0;
 $177 = $mod;
 _mrb_define_method($176,$177,65640,255,4096);
 $178 = $0;
 $179 = $mod;
 _mrb_define_method($178,$179,65647,256,262144);
 $180 = $0;
 $181 = $mod;
 _mrb_define_method($180,$181,65730,257,4096);
 $182 = $0;
 $183 = $mod;
 _mrb_define_method($182,$183,65744,233,262144);
 $184 = $0;
 $185 = $mod;
 _mrb_define_method($184,$185,65789,258,4096);
 $186 = $0;
 $187 = $mod;
 _mrb_define_method($186,$187,65803,259,4096);
 $188 = $0;
 $189 = $mod;
 _mrb_define_method($188,$189,68977,260,0);
 $190 = $0;
 $191 = $mod;
 _mrb_define_method($190,$191,68986,260,0);
 $192 = $0;
 $193 = $mod;
 _mrb_define_method($192,$193,69642,261,4096);
 $194 = $0;
 $195 = $mod;
 _mrb_define_method($194,$195,65840,262,0);
 $196 = $0;
 $197 = $mod;
 _mrb_define_method($196,$197,69655,263,4096);
 $198 = $0;
 $199 = $mod;
 _mrb_define_method($198,$199,65850,264,270336);
 $200 = $0;
 $201 = $mod;
 _mrb_define_method($200,$201,65892,265,262144);
 $202 = $0;
 $203 = $mod;
 _mrb_define_method($202,$203,65902,266,524288);
 $204 = $0;
 $205 = $mod;
 _mrb_define_method($204,$205,65912,267,8192);
 $206 = $0;
 $207 = $mod;
 _mrb_define_method($206,$207,65922,268,262144);
 $208 = $0;
 $209 = $mod;
 _mrb_define_method($208,$209,65959,269,262144);
 $210 = $0;
 $211 = $mod;
 _mrb_define_method($210,$211,66029,270,262144);
 $212 = $0;
 $213 = $mod;
 _mrb_define_method($212,$213,66043,271,0);
 $214 = $0;
 $215 = $mod;
 _mrb_define_method($214,$215,69450,272,262144);
 $216 = $0;
 $217 = $mod;
 _mrb_define_class_method($216,$217,65912,273,4096);
 $218 = $0;
 $219 = $cls;
 _mrb_undef_method($218,$219,65505);
 $220 = $0;
 $221 = $cls;
 _mrb_undef_method($220,$221,68155);
 STACKTOP = sp;return;
}
function _mrb_bob_init($agg$result,$mrb,$cv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $cv = $cv|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _mrb_bob_not($agg$result,$mrb,$cv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $cv = $cv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = ((($cv)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3 ^ 1;
 $5 = $4&1;
 $6 = $5&255;
 _mrb_bool_value_763($agg$result,$6);
 STACKTOP = sp;return;
}
function _mrb_bool_value_763($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_bob_missing($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, $alen = 0, $mod$byval_copy = 0, $name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $mod$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $name = sp + 32|0;
 $a = sp + 28|0;
 $alen = sp + 24|0;
 $1 = sp + 16|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $a;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $alen;
 (_mrb_get_args($2,65337,$vararg_buffer)|0);
 $3 = $0;
 $4 = HEAP32[$name>>2]|0;
 $5 = $0;
 $6 = HEAP32[$alen>>2]|0;
 $7 = HEAP32[$a>>2]|0;
 _mrb_ary_new_from_values($1,$5,$6,$7);
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_method_missing($3,$4,$mod$byval_copy,$$byval_copy);
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _mrb_class_new_class($agg$result,$mrb,$cv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $cv = $cv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $blk = 0, $blk$byval_copy = 0, $n = 0, $new_class = 0, $new_class$byval_copy = 0, $super = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $blk$byval_copy = sp + 72|0;
 $new_class$byval_copy = sp + 64|0;
 $vararg_buffer = sp;
 $super = sp + 48|0;
 $blk = sp + 40|0;
 $new_class = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $0 = $mrb;
 $4 = $0;
 HEAP32[$vararg_buffer>>2] = $super;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $blk;
 $5 = (_mrb_get_args($4,65340,$vararg_buffer)|0);
 $n = $5;
 $6 = $n;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  _mrb_obj_value_675($1,$10);
  ;HEAP32[$super>>2]=HEAP32[$1>>2]|0;HEAP32[$super+4>>2]=HEAP32[$1+4>>2]|0;
 }
 $11 = $0;
 $12 = HEAP32[$super>>2]|0;
 $13 = (_mrb_class_new($11,$12)|0);
 _mrb_obj_value_675($2,$13);
 ;HEAP32[$new_class>>2]=HEAP32[$2>>2]|0;HEAP32[$new_class+4>>2]=HEAP32[$2+4>>2]|0;
 $14 = $0;
 $15 = $0;
 $16 = (_mrb_intern_static($15,68953,10)|0);
 $17 = $n;
 ;HEAP32[$new_class$byval_copy>>2]=HEAP32[$new_class>>2]|0;HEAP32[$new_class$byval_copy+4>>2]=HEAP32[$new_class+4>>2]|0;
 ;HEAP32[$blk$byval_copy>>2]=HEAP32[$blk>>2]|0;HEAP32[$blk$byval_copy+4>>2]=HEAP32[$blk+4>>2]|0;
 _mrb_funcall_with_block($3,$14,$new_class$byval_copy,$16,$17,$super,$blk$byval_copy);
 $18 = $0;
 $19 = HEAP32[$super>>2]|0;
 $20 = HEAP32[$new_class>>2]|0;
 _mrb_class_inherited($18,$19,$20);
 ;HEAP32[$agg$result>>2]=HEAP32[$new_class>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$new_class+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_class_superclass($agg$result,$mrb,$klass) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $klass = $klass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$klass>>2]|0;
 $c = $1;
 $2 = $c;
 $3 = (_find_origin($2)|0);
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $c = $5;
 while(1) {
  $6 = $c;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $c;
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 255;
   $11 = ($10|0)==(11);
   $18 = $11;
  } else {
   $18 = 0;
  }
  $12 = $c;
  if (!($18)) {
   break;
  }
  $13 = (_find_origin($12)|0);
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $c = $15;
 }
 $16 = ($12|0)!=(0|0);
 if ($16) {
  $17 = $c;
  _mrb_obj_value_675($agg$result,$17);
  STACKTOP = sp;return;
 } else {
  _mrb_nil_value_703($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_class_initialize($agg$result,$mrb,$c) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $b$byval_copy = 0, $c$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c$byval_copy = sp + 48|0;
 $b$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $a = sp + 24|0;
 $b = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $a;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $b;
 (_mrb_get_args($2,65340,$vararg_buffer)|0);
 $3 = ((($b)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$b>>2]|0;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   ;HEAP32[$agg$result>>2]=HEAP32[$c>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$c+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $8 = $0;
 $9 = HEAP32[$c>>2]|0;
 ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
 ;HEAP32[$c$byval_copy>>2]=HEAP32[$c>>2]|0;HEAP32[$c$byval_copy+4>>2]=HEAP32[$c+4>>2]|0;
 _mrb_yield_with_class($1,$8,$b$byval_copy,1,$c,$c$byval_copy,$9);
 ;HEAP32[$agg$result>>2]=HEAP32[$c>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$c+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_cvar_defined($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $id = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $id = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_cv_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 $6 = (_mrb_cv_defined($4,$mod$byval_copy,$5)|0);
 _mrb_bool_value_763($agg$result,$6);
 STACKTOP = sp;return;
}
function _check_cv_name_sym($mrb,$id) {
 $mrb = $mrb|0;
 $id = $id|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $id;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 _mrb_sym2str($2,$4,$5);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _check_cv_name_str($3,$$byval_copy);
 STACKTOP = sp;return;
}
function _check_cv_name_str($mrb,$str) {
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $s = 0;
 var $str$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$str>>2]|0;
 $7 = ((($6)) + 12|0);
 if ($5) {
  $10 = $7;
 } else {
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
 }
 $s = $10;
 $11 = HEAP32[$str>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & 8;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$str>>2]|0;
 if ($15) {
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 496;
  $20 = $19 >> 4;
  $23 = $20;
 } else {
  $21 = ((($16)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22;
 }
 $len = $23;
 $24 = $len;
 $25 = ($24|0)<(3);
 if (!($25)) {
  $26 = $s;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(64);
  if ($29) {
   $30 = $s;
   $31 = ((($30)) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)==(64);
   if ($34) {
    STACKTOP = sp;return;
   }
  }
 }
 $35 = $0;
 $36 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $37 = (_mrb_intern_str($36,$str$byval_copy)|0);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$str>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$str+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$str+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$str+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$str+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$str+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$str+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$str+7>>0]|0;
 _mrb_name_error($35,$37,65379,$vararg_buffer);
 // unreachable;
}
function _mrb_mod_cvar_get($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $id = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $id = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_cv_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_cv_get($agg$result,$4,$mod$byval_copy,$5);
 STACKTOP = sp;return;
}
function _mrb_mod_cvar_set($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $id = 0, $mod$byval_copy = 0, $value = 0, $value$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$byval_copy = sp + 40|0;
 $mod$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $value = sp + 16|0;
 $id = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $value;
 (_mrb_get_args($1,68331,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_cv_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 ;HEAP32[$value$byval_copy>>2]=HEAP32[$value>>2]|0;HEAP32[$value$byval_copy+4>>2]=HEAP32[$value+4>>2]|0;
 _mrb_cv_set($4,$mod$byval_copy,$5,$value$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$value>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$value+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_extend_object($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $mod$byval_copy = 0, $obj = 0, $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 40|0;
 $mod$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $obj = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_check_type($2,$mod$byval_copy,10);
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($3,68900,$vararg_buffer)|0);
 $4 = $0;
 $5 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_singleton_class($1,$5,$obj$byval_copy);
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$mod>>2]|0;
 _mrb_include_module($4,$6,$7);
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_prepend($agg$result,$mrb,$klass) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $klass = $klass|0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 72|0;
 $$byval_copy8 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $argv = sp + 48|0;
 $argc = sp + 44|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($3,68114,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = HEAP32[$argc>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $i;
  $9 = HEAP32[$argv>>2]|0;
  $10 = (($9) + ($8<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;
  _mrb_check_type($7,$$byval_copy,10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 while(1) {
  $13 = HEAP32[$argc>>2]|0;
  $14 = (($13) + -1)|0;
  HEAP32[$argc>>2] = $14;
  $15 = ($13|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = HEAP32[$argc>>2]|0;
  $18 = HEAP32[$argv>>2]|0;
  $19 = (($18) + ($17<<3)|0);
  ;HEAP8[$vararg_buffer2>>0]=HEAP8[$klass>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$klass+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$klass+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$klass+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$klass+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$klass+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$klass+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$klass+7>>0]|0;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$19+4>>2]|0;
  _mrb_funcall($1,$16,$$byval_copy8,65470,1,$vararg_buffer2);
  $20 = $0;
  $21 = HEAP32[$argc>>2]|0;
  $22 = HEAP32[$argv>>2]|0;
  $23 = (($22) + ($21<<3)|0);
  ;HEAP8[$vararg_buffer5>>0]=HEAP8[$klass>>0]|0;HEAP8[$vararg_buffer5+1>>0]=HEAP8[$klass+1>>0]|0;HEAP8[$vararg_buffer5+2>>0]=HEAP8[$klass+2>>0]|0;HEAP8[$vararg_buffer5+3>>0]=HEAP8[$klass+3>>0]|0;HEAP8[$vararg_buffer5+4>>0]=HEAP8[$klass+4>>0]|0;HEAP8[$vararg_buffer5+5>>0]=HEAP8[$klass+5>>0]|0;HEAP8[$vararg_buffer5+6>>0]=HEAP8[$klass+6>>0]|0;HEAP8[$vararg_buffer5+7>>0]=HEAP8[$klass+7>>0]|0;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$23+4>>2]|0;
  _mrb_funcall($2,$20,$$byval_copy9,65487,1,$vararg_buffer5);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$klass>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$klass+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_prepend_features($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $klass = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $klass = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_check_type($1,$mod$byval_copy,10);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $klass;
 (_mrb_get_args($2,68256,$vararg_buffer)|0);
 $3 = $0;
 $4 = HEAP32[$klass>>2]|0;
 $5 = HEAP32[$mod>>2]|0;
 _mrb_prepend_module($3,$4,$5);
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_include($agg$result,$mrb,$klass) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $klass = $klass|0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 72|0;
 $$byval_copy8 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $argv = sp + 48|0;
 $argc = sp + 44|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($3,68114,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = HEAP32[$argc>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $i;
  $9 = HEAP32[$argv>>2]|0;
  $10 = (($9) + ($8<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;
  _mrb_check_type($7,$$byval_copy,10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 while(1) {
  $13 = HEAP32[$argc>>2]|0;
  $14 = (($13) + -1)|0;
  HEAP32[$argc>>2] = $14;
  $15 = ($13|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = HEAP32[$argc>>2]|0;
  $18 = HEAP32[$argv>>2]|0;
  $19 = (($18) + ($17<<3)|0);
  ;HEAP8[$vararg_buffer2>>0]=HEAP8[$klass>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$klass+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$klass+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$klass+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$klass+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$klass+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$klass+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$klass+7>>0]|0;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$19+4>>2]|0;
  _mrb_funcall($1,$16,$$byval_copy8,65505,1,$vararg_buffer2);
  $20 = $0;
  $21 = HEAP32[$argc>>2]|0;
  $22 = HEAP32[$argv>>2]|0;
  $23 = (($22) + ($21<<3)|0);
  ;HEAP8[$vararg_buffer5>>0]=HEAP8[$klass>>0]|0;HEAP8[$vararg_buffer5+1>>0]=HEAP8[$klass+1>>0]|0;HEAP8[$vararg_buffer5+2>>0]=HEAP8[$klass+2>>0]|0;HEAP8[$vararg_buffer5+3>>0]=HEAP8[$klass+3>>0]|0;HEAP8[$vararg_buffer5+4>>0]=HEAP8[$klass+4>>0]|0;HEAP8[$vararg_buffer5+5>>0]=HEAP8[$klass+5>>0]|0;HEAP8[$vararg_buffer5+6>>0]=HEAP8[$klass+6>>0]|0;HEAP8[$vararg_buffer5+7>>0]=HEAP8[$klass+7>>0]|0;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$23+4>>2]|0;
  _mrb_funcall($2,$20,$$byval_copy9,65521,1,$vararg_buffer5);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$klass>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$klass+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_include_p($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $mod2 = 0;
 var $mod2$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod2$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $mod2 = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$mod>>2]|0;
 $c = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $mod2;
 (_mrb_get_args($2,68256,$vararg_buffer)|0);
 $3 = $0;
 ;HEAP32[$mod2$byval_copy>>2]=HEAP32[$mod2>>2]|0;HEAP32[$mod2$byval_copy+4>>2]=HEAP32[$mod2+4>>2]|0;
 _mrb_check_type($3,$mod2$byval_copy,10);
 while(1) {
  $4 = $c;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $c;
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 255;
  $9 = ($8|0)==(11);
  if ($9) {
   $10 = $c;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$mod2>>2]|0;
   $14 = ($12|0)==($13|0);
   if ($14) {
    label = 5;
    break;
   }
  }
  $15 = $c;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $c = $17;
 }
 if ((label|0) == 5) {
  _mrb_true_value_786($agg$result);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  _mrb_false_value_787($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_true_value_786($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_false_value_787($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_append_features($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $klass = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $klass = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_check_type($1,$mod$byval_copy,10);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $klass;
 (_mrb_get_args($2,68256,$vararg_buffer)|0);
 $3 = $0;
 $4 = HEAP32[$klass>>2]|0;
 $5 = HEAP32[$mod>>2]|0;
 _mrb_include_module($3,$4,$5);
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_included_modules($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $origin = 0, $result = 0, $result$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $result$byval_copy = sp + 40|0;
 $result = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = HEAP32[$self>>2]|0;
 $c = $3;
 $4 = $c;
 $origin = $4;
 $5 = $origin;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 11;
 $8 = $7 & 524288;
 $9 = ($8|0)!=(0);
 L1: do {
  if ($9) {
   $10 = $origin;
   $11 = ((($10)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $origin = $12;
   while(1) {
    $13 = $origin;
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 >>> 11;
    $16 = $15 & 1048576;
    $17 = ($16|0)!=(0);
    $18 = $17 ^ 1;
    if (!($18)) {
     break L1;
    }
    $19 = $origin;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $origin = $21;
   }
  }
 } while(0);
 $22 = $0;
 _mrb_ary_new($1,$22);
 ;HEAP32[$result>>2]=HEAP32[$1>>2]|0;HEAP32[$result+4>>2]=HEAP32[$1+4>>2]|0;
 while(1) {
  $23 = $c;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   break;
  }
  $25 = $c;
  $26 = $origin;
  $27 = ($25|0)!=($26|0);
  if ($27) {
   $28 = $c;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 255;
   $31 = ($30|0)==(11);
   if ($31) {
    $32 = $c;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 & 255;
    $37 = ($36|0)==(10);
    if ($37) {
     $38 = $0;
     $39 = $c;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     _mrb_obj_value_675($2,$41);
     ;HEAP32[$result$byval_copy>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy+4>>2]=HEAP32[$result+4>>2]|0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
     _mrb_ary_push($38,$result$byval_copy,$$byval_copy);
    }
   }
  }
  $42 = $c;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $c = $44;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_initialize($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $b$byval_copy = 0, $m = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 48|0;
 $b$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $b = sp + 24|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = HEAP32[$mod>>2]|0;
 $m = $2;
 $3 = $0;
 $4 = $m;
 _boot_initmod($3,$4);
 $5 = $0;
 HEAP32[$vararg_buffer>>2] = $b;
 (_mrb_get_args($5,65558,$vararg_buffer)|0);
 $6 = ((($b)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[$b>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $11 = $0;
 $12 = $m;
 ;HEAP32[$b$byval_copy>>2]=HEAP32[$b>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_yield_with_class($1,$11,$b$byval_copy,1,$mod,$mod$byval_copy,$12);
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_instance_methods($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $recur = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $recur = sp + 12|0;
 $0 = $mrb;
 $1 = HEAP32[$mod>>2]|0;
 $c = $1;
 HEAP8[$recur>>0] = 1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($2,68376,$vararg_buffer)|0);
 $3 = $0;
 $4 = HEAP8[$recur>>0]|0;
 $5 = $c;
 _mrb_class_instance_method_list($agg$result,$3,$4,$5,0);
 STACKTOP = sp;return;
}
function _mrb_mod_method_defined($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $id = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $id = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$mod>>2]|0;
 $4 = HEAP32[$id>>2]|0;
 $5 = (_mrb_obj_respond_to($2,$3,$4)|0);
 _mrb_bool_value_763($agg$result,$5);
 STACKTOP = sp;return;
}
function _mrb_mod_dummy_visibility($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_remove_cvar($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $id = 0, $mod$byval_copy = 0, $mod$byval_copy9 = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy9 = sp + 96|0;
 $mod$byval_copy = sp + 88|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $val = sp + 72|0;
 $id = sp + 64|0;
 $1 = sp + 56|0;
 $2 = sp + 48|0;
 $3 = sp + 40|0;
 $0 = $mrb;
 $4 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($4,68285,$vararg_buffer)|0);
 $5 = $0;
 $6 = HEAP32[$id>>2]|0;
 _check_cv_name_sym($5,$6);
 $7 = $0;
 $8 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_iv_remove($1,$7,$mod$byval_copy,$8);
 ;HEAP32[$val>>2]=HEAP32[$1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$1+4>>2]|0;
 $9 = ((($val)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(5);
 if (!($11)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy9>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy9+4>>2]=HEAP32[$mod+4>>2]|0;
 $14 = (_mrb_cv_defined($12,$mod$byval_copy9,$13)|0);
 $15 = ($14<<24>>24)!=(0);
 $16 = $0;
 $17 = HEAP32[$id>>2]|0;
 $18 = $0;
 $19 = HEAP32[$id>>2]|0;
 if ($15) {
  _mrb_sym2str($2,$18,$19);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$2+7>>0]|0;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  ;HEAP8[$vararg_ptr4>>0]=HEAP8[$mod>>0]|0;HEAP8[$vararg_ptr4+1>>0]=HEAP8[$mod+1>>0]|0;HEAP8[$vararg_ptr4+2>>0]=HEAP8[$mod+2>>0]|0;HEAP8[$vararg_ptr4+3>>0]=HEAP8[$mod+3>>0]|0;HEAP8[$vararg_ptr4+4>>0]=HEAP8[$mod+4>>0]|0;HEAP8[$vararg_ptr4+5>>0]=HEAP8[$mod+5>>0]|0;HEAP8[$vararg_ptr4+6>>0]=HEAP8[$mod+6>>0]|0;HEAP8[$vararg_ptr4+7>>0]=HEAP8[$mod+7>>0]|0;
  _mrb_name_error($16,$17,65669,$vararg_buffer1);
  // unreachable;
 } else {
  _mrb_sym2str($3,$18,$19);
  ;HEAP8[$vararg_buffer5>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_buffer5+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_buffer5+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_buffer5+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_buffer5+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_buffer5+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_buffer5+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_buffer5+7>>0]=HEAP8[$3+7>>0]|0;
  $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
  ;HEAP8[$vararg_ptr8>>0]=HEAP8[$mod>>0]|0;HEAP8[$vararg_ptr8+1>>0]=HEAP8[$mod+1>>0]|0;HEAP8[$vararg_ptr8+2>>0]=HEAP8[$mod+2>>0]|0;HEAP8[$vararg_ptr8+3>>0]=HEAP8[$mod+3>>0]|0;HEAP8[$vararg_ptr8+4>>0]=HEAP8[$mod+4>>0]|0;HEAP8[$vararg_ptr8+5>>0]=HEAP8[$mod+5>>0]|0;HEAP8[$vararg_ptr8+6>>0]=HEAP8[$mod+6>>0]|0;HEAP8[$vararg_ptr8+7>>0]=HEAP8[$mod+7>>0]|0;
  _mrb_name_error($16,$17,65693,$vararg_buffer5);
  // unreachable;
 }
}
function _mrb_mod_remove_method($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $mod$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $argc = sp + 12|0;
 $argv = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($1,68114,$vararg_buffer)|0);
 while(1) {
  $2 = HEAP32[$argc>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[$argc>>2] = $3;
  $4 = ($2|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP32[$argv>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
  _remove_method($5,$mod$byval_copy,$7);
  $8 = HEAP32[$argv>>2]|0;
  $9 = ((($8)) + 8|0);
  HEAP32[$argv>>2] = $9;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$mod>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mod+4>>2]|0;
 STACKTOP = sp;return;
}
function _remove_method($mrb,$mod,$mid) {
 $mrb = $mrb|0;
 $mod = $mod|0;
 $mid = $mid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $h = 0, $k = 0, $mod$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 72|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $0 = $mrb;
 $1 = $mid;
 $5 = HEAP32[$mod>>2]|0;
 $c = $5;
 $6 = $c;
 $7 = (_find_origin($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $h = $9;
 $10 = $h;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = $h;
  $14 = $1;
  $15 = (_kh_get_mt($12,$13,$14)|0);
  $k = $15;
  $16 = $k;
  $17 = $h;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)!=($18|0);
  if ($19) {
   $20 = $0;
   $21 = $h;
   $22 = $k;
   _kh_del_mt($20,$21,$22);
   $23 = $0;
   $24 = $1;
   _mrb_symbol_value_677($2,$24);
   ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
   ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
   _mrb_funcall($3,$23,$mod$byval_copy,65744,1,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 $25 = $0;
 $26 = $1;
 $27 = $0;
 $28 = $1;
 _mrb_sym2str($4,$27,$28);
 ;HEAP8[$vararg_buffer1>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$4+7>>0]|0;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 ;HEAP8[$vararg_ptr4>>0]=HEAP8[$mod>>0]|0;HEAP8[$vararg_ptr4+1>>0]=HEAP8[$mod+1>>0]|0;HEAP8[$vararg_ptr4+2>>0]=HEAP8[$mod+2>>0]|0;HEAP8[$vararg_ptr4+3>>0]=HEAP8[$mod+3>>0]|0;HEAP8[$vararg_ptr4+4>>0]=HEAP8[$mod+4>>0]|0;HEAP8[$vararg_ptr4+5>>0]=HEAP8[$mod+5>>0]|0;HEAP8[$vararg_ptr4+6>>0]=HEAP8[$mod+6>>0]|0;HEAP8[$vararg_ptr4+7>>0]=HEAP8[$mod+7>>0]|0;
 _mrb_name_error($25,$26,65759,$vararg_buffer1);
 // unreachable;
}
function _mrb_mod_attr_reader($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $argc = 0, $argv = 0, $c = 0, $i = 0, $method = 0, $name = 0, $name$byval_copy = 0;
 var $str = 0, $str$byval_copy = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $sym = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy3 = sp + 128|0;
 $name$byval_copy = sp + 120|0;
 $str$byval_copy2 = sp + 112|0;
 $str$byval_copy = sp + 104|0;
 $$byval_copy = sp + 96|0;
 $vararg_buffer = sp;
 $argv = sp + 84|0;
 $argc = sp + 80|0;
 $name = sp + 64|0;
 $str = sp + 56|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $0 = $mrb;
 $6 = HEAP32[$mod>>2]|0;
 $c = $6;
 $7 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($7,68114,$vararg_buffer)|0);
 $8 = $0;
 $9 = (_mrb_gc_arena_save($8)|0);
 $ai = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = HEAP32[$argc>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = $i;
  $15 = HEAP32[$argv>>2]|0;
  $16 = (($15) + ($14<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;
  $17 = (_to_sym($13,$$byval_copy)|0);
  $method = $17;
  $18 = $0;
  $19 = $method;
  _mrb_sym2str($1,$18,$19);
  ;HEAP32[$name>>2]=HEAP32[$1>>2]|0;HEAP32[$name+4>>2]=HEAP32[$1+4>>2]|0;
  $20 = $0;
  $21 = HEAP32[$name>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 11;
  $24 = $23 & 8;
  $25 = ($24|0)!=(0);
  $26 = HEAP32[$name>>2]|0;
  if ($25) {
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 >>> 11;
   $29 = $28 & 496;
   $30 = $29 >> 4;
   $34 = $30;
  } else {
   $31 = ((($26)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $34 = $32;
  }
  $33 = (($34) + 1)|0;
  _mrb_str_buf_new($2,$20,$33);
  ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
  $35 = $0;
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($3,$35,$str$byval_copy,65801,1);
  $36 = $0;
  ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
  _mrb_str_cat_str($4,$36,$str$byval_copy2,$name$byval_copy);
  $37 = $0;
  ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
  $38 = (_mrb_intern_str($37,$str$byval_copy3)|0);
  $sym = $38;
  $39 = $0;
  $40 = $sym;
  _mrb_iv_check($39,$40);
  $41 = $sym;
  _mrb_symbol_value_677($5,$41);
  ;HEAP32[$name>>2]=HEAP32[$5>>2]|0;HEAP32[$name+4>>2]=HEAP32[$5+4>>2]|0;
  $42 = $0;
  $43 = $c;
  $44 = $method;
  $45 = $0;
  $46 = (_mrb_proc_new_cfunc_with_env($45,274,1,$name)|0);
  _mrb_define_method_raw($42,$43,$44,$46);
  $47 = $0;
  $48 = $ai;
  _mrb_gc_arena_restore($47,$48);
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _attr_reader($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $name = 0, $name$byval_copy = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 24|0;
 $name$byval_copy = sp + 16|0;
 $name = sp;
 $0 = $mrb;
 $1 = $0;
 _mrb_proc_cfunc_env_get($name,$1,0);
 $2 = $0;
 $3 = $0;
 ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 $4 = (_to_sym($3,$name$byval_copy)|0);
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_iv_get($agg$result,$2,$obj$byval_copy,$4);
 STACKTOP = sp;return;
}
function _mrb_mod_attr_writer($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $ai = 0, $argc = 0, $argv = 0, $attr = 0, $c = 0, $i = 0, $method = 0;
 var $name = 0, $name$byval_copy = 0, $name$byval_copy5 = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $str$byval_copy4 = 0, $str$byval_copy6 = 0, $str$byval_copy7 = 0, $sym = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy7 = sp + 192|0;
 $str$byval_copy6 = sp + 184|0;
 $name$byval_copy5 = sp + 176|0;
 $str$byval_copy4 = sp + 168|0;
 $str$byval_copy3 = sp + 160|0;
 $name$byval_copy = sp + 152|0;
 $str$byval_copy2 = sp + 144|0;
 $str$byval_copy = sp + 136|0;
 $$byval_copy = sp + 128|0;
 $vararg_buffer = sp;
 $argv = sp + 116|0;
 $argc = sp + 112|0;
 $name = sp + 96|0;
 $str = sp + 88|0;
 $attr = sp + 80|0;
 $1 = sp + 64|0;
 $2 = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $0 = $mrb;
 $9 = HEAP32[$mod>>2]|0;
 $c = $9;
 $10 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($10,68114,$vararg_buffer)|0);
 $11 = $0;
 $12 = (_mrb_gc_arena_save($11)|0);
 $ai = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = HEAP32[$argc>>2]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = $i;
  $18 = HEAP32[$argv>>2]|0;
  $19 = (($18) + ($17<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;
  $20 = (_to_sym($16,$$byval_copy)|0);
  $method = $20;
  $21 = $0;
  $22 = $method;
  _mrb_sym2str($1,$21,$22);
  ;HEAP32[$name>>2]=HEAP32[$1>>2]|0;HEAP32[$name+4>>2]=HEAP32[$1+4>>2]|0;
  $23 = $0;
  $24 = HEAP32[$name>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 >>> 11;
  $27 = $26 & 8;
  $28 = ($27|0)!=(0);
  $29 = HEAP32[$name>>2]|0;
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >>> 11;
   $32 = $31 & 496;
   $33 = $32 >> 4;
   $37 = $33;
  } else {
   $34 = ((($29)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $37 = $35;
  }
  $36 = (($37) + 1)|0;
  _mrb_str_buf_new($2,$23,$36);
  ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
  $38 = $0;
  ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($3,$38,$str$byval_copy,65801,1);
  $39 = $0;
  ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
  _mrb_str_cat_str($4,$39,$str$byval_copy2,$name$byval_copy);
  $40 = $0;
  ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
  $41 = (_mrb_intern_str($40,$str$byval_copy3)|0);
  $sym = $41;
  $42 = $0;
  $43 = $sym;
  _mrb_iv_check($42,$43);
  $44 = $sym;
  _mrb_symbol_value_677($5,$44);
  ;HEAP32[$attr>>2]=HEAP32[$5>>2]|0;HEAP32[$attr+4>>2]=HEAP32[$5+4>>2]|0;
  $45 = $0;
  $46 = HEAP32[$str>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 >>> 11;
  $49 = $48 & 8;
  $50 = ($49|0)!=(0);
  $51 = HEAP32[$str>>2]|0;
  if ($50) {
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 >>> 11;
   $54 = $53 & 496;
   $55 = $54 >> 4;
   $58 = $55;
  } else {
   $56 = ((($51)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57;
  }
  _mrb_str_buf_new($6,$45,$58);
  ;HEAP32[$str>>2]=HEAP32[$6>>2]|0;HEAP32[$str+4>>2]=HEAP32[$6+4>>2]|0;
  $59 = $0;
  ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$name$byval_copy5>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy5+4>>2]=HEAP32[$name+4>>2]|0;
  _mrb_str_cat_str($7,$59,$str$byval_copy4,$name$byval_copy5);
  $60 = $0;
  ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($8,$60,$str$byval_copy6,65815,1);
  $61 = $0;
  ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
  $62 = (_mrb_intern_str($61,$str$byval_copy7)|0);
  $method = $62;
  $63 = $0;
  $64 = $c;
  $65 = $method;
  $66 = $0;
  $67 = (_mrb_proc_new_cfunc_with_env($66,275,1,$attr)|0);
  _mrb_define_method_raw($63,$64,$65,$67);
  $68 = $0;
  $69 = $ai;
  _mrb_gc_arena_restore($68,$69);
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _attr_writer($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $name = 0, $name$byval_copy = 0, $obj$byval_copy = 0, $val = 0, $val$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 48|0;
 $obj$byval_copy = sp + 40|0;
 $name$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $name = sp + 16|0;
 $val = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 _mrb_proc_cfunc_env_get($name,$1,0);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $val;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = $0;
 $4 = $0;
 ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 $5 = (_to_sym($4,$name$byval_copy)|0);
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_iv_set($3,$obj$byval_copy,$5,$val$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_to_s($agg$result,$mrb,$klass) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $klass = $klass|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $klass$byval_copy = 0, $path = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy10 = 0, $str$byval_copy2 = 0, $str$byval_copy4 = 0, $str$byval_copy5 = 0, $str$byval_copy6 = 0, $str$byval_copy7 = 0, $str$byval_copy8 = 0, $v = 0, $v$byval_copy = 0;
 var $v$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy10 = sp + 232|0;
 $$byval_copy9 = sp + 224|0;
 $str$byval_copy8 = sp + 216|0;
 $str$byval_copy7 = sp + 208|0;
 $str$byval_copy6 = sp + 200|0;
 $str$byval_copy5 = sp + 192|0;
 $str$byval_copy4 = sp + 184|0;
 $$byval_copy3 = sp + 176|0;
 $str$byval_copy2 = sp + 168|0;
 $v$byval_copy1 = sp + 160|0;
 $$byval_copy = sp + 152|0;
 $str$byval_copy = sp + 144|0;
 $v$byval_copy = sp + 136|0;
 $klass$byval_copy = sp + 128|0;
 $str = sp + 112|0;
 $v = sp + 104|0;
 $1 = sp + 96|0;
 $2 = sp + 88|0;
 $3 = sp + 80|0;
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $path = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $0 = $mrb;
 $12 = ((($klass)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(12);
 $15 = $0;
 if ($14) {
  $16 = $0;
  $17 = (_mrb_intern_static($16,67899,12)|0);
  ;HEAP32[$klass$byval_copy>>2]=HEAP32[$klass>>2]|0;HEAP32[$klass$byval_copy+4>>2]=HEAP32[$klass+4>>2]|0;
  _mrb_iv_get($v,$15,$klass$byval_copy,$17);
  $18 = $0;
  _mrb_str_new_static($1,$18,65232,8);
  ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
  $19 = ((($v)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  switch ($20|0) {
  case 12: case 10: case 9:  {
   $21 = $0;
   $22 = $0;
   ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
   _mrb_inspect($2,$22,$v$byval_copy);
   ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   _mrb_str_cat_str($3,$21,$str$byval_copy,$$byval_copy);
   break;
  }
  default: {
   $23 = $0;
   $24 = $0;
   ;HEAP32[$v$byval_copy1>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy1+4>>2]=HEAP32[$v+4>>2]|0;
   _mrb_any_to_s($4,$24,$v$byval_copy1);
   ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;
   _mrb_str_cat_str($5,$23,$str$byval_copy2,$$byval_copy3);
  }
  }
  $25 = $0;
  ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat($agg$result,$25,$str$byval_copy4,65241,1);
  STACKTOP = sp;return;
 }
 _mrb_str_buf_new($6,$15,32);
 ;HEAP32[$str>>2]=HEAP32[$6>>2]|0;HEAP32[$str+4>>2]=HEAP32[$6+4>>2]|0;
 $26 = HEAP32[$klass>>2]|0;
 $c = $26;
 $27 = $0;
 $28 = $c;
 _mrb_class_path($7,$27,$28);
 ;HEAP32[$path>>2]=HEAP32[$7>>2]|0;HEAP32[$path+4>>2]=HEAP32[$7+4>>2]|0;
 $29 = ((($path)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = HEAP32[$path>>2]|0;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $34 = ((($klass)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   switch ($35|0) {
   case 9:  {
    $36 = $0;
    ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_str_cat($8,$36,$str$byval_copy5,65232,8);
    break;
   }
   case 10:  {
    $37 = $0;
    ;HEAP32[$str$byval_copy6>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy6+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_str_cat($9,$37,$str$byval_copy6,65817,9);
    break;
   }
   default: {
    $38 = $0;
    ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_str_cat($10,$38,$str$byval_copy7,65827,9);
   }
   }
   $39 = $0;
   $40 = $0;
   $41 = $c;
   _mrb_ptr_to_str($11,$40,$41);
   ;HEAP32[$str$byval_copy8>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy8+4>>2]=HEAP32[$str+4>>2]|0;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$11+4>>2]|0;
   _mrb_str_concat($39,$str$byval_copy8,$$byval_copy9);
   $42 = $0;
   ;HEAP32[$str$byval_copy10>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy10+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_str_cat($agg$result,$42,$str$byval_copy10,65241,1);
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$path>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$path+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_alias($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c = 0, $new_name = 0, $old_name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $new_name = sp + 12|0;
 $old_name = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$mod>>2]|0;
 $c = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $new_name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $old_name;
 (_mrb_get_args($2,65837,$vararg_buffer)|0);
 $3 = $0;
 $4 = $c;
 $5 = HEAP32[$new_name>>2]|0;
 $6 = HEAP32[$old_name>>2]|0;
 _mrb_alias_method($3,$4,$5,$6);
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _mrb_mod_ancestors($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $result = 0, $result$byval_copy = 0, $result$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 72|0;
 $result$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $result$byval_copy = sp + 48|0;
 $result = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $4 = HEAP32[$self>>2]|0;
 $c = $4;
 $5 = $0;
 _mrb_ary_new($1,$5);
 ;HEAP32[$result>>2]=HEAP32[$1>>2]|0;HEAP32[$result+4>>2]=HEAP32[$1+4>>2]|0;
 while(1) {
  $6 = $c;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $c;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 255;
  $11 = ($10|0)==(11);
  if ($11) {
   $12 = $0;
   $13 = $c;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   _mrb_obj_value_675($2,$15);
   ;HEAP32[$result$byval_copy>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy+4>>2]=HEAP32[$result+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   _mrb_ary_push($12,$result$byval_copy,$$byval_copy);
  } else {
   $16 = $c;
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 >>> 11;
   $19 = $18 & 524288;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $21 = $0;
    $22 = $c;
    _mrb_obj_value_675($3,$22);
    ;HEAP32[$result$byval_copy1>>2]=HEAP32[$result>>2]|0;HEAP32[$result$byval_copy1+4>>2]=HEAP32[$result+4>>2]|0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
    _mrb_ary_push($21,$result$byval_copy1,$$byval_copy2);
   }
  }
  $23 = $c;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $c = $25;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$result+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_undef($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc = 0, $argv = 0, $c = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $argc = sp + 12|0;
 $argv = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$mod>>2]|0;
 $c = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($2,68114,$vararg_buffer)|0);
 while(1) {
  $3 = HEAP32[$argc>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[$argc>>2] = $4;
  $5 = ($3|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = $c;
  $8 = HEAP32[$argv>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  _undef_method($6,$7,$9);
  $10 = HEAP32[$argv>>2]|0;
  $11 = ((($10)) + 8|0);
  HEAP32[$argv>>2] = $11;
 }
 _mrb_nil_value_703($agg$result);
 STACKTOP = sp;return;
}
function _mrb_mod_const_defined($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $id = 0, $inherit = 0, $mod$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $id = sp + 8|0;
 $inherit = sp + 24|0;
 $0 = $mrb;
 HEAP8[$inherit>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $inherit;
 (_mrb_get_args($1,65865,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_const_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 $6 = HEAP8[$inherit>>0]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _const_defined($agg$result,$4,$mod$byval_copy,$5,$6);
 STACKTOP = sp;return;
}
function _check_const_name_sym($mrb,$id) {
 $mrb = $mrb|0;
 $id = $id|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $id;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 _mrb_sym2str($2,$4,$5);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _check_const_name_str($3,$$byval_copy);
 STACKTOP = sp;return;
}
function _check_const_name_str($mrb,$str) {
 $mrb = $mrb|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = HEAP32[$str>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 11;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$str>>2]|0;
 if ($5) {
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 11;
  $9 = $8 & 496;
  $10 = $9 >> 4;
  $13 = $10;
 } else {
  $11 = ((($6)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 $14 = ($13|0)<(1);
 if (!($14)) {
  $15 = HEAP32[$str>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >>> 11;
  $18 = $17 & 8;
  $19 = ($18|0)!=(0);
  $20 = HEAP32[$str>>2]|0;
  $21 = ((($20)) + 12|0);
  if ($19) {
   $25 = $21;
  } else {
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $25 = $23;
  }
  $24 = HEAP8[$25>>0]|0;
  $26 = $24 << 24 >> 24;
  $27 = (($26) - 65)|0;
  $28 = ($27>>>0)<(26);
  if ($28) {
   STACKTOP = sp;return;
  }
 }
 $29 = $0;
 $30 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 $31 = (_mrb_intern_str($30,$str$byval_copy)|0);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$str>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$str+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$str+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$str+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$str+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$str+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$str+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$str+7>>0]|0;
 _mrb_name_error($29,$31,65869,$vararg_buffer);
 // unreachable;
}
function _const_defined($agg$result,$mrb,$mod,$id,$inherit) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 $id = $id|0;
 $inherit = $inherit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod$byval_copy = 0, $mod$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy1 = sp + 16|0;
 $mod$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $inherit;
 $3 = $2;
 $4 = ($3<<24>>24)!=(0);
 $5 = $0;
 $6 = $1;
 if ($4) {
  ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
  $7 = (_mrb_const_defined($5,$mod$byval_copy,$6)|0);
  _mrb_bool_value_763($agg$result,$7);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$mod$byval_copy1>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy1+4>>2]=HEAP32[$mod+4>>2]|0;
  $8 = (_mrb_const_defined_at($5,$mod$byval_copy1,$6)|0);
  _mrb_bool_value_763($agg$result,$8);
  STACKTOP = sp;return;
 }
}
function _mrb_mod_const_get($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $id = 0, $mod$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $id = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_const_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_const_get($agg$result,$4,$mod$byval_copy,$5);
 STACKTOP = sp;return;
}
function _mrb_mod_const_set($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $id = 0, $mod$byval_copy = 0, $value = 0, $value$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$byval_copy = sp + 32|0;
 $mod$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $id = sp + 16|0;
 $value = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $value;
 (_mrb_get_args($1,68331,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$id>>2]|0;
 _check_const_name_sym($2,$3);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 ;HEAP32[$value$byval_copy>>2]=HEAP32[$value>>2]|0;HEAP32[$value$byval_copy+4>>2]=HEAP32[$value+4>>2]|0;
 _mrb_const_set($4,$mod$byval_copy,$5,$value$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$value>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$value+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_mod_remove_const($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $mod$byval_copy = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mod$byval_copy = sp + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $id = sp + 40|0;
 $val = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $id;
 (_mrb_get_args($3,68285,$vararg_buffer)|0);
 $4 = $0;
 $5 = HEAP32[$id>>2]|0;
 _check_const_name_sym($4,$5);
 $6 = $0;
 $7 = HEAP32[$id>>2]|0;
 ;HEAP32[$mod$byval_copy>>2]=HEAP32[$mod>>2]|0;HEAP32[$mod$byval_copy+4>>2]=HEAP32[$mod+4>>2]|0;
 _mrb_iv_remove($1,$6,$mod$byval_copy,$7);
 ;HEAP32[$val>>2]=HEAP32[$1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$1+4>>2]|0;
 $8 = ((($val)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(5);
 if ($10) {
  $11 = $0;
  $12 = HEAP32[$id>>2]|0;
  $13 = $0;
  $14 = HEAP32[$id>>2]|0;
  _mrb_sym2str($2,$13,$14);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_name_error($11,$12,65935,$vararg_buffer1);
  // unreachable;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_mod_const_missing($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sym = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $sym;
 (_mrb_get_args($3,68285,$vararg_buffer)|0);
 $4 = HEAP32[$mod>>2]|0;
 $5 = (_mrb_class_real($4)|0);
 $6 = $0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)!=($8|0);
 $10 = $0;
 $11 = HEAP32[$sym>>2]|0;
 $12 = $0;
 $13 = HEAP32[$sym>>2]|0;
 if ($9) {
  _mrb_sym2str($1,$12,$13);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$mod>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$mod+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$mod+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$mod+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$mod+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$mod+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$mod+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$mod+7>>0]|0;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  ;HEAP8[$vararg_ptr4>>0]=HEAP8[$1>>0]|0;HEAP8[$vararg_ptr4+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$vararg_ptr4+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$vararg_ptr4+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$vararg_ptr4+4>>0]=HEAP8[$1+4>>0]|0;HEAP8[$vararg_ptr4+5>>0]=HEAP8[$1+5>>0]|0;HEAP8[$vararg_ptr4+6>>0]=HEAP8[$1+6>>0]|0;HEAP8[$vararg_ptr4+7>>0]=HEAP8[$1+7>>0]|0;
  _mrb_name_error($10,$11,65973,$vararg_buffer1);
  // unreachable;
 } else {
  _mrb_sym2str($2,$12,$13);
  ;HEAP8[$vararg_buffer5>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer5+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer5+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer5+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer5+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer5+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer5+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer5+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_name_error($10,$11,66003,$vararg_buffer5);
  // unreachable;
 }
}
function _mod_define_method($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blk = 0, $c = 0, $mid = 0, $p = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mid = sp + 16|0;
 $blk = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $c = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $mid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $blk;
 (_mrb_get_args($2,68603,$vararg_buffer)|0);
 $3 = ((($blk)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$blk>>2]|0;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   $8 = $0;
   $9 = $0;
   $10 = (_mrb_class_get($9,68855)|0);
   _mrb_raise($8,$10,68606);
   // unreachable;
  }
 }
 $11 = $0;
 $12 = $0;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mrb_obj_alloc($11,13,$14)|0);
 $p = $15;
 $16 = $p;
 $17 = HEAP32[$blk>>2]|0;
 _mrb_proc_copy($16,$17);
 $18 = $p;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 | 256;
 $22 = HEAP32[$18>>2]|0;
 $23 = $21 & 2097151;
 $24 = $23 << 11;
 $25 = $22 & 2047;
 $26 = $25 | $24;
 HEAP32[$18>>2] = $26;
 $27 = $0;
 $28 = $c;
 $29 = HEAP32[$mid>>2]|0;
 $30 = $p;
 _mrb_define_method_raw($27,$28,$29,$30);
 $31 = HEAP32[$mid>>2]|0;
 _mrb_symbol_value_677($agg$result,$31);
 STACKTOP = sp;return;
}
function _mrb_mod_eqq($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $eqq = 0, $obj = 0, $obj$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $obj = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$mod>>2]|0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $4 = (_mrb_obj_is_kind_of($2,$obj$byval_copy,$3)|0);
 $eqq = $4;
 $5 = $eqq;
 _mrb_bool_value_763($agg$result,$5);
 STACKTOP = sp;return;
}
function _mrb_mod_s_constants($agg$result,$mrb,$mod) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = (_mrb_class_get($2,64809)|0);
 _mrb_raise($1,$3,66059);
 // unreachable;
}
function _mrb_codedump_all($mrb,$proc) {
 $mrb = $mrb|0;
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $proc;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _codedump_recur($2,$5);
 STACKTOP = sp;return;
}
function _codedump_recur($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $0;
 $3 = $1;
 _codedump($2,$3);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ((($5)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $i;
  $11 = $1;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _codedump_recur($9,$15);
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function _codedump($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $$byval_copy = 0, $$byval_copy321 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $ai = 0, $c = 0, $file = 0, $i = 0, $line = 0, $next_file = 0, $s = 0, $s2 = 0, $s4 = 0, $v = 0, $v$byval_copy = 0, $v1 = 0, $v3 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer107 = 0, $vararg_buffer11 = 0, $vararg_buffer111 = 0;
 var $vararg_buffer116 = 0, $vararg_buffer121 = 0, $vararg_buffer126 = 0, $vararg_buffer130 = 0, $vararg_buffer137 = 0, $vararg_buffer14 = 0, $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer151 = 0, $vararg_buffer153 = 0, $vararg_buffer155 = 0, $vararg_buffer162 = 0, $vararg_buffer167 = 0, $vararg_buffer17 = 0, $vararg_buffer172 = 0, $vararg_buffer176 = 0, $vararg_buffer181 = 0, $vararg_buffer186 = 0, $vararg_buffer19 = 0, $vararg_buffer191 = 0;
 var $vararg_buffer196 = 0, $vararg_buffer201 = 0, $vararg_buffer206 = 0, $vararg_buffer211 = 0, $vararg_buffer216 = 0, $vararg_buffer221 = 0, $vararg_buffer226 = 0, $vararg_buffer23 = 0, $vararg_buffer231 = 0, $vararg_buffer233 = 0, $vararg_buffer238 = 0, $vararg_buffer242 = 0, $vararg_buffer246 = 0, $vararg_buffer251 = 0, $vararg_buffer256 = 0, $vararg_buffer261 = 0, $vararg_buffer265 = 0, $vararg_buffer270 = 0, $vararg_buffer273 = 0, $vararg_buffer277 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer281 = 0, $vararg_buffer285 = 0, $vararg_buffer289 = 0, $vararg_buffer292 = 0, $vararg_buffer295 = 0, $vararg_buffer298 = 0, $vararg_buffer301 = 0, $vararg_buffer304 = 0, $vararg_buffer307 = 0, $vararg_buffer310 = 0, $vararg_buffer313 = 0, $vararg_buffer319 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0;
 var $vararg_buffer56 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0, $vararg_buffer64 = 0, $vararg_buffer69 = 0, $vararg_buffer74 = 0, $vararg_buffer78 = 0, $vararg_buffer82 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer96 = 0, $vararg_ptr1 = 0, $vararg_ptr106 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0, $vararg_ptr115 = 0, $vararg_ptr119 = 0, $vararg_ptr120 = 0, $vararg_ptr124 = 0;
 var $vararg_ptr125 = 0, $vararg_ptr129 = 0, $vararg_ptr133 = 0, $vararg_ptr134 = 0, $vararg_ptr135 = 0, $vararg_ptr136 = 0, $vararg_ptr140 = 0, $vararg_ptr141 = 0, $vararg_ptr142 = 0, $vararg_ptr143 = 0, $vararg_ptr144 = 0, $vararg_ptr145 = 0, $vararg_ptr158 = 0, $vararg_ptr159 = 0, $vararg_ptr160 = 0, $vararg_ptr161 = 0, $vararg_ptr165 = 0, $vararg_ptr166 = 0, $vararg_ptr170 = 0, $vararg_ptr171 = 0;
 var $vararg_ptr175 = 0, $vararg_ptr179 = 0, $vararg_ptr180 = 0, $vararg_ptr184 = 0, $vararg_ptr185 = 0, $vararg_ptr189 = 0, $vararg_ptr190 = 0, $vararg_ptr194 = 0, $vararg_ptr195 = 0, $vararg_ptr199 = 0, $vararg_ptr2 = 0, $vararg_ptr200 = 0, $vararg_ptr204 = 0, $vararg_ptr205 = 0, $vararg_ptr209 = 0, $vararg_ptr210 = 0, $vararg_ptr214 = 0, $vararg_ptr215 = 0, $vararg_ptr219 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr220 = 0, $vararg_ptr224 = 0, $vararg_ptr225 = 0, $vararg_ptr229 = 0, $vararg_ptr230 = 0, $vararg_ptr236 = 0, $vararg_ptr237 = 0, $vararg_ptr241 = 0, $vararg_ptr245 = 0, $vararg_ptr249 = 0, $vararg_ptr250 = 0, $vararg_ptr254 = 0, $vararg_ptr255 = 0, $vararg_ptr259 = 0, $vararg_ptr26 = 0, $vararg_ptr260 = 0, $vararg_ptr264 = 0, $vararg_ptr268 = 0, $vararg_ptr269 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr276 = 0, $vararg_ptr280 = 0, $vararg_ptr284 = 0, $vararg_ptr288 = 0, $vararg_ptr3 = 0, $vararg_ptr31 = 0, $vararg_ptr316 = 0, $vararg_ptr317 = 0, $vararg_ptr318 = 0, $vararg_ptr35 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr51 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0;
 var $vararg_ptr77 = 0, $vararg_ptr81 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, $vararg_ptr90 = 0, $vararg_ptr91 = 0, $vararg_ptr95 = 0, $vararg_ptr99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy321 = sp + 1024|0;
 $$byval_copy = sp + 1016|0;
 $v$byval_copy = sp + 1008|0;
 $vararg_buffer319 = sp + 904|0;
 $vararg_buffer313 = sp + 888|0;
 $vararg_buffer310 = sp + 880|0;
 $vararg_buffer307 = sp + 872|0;
 $vararg_buffer304 = sp + 864|0;
 $vararg_buffer301 = sp + 856|0;
 $vararg_buffer298 = sp + 848|0;
 $vararg_buffer295 = sp + 840|0;
 $vararg_buffer292 = sp + 832|0;
 $vararg_buffer289 = sp + 824|0;
 $vararg_buffer285 = sp + 816|0;
 $vararg_buffer281 = sp + 808|0;
 $vararg_buffer277 = sp + 800|0;
 $vararg_buffer273 = sp + 792|0;
 $vararg_buffer270 = sp + 784|0;
 $vararg_buffer265 = sp + 768|0;
 $vararg_buffer261 = sp + 760|0;
 $vararg_buffer256 = sp + 744|0;
 $vararg_buffer251 = sp + 728|0;
 $vararg_buffer246 = sp + 712|0;
 $vararg_buffer242 = sp + 704|0;
 $vararg_buffer238 = sp + 696|0;
 $vararg_buffer233 = sp + 680|0;
 $vararg_buffer231 = sp + 672|0;
 $vararg_buffer226 = sp + 656|0;
 $vararg_buffer221 = sp + 640|0;
 $vararg_buffer216 = sp + 624|0;
 $vararg_buffer211 = sp + 608|0;
 $vararg_buffer206 = sp + 592|0;
 $vararg_buffer201 = sp + 576|0;
 $vararg_buffer196 = sp + 560|0;
 $vararg_buffer191 = sp + 544|0;
 $vararg_buffer186 = sp + 528|0;
 $vararg_buffer181 = sp + 512|0;
 $vararg_buffer176 = sp + 496|0;
 $vararg_buffer172 = sp + 488|0;
 $vararg_buffer167 = sp + 472|0;
 $vararg_buffer162 = sp + 456|0;
 $vararg_buffer155 = sp + 432|0;
 $vararg_buffer153 = sp + 424|0;
 $vararg_buffer151 = sp + 416|0;
 $vararg_buffer149 = sp + 408|0;
 $vararg_buffer146 = sp + 400|0;
 $vararg_buffer137 = sp + 368|0;
 $vararg_buffer130 = sp + 344|0;
 $vararg_buffer126 = sp + 336|0;
 $vararg_buffer121 = sp + 320|0;
 $vararg_buffer116 = sp + 304|0;
 $vararg_buffer111 = sp + 288|0;
 $vararg_buffer107 = sp + 280|0;
 $vararg_buffer103 = sp + 272|0;
 $vararg_buffer100 = sp + 264|0;
 $vararg_buffer96 = sp + 256|0;
 $vararg_buffer92 = sp + 248|0;
 $vararg_buffer87 = sp + 232|0;
 $vararg_buffer82 = sp + 216|0;
 $vararg_buffer78 = sp + 208|0;
 $vararg_buffer74 = sp + 200|0;
 $vararg_buffer69 = sp + 184|0;
 $vararg_buffer64 = sp + 168|0;
 $vararg_buffer60 = sp + 160|0;
 $vararg_buffer56 = sp + 152|0;
 $vararg_buffer52 = sp + 144|0;
 $vararg_buffer48 = sp + 136|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer42 = sp + 120|0;
 $vararg_buffer39 = sp + 112|0;
 $vararg_buffer36 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $v = sp + 968|0;
 $s = sp + 960|0;
 $v1 = sp + 952|0;
 $s2 = sp + 944|0;
 $2 = sp + 936|0;
 $v3 = sp + 928|0;
 $s4 = sp + 920|0;
 $3 = sp + 912|0;
 $0 = $mrb;
 $1 = $irep;
 $file = 0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $1;
 $8 = ((($7)) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $1;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $1;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $13;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $19;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $22;
 (_printf(66092,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $1;
  $25 = ((($24)) + 40|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  $29 = (_mrb_gc_arena_save($28)|0);
  $ai = $29;
  $30 = $1;
  $31 = $i;
  $32 = (_mrb_debug_get_filename($30,$31)|0);
  $next_file = $32;
  $33 = $next_file;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $file;
   $36 = $next_file;
   $37 = ($35|0)!=($36|0);
   if ($37) {
    $38 = $next_file;
    HEAP32[$vararg_buffer6>>2] = $38;
    (_printf(66146,$vararg_buffer6)|0);
    $39 = $next_file;
    $file = $39;
   }
  }
  $40 = $1;
  $41 = $i;
  $42 = (_mrb_debug_get_line($40,$41)|0);
  $line = $42;
  $43 = $line;
  $44 = ($43|0)<(0);
  if ($44) {
   (_printf(66156,$vararg_buffer9)|0);
  } else {
   $45 = $line;
   HEAP32[$vararg_buffer11>>2] = $45;
   (_printf(66163,$vararg_buffer11)|0);
  }
  $46 = $i;
  HEAP32[$vararg_buffer14>>2] = $46;
  (_printf(66168,$vararg_buffer14)|0);
  $47 = $i;
  $48 = $1;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $c = $52;
  $53 = $c;
  $54 = $53 & 127;
  do {
   switch ($54|0) {
   case 0:  {
    (_printf(66174,$vararg_buffer17)|0);
    break;
   }
   case 1:  {
    $55 = $c;
    $56 = $55 >>> 23;
    $57 = $56 & 511;
    $58 = $c;
    $59 = $58 >>> 14;
    $60 = $59 & 511;
    HEAP32[$vararg_buffer19>>2] = $57;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $60;
    (_printf(66182,$vararg_buffer19)|0);
    $61 = $0;
    $62 = $1;
    $63 = $c;
    _print_lv($61,$62,$63,3);
    break;
   }
   case 2:  {
    $64 = $c;
    $65 = $64 >>> 7;
    $66 = $65 & 65535;
    $67 = $1;
    $68 = ((($67)) + 12|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + ($66<<3)|0);
    ;HEAP32[$v>>2]=HEAP32[$70>>2]|0;HEAP32[$v+4>>2]=HEAP32[$70+4>>2]|0;
    $71 = $0;
    ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
    _mrb_inspect($s,$71,$v$byval_copy);
    $72 = $c;
    $73 = $72 >>> 23;
    $74 = $73 & 511;
    $75 = $c;
    $76 = $75 >>> 7;
    $77 = $76 & 65535;
    $78 = HEAP32[$s>>2]|0;
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 >>> 11;
    $81 = $80 & 8;
    $82 = ($81|0)!=(0);
    $83 = HEAP32[$s>>2]|0;
    $84 = ((($83)) + 12|0);
    if ($82) {
     $87 = $84;
    } else {
     $85 = ((($84)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $86;
    }
    HEAP32[$vararg_buffer23>>2] = $74;
    $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
    HEAP32[$vararg_ptr26>>2] = $77;
    $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
    HEAP32[$vararg_ptr27>>2] = $87;
    (_printf(66214,$vararg_buffer23)|0);
    $88 = $0;
    $89 = $1;
    $90 = $c;
    _print_lv($88,$89,$90,1);
    break;
   }
   case 3:  {
    $91 = $c;
    $92 = $91 >>> 23;
    $93 = $92 & 511;
    $94 = $c;
    $95 = $94 >>> 7;
    $96 = $95 & 65535;
    $97 = (($96) - 32767)|0;
    HEAP32[$vararg_buffer28>>2] = $93;
    $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
    HEAP32[$vararg_ptr31>>2] = $97;
    (_printf(66238,$vararg_buffer28)|0);
    $98 = $0;
    $99 = $1;
    $100 = $c;
    _print_lv($98,$99,$100,1);
    break;
   }
   case 4:  {
    $101 = $c;
    $102 = $101 >>> 23;
    $103 = $102 & 511;
    $104 = $0;
    $105 = $c;
    $106 = $105 >>> 7;
    $107 = $106 & 65535;
    $108 = $1;
    $109 = ((($108)) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($107<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (_mrb_sym2name($104,$112)|0);
    HEAP32[$vararg_buffer32>>2] = $103;
    $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
    HEAP32[$vararg_ptr35>>2] = $113;
    (_printf(66255,$vararg_buffer32)|0);
    $114 = $0;
    $115 = $1;
    $116 = $c;
    _print_lv($114,$115,$116,1);
    break;
   }
   case 5:  {
    $117 = $c;
    $118 = $117 >>> 23;
    $119 = $118 & 511;
    HEAP32[$vararg_buffer36>>2] = $119;
    (_printf(66274,$vararg_buffer36)|0);
    $120 = $0;
    $121 = $1;
    $122 = $c;
    _print_lv($120,$121,$122,1);
    break;
   }
   case 6:  {
    $123 = $c;
    $124 = $123 >>> 23;
    $125 = $124 & 511;
    HEAP32[$vararg_buffer39>>2] = $125;
    (_printf(66291,$vararg_buffer39)|0);
    $126 = $0;
    $127 = $1;
    $128 = $c;
    _print_lv($126,$127,$128,1);
    break;
   }
   case 7:  {
    $129 = $c;
    $130 = $129 >>> 23;
    $131 = $130 & 511;
    HEAP32[$vararg_buffer42>>2] = $131;
    (_printf(66309,$vararg_buffer42)|0);
    $132 = $0;
    $133 = $1;
    $134 = $c;
    _print_lv($132,$133,$134,1);
    break;
   }
   case 8:  {
    $135 = $c;
    $136 = $135 >>> 23;
    $137 = $136 & 511;
    HEAP32[$vararg_buffer45>>2] = $137;
    (_printf(66324,$vararg_buffer45)|0);
    $138 = $0;
    $139 = $1;
    $140 = $c;
    _print_lv($138,$139,$140,1);
    break;
   }
   case 9:  {
    $141 = $c;
    $142 = $141 >>> 23;
    $143 = $142 & 511;
    $144 = $0;
    $145 = $c;
    $146 = $145 >>> 7;
    $147 = $146 & 65535;
    $148 = $1;
    $149 = ((($148)) + 16|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + ($147<<2)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (_mrb_sym2name($144,$152)|0);
    HEAP32[$vararg_buffer48>>2] = $143;
    $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
    HEAP32[$vararg_ptr51>>2] = $153;
    (_printf(66339,$vararg_buffer48)|0);
    $154 = $0;
    $155 = $1;
    $156 = $c;
    _print_lv($154,$155,$156,1);
    break;
   }
   case 10:  {
    $157 = $0;
    $158 = $c;
    $159 = $158 >>> 7;
    $160 = $159 & 65535;
    $161 = $1;
    $162 = ((($161)) + 16|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (($163) + ($160<<2)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (_mrb_sym2name($157,$165)|0);
    $167 = $c;
    $168 = $167 >>> 23;
    $169 = $168 & 511;
    HEAP32[$vararg_buffer52>>2] = $166;
    $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
    HEAP32[$vararg_ptr55>>2] = $169;
    (_printf(66360,$vararg_buffer52)|0);
    $170 = $0;
    $171 = $1;
    $172 = $c;
    _print_lv($170,$171,$172,1);
    break;
   }
   case 17:  {
    $173 = $c;
    $174 = $173 >>> 23;
    $175 = $174 & 511;
    $176 = $0;
    $177 = $c;
    $178 = $177 >>> 7;
    $179 = $178 & 65535;
    $180 = $1;
    $181 = ((($180)) + 16|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($182) + ($179<<2)|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (_mrb_sym2name($176,$184)|0);
    HEAP32[$vararg_buffer56>>2] = $175;
    $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
    HEAP32[$vararg_ptr59>>2] = $185;
    (_printf(66382,$vararg_buffer56)|0);
    $186 = $0;
    $187 = $1;
    $188 = $c;
    _print_lv($186,$187,$188,1);
    break;
   }
   case 18:  {
    $189 = $0;
    $190 = $c;
    $191 = $190 >>> 7;
    $192 = $191 & 65535;
    $193 = $1;
    $194 = ((($193)) + 16|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (($195) + ($192<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (_mrb_sym2name($189,$197)|0);
    $199 = $c;
    $200 = $199 >>> 23;
    $201 = $200 & 511;
    HEAP32[$vararg_buffer60>>2] = $198;
    $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
    HEAP32[$vararg_ptr63>>2] = $201;
    (_printf(66402,$vararg_buffer60)|0);
    $202 = $0;
    $203 = $1;
    $204 = $c;
    _print_lv($202,$203,$204,1);
    break;
   }
   case 19:  {
    $205 = $c;
    $206 = $205 >>> 23;
    $207 = $206 & 511;
    $208 = $c;
    $209 = $208 >>> 23;
    $210 = $209 & 511;
    $211 = $0;
    $212 = $c;
    $213 = $212 >>> 7;
    $214 = $213 & 65535;
    $215 = $1;
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + ($214<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (_mrb_sym2name($211,$219)|0);
    HEAP32[$vararg_buffer64>>2] = $207;
    $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
    HEAP32[$vararg_ptr67>>2] = $210;
    $vararg_ptr68 = ((($vararg_buffer64)) + 8|0);
    HEAP32[$vararg_ptr68>>2] = $220;
    (_printf(66423,$vararg_buffer64)|0);
    $221 = $0;
    $222 = $1;
    $223 = $c;
    _print_lv($221,$222,$223,3);
    break;
   }
   case 20:  {
    $224 = $c;
    $225 = $224 >>> 23;
    $226 = $225 & 511;
    $227 = (($226) + 1)|0;
    $228 = $0;
    $229 = $c;
    $230 = $229 >>> 7;
    $231 = $230 & 65535;
    $232 = $1;
    $233 = ((($232)) + 16|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + ($231<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (_mrb_sym2name($228,$236)|0);
    $238 = $c;
    $239 = $238 >>> 23;
    $240 = $239 & 511;
    HEAP32[$vararg_buffer69>>2] = $227;
    $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
    HEAP32[$vararg_ptr72>>2] = $237;
    $vararg_ptr73 = ((($vararg_buffer69)) + 8|0);
    HEAP32[$vararg_ptr73>>2] = $240;
    (_printf(66447,$vararg_buffer69)|0);
    $241 = $0;
    $242 = $1;
    $243 = $c;
    _print_lv($241,$242,$243,1);
    break;
   }
   case 13:  {
    $244 = $c;
    $245 = $244 >>> 23;
    $246 = $245 & 511;
    $247 = $0;
    $248 = $c;
    $249 = $248 >>> 7;
    $250 = $249 & 65535;
    $251 = $1;
    $252 = ((($251)) + 16|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + ($250<<2)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (_mrb_sym2name($247,$255)|0);
    HEAP32[$vararg_buffer74>>2] = $246;
    $vararg_ptr77 = ((($vararg_buffer74)) + 4|0);
    HEAP32[$vararg_ptr77>>2] = $256;
    (_printf(66471,$vararg_buffer74)|0);
    $257 = $0;
    $258 = $1;
    $259 = $c;
    _print_lv($257,$258,$259,1);
    break;
   }
   case 14:  {
    $260 = $0;
    $261 = $c;
    $262 = $261 >>> 7;
    $263 = $262 & 65535;
    $264 = $1;
    $265 = ((($264)) + 16|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = (($266) + ($263<<2)|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = (_mrb_sym2name($260,$268)|0);
    $270 = $c;
    $271 = $270 >>> 23;
    $272 = $271 & 511;
    HEAP32[$vararg_buffer78>>2] = $269;
    $vararg_ptr81 = ((($vararg_buffer78)) + 4|0);
    HEAP32[$vararg_ptr81>>2] = $272;
    (_printf(66487,$vararg_buffer78)|0);
    $273 = $0;
    $274 = $1;
    $275 = $c;
    _print_lv($273,$274,$275,1);
    break;
   }
   case 21:  {
    $276 = $c;
    $277 = $276 >>> 23;
    $278 = $277 & 511;
    $279 = $c;
    $280 = $279 >>> 14;
    $281 = $280 & 511;
    $282 = $c;
    $283 = $282 >>> 7;
    $284 = $283 & 127;
    HEAP32[$vararg_buffer82>>2] = $278;
    $vararg_ptr85 = ((($vararg_buffer82)) + 4|0);
    HEAP32[$vararg_ptr85>>2] = $281;
    $vararg_ptr86 = ((($vararg_buffer82)) + 8|0);
    HEAP32[$vararg_ptr86>>2] = $284;
    (_printf(66503,$vararg_buffer82)|0);
    $285 = $0;
    $286 = $1;
    $287 = $c;
    _print_lv($285,$286,$287,1);
    break;
   }
   case 22:  {
    $288 = $c;
    $289 = $288 >>> 23;
    $290 = $289 & 511;
    $291 = $c;
    $292 = $291 >>> 14;
    $293 = $292 & 511;
    $294 = $c;
    $295 = $294 >>> 7;
    $296 = $295 & 127;
    HEAP32[$vararg_buffer87>>2] = $290;
    $vararg_ptr90 = ((($vararg_buffer87)) + 4|0);
    HEAP32[$vararg_ptr90>>2] = $293;
    $vararg_ptr91 = ((($vararg_buffer87)) + 8|0);
    HEAP32[$vararg_ptr91>>2] = $296;
    (_printf(66525,$vararg_buffer87)|0);
    $297 = $0;
    $298 = $1;
    $299 = $c;
    _print_lv($297,$298,$299,1);
    break;
   }
   case 15:  {
    $300 = $c;
    $301 = $300 >>> 23;
    $302 = $301 & 511;
    $303 = $0;
    $304 = $c;
    $305 = $304 >>> 7;
    $306 = $305 & 65535;
    $307 = $1;
    $308 = ((($307)) + 16|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (($309) + ($306<<2)|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (_mrb_sym2name($303,$311)|0);
    HEAP32[$vararg_buffer92>>2] = $302;
    $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
    HEAP32[$vararg_ptr95>>2] = $312;
    (_printf(66547,$vararg_buffer92)|0);
    $313 = $0;
    $314 = $1;
    $315 = $c;
    _print_lv($313,$314,$315,1);
    break;
   }
   case 16:  {
    $316 = $0;
    $317 = $c;
    $318 = $317 >>> 7;
    $319 = $318 & 65535;
    $320 = $1;
    $321 = ((($320)) + 16|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (($322) + ($319<<2)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (_mrb_sym2name($316,$324)|0);
    $326 = $c;
    $327 = $326 >>> 23;
    $328 = $327 & 511;
    HEAP32[$vararg_buffer96>>2] = $325;
    $vararg_ptr99 = ((($vararg_buffer96)) + 4|0);
    HEAP32[$vararg_ptr99>>2] = $328;
    (_printf(66563,$vararg_buffer96)|0);
    $329 = $0;
    $330 = $1;
    $331 = $c;
    _print_lv($329,$330,$331,1);
    break;
   }
   case 23:  {
    $332 = $i;
    $333 = $c;
    $334 = $333 >>> 7;
    $335 = $334 & 65535;
    $336 = (($335) - 32767)|0;
    $337 = (($332) + ($336))|0;
    HEAP32[$vararg_buffer100>>2] = $337;
    (_printf(66579,$vararg_buffer100)|0);
    break;
   }
   case 24:  {
    $338 = $c;
    $339 = $338 >>> 23;
    $340 = $339 & 511;
    $341 = $i;
    $342 = $c;
    $343 = $342 >>> 7;
    $344 = $343 & 65535;
    $345 = (($344) - 32767)|0;
    $346 = (($341) + ($345))|0;
    HEAP32[$vararg_buffer103>>2] = $340;
    $vararg_ptr106 = ((($vararg_buffer103)) + 4|0);
    HEAP32[$vararg_ptr106>>2] = $346;
    (_printf(66592,$vararg_buffer103)|0);
    break;
   }
   case 25:  {
    $347 = $c;
    $348 = $347 >>> 23;
    $349 = $348 & 511;
    $350 = $i;
    $351 = $c;
    $352 = $351 >>> 7;
    $353 = $352 & 65535;
    $354 = (($353) - 32767)|0;
    $355 = (($350) + ($354))|0;
    HEAP32[$vararg_buffer107>>2] = $349;
    $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
    HEAP32[$vararg_ptr110>>2] = $355;
    (_printf(66611,$vararg_buffer107)|0);
    break;
   }
   case 32:  {
    $356 = $c;
    $357 = $356 >>> 23;
    $358 = $357 & 511;
    $359 = $0;
    $360 = $c;
    $361 = $360 >>> 14;
    $362 = $361 & 511;
    $363 = $1;
    $364 = ((($363)) + 16|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = (($365) + ($362<<2)|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = (_mrb_sym2name($359,$367)|0);
    $369 = $c;
    $370 = $369 >>> 7;
    $371 = $370 & 127;
    HEAP32[$vararg_buffer111>>2] = $358;
    $vararg_ptr114 = ((($vararg_buffer111)) + 4|0);
    HEAP32[$vararg_ptr114>>2] = $368;
    $vararg_ptr115 = ((($vararg_buffer111)) + 8|0);
    HEAP32[$vararg_ptr115>>2] = $371;
    (_printf(66631,$vararg_buffer111)|0);
    break;
   }
   case 33:  {
    $372 = $c;
    $373 = $372 >>> 23;
    $374 = $373 & 511;
    $375 = $0;
    $376 = $c;
    $377 = $376 >>> 14;
    $378 = $377 & 511;
    $379 = $1;
    $380 = ((($379)) + 16|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = (($381) + ($378<<2)|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = (_mrb_sym2name($375,$383)|0);
    $385 = $c;
    $386 = $385 >>> 7;
    $387 = $386 & 127;
    HEAP32[$vararg_buffer116>>2] = $374;
    $vararg_ptr119 = ((($vararg_buffer116)) + 4|0);
    HEAP32[$vararg_ptr119>>2] = $384;
    $vararg_ptr120 = ((($vararg_buffer116)) + 8|0);
    HEAP32[$vararg_ptr120>>2] = $387;
    (_printf(66651,$vararg_buffer116)|0);
    break;
   }
   case 42:  {
    $388 = $c;
    $389 = $388 >>> 23;
    $390 = $389 & 511;
    $391 = $0;
    $392 = $c;
    $393 = $392 >>> 14;
    $394 = $393 & 511;
    $395 = $1;
    $396 = ((($395)) + 16|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = (($397) + ($394<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (_mrb_sym2name($391,$399)|0);
    $401 = $c;
    $402 = $401 >>> 7;
    $403 = $402 & 127;
    HEAP32[$vararg_buffer121>>2] = $390;
    $vararg_ptr124 = ((($vararg_buffer121)) + 4|0);
    HEAP32[$vararg_ptr124>>2] = $400;
    $vararg_ptr125 = ((($vararg_buffer121)) + 8|0);
    HEAP32[$vararg_ptr125>>2] = $403;
    (_printf(66672,$vararg_buffer121)|0);
    break;
   }
   case 36:  {
    $404 = $c;
    $405 = $404 >>> 23;
    $406 = $405 & 511;
    $407 = $c;
    $408 = $407 >>> 7;
    $409 = $408 & 127;
    HEAP32[$vararg_buffer126>>2] = $406;
    $vararg_ptr129 = ((($vararg_buffer126)) + 4|0);
    HEAP32[$vararg_ptr129>>2] = $409;
    (_printf(66696,$vararg_buffer126)|0);
    break;
   }
   case 37:  {
    $410 = $c;
    $411 = $410 >>> 23;
    $412 = $411 & 511;
    $413 = $c;
    $414 = $413 >>> 7;
    $415 = $414 & 65535;
    $416 = $415 >> 10;
    $417 = $416 & 63;
    $418 = $c;
    $419 = $418 >>> 7;
    $420 = $419 & 65535;
    $421 = $420 >> 9;
    $422 = $421 & 1;
    $423 = $c;
    $424 = $423 >>> 7;
    $425 = $424 & 65535;
    $426 = $425 >> 4;
    $427 = $426 & 31;
    $428 = $c;
    $429 = $428 >>> 7;
    $430 = $429 & 65535;
    $431 = $430 >> 0;
    $432 = $431 & 15;
    HEAP32[$vararg_buffer130>>2] = $412;
    $vararg_ptr133 = ((($vararg_buffer130)) + 4|0);
    HEAP32[$vararg_ptr133>>2] = $417;
    $vararg_ptr134 = ((($vararg_buffer130)) + 8|0);
    HEAP32[$vararg_ptr134>>2] = $422;
    $vararg_ptr135 = ((($vararg_buffer130)) + 12|0);
    HEAP32[$vararg_ptr135>>2] = $427;
    $vararg_ptr136 = ((($vararg_buffer130)) + 16|0);
    HEAP32[$vararg_ptr136>>2] = $432;
    (_printf(66713,$vararg_buffer130)|0);
    $433 = $0;
    $434 = $1;
    $435 = $c;
    _print_lv($433,$434,$435,1);
    break;
   }
   case 38:  {
    $436 = $c;
    $437 = $436 >>> 7;
    $438 = $437 & 33554431;
    $439 = $438 >> 18;
    $440 = $439 & 31;
    $441 = $c;
    $442 = $441 >>> 7;
    $443 = $442 & 33554431;
    $444 = $443 >> 13;
    $445 = $444 & 31;
    $446 = $c;
    $447 = $446 >>> 7;
    $448 = $447 & 33554431;
    $449 = $448 >> 12;
    $450 = $449 & 1;
    $451 = $c;
    $452 = $451 >>> 7;
    $453 = $452 & 33554431;
    $454 = $453 >> 7;
    $455 = $454 & 31;
    $456 = $c;
    $457 = $456 >>> 7;
    $458 = $457 & 33554431;
    $459 = $458 >> 2;
    $460 = $459 & 31;
    $461 = $c;
    $462 = $461 >>> 7;
    $463 = $462 & 33554431;
    $464 = $463 >> 1;
    $465 = $464 & 1;
    $466 = $c;
    $467 = $466 >>> 7;
    $468 = $467 & 33554431;
    $469 = $468 & 1;
    HEAP32[$vararg_buffer137>>2] = $440;
    $vararg_ptr140 = ((($vararg_buffer137)) + 4|0);
    HEAP32[$vararg_ptr140>>2] = $445;
    $vararg_ptr141 = ((($vararg_buffer137)) + 8|0);
    HEAP32[$vararg_ptr141>>2] = $450;
    $vararg_ptr142 = ((($vararg_buffer137)) + 12|0);
    HEAP32[$vararg_ptr142>>2] = $455;
    $vararg_ptr143 = ((($vararg_buffer137)) + 16|0);
    HEAP32[$vararg_ptr143>>2] = $460;
    $vararg_ptr144 = ((($vararg_buffer137)) + 20|0);
    HEAP32[$vararg_ptr144>>2] = $465;
    $vararg_ptr145 = ((($vararg_buffer137)) + 24|0);
    HEAP32[$vararg_ptr145>>2] = $469;
    (_printf(66739,$vararg_buffer137)|0);
    break;
   }
   case 41:  {
    $470 = $c;
    $471 = $470 >>> 23;
    $472 = $471 & 511;
    HEAP32[$vararg_buffer146>>2] = $472;
    (_printf(66770,$vararg_buffer146)|0);
    $473 = $c;
    $474 = $473 >>> 14;
    $475 = $474 & 511;
    switch ($475|0) {
    case 2: case 0:  {
     (_printf(66784,$vararg_buffer149)|0);
     break;
    }
    case 1:  {
     (_printf(66793,$vararg_buffer151)|0);
     break;
    }
    default: {
     (_printf(66801,$vararg_buffer153)|0);
    }
    }
    $476 = $0;
    $477 = $1;
    $478 = $c;
    _print_lv($476,$477,$478,1);
    break;
   }
   case 43:  {
    $479 = $c;
    $480 = $479 >>> 23;
    $481 = $480 & 511;
    $482 = $c;
    $483 = $482 >>> 7;
    $484 = $483 & 65535;
    $485 = $484 >> 10;
    $486 = $485 & 63;
    $487 = $c;
    $488 = $487 >>> 7;
    $489 = $488 & 65535;
    $490 = $489 >> 9;
    $491 = $490 & 1;
    $492 = $c;
    $493 = $492 >>> 7;
    $494 = $493 & 65535;
    $495 = $494 >> 4;
    $496 = $495 & 31;
    $497 = $c;
    $498 = $497 >>> 7;
    $499 = $498 & 65535;
    $500 = $499 >> 0;
    $501 = $500 & 15;
    HEAP32[$vararg_buffer155>>2] = $481;
    $vararg_ptr158 = ((($vararg_buffer155)) + 4|0);
    HEAP32[$vararg_ptr158>>2] = $486;
    $vararg_ptr159 = ((($vararg_buffer155)) + 8|0);
    HEAP32[$vararg_ptr159>>2] = $491;
    $vararg_ptr160 = ((($vararg_buffer155)) + 12|0);
    HEAP32[$vararg_ptr160>>2] = $496;
    $vararg_ptr161 = ((($vararg_buffer155)) + 16|0);
    HEAP32[$vararg_ptr161>>2] = $501;
    (_printf(66810,$vararg_buffer155)|0);
    $502 = $0;
    $503 = $1;
    $504 = $c;
    _print_lv($502,$503,$504,1);
    break;
   }
   case 64:  {
    $505 = $c;
    $506 = $505 >>> 23;
    $507 = $506 & 511;
    $508 = $c;
    $509 = $508 >>> 9;
    $510 = $509 & 16383;
    $511 = (($510) + 1)|0;
    $512 = $c;
    $513 = $512 >>> 7;
    $514 = $513 & 3;
    HEAP32[$vararg_buffer162>>2] = $507;
    $vararg_ptr165 = ((($vararg_buffer162)) + 4|0);
    HEAP32[$vararg_ptr165>>2] = $511;
    $vararg_ptr166 = ((($vararg_buffer162)) + 8|0);
    HEAP32[$vararg_ptr166>>2] = $514;
    (_printf(66837,$vararg_buffer162)|0);
    $515 = $0;
    $516 = $1;
    $517 = $c;
    _print_lv($515,$516,$517,1);
    break;
   }
   case 65:  {
    $518 = $c;
    $519 = $518 >>> 23;
    $520 = $519 & 511;
    $521 = $c;
    $522 = $521 >>> 14;
    $523 = $522 & 511;
    $524 = $c;
    $525 = $524 >>> 7;
    $526 = $525 & 127;
    HEAP32[$vararg_buffer167>>2] = $520;
    $vararg_ptr170 = ((($vararg_buffer167)) + 4|0);
    HEAP32[$vararg_ptr170>>2] = $523;
    $vararg_ptr171 = ((($vararg_buffer167)) + 8|0);
    HEAP32[$vararg_ptr171>>2] = $526;
    (_printf(66861,$vararg_buffer167)|0);
    $527 = $0;
    $528 = $1;
    $529 = $c;
    _print_lv($527,$528,$529,3);
    break;
   }
   case 70:  {
    $530 = $c;
    $531 = $530 >>> 23;
    $532 = $531 & 511;
    $533 = $0;
    $534 = $c;
    $535 = $534 >>> 14;
    $536 = $535 & 511;
    $537 = $1;
    $538 = ((($537)) + 16|0);
    $539 = HEAP32[$538>>2]|0;
    $540 = (($539) + ($536<<2)|0);
    $541 = HEAP32[$540>>2]|0;
    $542 = (_mrb_sym2name($533,$541)|0);
    HEAP32[$vararg_buffer172>>2] = $532;
    $vararg_ptr175 = ((($vararg_buffer172)) + 4|0);
    HEAP32[$vararg_ptr175>>2] = $542;
    (_printf(66881,$vararg_buffer172)|0);
    $543 = $0;
    $544 = $1;
    $545 = $c;
    _print_lv($543,$544,$545,1);
    break;
   }
   case 44:  {
    $546 = $c;
    $547 = $546 >>> 23;
    $548 = $547 & 511;
    $549 = $0;
    $550 = $c;
    $551 = $550 >>> 14;
    $552 = $551 & 511;
    $553 = $1;
    $554 = ((($553)) + 16|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = (($555) + ($552<<2)|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = (_mrb_sym2name($549,$557)|0);
    $559 = $c;
    $560 = $559 >>> 7;
    $561 = $560 & 127;
    HEAP32[$vararg_buffer176>>2] = $548;
    $vararg_ptr179 = ((($vararg_buffer176)) + 4|0);
    HEAP32[$vararg_ptr179>>2] = $558;
    $vararg_ptr180 = ((($vararg_buffer176)) + 8|0);
    HEAP32[$vararg_ptr180>>2] = $561;
    (_printf(66899,$vararg_buffer176)|0);
    break;
   }
   case 45:  {
    $562 = $c;
    $563 = $562 >>> 23;
    $564 = $563 & 511;
    $565 = $0;
    $566 = $c;
    $567 = $566 >>> 14;
    $568 = $567 & 511;
    $569 = $1;
    $570 = ((($569)) + 16|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = (($571) + ($568<<2)|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = (_mrb_sym2name($565,$573)|0);
    $575 = $c;
    $576 = $575 >>> 7;
    $577 = $576 & 127;
    HEAP32[$vararg_buffer181>>2] = $564;
    $vararg_ptr184 = ((($vararg_buffer181)) + 4|0);
    HEAP32[$vararg_ptr184>>2] = $574;
    $vararg_ptr185 = ((($vararg_buffer181)) + 8|0);
    HEAP32[$vararg_ptr185>>2] = $577;
    (_printf(66918,$vararg_buffer181)|0);
    break;
   }
   case 46:  {
    $578 = $c;
    $579 = $578 >>> 23;
    $580 = $579 & 511;
    $581 = $0;
    $582 = $c;
    $583 = $582 >>> 14;
    $584 = $583 & 511;
    $585 = $1;
    $586 = ((($585)) + 16|0);
    $587 = HEAP32[$586>>2]|0;
    $588 = (($587) + ($584<<2)|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = (_mrb_sym2name($581,$589)|0);
    $591 = $c;
    $592 = $591 >>> 7;
    $593 = $592 & 127;
    HEAP32[$vararg_buffer186>>2] = $580;
    $vararg_ptr189 = ((($vararg_buffer186)) + 4|0);
    HEAP32[$vararg_ptr189>>2] = $590;
    $vararg_ptr190 = ((($vararg_buffer186)) + 8|0);
    HEAP32[$vararg_ptr190>>2] = $593;
    (_printf(66938,$vararg_buffer186)|0);
    break;
   }
   case 47:  {
    $594 = $c;
    $595 = $594 >>> 23;
    $596 = $595 & 511;
    $597 = $0;
    $598 = $c;
    $599 = $598 >>> 14;
    $600 = $599 & 511;
    $601 = $1;
    $602 = ((($601)) + 16|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = (($603) + ($600<<2)|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = (_mrb_sym2name($597,$605)|0);
    $607 = $c;
    $608 = $607 >>> 7;
    $609 = $608 & 127;
    HEAP32[$vararg_buffer191>>2] = $596;
    $vararg_ptr194 = ((($vararg_buffer191)) + 4|0);
    HEAP32[$vararg_ptr194>>2] = $606;
    $vararg_ptr195 = ((($vararg_buffer191)) + 8|0);
    HEAP32[$vararg_ptr195>>2] = $609;
    (_printf(66957,$vararg_buffer191)|0);
    break;
   }
   case 48:  {
    $610 = $c;
    $611 = $610 >>> 23;
    $612 = $611 & 511;
    $613 = $0;
    $614 = $c;
    $615 = $614 >>> 14;
    $616 = $615 & 511;
    $617 = $1;
    $618 = ((($617)) + 16|0);
    $619 = HEAP32[$618>>2]|0;
    $620 = (($619) + ($616<<2)|0);
    $621 = HEAP32[$620>>2]|0;
    $622 = (_mrb_sym2name($613,$621)|0);
    $623 = $c;
    $624 = $623 >>> 7;
    $625 = $624 & 127;
    HEAP32[$vararg_buffer196>>2] = $612;
    $vararg_ptr199 = ((($vararg_buffer196)) + 4|0);
    HEAP32[$vararg_ptr199>>2] = $622;
    $vararg_ptr200 = ((($vararg_buffer196)) + 8|0);
    HEAP32[$vararg_ptr200>>2] = $625;
    (_printf(66977,$vararg_buffer196)|0);
    break;
   }
   case 49:  {
    $626 = $c;
    $627 = $626 >>> 23;
    $628 = $627 & 511;
    $629 = $0;
    $630 = $c;
    $631 = $630 >>> 14;
    $632 = $631 & 511;
    $633 = $1;
    $634 = ((($633)) + 16|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = (($635) + ($632<<2)|0);
    $637 = HEAP32[$636>>2]|0;
    $638 = (_mrb_sym2name($629,$637)|0);
    $639 = $c;
    $640 = $639 >>> 7;
    $641 = $640 & 127;
    HEAP32[$vararg_buffer201>>2] = $628;
    $vararg_ptr204 = ((($vararg_buffer201)) + 4|0);
    HEAP32[$vararg_ptr204>>2] = $638;
    $vararg_ptr205 = ((($vararg_buffer201)) + 8|0);
    HEAP32[$vararg_ptr205>>2] = $641;
    (_printf(66996,$vararg_buffer201)|0);
    break;
   }
   case 51:  {
    $642 = $c;
    $643 = $642 >>> 23;
    $644 = $643 & 511;
    $645 = $0;
    $646 = $c;
    $647 = $646 >>> 14;
    $648 = $647 & 511;
    $649 = $1;
    $650 = ((($649)) + 16|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = (($651) + ($648<<2)|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = (_mrb_sym2name($645,$653)|0);
    $655 = $c;
    $656 = $655 >>> 7;
    $657 = $656 & 127;
    HEAP32[$vararg_buffer206>>2] = $644;
    $vararg_ptr209 = ((($vararg_buffer206)) + 4|0);
    HEAP32[$vararg_ptr209>>2] = $654;
    $vararg_ptr210 = ((($vararg_buffer206)) + 8|0);
    HEAP32[$vararg_ptr210>>2] = $657;
    (_printf(67015,$vararg_buffer206)|0);
    break;
   }
   case 52:  {
    $658 = $c;
    $659 = $658 >>> 23;
    $660 = $659 & 511;
    $661 = $0;
    $662 = $c;
    $663 = $662 >>> 14;
    $664 = $663 & 511;
    $665 = $1;
    $666 = ((($665)) + 16|0);
    $667 = HEAP32[$666>>2]|0;
    $668 = (($667) + ($664<<2)|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = (_mrb_sym2name($661,$669)|0);
    $671 = $c;
    $672 = $671 >>> 7;
    $673 = $672 & 127;
    HEAP32[$vararg_buffer211>>2] = $660;
    $vararg_ptr214 = ((($vararg_buffer211)) + 4|0);
    HEAP32[$vararg_ptr214>>2] = $670;
    $vararg_ptr215 = ((($vararg_buffer211)) + 8|0);
    HEAP32[$vararg_ptr215>>2] = $673;
    (_printf(67033,$vararg_buffer211)|0);
    break;
   }
   case 53:  {
    $674 = $c;
    $675 = $674 >>> 23;
    $676 = $675 & 511;
    $677 = $0;
    $678 = $c;
    $679 = $678 >>> 14;
    $680 = $679 & 511;
    $681 = $1;
    $682 = ((($681)) + 16|0);
    $683 = HEAP32[$682>>2]|0;
    $684 = (($683) + ($680<<2)|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = (_mrb_sym2name($677,$685)|0);
    $687 = $c;
    $688 = $687 >>> 7;
    $689 = $688 & 127;
    HEAP32[$vararg_buffer216>>2] = $676;
    $vararg_ptr219 = ((($vararg_buffer216)) + 4|0);
    HEAP32[$vararg_ptr219>>2] = $686;
    $vararg_ptr220 = ((($vararg_buffer216)) + 8|0);
    HEAP32[$vararg_ptr220>>2] = $689;
    (_printf(67051,$vararg_buffer216)|0);
    break;
   }
   case 54:  {
    $690 = $c;
    $691 = $690 >>> 23;
    $692 = $691 & 511;
    $693 = $0;
    $694 = $c;
    $695 = $694 >>> 14;
    $696 = $695 & 511;
    $697 = $1;
    $698 = ((($697)) + 16|0);
    $699 = HEAP32[$698>>2]|0;
    $700 = (($699) + ($696<<2)|0);
    $701 = HEAP32[$700>>2]|0;
    $702 = (_mrb_sym2name($693,$701)|0);
    $703 = $c;
    $704 = $703 >>> 7;
    $705 = $704 & 127;
    HEAP32[$vararg_buffer221>>2] = $692;
    $vararg_ptr224 = ((($vararg_buffer221)) + 4|0);
    HEAP32[$vararg_ptr224>>2] = $702;
    $vararg_ptr225 = ((($vararg_buffer221)) + 8|0);
    HEAP32[$vararg_ptr225>>2] = $705;
    (_printf(67069,$vararg_buffer221)|0);
    break;
   }
   case 50:  {
    $706 = $c;
    $707 = $706 >>> 23;
    $708 = $707 & 511;
    $709 = $0;
    $710 = $c;
    $711 = $710 >>> 14;
    $712 = $711 & 511;
    $713 = $1;
    $714 = ((($713)) + 16|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = (($715) + ($712<<2)|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = (_mrb_sym2name($709,$717)|0);
    $719 = $c;
    $720 = $719 >>> 7;
    $721 = $720 & 127;
    HEAP32[$vararg_buffer226>>2] = $708;
    $vararg_ptr229 = ((($vararg_buffer226)) + 4|0);
    HEAP32[$vararg_ptr229>>2] = $718;
    $vararg_ptr230 = ((($vararg_buffer226)) + 8|0);
    HEAP32[$vararg_ptr230>>2] = $721;
    (_printf(67087,$vararg_buffer226)|0);
    break;
   }
   case 74:  {
    (_printf(67105,$vararg_buffer231)|0);
    break;
   }
   case 55:  {
    $722 = $c;
    $723 = $722 >>> 23;
    $724 = $723 & 511;
    $725 = $c;
    $726 = $725 >>> 14;
    $727 = $726 & 511;
    $728 = $c;
    $729 = $728 >>> 7;
    $730 = $729 & 127;
    HEAP32[$vararg_buffer233>>2] = $724;
    $vararg_ptr236 = ((($vararg_buffer233)) + 4|0);
    HEAP32[$vararg_ptr236>>2] = $727;
    $vararg_ptr237 = ((($vararg_buffer233)) + 8|0);
    HEAP32[$vararg_ptr237>>2] = $730;
    (_printf(67114,$vararg_buffer233)|0);
    $731 = $0;
    $732 = $1;
    $733 = $c;
    _print_lv($731,$732,$733,3);
    break;
   }
   case 56:  {
    $734 = $c;
    $735 = $734 >>> 23;
    $736 = $735 & 511;
    $737 = $c;
    $738 = $737 >>> 14;
    $739 = $738 & 511;
    HEAP32[$vararg_buffer238>>2] = $736;
    $vararg_ptr241 = ((($vararg_buffer238)) + 4|0);
    HEAP32[$vararg_ptr241>>2] = $739;
    (_printf(67134,$vararg_buffer238)|0);
    $740 = $0;
    $741 = $1;
    $742 = $c;
    _print_lv($740,$741,$742,3);
    break;
   }
   case 57:  {
    $743 = $c;
    $744 = $743 >>> 23;
    $745 = $744 & 511;
    $746 = $c;
    $747 = $746 >>> 14;
    $748 = $747 & 511;
    HEAP32[$vararg_buffer242>>2] = $745;
    $vararg_ptr245 = ((($vararg_buffer242)) + 4|0);
    HEAP32[$vararg_ptr245>>2] = $748;
    (_printf(67153,$vararg_buffer242)|0);
    $749 = $0;
    $750 = $1;
    $751 = $c;
    _print_lv($749,$750,$751,3);
    break;
   }
   case 58:  {
    $752 = $c;
    $753 = $752 >>> 23;
    $754 = $753 & 511;
    $755 = $c;
    $756 = $755 >>> 14;
    $757 = $756 & 511;
    $758 = $c;
    $759 = $758 >>> 7;
    $760 = $759 & 127;
    HEAP32[$vararg_buffer246>>2] = $754;
    $vararg_ptr249 = ((($vararg_buffer246)) + 4|0);
    HEAP32[$vararg_ptr249>>2] = $757;
    $vararg_ptr250 = ((($vararg_buffer246)) + 8|0);
    HEAP32[$vararg_ptr250>>2] = $760;
    (_printf(67173,$vararg_buffer246)|0);
    $761 = $0;
    $762 = $1;
    $763 = $c;
    _print_lv($761,$762,$763,3);
    break;
   }
   case 60:  {
    $764 = $c;
    $765 = $764 >>> 23;
    $766 = $765 & 511;
    $767 = $c;
    $768 = $767 >>> 14;
    $769 = $768 & 511;
    $770 = $c;
    $771 = $770 >>> 7;
    $772 = $771 & 127;
    HEAP32[$vararg_buffer251>>2] = $766;
    $vararg_ptr254 = ((($vararg_buffer251)) + 4|0);
    HEAP32[$vararg_ptr254>>2] = $769;
    $vararg_ptr255 = ((($vararg_buffer251)) + 8|0);
    HEAP32[$vararg_ptr255>>2] = $772;
    (_printf(67192,$vararg_buffer251)|0);
    $773 = $0;
    $774 = $1;
    $775 = $c;
    _print_lv($773,$774,$775,1);
    break;
   }
   case 61:  {
    $776 = $c;
    $777 = $776 >>> 7;
    $778 = $777 & 65535;
    $779 = $1;
    $780 = ((($779)) + 12|0);
    $781 = HEAP32[$780>>2]|0;
    $782 = (($781) + ($778<<3)|0);
    ;HEAP32[$v1>>2]=HEAP32[$782>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$782+4>>2]|0;
    $783 = $0;
    $784 = $0;
    $785 = HEAP32[$v1>>2]|0;
    $786 = HEAP32[$785>>2]|0;
    $787 = $786 >>> 11;
    $788 = $787 & 8;
    $789 = ($788|0)!=(0);
    $790 = HEAP32[$v1>>2]|0;
    $791 = ((($790)) + 12|0);
    if ($789) {
     $806 = $791;
    } else {
     $792 = ((($791)) + 8|0);
     $793 = HEAP32[$792>>2]|0;
     $806 = $793;
    }
    $794 = HEAP32[$v1>>2]|0;
    $795 = HEAP32[$794>>2]|0;
    $796 = $795 >>> 11;
    $797 = $796 & 8;
    $798 = ($797|0)!=(0);
    $799 = HEAP32[$v1>>2]|0;
    if ($798) {
     $800 = HEAP32[$799>>2]|0;
     $801 = $800 >>> 11;
     $802 = $801 & 496;
     $803 = $802 >> 4;
     $807 = $803;
    } else {
     $804 = ((($799)) + 12|0);
     $805 = HEAP32[$804>>2]|0;
     $807 = $805;
    }
    _mrb_str_new($2,$784,$806,$807);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
    _mrb_str_dump($s2,$783,$$byval_copy);
    $808 = $c;
    $809 = $808 >>> 23;
    $810 = $809 & 511;
    $811 = $c;
    $812 = $811 >>> 7;
    $813 = $812 & 65535;
    $814 = HEAP32[$s2>>2]|0;
    $815 = HEAP32[$814>>2]|0;
    $816 = $815 >>> 11;
    $817 = $816 & 8;
    $818 = ($817|0)!=(0);
    $819 = HEAP32[$s2>>2]|0;
    $820 = ((($819)) + 12|0);
    if ($818) {
     $823 = $820;
    } else {
     $821 = ((($820)) + 8|0);
     $822 = HEAP32[$821>>2]|0;
     $823 = $822;
    }
    HEAP32[$vararg_buffer256>>2] = $810;
    $vararg_ptr259 = ((($vararg_buffer256)) + 4|0);
    HEAP32[$vararg_ptr259>>2] = $813;
    $vararg_ptr260 = ((($vararg_buffer256)) + 8|0);
    HEAP32[$vararg_ptr260>>2] = $823;
    (_printf(67211,$vararg_buffer256)|0);
    $824 = $0;
    $825 = $1;
    $826 = $c;
    _print_lv($824,$825,$826,1);
    break;
   }
   case 62:  {
    $827 = $c;
    $828 = $827 >>> 23;
    $829 = $828 & 511;
    $830 = $c;
    $831 = $830 >>> 14;
    $832 = $831 & 511;
    HEAP32[$vararg_buffer261>>2] = $829;
    $vararg_ptr264 = ((($vararg_buffer261)) + 4|0);
    HEAP32[$vararg_ptr264>>2] = $832;
    (_printf(67236,$vararg_buffer261)|0);
    $833 = $0;
    $834 = $1;
    $835 = $c;
    _print_lv($833,$834,$835,3);
    break;
   }
   case 63:  {
    $836 = $c;
    $837 = $836 >>> 23;
    $838 = $837 & 511;
    $839 = $c;
    $840 = $839 >>> 14;
    $841 = $840 & 511;
    $842 = $c;
    $843 = $842 >>> 7;
    $844 = $843 & 127;
    HEAP32[$vararg_buffer265>>2] = $838;
    $vararg_ptr268 = ((($vararg_buffer265)) + 4|0);
    HEAP32[$vararg_ptr268>>2] = $841;
    $vararg_ptr269 = ((($vararg_buffer265)) + 8|0);
    HEAP32[$vararg_ptr269>>2] = $844;
    (_printf(67255,$vararg_buffer265)|0);
    $845 = $0;
    $846 = $1;
    $847 = $c;
    _print_lv($845,$846,$847,3);
    break;
   }
   case 66:  {
    $848 = $c;
    $849 = $848 >>> 23;
    $850 = $849 & 511;
    HEAP32[$vararg_buffer270>>2] = $850;
    (_printf(67274,$vararg_buffer270)|0);
    $851 = $0;
    $852 = $1;
    $853 = $c;
    _print_lv($851,$852,$853,1);
    break;
   }
   case 67:  {
    $854 = $c;
    $855 = $854 >>> 23;
    $856 = $855 & 511;
    $857 = $0;
    $858 = $c;
    $859 = $858 >>> 14;
    $860 = $859 & 511;
    $861 = $1;
    $862 = ((($861)) + 16|0);
    $863 = HEAP32[$862>>2]|0;
    $864 = (($863) + ($860<<2)|0);
    $865 = HEAP32[$864>>2]|0;
    $866 = (_mrb_sym2name($857,$865)|0);
    HEAP32[$vararg_buffer273>>2] = $856;
    $vararg_ptr276 = ((($vararg_buffer273)) + 4|0);
    HEAP32[$vararg_ptr276>>2] = $866;
    (_printf(67290,$vararg_buffer273)|0);
    $867 = $0;
    $868 = $1;
    $869 = $c;
    _print_lv($867,$868,$869,1);
    break;
   }
   case 68:  {
    $870 = $c;
    $871 = $870 >>> 23;
    $872 = $871 & 511;
    $873 = $0;
    $874 = $c;
    $875 = $874 >>> 14;
    $876 = $875 & 511;
    $877 = $1;
    $878 = ((($877)) + 16|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = (($879) + ($876<<2)|0);
    $881 = HEAP32[$880>>2]|0;
    $882 = (_mrb_sym2name($873,$881)|0);
    HEAP32[$vararg_buffer277>>2] = $872;
    $vararg_ptr280 = ((($vararg_buffer277)) + 4|0);
    HEAP32[$vararg_ptr280>>2] = $882;
    (_printf(67307,$vararg_buffer277)|0);
    $883 = $0;
    $884 = $1;
    $885 = $c;
    _print_lv($883,$884,$885,1);
    break;
   }
   case 69:  {
    $886 = $c;
    $887 = $886 >>> 23;
    $888 = $887 & 511;
    $889 = $c;
    $890 = $889 >>> 7;
    $891 = $890 & 65535;
    $892 = (($891) + 1)|0;
    HEAP32[$vararg_buffer281>>2] = $888;
    $vararg_ptr284 = ((($vararg_buffer281)) + 4|0);
    HEAP32[$vararg_ptr284>>2] = $892;
    (_printf(67325,$vararg_buffer281)|0);
    $893 = $0;
    $894 = $1;
    $895 = $c;
    _print_lv($893,$894,$895,1);
    break;
   }
   case 71:  {
    $896 = $c;
    $897 = $896 >>> 23;
    $898 = $897 & 511;
    $899 = $c;
    $900 = $899 >>> 14;
    $901 = $900 & 511;
    HEAP32[$vararg_buffer285>>2] = $898;
    $vararg_ptr288 = ((($vararg_buffer285)) + 4|0);
    HEAP32[$vararg_ptr288>>2] = $901;
    (_printf(67344,$vararg_buffer285)|0);
    $902 = $0;
    $903 = $1;
    $904 = $c;
    _print_lv($902,$903,$904,3);
    break;
   }
   case 72:  {
    $905 = $c;
    $906 = $905 >>> 23;
    $907 = $906 & 511;
    HEAP32[$vararg_buffer289>>2] = $907;
    (_printf(67363,$vararg_buffer289)|0);
    $908 = $0;
    $909 = $1;
    $910 = $c;
    _print_lv($908,$909,$910,1);
    break;
   }
   case 75:  {
    $911 = $c;
    $912 = $911 >>> 7;
    $913 = $912 & 65535;
    $914 = $1;
    $915 = ((($914)) + 12|0);
    $916 = HEAP32[$915>>2]|0;
    $917 = (($916) + ($913<<3)|0);
    ;HEAP32[$v3>>2]=HEAP32[$917>>2]|0;HEAP32[$v3+4>>2]=HEAP32[$917+4>>2]|0;
    $918 = $0;
    $919 = $0;
    $920 = HEAP32[$v3>>2]|0;
    $921 = HEAP32[$920>>2]|0;
    $922 = $921 >>> 11;
    $923 = $922 & 8;
    $924 = ($923|0)!=(0);
    $925 = HEAP32[$v3>>2]|0;
    $926 = ((($925)) + 12|0);
    if ($924) {
     $941 = $926;
    } else {
     $927 = ((($926)) + 8|0);
     $928 = HEAP32[$927>>2]|0;
     $941 = $928;
    }
    $929 = HEAP32[$v3>>2]|0;
    $930 = HEAP32[$929>>2]|0;
    $931 = $930 >>> 11;
    $932 = $931 & 8;
    $933 = ($932|0)!=(0);
    $934 = HEAP32[$v3>>2]|0;
    if ($933) {
     $935 = HEAP32[$934>>2]|0;
     $936 = $935 >>> 11;
     $937 = $936 & 496;
     $938 = $937 >> 4;
     $942 = $938;
    } else {
     $939 = ((($934)) + 12|0);
     $940 = HEAP32[$939>>2]|0;
     $942 = $940;
    }
    _mrb_str_new($3,$919,$941,$942);
    ;HEAP32[$$byval_copy321>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy321+4>>2]=HEAP32[$3+4>>2]|0;
    _mrb_str_dump($s4,$918,$$byval_copy321);
    $943 = HEAP32[$s4>>2]|0;
    $944 = HEAP32[$943>>2]|0;
    $945 = $944 >>> 11;
    $946 = $945 & 8;
    $947 = ($946|0)!=(0);
    $948 = HEAP32[$s4>>2]|0;
    $949 = ((($948)) + 12|0);
    if ($947) {
     $952 = $949;
    } else {
     $950 = ((($949)) + 8|0);
     $951 = HEAP32[$950>>2]|0;
     $952 = $951;
    }
    HEAP32[$vararg_buffer292>>2] = $952;
    (_printf(67379,$vararg_buffer292)|0);
    break;
   }
   case 30:  {
    $953 = $c;
    $954 = $953 >>> 7;
    $955 = $954 & 65535;
    $956 = (($955) + 1)|0;
    HEAP32[$vararg_buffer295>>2] = $956;
    (_printf(67390,$vararg_buffer295)|0);
    break;
   }
   case 26:  {
    $957 = $i;
    $958 = $c;
    $959 = $958 >>> 7;
    $960 = $959 & 65535;
    $961 = (($960) - 32767)|0;
    $962 = (($957) + ($961))|0;
    HEAP32[$vararg_buffer298>>2] = $962;
    (_printf(67408,$vararg_buffer298)|0);
    break;
   }
   case 27:  {
    $963 = $c;
    $964 = $963 >>> 23;
    $965 = $964 & 511;
    HEAP32[$vararg_buffer301>>2] = $965;
    (_printf(67423,$vararg_buffer301)|0);
    $966 = $0;
    $967 = $1;
    $968 = $c;
    _print_lv($966,$967,$968,1);
    break;
   }
   case 29:  {
    $969 = $c;
    $970 = $969 >>> 23;
    $971 = $970 & 511;
    HEAP32[$vararg_buffer304>>2] = $971;
    (_printf(67439,$vararg_buffer304)|0);
    $972 = $0;
    $973 = $1;
    $974 = $c;
    _print_lv($972,$973,$974,1);
    break;
   }
   case 28:  {
    $975 = $c;
    $976 = $975 >>> 23;
    $977 = $976 & 511;
    HEAP32[$vararg_buffer307>>2] = $977;
    (_printf(67454,$vararg_buffer307)|0);
    $978 = $0;
    $979 = $1;
    $980 = $c;
    _print_lv($978,$979,$980,1);
    break;
   }
   case 31:  {
    $981 = $c;
    $982 = $981 >>> 23;
    $983 = $982 & 511;
    HEAP32[$vararg_buffer310>>2] = $983;
    (_printf(67469,$vararg_buffer310)|0);
    break;
   }
   default: {
    $984 = $c;
    $985 = $984 & 127;
    $986 = $c;
    $987 = $986 >>> 23;
    $988 = $987 & 511;
    $989 = $c;
    $990 = $989 >>> 14;
    $991 = $990 & 511;
    $992 = $c;
    $993 = $992 >>> 7;
    $994 = $993 & 127;
    HEAP32[$vararg_buffer313>>2] = $985;
    $vararg_ptr316 = ((($vararg_buffer313)) + 4|0);
    HEAP32[$vararg_ptr316>>2] = $988;
    $vararg_ptr317 = ((($vararg_buffer313)) + 8|0);
    HEAP32[$vararg_ptr317>>2] = $991;
    $vararg_ptr318 = ((($vararg_buffer313)) + 12|0);
    HEAP32[$vararg_ptr318>>2] = $994;
    (_printf(67481,$vararg_buffer313)|0);
   }
   }
  } while(0);
  $995 = $0;
  $996 = $ai;
  _mrb_gc_arena_restore($995,$996);
  $997 = $i;
  $998 = (($997) + 1)|0;
  $i = $998;
 }
 (_printf(66199,$vararg_buffer319)|0);
 STACKTOP = sp;return;
}
function _print_lv($mrb,$irep,$c,$r) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $c = $c|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pre = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = $irep;
 $2 = $c;
 $3 = $r;
 $pre = 0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $3;
   $9 = $8 & 1;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $2;
    $12 = $11 >>> 23;
    $13 = $12 & 511;
    $14 = $1;
    $15 = HEAP16[$14>>1]|0;
    $16 = $15&65535;
    $17 = ($13|0)>=($16|0);
    if ($17) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $18 = $3;
    $19 = $18 & 2;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break;
    }
    $21 = $2;
    $22 = $21 >>> 14;
    $23 = $22 & 511;
    $24 = $1;
    $25 = HEAP16[$24>>1]|0;
    $26 = $25&65535;
    $27 = ($23|0)>=($26|0);
    if ($27) {
     break;
    }
   }
   (_printf(66201,$vararg_buffer1)|0);
   $28 = $3;
   $29 = $28 & 1;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $0;
    $32 = $1;
    $33 = $2;
    $34 = $33 >>> 23;
    $35 = $34 & 511;
    $36 = (_print_r($31,$32,$35,0)|0);
    $pre = $36;
   }
   $37 = $3;
   $38 = $37 & 2;
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = $0;
    $41 = $1;
    $42 = $2;
    $43 = $42 >>> 14;
    $44 = $43 & 511;
    $45 = $pre;
    (_print_r($40,$41,$44,$45)|0);
   }
   (_printf(66199,$vararg_buffer3)|0);
   STACKTOP = sp;return;
  }
 } while(0);
 (_printf(66199,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_r($mrb,$irep,$n,$pre) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $n = $n|0;
 $pre = $pre|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $sym = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $mrb;
 $2 = $irep;
 $3 = $n;
 $4 = $pre;
 $5 = $3;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = (($7) + 1)|0;
  $9 = $2;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($8>>>0)<($11>>>0);
  if (!($12)) {
   label = 10;
   break;
  }
  $13 = $i;
  $14 = $2;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<3)|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = $3;
  $22 = ($20|0)==($21|0);
  $23 = $i;
  if ($22) {
   break;
  }
  $35 = (($23) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $24 = $2;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23<<3)|0);
 $28 = HEAP32[$27>>2]|0;
 $sym = $28;
 $29 = $4;
 $30 = ($29|0)!=(0);
 if ($30) {
  (_printf(66205,$vararg_buffer)|0);
 }
 $31 = $3;
 $32 = $1;
 $33 = $sym;
 $34 = (_mrb_sym2name($32,$33)|0);
 HEAP32[$vararg_buffer1>>2] = $31;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $34;
 (_printf(66207,$vararg_buffer1)|0);
 $0 = 1;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _calc_crc_16_ccitt($src,$nbytes,$crc) {
 $src = $src|0;
 $nbytes = $nbytes|0;
 $crc = $crc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crcwk = 0, $ibit = 0, $ibyte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $nbytes;
 $2 = $crc;
 $3 = $2;
 $4 = $3&65535;
 $5 = $4 << 8;
 $crcwk = $5;
 $ibyte = 0;
 while(1) {
  $6 = $ibyte;
  $7 = $1;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = ((($9)) + 1|0);
  $0 = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = $11&255;
  $13 = $crcwk;
  $14 = $13 | $12;
  $crcwk = $14;
  $ibit = 0;
  while(1) {
   $15 = $ibit;
   $16 = ($15>>>0)<(8);
   if (!($16)) {
    break;
   }
   $17 = $crcwk;
   $18 = $17 << 1;
   $crcwk = $18;
   $19 = $crcwk;
   $20 = $19 & 16777216;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $crcwk;
    $23 = $22 ^ 17834240;
    $crcwk = $23;
   }
   $24 = $ibit;
   $25 = (($24) + 1)|0;
   $ibit = $25;
  }
  $26 = $ibyte;
  $27 = (($26) + 1)|0;
  $ibyte = $27;
 }
 $28 = $crcwk;
 $29 = $28 >>> 8;
 $30 = $29&65535;
 STACKTOP = sp;return ($30|0);
}
function _mrb_debug_get_filename($irep,$pc) {
 $irep = $irep|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $irep;
 $2 = $pc;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if ($9) {
   $f = 0;
   $10 = $1;
   $11 = ((($10)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = $1;
   if (!($13)) {
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $0 = $16;
    $25 = $0;
    STACKTOP = sp;return ($25|0);
   }
   $17 = ((($14)) + 36|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $2;
   $20 = (_get_file($18,$19)|0);
   $f = $20;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $f;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $0 = $24;
    $25 = $0;
    STACKTOP = sp;return ($25|0);
   }
  }
 }
 $0 = 0;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _get_file($info,$pc) {
 $info = $info|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $it = 0;
 var $ret = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $info;
 $2 = $pc;
 $3 = $2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>=($5>>>0);
 if ($6) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $ret = $9;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $count = $13;
 while(1) {
  $14 = $count;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
  $16 = $count;
  $17 = (($16|0) / 2)&-1;
  $step = $17;
  $18 = $ret;
  $19 = $step;
  $20 = (($18) + ($19<<2)|0);
  $it = $20;
  $21 = $2;
  $22 = $it;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21>>>0)<($24>>>0);
  if ($25) {
   $32 = $step;
   $count = $32;
   continue;
  } else {
   $26 = $it;
   $27 = ((($26)) + 4|0);
   $ret = $27;
   $28 = $step;
   $29 = (($28) + 1)|0;
   $30 = $count;
   $31 = (($30) - ($29))|0;
   $count = $31;
   continue;
  }
 }
 $33 = $ret;
 $34 = ((($33)) + -4|0);
 $ret = $34;
 $35 = $ret;
 $36 = HEAP32[$35>>2]|0;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _mrb_debug_get_line($irep,$pc) {
 $irep = $irep|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $count = 0, $f = 0, $it = 0, $ret = 0, $step = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $irep;
 $2 = $pc;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = $2;
   $6 = $1;
   $7 = ((($6)) + 40|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($5>>>0)<($8>>>0);
   if ($9) {
    $f = 0;
    $10 = $1;
    $11 = ((($10)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)!=(0|0);
    $14 = $1;
    if (!($13)) {
     $15 = ((($14)) + 32|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)!=(0|0);
     if ($17) {
      $18 = $2;
      $19 = $1;
      $20 = ((($19)) + 32|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + ($18<<1)|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = $23&65535;
      $25 = $24;
     } else {
      $25 = -1;
     }
     $0 = $25;
     $74 = $0;
     STACKTOP = sp;return ($74|0);
    }
    $26 = ((($14)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $2;
    $29 = (_get_file($27,$28)|0);
    $f = $29;
    $30 = ($29|0)!=(0|0);
    if ($30) {
     $31 = $f;
     $32 = ((($31)) + 16|0);
     $33 = HEAP32[$32>>2]|0;
     switch ($33|0) {
     case 0:  {
      $34 = $2;
      $35 = $f;
      $36 = HEAP32[$35>>2]|0;
      $37 = (($34) - ($36))|0;
      $38 = $f;
      $39 = ((($38)) + 20|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) + ($37<<1)|0);
      $42 = HEAP16[$41>>1]|0;
      $43 = $42&65535;
      $0 = $43;
      $74 = $0;
      STACKTOP = sp;return ($74|0);
      break;
     }
     case 1:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $44 = $f;
     $45 = ((($44)) + 20|0);
     $46 = HEAP32[$45>>2]|0;
     $ret = $46;
     $47 = $f;
     $48 = ((($47)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $count = $49;
     while(1) {
      $50 = $count;
      $51 = ($50>>>0)>(0);
      if (!($51)) {
       break;
      }
      $52 = $count;
      $53 = (($52>>>0) / 2)&-1;
      $step = $53;
      $54 = $ret;
      $55 = $step;
      $56 = (($54) + ($55<<3)|0);
      $it = $56;
      $57 = $2;
      $58 = $it;
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57>>>0)<($59>>>0);
      if ($60) {
       $67 = $step;
       $count = $67;
       continue;
      } else {
       $61 = $it;
       $62 = ((($61)) + 8|0);
       $ret = $62;
       $63 = $step;
       $64 = (($63) + 1)|0;
       $65 = $count;
       $66 = (($65) - ($64))|0;
       $count = $66;
       continue;
      }
     }
     $68 = $ret;
     $69 = ((($68)) + -8|0);
     $ret = $69;
     $70 = $ret;
     $71 = ((($70)) + 4|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&65535;
     $0 = $73;
     $74 = $0;
     STACKTOP = sp;return ($74|0);
    }
   }
  }
 } while(0);
 $0 = -1;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _mrb_debug_info_alloc($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $0;
 $3 = (_mrb_malloc($2,12)|0);
 $ret = $3;
 $4 = $ret;
 ;HEAP32[$4>>2]=HEAP32[74568>>2]|0;HEAP32[$4+4>>2]=HEAP32[74568+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[74568+8>>2]|0;
 $5 = $ret;
 $6 = $1;
 $7 = ((($6)) + 36|0);
 HEAP32[$7>>2] = $5;
 $8 = $ret;
 STACKTOP = sp;return ($8|0);
}
function _mrb_debug_info_append_file($mrb,$irep,$start_pos,$end_pos) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 $start_pos = $start_pos|0;
 $end_pos = $end_pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $file_pc_count = 0, $fn_len = 0, $i = 0, $info = 0, $len = 0, $m = 0, $prev_line = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 12|0;
 $m = sp;
 $1 = $mrb;
 $2 = $irep;
 $3 = $start_pos;
 $4 = $end_pos;
 $5 = $2;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $0 = 0;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $9 = $2;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $info = $11;
 $12 = $info;
 $13 = ((($12)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $info;
  $21 = ((($20)) + 4|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($23) - 1)|0;
  $25 = $info;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_strcmp($19,$31)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $0 = 0;
   $201 = $0;
   STACKTOP = sp;return ($201|0);
  }
 }
 $34 = $1;
 $35 = (_mrb_malloc($34,24)|0);
 $ret = $35;
 $36 = $info;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 $40 = $1;
 if ($39) {
  $41 = $info;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $info;
  $45 = ((($44)) + 4|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = (($47) + 1)|0;
  $49 = $48<<2;
  $50 = (_mrb_realloc($40,$43,$49)|0);
  $54 = $50;
 } else {
  $51 = (_mrb_malloc($40,4)|0);
  $54 = $51;
 }
 $52 = $info;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $54;
 $55 = $ret;
 $56 = $info;
 $57 = ((($56)) + 4|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = (($58) + 1)<<16>>16;
 HEAP16[$57>>1] = $59;
 $60 = $58&65535;
 $61 = $info;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($60<<2)|0);
 HEAP32[$64>>2] = $55;
 $65 = $4;
 $66 = $3;
 $67 = (($65) - ($66))|0;
 $file_pc_count = $67;
 $68 = $3;
 $69 = $ret;
 HEAP32[$69>>2] = $68;
 $70 = $4;
 $71 = $info;
 HEAP32[$71>>2] = $70;
 $72 = $2;
 $73 = ((($72)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (_strlen($74)|0);
 $fn_len = $75;
 $76 = $1;
 $77 = $2;
 $78 = ((($77)) + 28|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $fn_len;
 $81 = (_mrb_intern($76,$79,$80)|0);
 $82 = $ret;
 $83 = ((($82)) + 8|0);
 HEAP32[$83>>2] = $81;
 HEAP32[$len>>2] = 0;
 $84 = $1;
 $85 = $ret;
 $86 = ((($85)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (_mrb_sym2name_len($84,$87,$len)|0);
 $89 = $ret;
 $90 = ((($89)) + 4|0);
 HEAP32[$90>>2] = $88;
 $91 = $2;
 $92 = ((($91)) + 32|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $3;
 $95 = (($93) + ($94<<1)|0);
 $96 = $4;
 $97 = $3;
 $98 = (($96) - ($97))|0;
 $99 = (_select_line_type($95,$98)|0);
 $100 = $ret;
 $101 = ((($100)) + 16|0);
 HEAP32[$101>>2] = $99;
 $102 = $ret;
 $103 = ((($102)) + 20|0);
 HEAP32[$103>>2] = 0;
 $104 = $ret;
 $105 = ((($104)) + 16|0);
 $106 = HEAP32[$105>>2]|0;
 L14: do {
  switch ($106|0) {
  case 0:  {
   $107 = $file_pc_count;
   $108 = $ret;
   $109 = ((($108)) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $1;
   $111 = $file_pc_count;
   $112 = $111<<1;
   $113 = (_mrb_malloc($110,$112)|0);
   $114 = $ret;
   $115 = ((($114)) + 20|0);
   HEAP32[$115>>2] = $113;
   $i = 0;
   while(1) {
    $116 = $i;
    $117 = $file_pc_count;
    $118 = ($116>>>0)<($117>>>0);
    if (!($118)) {
     break L14;
    }
    $119 = $3;
    $120 = $i;
    $121 = (($119) + ($120))|0;
    $122 = $2;
    $123 = ((($122)) + 32|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + ($121<<1)|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = $i;
    $128 = $ret;
    $129 = ((($128)) + 20|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + ($127<<1)|0);
    HEAP16[$131>>1] = $126;
    $132 = $i;
    $133 = (($132) + 1)|0;
    $i = $133;
   }
   break;
  }
  case 1:  {
   $prev_line = 0;
   $134 = $1;
   $135 = (_mrb_malloc($134,8)|0);
   $136 = $ret;
   $137 = ((($136)) + 20|0);
   HEAP32[$137>>2] = $135;
   $138 = $ret;
   $139 = ((($138)) + 12|0);
   HEAP32[$139>>2] = 0;
   $i = 0;
   while(1) {
    $140 = $i;
    $141 = $file_pc_count;
    $142 = ($140>>>0)<($141>>>0);
    if (!($142)) {
     break L14;
    }
    $143 = $3;
    $144 = $i;
    $145 = (($143) + ($144))|0;
    $146 = $2;
    $147 = ((($146)) + 32|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($145<<1)|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = $150&65535;
    $152 = $prev_line;
    $153 = $152&65535;
    $154 = ($151|0)==($153|0);
    if (!($154)) {
     $155 = $1;
     $156 = $ret;
     $157 = ((($156)) + 20|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $ret;
     $160 = ((($159)) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + 1)|0;
     $163 = $162<<3;
     $164 = (_mrb_realloc($155,$158,$163)|0);
     $165 = $ret;
     $166 = ((($165)) + 20|0);
     HEAP32[$166>>2] = $164;
     $167 = $3;
     $168 = $i;
     $169 = (($167) + ($168))|0;
     HEAP32[$m>>2] = $169;
     $170 = $3;
     $171 = $i;
     $172 = (($170) + ($171))|0;
     $173 = $2;
     $174 = ((($173)) + 32|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + ($172<<1)|0);
     $177 = HEAP16[$176>>1]|0;
     $178 = ((($m)) + 4|0);
     HEAP16[$178>>1] = $177;
     $179 = $ret;
     $180 = ((($179)) + 12|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $ret;
     $183 = ((($182)) + 20|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($184) + ($181<<3)|0);
     ;HEAP32[$185>>2]=HEAP32[$m>>2]|0;HEAP32[$185+4>>2]=HEAP32[$m+4>>2]|0;
     $186 = $ret;
     $187 = ((($186)) + 12|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + 1)|0;
     HEAP32[$187>>2] = $189;
     $190 = $3;
     $191 = $i;
     $192 = (($190) + ($191))|0;
     $193 = $2;
     $194 = ((($193)) + 32|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + ($192<<1)|0);
     $197 = HEAP16[$196>>1]|0;
     $prev_line = $197;
    }
    $198 = $i;
    $199 = (($198) + 1)|0;
    $i = $199;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $200 = $ret;
 $0 = $200;
 $201 = $0;
 STACKTOP = sp;return ($201|0);
}
function _select_line_type($lines,$lines_len) {
 $lines = $lines|0;
 $lines_len = $lines_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $line_count = 0, $prev_line = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lines;
 $1 = $lines_len;
 $line_count = 0;
 $prev_line = -1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $prev_line;
  $11 = ($9|0)!=($10|0);
  if ($11) {
   $12 = $line_count;
   $13 = (($12) + 1)|0;
   $line_count = $13;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 $16 = $1;
 $17 = $16<<1;
 $18 = $line_count;
 $19 = $18<<3;
 $20 = ($17>>>0)<=($19>>>0);
 $21 = $20 ? 0 : 1;
 STACKTOP = sp;return ($21|0);
}
function _mrb_debug_info_free($mrb,$d) {
 $mrb = $mrb|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $d;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = ($4>>>0)<($8>>>0);
  $10 = $0;
  if (!($9)) {
   break;
  }
  $11 = $i;
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  _mrb_free($10,$18);
  $19 = $0;
  $20 = $i;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  _mrb_free($19,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 _mrb_free($10,$30);
 $31 = $0;
 $32 = $1;
 _mrb_free($31,$32);
 STACKTOP = sp;return;
}
function _mrb_exc_new($agg$result,$mrb,$c,$ptr,$len) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $ptr;
 $3 = $len;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 _mrb_str_new($arg,$4,$5,$6);
 $7 = $0;
 $8 = $1;
 _mrb_obj_new($agg$result,$7,$8,1,$arg);
 STACKTOP = sp;return;
}
function _mrb_exc_new_str($agg$result,$mrb,$c,$str) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $c = $c|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $str$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy = sp + 16|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $c;
 $3 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_to_str($2,$3,$str$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 $4 = $0;
 $5 = $1;
 _mrb_obj_new($agg$result,$4,$5,1,$str);
 STACKTOP = sp;return;
}
function _mrb_exc_raise($mrb,$exc) {
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exc$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$exc>>2]|0;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 HEAP32[$3>>2] = $1;
 $4 = $0;
 $5 = ((($4)) + 92|0);
 $6 = ((($5)) + 452|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7&255) >>> 3;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)!=(0);
 if (!($10)) {
  $11 = $0;
  $12 = $0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  _exc_debug_info($11,$14);
 }
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = $0;
 if ($17) {
  $26 = HEAP32[$18>>2]|0;
  _longjmp(($26|0),1);
  // unreachable;
 }
 $19 = ((($18)) + 92|0);
 $20 = ((($19)) + 452|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21&255) >>> 3;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)!=(0);
 if ($24) {
  _abort();
  // unreachable;
 }
 $25 = $0;
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_p($25,$exc$byval_copy);
 _abort();
 // unreachable;
}
function _exc_debug_info($mrb,$exc) {
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $err = 0, $file = 0, $irep = 0, $line = 0, $or$cond = 0, $or$cond3 = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy5 = sp + 72|0;
 $$byval_copy4 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $2 = sp + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $exc;
 $5 = $0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $ci = $9;
 $10 = $ci;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $pc = $12;
 $13 = $0;
 $14 = $1;
 $15 = $0;
 $16 = (_mrb_intern_static($15,67505,5)|0);
 $17 = $ci;
 $18 = $0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $17;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 48)&-1;
 _mrb_fixnum_value_931($2,$26);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_obj_iv_set($13,$14,$16,$$byval_copy);
 while(1) {
  $27 = $ci;
  $28 = $0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($27>>>0)>=($32>>>0);
  if (!($33)) {
   label = 11;
   break;
  }
  $34 = $ci;
  $35 = ((($34)) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $err = $36;
  $37 = $err;
  $38 = ($37|0)==(0|0);
  $39 = $pc;
  $40 = ($39|0)!=(0|0);
  $or$cond = $38 & $40;
  if ($or$cond) {
   $41 = $pc;
   $42 = ((($41)) + -4|0);
   $err = $42;
  }
  $43 = $err;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = $ci;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)!=(0|0);
   if ($48) {
    $49 = $ci;
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 >>> 11;
    $54 = $53 & 128;
    $55 = ($54|0)!=(0);
    if (!($55)) {
     $56 = $ci;
     $57 = ((($56)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($58)) + 12|0);
     $60 = HEAP32[$59>>2]|0;
     $irep = $60;
     $61 = $irep;
     $62 = $err;
     $63 = $irep;
     $64 = ((($63)) + 8|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $62;
     $67 = $65;
     $68 = (($66) - ($67))|0;
     $69 = (($68|0) / 4)&-1;
     $70 = (_mrb_debug_get_line($61,$69)|0);
     $line = $70;
     $71 = $irep;
     $72 = $err;
     $73 = $irep;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $72;
     $77 = $75;
     $78 = (($76) - ($77))|0;
     $79 = (($78|0) / 4)&-1;
     $80 = (_mrb_debug_get_filename($71,$79)|0);
     $file = $80;
     $81 = $line;
     $82 = ($81|0)!=(-1);
     $83 = $file;
     $84 = ($83|0)!=(0|0);
     $or$cond3 = $82 & $84;
     if ($or$cond3) {
      break;
     }
    }
   }
  }
  $96 = $ci;
  $97 = ((($96)) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $pc = $98;
  $99 = $ci;
  $100 = ((($99)) + -48|0);
  $ci = $100;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $85 = $0;
 $86 = $1;
 $87 = $0;
 $88 = (_mrb_intern_static($87,67511,4)|0);
 $89 = $0;
 $90 = $file;
 _mrb_str_new_cstr($3,$89,$90);
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_obj_iv_set($85,$86,$88,$$byval_copy4);
 $91 = $0;
 $92 = $1;
 $93 = $0;
 $94 = (_mrb_intern_static($93,67516,4)|0);
 $95 = $line;
 _mrb_fixnum_value_931($4,$95);
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_obj_iv_set($91,$92,$94,$$byval_copy5);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_931($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_raise($mrb,$c,$msg) {
 $mrb = $mrb|0;
 $c = $c|0;
 $msg = $msg|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mesg = 0, $mesg$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 48|0;
 $mesg$byval_copy = sp + 40|0;
 $mesg = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $msg;
 $5 = $0;
 $6 = $2;
 _mrb_str_new_cstr($3,$5,$6);
 ;HEAP32[$mesg>>2]=HEAP32[$3>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$3+4>>2]|0;
 $7 = $0;
 $8 = $0;
 $9 = $1;
 ;HEAP32[$mesg$byval_copy>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy+4>>2]=HEAP32[$mesg+4>>2]|0;
 _mrb_exc_new_str($4,$8,$9,$mesg$byval_copy);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_exc_raise($7,$$byval_copy);
 // unreachable;
}
function _mrb_vformat($agg$result,$mrb,$format,$ap) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $format = $format|0;
 $ap = $ap|0;
 var $$byval_copy = 0, $$byval_copy11 = 0, $$byval_copy13 = 0, $$byval_copy15 = 0, $$byval_copy7 = 0, $$byval_copy9 = 0, $$field$field = 0.0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $ary = 0, $ary$byval_copy = 0, $ary$byval_copy10 = 0, $ary$byval_copy12 = 0, $ary$byval_copy14 = 0, $ary$byval_copy6 = 0;
 var $ary$byval_copy8 = 0, $b = 0, $c = 0, $expanded = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $p = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy15 = sp + 168|0;
 $ary$byval_copy14 = sp + 160|0;
 $$byval_copy13 = sp + 152|0;
 $ary$byval_copy12 = sp + 144|0;
 $$byval_copy11 = sp + 136|0;
 $ary$byval_copy10 = sp + 128|0;
 $$byval_copy9 = sp + 120|0;
 $ary$byval_copy8 = sp + 112|0;
 $$byval_copy7 = sp + 104|0;
 $ary$byval_copy6 = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $ary$byval_copy = sp + 80|0;
 $ary = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $0 = $mrb;
 $1 = $format;
 $2 = $ap;
 $9 = $1;
 $p = $9;
 $10 = $p;
 $b = $10;
 $11 = $0;
 _mrb_ary_new_capa($ary,$11,4);
 while(1) {
  $12 = $p;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $p;
  $16 = ((($15)) + 1|0);
  $p = $16;
  $17 = HEAP8[$15>>0]|0;
  $c = $17;
  $18 = $c;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(37);
  if ($20) {
   $21 = $p;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)==(83);
   if (!($24)) {
    continue;
   }
   $25 = $p;
   $26 = $b;
   $27 = $25;
   $28 = $26;
   $29 = (($27) - ($28))|0;
   $30 = (($29) - 1)|0;
   $size = $30;
   $31 = $0;
   $32 = $0;
   $33 = $b;
   $34 = $size;
   _mrb_str_new($3,$32,$33,$34);
   ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
   _mrb_ary_push($31,$ary$byval_copy,$$byval_copy);
   $35 = $0;
   $36 = $2;
   $arglist_current = HEAP32[$36>>2]|0;
   $37 = $arglist_current;
   $38 = ((0) + 4|0);
   $expanded16 = $38;
   $expanded = (($expanded16) - 1)|0;
   $39 = (($37) + ($expanded))|0;
   $40 = ((0) + 4|0);
   $expanded20 = $40;
   $expanded19 = (($expanded20) - 1)|0;
   $expanded18 = $expanded19 ^ -1;
   $41 = $39 & $expanded18;
   $42 = $41;
   $$field$field = +HEAPF32[$42>>2];
   $$index1 = ((($42)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   $arglist_next = ((($42)) + 8|0);
   HEAP32[$36>>2] = $arglist_next;
   HEAPF32[$4>>2] = $$field$field;
   $$index5 = ((($4)) + 4|0);
   HEAP32[$$index5>>2] = $$field2;
   ;HEAP32[$ary$byval_copy6>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy6+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$4+4>>2]|0;
   _mrb_ary_push($35,$ary$byval_copy6,$$byval_copy7);
   $43 = $p;
   $44 = ((($43)) + 1|0);
   $b = $44;
   continue;
  }
  $45 = $c;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)==(92);
  if (!($47)) {
   continue;
  }
  $48 = $p;
  $49 = HEAP8[$48>>0]|0;
  $50 = ($49<<24>>24)!=(0);
  if (!($50)) {
   break;
  }
  $51 = $p;
  $52 = $b;
  $53 = $51;
  $54 = $52;
  $55 = (($53) - ($54))|0;
  $56 = (($55) - 1)|0;
  $size = $56;
  $57 = $0;
  $58 = $0;
  $59 = $b;
  $60 = $size;
  _mrb_str_new($5,$58,$59,$60);
  ;HEAP32[$ary$byval_copy8>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy8+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$5+4>>2]|0;
  _mrb_ary_push($57,$ary$byval_copy8,$$byval_copy9);
  $61 = $0;
  $62 = $0;
  $63 = $p;
  _mrb_str_new($6,$62,$63,1);
  ;HEAP32[$ary$byval_copy10>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy10+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy11>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$6+4>>2]|0;
  _mrb_ary_push($61,$ary$byval_copy10,$$byval_copy11);
  $64 = $p;
  $65 = ((($64)) + 1|0);
  $p = $65;
  $b = $65;
 }
 $66 = $b;
 $67 = $1;
 $68 = ($66|0)==($67|0);
 if ($68) {
  $69 = $0;
  $70 = $1;
  _mrb_str_new_cstr($agg$result,$69,$70);
  STACKTOP = sp;return;
 } else {
  $71 = $p;
  $72 = $b;
  $73 = $71;
  $74 = $72;
  $75 = (($73) - ($74))|0;
  $size = $75;
  $76 = $0;
  $77 = $0;
  $78 = $b;
  $79 = $size;
  _mrb_str_new($7,$77,$78,$79);
  ;HEAP32[$ary$byval_copy12>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy12+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy13>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$7+4>>2]|0;
  _mrb_ary_push($76,$ary$byval_copy12,$$byval_copy13);
  $80 = $0;
  $81 = $0;
  _mrb_str_new($8,$81,0,0);
  ;HEAP32[$ary$byval_copy14>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy14+4>>2]=HEAP32[$ary+4>>2]|0;
  ;HEAP32[$$byval_copy15>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$8+4>>2]|0;
  _mrb_ary_join($agg$result,$80,$ary$byval_copy14,$$byval_copy15);
  STACKTOP = sp;return;
 }
}
function _mrb_format($agg$result,$mrb,$format,$varargs) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ap = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 16|0;
 $str = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $format;
 HEAP32[$ap>>2] = $varargs;
 $3 = $0;
 $4 = $1;
 _mrb_vformat($2,$3,$4,$ap);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_raisef($mrb,$c,$fmt,$varargs) {
 $mrb = $mrb|0;
 $c = $c|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $mesg = 0, $mesg$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 64|0;
 $mesg$byval_copy = sp + 56|0;
 $args = sp + 24|0;
 $mesg = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $1 = $c;
 $2 = $fmt;
 HEAP32[$args>>2] = $varargs;
 $5 = $0;
 $6 = $2;
 _mrb_vformat($3,$5,$6,$args);
 ;HEAP32[$mesg>>2]=HEAP32[$3>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$3+4>>2]|0;
 $7 = $0;
 $8 = $0;
 $9 = $1;
 ;HEAP32[$mesg$byval_copy>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy+4>>2]=HEAP32[$mesg+4>>2]|0;
 _mrb_exc_new_str($4,$8,$9,$mesg$byval_copy);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_exc_raise($7,$$byval_copy);
 // unreachable;
}
function _mrb_name_error($mrb,$id,$fmt,$varargs) {
 $mrb = $mrb|0;
 $id = $id|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $argv = 0, $exc = 0, $exc$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy = sp + 80|0;
 $exc = sp + 56|0;
 $argv = sp + 40|0;
 $args = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $id;
 $2 = $fmt;
 HEAP32[$args>>2] = $varargs;
 $6 = $0;
 $7 = $2;
 _mrb_vformat($3,$6,$7,$args);
 ;HEAP32[$argv>>2]=HEAP32[$3>>2]|0;HEAP32[$argv+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = ((($argv)) + 8|0);
 $9 = $1;
 _mrb_symbol_value_942($4,$9);
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 $10 = $0;
 $11 = $0;
 $12 = (_mrb_class_get($11,67521)|0);
 _mrb_obj_new($5,$10,$12,2,$argv);
 ;HEAP32[$exc>>2]=HEAP32[$5>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$5+4>>2]|0;
 $13 = $0;
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_exc_raise($13,$exc$byval_copy);
 // unreachable;
}
function _mrb_symbol_value_942($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_warn($mrb,$fmt,$varargs) {
 $mrb = $mrb|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 16|0;
 $str = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $3 = $0;
 $4 = $1;
 _mrb_vformat($2,$3,$4,$ap);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 $5 = HEAP32[637]|0;
 (_fputs(67531,$5)|0);
 $6 = HEAP32[$str>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & 8;
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$str>>2]|0;
 $12 = ((($11)) + 12|0);
 if ($10) {
  $28 = $12;
 } else {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $28 = $14;
 }
 $15 = HEAP32[$str>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 8;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[$str>>2]|0;
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 11;
  $23 = $22 & 496;
  $24 = $23 >> 4;
  $29 = $24;
  $27 = HEAP32[637]|0;
  (_fwrite($28,$29,1,$27)|0);
  STACKTOP = sp;return;
 } else {
  $25 = ((($20)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
  $27 = HEAP32[637]|0;
  (_fwrite($28,$29,1,$27)|0);
  STACKTOP = sp;return;
 }
}
function _mrb_bug($mrb,$fmt,$varargs) {
 $mrb = $mrb|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 16|0;
 $str = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $3 = $0;
 $4 = $1;
 _mrb_vformat($2,$3,$4,$ap);
 ;HEAP32[$str>>2]=HEAP32[$2>>2]|0;HEAP32[$str+4>>2]=HEAP32[$2+4>>2]|0;
 $5 = HEAP32[637]|0;
 (_fputs(67541,$5)|0);
 $6 = HEAP32[$str>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & 8;
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$str>>2]|0;
 $12 = ((($11)) + 12|0);
 if ($10) {
  $28 = $12;
 } else {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $28 = $14;
 }
 $15 = HEAP32[$str>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 8;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[$str>>2]|0;
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 11;
  $23 = $22 & 496;
  $24 = $23 >> 4;
  $29 = $24;
  $27 = HEAP32[637]|0;
  (_fwrite($28,$29,1,$27)|0);
  _exit(1);
  // unreachable;
 } else {
  $25 = ((($20)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
  $27 = HEAP32[637]|0;
  (_fwrite($28,$29,1,$27)|0);
  _exit(1);
  // unreachable;
 }
}
function _mrb_make_exception($agg$result,$mrb,$argc,$argv) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $argc;
 $2 = $argv;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _make_exception($agg$result,$3,$4,$5,1);
 STACKTOP = sp;return;
}
function _make_exception($agg$result,$mrb,$argc,$argv,$isstr) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $isstr = $isstr|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exc = 0, $mesg = 0, $mesg$byval_copy = 0, $mesg$byval_copy3 = 0, $mesg$byval_copy4 = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy5 = sp + 136|0;
 $mesg$byval_copy4 = sp + 128|0;
 $mesg$byval_copy3 = sp + 120|0;
 $$byval_copy2 = sp + 112|0;
 $$byval_copy1 = sp + 104|0;
 $mesg$byval_copy = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $vararg_buffer = sp;
 $mesg = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 40|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $0 = $mrb;
 $1 = $argc;
 $2 = $argv;
 $3 = $isstr;
 _mrb_nil_value_950($4);
 ;HEAP32[$mesg>>2]=HEAP32[$4>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$4+4>>2]|0;
 $9 = $1;
 L1: do {
  switch ($9|0) {
  case 0:  {
   break;
  }
  case 1:  {
   $10 = $2;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $2;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)!=(0);
    if (!($16)) {
     break L1;
    }
   }
   $17 = $3;
   $18 = ($17<<24>>24)!=(0);
   do {
    if ($18) {
     $19 = $0;
     $20 = $2;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$20+4>>2]|0;
     _mrb_check_string_type($5,$19,$$byval_copy);
     ;HEAP32[$mesg>>2]=HEAP32[$5>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$5+4>>2]|0;
     $21 = ((($mesg)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = HEAP32[$mesg>>2]|0;
      $25 = ($24|0)!=(0);
      if (!($25)) {
       break;
      }
     }
     $26 = $0;
     $27 = $0;
     $28 = (_mrb_class_get($27,67967)|0);
     ;HEAP32[$mesg$byval_copy>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy+4>>2]=HEAP32[$mesg+4>>2]|0;
     _mrb_exc_new_str($6,$26,$28,$mesg$byval_copy);
     ;HEAP32[$mesg>>2]=HEAP32[$6>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$6+4>>2]|0;
     break L1;
    }
   } while(0);
   $n = 0;
   label = 10;
   break;
  }
  case 3: case 2:  {
   $n = 1;
   label = 10;
   break;
  }
  default: {
   $44 = $0;
   $45 = $0;
   $46 = (_mrb_class_get($45,68855)|0);
   $47 = $1;
   _mrb_fixnum_value_931($8,$47);
   ;HEAP8[$vararg_buffer>>0]=HEAP8[$8>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$8+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$8+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$8+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$8+7>>0]|0;
   _mrb_raisef($44,$46,67589,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $29 = $0;
   $30 = (_mrb_intern_static($29,67547,9)|0);
   $exc = $30;
   $31 = $0;
   $32 = $2;
   $33 = $exc;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$32+4>>2]|0;
   $34 = (_mrb_respond_to($31,$$byval_copy1,$33)|0);
   $35 = ($34<<24>>24)!=(0);
   $36 = $0;
   if ($35) {
    $37 = $2;
    $38 = $exc;
    $39 = $n;
    $40 = $2;
    $41 = ((($40)) + 8|0);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$37+4>>2]|0;
    _mrb_funcall_argv($7,$36,$$byval_copy2,$38,$39,$41);
    ;HEAP32[$mesg>>2]=HEAP32[$7>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$7+4>>2]|0;
    break;
   } else {
    $42 = $0;
    $43 = (_mrb_class_get($42,68905)|0);
    _mrb_raise($36,$43,67557);
    // unreachable;
   }
  }
 } while(0);
 $48 = $1;
 $49 = ($48|0)>(0);
 if (!($49)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$mesg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mesg+4>>2]|0;
  STACKTOP = sp;return;
 }
 $50 = $0;
 $51 = $0;
 $52 = ((($51)) + 568|0);
 $53 = HEAP32[$52>>2]|0;
 ;HEAP32[$mesg$byval_copy3>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy3+4>>2]=HEAP32[$mesg+4>>2]|0;
 $54 = (_mrb_obj_is_kind_of($50,$mesg$byval_copy3,$53)|0);
 $55 = ($54<<24>>24)!=(0);
 if (!($55)) {
  $56 = $0;
  $57 = $0;
  $58 = (_mrb_class_get($57,68905)|0);
  _mrb_raise($56,$58,67629);
  // unreachable;
 }
 $59 = $1;
 $60 = ($59|0)>(2);
 if (!($60)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$mesg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mesg+4>>2]|0;
  STACKTOP = sp;return;
 }
 $61 = $0;
 $62 = $2;
 $63 = ((($62)) + 16|0);
 ;HEAP32[$mesg$byval_copy4>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy4+4>>2]=HEAP32[$mesg+4>>2]|0;
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$63>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$63+4>>2]|0;
 _set_backtrace($61,$mesg$byval_copy4,$$byval_copy5);
 ;HEAP32[$agg$result>>2]=HEAP32[$mesg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mesg+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_nil_value_950($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _set_backtrace($mrb,$info,$bt) {
 $mrb = $mrb|0;
 $info = $info|0;
 $bt = $bt|0;
 var $0 = 0, $1 = 0, $2 = 0, $info$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$bt>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$bt+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$bt+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$bt+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$bt+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$bt+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$bt+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$bt+7>>0]|0;
 ;HEAP32[$info$byval_copy>>2]=HEAP32[$info>>2]|0;HEAP32[$info$byval_copy+4>>2]=HEAP32[$info+4>>2]|0;
 _mrb_funcall($1,$2,$info$byval_copy,67655,1,$vararg_buffer);
 STACKTOP = sp;return;
}
function _mrb_obj_value_960($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_no_method_error($mrb,$id,$args,$fmt,$varargs) {
 $mrb = $mrb|0;
 $id = $id|0;
 $args = $args|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $exc = 0, $exc$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy = sp + 104|0;
 $$byval_copy = sp + 96|0;
 $vararg_buffer = sp;
 $exc = sp + 72|0;
 $ap = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $7 = $0;
 $8 = $0;
 $9 = (_mrb_class_get($8,67669)|0);
 _mrb_obj_value_960($3,$9);
 $10 = $0;
 $11 = $2;
 _mrb_vformat($4,$10,$11,$ap);
 $12 = $1;
 _mrb_symbol_value_942($5,$12);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$4+7>>0]|0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 ;HEAP8[$vararg_ptr1>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$5+7>>0]|0;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 ;HEAP8[$vararg_ptr2>>0]=HEAP8[$args>>0]|0;HEAP8[$vararg_ptr2+1>>0]=HEAP8[$args+1>>0]|0;HEAP8[$vararg_ptr2+2>>0]=HEAP8[$args+2>>0]|0;HEAP8[$vararg_ptr2+3>>0]=HEAP8[$args+3>>0]|0;HEAP8[$vararg_ptr2+4>>0]=HEAP8[$args+4>>0]|0;HEAP8[$vararg_ptr2+5>>0]=HEAP8[$args+5>>0]|0;HEAP8[$vararg_ptr2+6>>0]=HEAP8[$args+6>>0]|0;HEAP8[$vararg_ptr2+7>>0]=HEAP8[$args+7>>0]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_funcall($6,$7,$$byval_copy,67683,3,$vararg_buffer);
 ;HEAP32[$exc>>2]=HEAP32[$6>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$6+4>>2]|0;
 $13 = $0;
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_exc_raise($13,$exc$byval_copy);
 // unreachable;
}
function _mrb_init_exception($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exception = 0, $runtime_error = 0, $script_error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $mrb;
 $3 = $0;
 $4 = $0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_mrb_define_class($3,67687,$6)|0);
 $exception = $7;
 $8 = $0;
 $9 = ((($8)) + 568|0);
 HEAP32[$9>>2] = $7;
 $10 = $exception;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 11;
 $13 = $12 & -256;
 $14 = $13 | 18;
 $15 = $exception;
 $16 = HEAP32[$15>>2]|0;
 $17 = $14 & 2097151;
 $18 = $17 << 11;
 $19 = $16 & 2047;
 $20 = $19 | $18;
 HEAP32[$15>>2] = $20;
 $21 = $0;
 $22 = $exception;
 _mrb_define_class_method($21,$22,67547,238,4096);
 $23 = $0;
 $24 = $exception;
 _mrb_define_method($23,$24,67547,276,4096);
 $25 = $0;
 $26 = $exception;
 _mrb_define_method($25,$26,68953,277,4096);
 $27 = $0;
 $28 = $exception;
 _mrb_define_method($27,$28,68977,278,0);
 $29 = $0;
 $30 = $exception;
 _mrb_define_method($29,$30,67705,279,0);
 $31 = $0;
 $32 = $exception;
 _mrb_define_method($31,$32,68986,280,0);
 $33 = $0;
 $34 = $exception;
 _mrb_define_method($33,$34,67723,281,0);
 $35 = $0;
 $36 = $0;
 $37 = ((($36)) + 568|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_mrb_define_class($35,69398,$38)|0);
 $40 = $0;
 $41 = ((($40)) + 572|0);
 HEAP32[$41>>2] = $39;
 $42 = $0;
 $43 = $0;
 $44 = ((($43)) + 572|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_mrb_define_class($42,67967,$45)|0);
 $runtime_error = $46;
 $47 = $0;
 $48 = $runtime_error;
 $49 = $0;
 _mrb_str_new_static($1,$49,67733,13);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_exc_new_str($2,$47,$48,$$byval_copy);
 $50 = HEAP32[$2>>2]|0;
 $51 = $0;
 $52 = ((($51)) + 576|0);
 HEAP32[$52>>2] = $50;
 $53 = $0;
 $54 = $0;
 $55 = ((($54)) + 568|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_mrb_define_class($53,67747,$56)|0);
 $script_error = $57;
 $58 = $0;
 $59 = $script_error;
 (_mrb_define_class($58,67759,$59)|0);
 $60 = $0;
 $61 = $exception;
 (_mrb_define_class($60,67771,$61)|0);
 STACKTOP = sp;return;
}
function _exc_exception($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a$byval_copy = 0, $a$byval_copy2 = 0, $argc = 0, $exc = 0, $exc$byval_copy = 0, $self$byval_copy = 0;
 var $self$byval_copy1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$byval_copy2 = sp + 80|0;
 $exc$byval_copy = sp + 72|0;
 $self$byval_copy1 = sp + 64|0;
 $a$byval_copy = sp + 56|0;
 $self$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $exc = sp + 32|0;
 $a = sp + 24|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $a;
 $3 = (_mrb_get_args($2,67697,$vararg_buffer)|0);
 $argc = $3;
 $4 = $argc;
 $5 = ($4|0)==(0);
 if ($5) {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 $7 = (_mrb_obj_equal($6,$self$byval_copy,$a$byval_copy)|0);
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $9 = $0;
  ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
  _mrb_obj_clone($1,$9,$self$byval_copy1);
  ;HEAP32[$exc>>2]=HEAP32[$1>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$1+4>>2]|0;
  $10 = $0;
  $11 = $0;
  $12 = (_mrb_intern_static($11,67700,4)|0);
  ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
  ;HEAP32[$a$byval_copy2>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy2+4>>2]=HEAP32[$a+4>>2]|0;
  _mrb_iv_set($10,$exc$byval_copy,$12,$a$byval_copy2);
  ;HEAP32[$agg$result>>2]=HEAP32[$exc>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$exc+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _exc_initialize($agg$result,$mrb,$exc) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exc$byval_copy = 0, $mesg = 0, $mesg$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mesg$byval_copy = sp + 32|0;
 $exc$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $mesg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $mesg;
 $2 = (_mrb_get_args($1,67697,$vararg_buffer)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$exc>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$exc+4>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $0;
 $6 = (_mrb_intern_static($5,67700,4)|0);
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 ;HEAP32[$mesg$byval_copy>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy+4>>2]=HEAP32[$mesg+4>>2]|0;
 _mrb_iv_set($4,$exc$byval_copy,$6,$mesg$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$exc>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$exc+4>>2]|0;
 STACKTOP = sp;return;
}
function _exc_to_s($agg$result,$mrb,$exc) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exc$byval_copy = 0, $exc$byval_copy1 = 0, $mesg = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy1 = sp + 32|0;
 $exc$byval_copy = sp + 24|0;
 $mesg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = (_mrb_intern_static($2,67700,4)|0);
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_attr_get($mesg,$1,$exc$byval_copy,$3);
 $4 = ((($mesg)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(16);
 if (!($6)) {
  $7 = $0;
  $8 = $0;
  ;HEAP32[$exc$byval_copy1>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy1+4>>2]=HEAP32[$exc+4>>2]|0;
  $9 = (_mrb_obj_classname($8,$exc$byval_copy1)|0);
  _mrb_str_new_cstr($agg$result,$7,$9);
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$mesg>>2]|0;
 $p = $10;
 $11 = $p;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $0;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $p;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$mesg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$mesg+4>>2]|0;
 STACKTOP = sp;return;
}
function _exc_message($agg$result,$mrb,$exc) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $exc$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_funcall($agg$result,$1,$exc$byval_copy,68977,0,$vararg_buffer);
 STACKTOP = sp;return;
}
function _exc_inspect($agg$result,$mrb,$exc) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $append_mesg = 0, $cname = 0, $exc$byval_copy = 0, $exc$byval_copy1 = 0, $exc$byval_copy11 = 0, $exc$byval_copy2 = 0, $exc$byval_copy8 = 0, $file = 0, $file$byval_copy = 0, $line = 0, $line$byval_copy = 0, $mesg = 0;
 var $mesg$byval_copy = 0, $mesg$byval_copy14 = 0, $mesg$byval_copy6 = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy10 = 0, $str$byval_copy12 = 0, $str$byval_copy13 = 0, $str$byval_copy15 = 0, $str$byval_copy3 = 0, $str$byval_copy4 = 0, $str$byval_copy5 = 0, $str$byval_copy7 = 0, $str$byval_copy9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str$byval_copy15 = sp + 328|0;
 $mesg$byval_copy14 = sp + 320|0;
 $str$byval_copy13 = sp + 312|0;
 $str$byval_copy12 = sp + 304|0;
 $exc$byval_copy11 = sp + 296|0;
 $str$byval_copy10 = sp + 288|0;
 $str$byval_copy9 = sp + 280|0;
 $exc$byval_copy8 = sp + 272|0;
 $str$byval_copy7 = sp + 264|0;
 $mesg$byval_copy6 = sp + 256|0;
 $str$byval_copy5 = sp + 248|0;
 $str$byval_copy4 = sp + 240|0;
 $line$byval_copy = sp + 232|0;
 $str$byval_copy3 = sp + 224|0;
 $str$byval_copy = sp + 216|0;
 $file$byval_copy = sp + 208|0;
 $mesg$byval_copy = sp + 200|0;
 $exc$byval_copy2 = sp + 192|0;
 $exc$byval_copy1 = sp + 184|0;
 $exc$byval_copy = sp + 176|0;
 $str = sp + 160|0;
 $mesg = sp + 152|0;
 $file = sp + 144|0;
 $line = sp + 136|0;
 $1 = sp + 128|0;
 $2 = sp + 120|0;
 $3 = sp + 112|0;
 $4 = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 88|0;
 $7 = sp + 80|0;
 $8 = sp + 72|0;
 $9 = sp + 64|0;
 $10 = sp + 56|0;
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $0 = $mrb;
 $17 = $0;
 $18 = $0;
 $19 = (_mrb_intern_static($18,67700,4)|0);
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_attr_get($1,$17,$exc$byval_copy,$19);
 ;HEAP32[$mesg>>2]=HEAP32[$1>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$1+4>>2]|0;
 $20 = $0;
 $21 = $0;
 $22 = (_mrb_intern_static($21,67511,4)|0);
 ;HEAP32[$exc$byval_copy1>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy1+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_attr_get($2,$20,$exc$byval_copy1,$22);
 ;HEAP32[$file>>2]=HEAP32[$2>>2]|0;HEAP32[$file+4>>2]=HEAP32[$2+4>>2]|0;
 $23 = $0;
 $24 = $0;
 $25 = (_mrb_intern_static($24,67516,4)|0);
 ;HEAP32[$exc$byval_copy2>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy2+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_attr_get($3,$23,$exc$byval_copy2,$25);
 ;HEAP32[$line>>2]=HEAP32[$3>>2]|0;HEAP32[$line+4>>2]=HEAP32[$3+4>>2]|0;
 $26 = ((($mesg)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = HEAP32[$mesg>>2]|0;
  $30 = ($29|0)!=(0);
  $31 = $30 ^ 1;
  $33 = $31;
 } else {
  $33 = 0;
 }
 $32 = $33 ^ 1;
 $34 = $32&1;
 $35 = $34&255;
 $append_mesg = $35;
 $36 = $append_mesg;
 $37 = ($36<<24>>24)!=(0);
 if ($37) {
  $38 = $0;
  ;HEAP32[$mesg$byval_copy>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy+4>>2]=HEAP32[$mesg+4>>2]|0;
  _mrb_obj_as_string($4,$38,$mesg$byval_copy);
  ;HEAP32[$mesg>>2]=HEAP32[$4>>2]|0;HEAP32[$mesg+4>>2]=HEAP32[$4+4>>2]|0;
  $39 = HEAP32[$mesg>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >>> 11;
  $42 = $41 & 8;
  $43 = ($42|0)!=(0);
  $44 = HEAP32[$mesg>>2]|0;
  if ($43) {
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 >>> 11;
   $47 = $46 & 496;
   $48 = $47 >> 4;
   $51 = $48;
  } else {
   $49 = ((($44)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50;
  }
  $52 = ($51|0)>(0);
  $53 = $52&1;
  $54 = $53&255;
  $append_mesg = $54;
 }
 $55 = ((($file)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  $58 = HEAP32[$file>>2]|0;
  $59 = ($58|0)!=(0);
  if ($59) {
   label = 10;
  }
 } else {
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   $60 = ((($line)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = HEAP32[$line>>2]|0;
    $64 = ($63|0)!=(0);
    if (!($64)) {
     break;
    }
   }
   $65 = $0;
   ;HEAP32[$file$byval_copy>>2]=HEAP32[$file>>2]|0;HEAP32[$file$byval_copy+4>>2]=HEAP32[$file+4>>2]|0;
   _mrb_str_dup($5,$65,$file$byval_copy);
   ;HEAP32[$str>>2]=HEAP32[$5>>2]|0;HEAP32[$str+4>>2]=HEAP32[$5+4>>2]|0;
   $66 = $0;
   ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_str_cat($6,$66,$str$byval_copy,67713,1);
   $67 = $0;
   ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
   ;HEAP32[$line$byval_copy>>2]=HEAP32[$line>>2]|0;HEAP32[$line$byval_copy+4>>2]=HEAP32[$line+4>>2]|0;
   _mrb_str_append($7,$67,$str$byval_copy3,$line$byval_copy);
   $68 = $0;
   ;HEAP32[$str$byval_copy4>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy4+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_str_cat($8,$68,$str$byval_copy4,67715,2);
   $69 = $append_mesg;
   $70 = ($69<<24>>24)!=(0);
   if ($70) {
    $71 = $0;
    ;HEAP32[$str$byval_copy5>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy5+4>>2]=HEAP32[$str+4>>2]|0;
    ;HEAP32[$mesg$byval_copy6>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy6+4>>2]=HEAP32[$mesg+4>>2]|0;
    _mrb_str_cat_str($9,$71,$str$byval_copy5,$mesg$byval_copy6);
    $72 = $0;
    ;HEAP32[$str$byval_copy7>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy7+4>>2]=HEAP32[$str+4>>2]|0;
    _mrb_str_cat($10,$72,$str$byval_copy7,67718,2);
   }
   $73 = $0;
   $74 = $0;
   ;HEAP32[$exc$byval_copy8>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy8+4>>2]=HEAP32[$exc+4>>2]|0;
   $75 = (_mrb_obj_classname($74,$exc$byval_copy8)|0);
   ;HEAP32[$str$byval_copy9>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy9+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_str_cat_cstr($11,$73,$str$byval_copy9,$75);
   $76 = $append_mesg;
   $77 = ($76<<24>>24)!=(0);
   if (!($77)) {
    ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
    STACKTOP = sp;return;
   }
   $78 = $0;
   ;HEAP32[$str$byval_copy10>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy10+4>>2]=HEAP32[$str+4>>2]|0;
   _mrb_str_cat($12,$78,$str$byval_copy10,67721,1);
   ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $79 = $0;
 ;HEAP32[$exc$byval_copy11>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy11+4>>2]=HEAP32[$exc+4>>2]|0;
 $80 = (_mrb_obj_classname($79,$exc$byval_copy11)|0);
 $cname = $80;
 $81 = $0;
 $82 = $cname;
 _mrb_str_new_cstr($13,$81,$82);
 ;HEAP32[$str>>2]=HEAP32[$13>>2]|0;HEAP32[$str+4>>2]=HEAP32[$13+4>>2]|0;
 $83 = $0;
 ;HEAP32[$str$byval_copy12>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy12+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($14,$83,$str$byval_copy12,67715,2);
 $84 = $append_mesg;
 $85 = ($84<<24>>24)!=(0);
 $86 = $0;
 if ($85) {
  ;HEAP32[$str$byval_copy13>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy13+4>>2]=HEAP32[$str+4>>2]|0;
  ;HEAP32[$mesg$byval_copy14>>2]=HEAP32[$mesg>>2]|0;HEAP32[$mesg$byval_copy14+4>>2]=HEAP32[$mesg+4>>2]|0;
  _mrb_str_cat_str($15,$86,$str$byval_copy13,$mesg$byval_copy14);
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $87 = $cname;
  ;HEAP32[$str$byval_copy15>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy15+4>>2]=HEAP32[$str+4>>2]|0;
  _mrb_str_cat_cstr($16,$86,$str$byval_copy15,$87);
  ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_data_check_type($mrb,$obj,$type) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $obj$byval_copy = 0, $obj$byval_copy6 = 0;
 var $t2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy6 = sp + 96|0;
 $obj$byval_copy = sp + 88|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 64|0;
 $3 = sp + 56|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $0 = $mrb;
 $1 = $type;
 $6 = ((($obj)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(21);
 if ($8) {
  $9 = $0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_check_type($9,$obj$byval_copy,21);
 }
 $10 = HEAP32[$obj>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ($12|0)!=($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$obj>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $t2 = $17;
 $18 = $t2;
 $19 = ($18|0)!=(0|0);
 $20 = $0;
 if ($19) {
  $21 = $0;
  $22 = (_mrb_class_get($21,68905)|0);
  $23 = $0;
  $24 = $t2;
  $25 = HEAP32[$24>>2]|0;
  _mrb_str_new_cstr($2,$23,$25);
  $26 = $0;
  $27 = $1;
  $28 = HEAP32[$27>>2]|0;
  _mrb_str_new_cstr($3,$26,$28);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  ;HEAP8[$vararg_ptr1>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$3+7>>0]|0;
  _mrb_raisef($20,$22,67788,$vararg_buffer);
  // unreachable;
 } else {
  ;HEAP32[$obj$byval_copy6>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy6+4>>2]=HEAP32[$obj+4>>2]|0;
  $29 = (_mrb_class_985($20,$obj$byval_copy6)|0);
  $c = $29;
  $30 = $0;
  $31 = $0;
  $32 = (_mrb_class_get($31,68905)|0);
  $33 = $c;
  _mrb_obj_value_986($4,$33);
  $34 = $0;
  $35 = $1;
  $36 = HEAP32[$35>>2]|0;
  _mrb_str_new_cstr($5,$34,$36);
  ;HEAP8[$vararg_buffer2>>0]=HEAP8[$4>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$4+7>>0]|0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  ;HEAP8[$vararg_ptr5>>0]=HEAP8[$5>>0]|0;HEAP8[$vararg_ptr5+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$vararg_ptr5+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$vararg_ptr5+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$vararg_ptr5+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$vararg_ptr5+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$vararg_ptr5+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$vararg_ptr5+7>>0]=HEAP8[$5+7>>0]|0;
  _mrb_raisef($30,$32,67825,$vararg_buffer2);
  // unreachable;
 }
}
function _mrb_class_985($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = HEAP32[$v>>2]|0;
   $5 = ($4|0)!=(0);
   $6 = $1;
   if ($5) {
    $7 = ((($6)) + 72|0);
    $8 = HEAP32[$7>>2]|0;
    $0 = $8;
    break L1;
   } else {
    $9 = ((($6)) + 76|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break L1;
   }
   break;
  }
  case 2:  {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   break;
  }
  case 4:  {
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   break;
  }
  case 3:  {
   $17 = $1;
   $18 = ((($17)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $0 = $19;
   break;
  }
  case 6:  {
   $20 = $1;
   $21 = ((($20)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $0 = $22;
   break;
  }
  case 7:  {
   $23 = $1;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $0 = $25;
   break;
  }
  case 20:  {
   $0 = 0;
   break;
  }
  default: {
   $26 = HEAP32[$v>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
  }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _mrb_obj_value_986($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_data_get_ptr($mrb,$obj,$type) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $type;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_data_check_type($2,$obj$byval_copy,$3);
 $4 = HEAP32[$obj>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _mrb_float_id($f) {
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 HEAPF32[$0>>2] = $f;
 $p = $0;
 $len = 4;
 $id = 0;
 while(1) {
  $1 = $len;
  $2 = (($1) + -1)|0;
  $len = $2;
  $3 = ($1|0)!=(0);
  $4 = $id;
  if (!($3)) {
   break;
  }
  $5 = ($4*65599)|0;
  $6 = $p;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($5) + ($8))|0;
  $id = $9;
  $10 = $p;
  $11 = ((($10)) + 1|0);
  $p = $11;
 }
 $12 = $id;
 $13 = $12 >> 5;
 $14 = (($4) + ($13))|0;
 $id = $14;
 $15 = $id;
 STACKTOP = sp;return ($15|0);
}
function _mrb_obj_id($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = ((($obj)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $tt = $2;
 $3 = $tt;
 L1: do {
  switch ($3|0) {
  case 5: case 1:  {
   $4 = $tt;
   $5 = 0 ^ $4;
   $0 = $5;
   break;
  }
  case 0:  {
   $6 = ((($obj)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = HEAP32[$obj>>2]|0;
    $10 = ($9|0)!=(0);
    if (!($10)) {
     $11 = $tt;
     $12 = 1 ^ $11;
     $0 = $12;
     break L1;
    }
   }
   $13 = $tt;
   $14 = 0 ^ $13;
   $0 = $14;
   break;
  }
  case 2:  {
   $15 = $tt;
   $16 = 1 ^ $15;
   $0 = $16;
   break;
  }
  case 4:  {
   $17 = HEAP32[$obj>>2]|0;
   $18 = $tt;
   $19 = $17 ^ $18;
   $0 = $19;
   break;
  }
  case 3:  {
   $20 = HEAP32[$obj>>2]|0;
   $21 = (+($20|0));
   $22 = (_mrb_float_id($21)|0);
   $23 = $22 ^ 6;
   $0 = $23;
   break;
  }
  case 6:  {
   $24 = +HEAPF32[$obj>>2];
   $25 = (_mrb_float_id($24)|0);
   $26 = $tt;
   $27 = $25 ^ $26;
   $0 = $27;
   break;
  }
  default: {
   $28 = HEAP32[$obj>>2]|0;
   $29 = $28;
   $30 = $tt;
   $31 = $29 ^ $30;
   $0 = $31;
  }
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _mrb_regexp_p($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_class_defined($1,69627)|0);
 $3 = $2&255;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $12 = 0;
  $11 = $12&1;
  $13 = $11&255;
  STACKTOP = sp;return ($13|0);
 }
 $5 = $0;
 $6 = $0;
 $7 = (_mrb_class_get($6,69627)|0);
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;
 $8 = (_mrb_obj_is_kind_of($5,$v$byval_copy,$7)|0);
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 $12 = $10;
 $11 = $12&1;
 $13 = $11&255;
 STACKTOP = sp;return ($13|0);
}
function _mrb_init_core($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 _mrb_init_symtbl($1);
 $2 = $0;
 _mrb_gc_arena_restore($2,0);
 $3 = $0;
 _mrb_init_class($3);
 $4 = $0;
 _mrb_gc_arena_restore($4,0);
 $5 = $0;
 _mrb_init_object($5);
 $6 = $0;
 _mrb_gc_arena_restore($6,0);
 $7 = $0;
 _mrb_init_kernel($7);
 $8 = $0;
 _mrb_gc_arena_restore($8,0);
 $9 = $0;
 _mrb_init_comparable($9);
 $10 = $0;
 _mrb_gc_arena_restore($10,0);
 $11 = $0;
 _mrb_init_enumerable($11);
 $12 = $0;
 _mrb_gc_arena_restore($12,0);
 $13 = $0;
 _mrb_init_symbol($13);
 $14 = $0;
 _mrb_gc_arena_restore($14,0);
 $15 = $0;
 _mrb_init_exception($15);
 $16 = $0;
 _mrb_gc_arena_restore($16,0);
 $17 = $0;
 _mrb_init_proc($17);
 $18 = $0;
 _mrb_gc_arena_restore($18,0);
 $19 = $0;
 _mrb_init_string($19);
 $20 = $0;
 _mrb_gc_arena_restore($20,0);
 $21 = $0;
 _mrb_init_array($21);
 $22 = $0;
 _mrb_gc_arena_restore($22,0);
 $23 = $0;
 _mrb_init_hash($23);
 $24 = $0;
 _mrb_gc_arena_restore($24,0);
 $25 = $0;
 _mrb_init_numeric($25);
 $26 = $0;
 _mrb_gc_arena_restore($26,0);
 $27 = $0;
 _mrb_init_range($27);
 $28 = $0;
 _mrb_gc_arena_restore($28,0);
 $29 = $0;
 _mrb_init_gc($29);
 $30 = $0;
 _mrb_gc_arena_restore($30,0);
 $31 = $0;
 _mrb_init_version($31);
 $32 = $0;
 _mrb_gc_arena_restore($32,0);
 $33 = $0;
 _mrb_init_mrblib($33);
 $34 = $0;
 _mrb_gc_arena_restore($34,0);
 STACKTOP = sp;return;
}
function _mrb_obj_inspect($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy1 = sp + 16|0;
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = ((($obj)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(8);
 if ($3) {
  $4 = $0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  $5 = (_mrb_obj_basic_to_s_p($4,$obj$byval_copy)|0);
  $6 = $5&255;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $0;
   $9 = HEAP32[$obj>>2]|0;
   _mrb_obj_iv_inspect($agg$result,$8,$9);
   STACKTOP = sp;return;
  }
 }
 $10 = $0;
 ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
 _mrb_any_to_s($agg$result,$10,$obj$byval_copy1);
 STACKTOP = sp;return;
}
function _mrb_obj_basic_to_s_p($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $me = 0, $obj$byval_copy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $1 = $mrb;
 $2 = $1;
 $3 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $4 = (_mrb_class_998($3,$obj$byval_copy)|0);
 $5 = $1;
 $6 = (_mrb_intern_static($5,68977,4)|0);
 $7 = (_mrb_method_search($2,$4,$6)|0);
 $me = $7;
 $8 = $me;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 11;
 $11 = $10 & 128;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $me;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(282|0);
  if ($16) {
   $0 = 1;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _mrb_class_998($mrb,$v) {
 $mrb = $mrb|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = ((($v)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   $4 = HEAP32[$v>>2]|0;
   $5 = ($4|0)!=(0);
   $6 = $1;
   if ($5) {
    $7 = ((($6)) + 72|0);
    $8 = HEAP32[$7>>2]|0;
    $0 = $8;
    break L1;
   } else {
    $9 = ((($6)) + 76|0);
    $10 = HEAP32[$9>>2]|0;
    $0 = $10;
    break L1;
   }
   break;
  }
  case 2:  {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   break;
  }
  case 4:  {
   $14 = $1;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   break;
  }
  case 3:  {
   $17 = $1;
   $18 = ((($17)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $0 = $19;
   break;
  }
  case 6:  {
   $20 = $1;
   $21 = ((($20)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $0 = $22;
   break;
  }
  case 7:  {
   $23 = $1;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $0 = $25;
   break;
  }
  case 20:  {
   $0 = 0;
   break;
  }
  default: {
   $26 = HEAP32[$v>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
  }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _mrb_obj_clone($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clone = 0, $clone$byval_copy = 0, $p = 0, $self$byval_copy = 0, $self$byval_copy1 = 0, $self$byval_copy2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy2 = sp + 56|0;
 $clone$byval_copy = sp + 48|0;
 $self$byval_copy1 = sp + 40|0;
 $self$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $clone = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($self)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(8);
 if ($4) {
  $5 = $0;
  $6 = $0;
  $7 = (_mrb_class_get($6,68905)|0);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$self>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$self+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$self+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$self+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$self+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$self+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$self+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$self+7>>0]|0;
  _mrb_raisef($5,$7,67856,$vararg_buffer);
  // unreachable;
 }
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(12);
 $11 = $0;
 if ($10) {
  $12 = $0;
  $13 = (_mrb_class_get($12,68905)|0);
  _mrb_raise($11,$13,67871);
  // unreachable;
 } else {
  $14 = ((($self)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  $17 = (_mrb_obj_class($16,$self$byval_copy)|0);
  $18 = (_mrb_obj_alloc($11,$15,$17)|0);
  $p = $18;
  $19 = $0;
  ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
  $20 = (_mrb_singleton_class_clone($19,$self$byval_copy1)|0);
  $21 = $p;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $p;
  _mrb_obj_value_1005($1,$23);
  ;HEAP32[$clone>>2]=HEAP32[$1>>2]|0;HEAP32[$clone+4>>2]=HEAP32[$1+4>>2]|0;
  $24 = $0;
  ;HEAP32[$clone$byval_copy>>2]=HEAP32[$clone>>2]|0;HEAP32[$clone$byval_copy+4>>2]=HEAP32[$clone+4>>2]|0;
  ;HEAP32[$self$byval_copy2>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy2+4>>2]=HEAP32[$self+4>>2]|0;
  _init_copy($24,$clone$byval_copy,$self$byval_copy2);
  ;HEAP32[$agg$result>>2]=HEAP32[$clone>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$clone+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_singleton_class_clone($mrb,$obj) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $clone = 0, $klass = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 64|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $1 = $mrb;
 $5 = HEAP32[$obj>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $klass = $7;
 $8 = $klass;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 255;
 $11 = ($10|0)!=(12);
 if ($11) {
  $12 = $klass;
  $0 = $12;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $13 = $1;
 $14 = $klass;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 255;
 $17 = $1;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_mrb_obj_alloc($13,$16,$19)|0);
 $clone = $20;
 $21 = ((($obj)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(9);
 if ($23) {
  label = 5;
 } else {
  $24 = ((($obj)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(12);
  if ($26) {
   label = 5;
  } else {
   $30 = $1;
   $31 = $klass;
   _mrb_obj_value_1005($2,$31);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   $32 = (_mrb_singleton_class_clone($30,$$byval_copy)|0);
   $33 = $clone;
   $34 = ((($33)) + 4|0);
   HEAP32[$34>>2] = $32;
  }
 }
 if ((label|0) == 5) {
  $27 = $clone;
  $28 = $clone;
  $29 = ((($28)) + 4|0);
  HEAP32[$29>>2] = $27;
 }
 $35 = $klass;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $clone;
 $39 = ((($38)) + 20|0);
 HEAP32[$39>>2] = $37;
 $40 = $klass;
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $1;
  $45 = $clone;
  _mrb_obj_value_1005($3,$45);
  $46 = $klass;
  _mrb_obj_value_1005($4,$46);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;
  _mrb_iv_copy($44,$$byval_copy1,$$byval_copy2);
  $47 = $1;
  $48 = $clone;
  $49 = $1;
  $50 = (_mrb_intern_static($49,67899,12)|0);
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_obj_iv_set($47,$48,$50,$obj$byval_copy);
 }
 $51 = $klass;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 $55 = $1;
 if ($54) {
  $56 = $klass;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_kh_copy_mt($55,$58)|0);
  $60 = $clone;
  $61 = ((($60)) + 16|0);
  HEAP32[$61>>2] = $59;
 } else {
  $62 = (_kh_init_mt($55)|0);
  $63 = $clone;
  $64 = ((($63)) + 16|0);
  HEAP32[$64>>2] = $62;
 }
 $65 = $clone;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & -256;
 $68 = $67 | 12;
 HEAP32[$65>>2] = $68;
 $69 = $clone;
 $0 = $69;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _mrb_obj_value_1005($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _init_copy($mrb,$dest,$obj) {
 $mrb = $mrb|0;
 $dest = $dest|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dest$byval_copy = 0, $dest$byval_copy1 = 0, $dest$byval_copy3 = 0, $obj$byval_copy = 0, $obj$byval_copy2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dest$byval_copy3 = sp + 56|0;
 $obj$byval_copy2 = sp + 48|0;
 $dest$byval_copy1 = sp + 40|0;
 $obj$byval_copy = sp + 32|0;
 $dest$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($obj)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 10: case 9:  {
  $4 = $0;
  ;HEAP32[$dest$byval_copy>>2]=HEAP32[$dest>>2]|0;HEAP32[$dest$byval_copy+4>>2]=HEAP32[$dest+4>>2]|0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  _copy_class($4,$dest$byval_copy,$obj$byval_copy);
  label = 3;
  break;
 }
 case 18: case 21: case 15: case 12: case 8:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  $5 = $0;
  ;HEAP32[$dest$byval_copy1>>2]=HEAP32[$dest>>2]|0;HEAP32[$dest$byval_copy1+4>>2]=HEAP32[$dest+4>>2]|0;
  ;HEAP32[$obj$byval_copy2>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy2+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_iv_copy($5,$dest$byval_copy1,$obj$byval_copy2);
 }
 $6 = $0;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$obj>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$obj+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$obj+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$obj+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$obj+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$obj+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$obj+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$obj+7>>0]|0;
 ;HEAP32[$dest$byval_copy3>>2]=HEAP32[$dest>>2]|0;HEAP32[$dest$byval_copy3+4>>2]=HEAP32[$dest+4>>2]|0;
 _mrb_funcall($1,$6,$dest$byval_copy3,68999,1,$vararg_buffer);
 STACKTOP = sp;return;
}
function _copy_class($mrb,$dst,$src) {
 $mrb = $mrb|0;
 $dst = $dst|0;
 $src = $src|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c0 = 0, $c1 = 0, $dc = 0, $sc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $mrb;
 $5 = HEAP32[$dst>>2]|0;
 $dc = $5;
 $6 = HEAP32[$src>>2]|0;
 $sc = $6;
 $7 = $sc;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 11;
 $10 = $9 & 524288;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $47 = $0;
  $48 = $sc;
  $49 = ((($48)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_kh_copy_mt($47,$50)|0);
  $52 = $dc;
  $53 = ((($52)) + 16|0);
  HEAP32[$53>>2] = $51;
  $54 = $sc;
  $55 = ((($54)) + 20|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $dc;
  $58 = ((($57)) + 20|0);
  HEAP32[$58>>2] = $56;
  STACKTOP = sp;return;
 }
 $12 = $sc;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $c0 = $14;
 $15 = $dc;
 $c1 = $15;
 while(1) {
  $16 = $c0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 1048576;
  $20 = ($19|0)!=(0);
  $21 = $20 ^ 1;
  $22 = $0;
  $23 = $c0;
  if (!($21)) {
   break;
  }
  _mrb_obj_value_1005($1,$23);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_obj_dup($2,$22,$$byval_copy);
  $24 = HEAP32[$2>>2]|0;
  $25 = $c1;
  $26 = ((($25)) + 20|0);
  HEAP32[$26>>2] = $24;
  $27 = $c1;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $c1 = $29;
  $30 = $c0;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $c0 = $32;
 }
 _mrb_obj_value_1005($3,$23);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_obj_dup($4,$22,$$byval_copy1);
 $33 = HEAP32[$4>>2]|0;
 $34 = $c1;
 $35 = ((($34)) + 20|0);
 HEAP32[$35>>2] = $33;
 $36 = $c1;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 11;
 $41 = $40 | 1048576;
 $42 = HEAP32[$38>>2]|0;
 $43 = $41 & 2097151;
 $44 = $43 << 11;
 $45 = $42 & 2047;
 $46 = $45 | $44;
 HEAP32[$38>>2] = $46;
 $47 = $0;
 $48 = $sc;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_kh_copy_mt($47,$50)|0);
 $52 = $dc;
 $53 = ((($52)) + 16|0);
 HEAP32[$53>>2] = $51;
 $54 = $sc;
 $55 = ((($54)) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $dc;
 $58 = ((($57)) + 20|0);
 HEAP32[$58>>2] = $56;
 STACKTOP = sp;return;
}
function _mrb_obj_dup($agg$result,$mrb,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dup = 0, $dup$byval_copy = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy1 = sp + 48|0;
 $dup$byval_copy = sp + 40|0;
 $obj$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $dup = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($obj)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(8);
 if ($4) {
  $5 = $0;
  $6 = $0;
  $7 = (_mrb_class_get($6,68905)|0);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$obj>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$obj+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$obj+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$obj+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$obj+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$obj+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$obj+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$obj+7>>0]|0;
  _mrb_raisef($5,$7,67912,$vararg_buffer);
  // unreachable;
 }
 $8 = ((($obj)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(12);
 $11 = $0;
 if ($10) {
  $12 = $0;
  $13 = (_mrb_class_get($12,68905)|0);
  _mrb_raise($11,$13,67925);
  // unreachable;
 } else {
  $14 = ((($obj)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  $17 = (_mrb_obj_class($16,$obj$byval_copy)|0);
  $18 = (_mrb_obj_alloc($11,$15,$17)|0);
  $p = $18;
  $19 = $p;
  _mrb_obj_value_1005($1,$19);
  ;HEAP32[$dup>>2]=HEAP32[$1>>2]|0;HEAP32[$dup+4>>2]=HEAP32[$1+4>>2]|0;
  $20 = $0;
  ;HEAP32[$dup$byval_copy>>2]=HEAP32[$dup>>2]|0;HEAP32[$dup$byval_copy+4>>2]=HEAP32[$dup+4>>2]|0;
  ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
  _init_copy($20,$dup$byval_copy,$obj$byval_copy1);
  ;HEAP32[$agg$result>>2]=HEAP32[$dup>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$dup+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_obj_hash($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $1 = (_mrb_obj_id($self$byval_copy)|0);
 _mrb_fixnum_value_1010($agg$result,$1);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_1010($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_is_instance_of($mrb,$obj,$c) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 8|0;
 $1 = $mrb;
 $2 = $c;
 $3 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $4 = (_mrb_obj_class($3,$obj$byval_copy)|0);
 $5 = $2;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $0 = 1;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _kh_alloc_st($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $sz = $3;
 $len = 4;
 $4 = $0;
 $5 = $sz;
 $6 = $5;
 $7 = (($6>>>0) / 4)&-1;
 $8 = $len;
 $9 = $sz;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10))|0;
 $12 = (_mrb_malloc($4,$11)|0);
 $p = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = $p;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $p;
 $23 = $len;
 $24 = $sz;
 $25 = Math_imul($23, $24)|0;
 $26 = (($22) + ($25)|0);
 $27 = $1;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $sz;
 $33 = (($32>>>0) / 4)&-1;
 _kh_fill_flags_1011($31,-86,$33);
 STACKTOP = sp;return;
}
function _kh_fill_flags_1011($p,$c,$len) {
 $p = $p|0;
 $c = $c|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)|0;
  $2 = $4;
  $5 = ($3>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
  HEAP8[$7>>0] = $6;
 }
 STACKTOP = sp;return;
}
function _kh_init_st_size($mrb,$size) {
 $mrb = $mrb|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $size;
 $2 = $0;
 $3 = (_mrb_calloc($2,1,24)|0);
 $h = $3;
 $4 = $1;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $1 = 8;
 }
 $6 = $1;
 $7 = (($6) + -1)|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 1;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 2;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 4;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = $1;
 $27 = $26 | $25;
 $1 = $27;
 $28 = $1;
 $29 = (($28) + 1)|0;
 $1 = $29;
 $30 = $1;
 $31 = $h;
 HEAP32[$31>>2] = $30;
 $32 = $0;
 $33 = $h;
 _kh_alloc_st($32,$33);
 $34 = $h;
 STACKTOP = sp;return ($34|0);
}
function _kh_init_st($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_kh_init_st_size($1,8)|0);
 STACKTOP = sp;return ($2|0);
}
function _kh_destroy_st($mrb,$h) {
 $mrb = $mrb|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $h;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _mrb_free($4,$7);
 $8 = $0;
 $9 = $1;
 _mrb_free($8,$9);
 STACKTOP = sp;return;
}
function _kh_resize_st($mrb,$h,$new_n_buckets) {
 $mrb = $mrb|0;
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$new_n_buckets = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $hh = 0, $i = 0, $k = 0, $old_ed_flags = 0, $old_keys = 0, $old_n_buckets = 0, $old_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hh = sp + 24|0;
 $0 = $mrb;
 $1 = $h;
 $2 = $new_n_buckets;
 $3 = $2;
 $4 = ($3>>>0)<(8);
 $$new_n_buckets = $4 ? 8 : $new_n_buckets;
 $2 = $$new_n_buckets;
 $5 = $2;
 $6 = (($5) + -1)|0;
 $2 = $6;
 $7 = $2;
 $8 = $7 >>> 1;
 $9 = $2;
 $10 = $9 | $8;
 $2 = $10;
 $11 = $2;
 $12 = $11 >>> 2;
 $13 = $2;
 $14 = $13 | $12;
 $2 = $14;
 $15 = $2;
 $16 = $15 >>> 4;
 $17 = $2;
 $18 = $17 | $16;
 $2 = $18;
 $19 = $2;
 $20 = $19 >>> 8;
 $21 = $2;
 $22 = $21 | $20;
 $2 = $22;
 $23 = $2;
 $24 = $23 >>> 16;
 $25 = $2;
 $26 = $25 | $24;
 $2 = $26;
 $27 = $2;
 $28 = (($27) + 1)|0;
 $2 = $28;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $old_ed_flags = $31;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $old_keys = $34;
 $35 = $1;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $old_vals = $37;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $old_n_buckets = $39;
 $40 = $2;
 HEAP32[$hh>>2] = $40;
 $41 = $0;
 _kh_alloc_st($41,$hh);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $old_n_buckets;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  $46 = (($45>>>0) / 4)&-1;
  $47 = $old_ed_flags;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $i;
  $52 = (($51>>>0) % 4)&-1;
  $53 = (67959 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $50 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $0;
   $59 = $i;
   $60 = $old_keys;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_kh_put_st($58,$hh,$62,0)|0);
   $k = $63;
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 $66 = $1;
 ;HEAP32[$66>>2]=HEAP32[$hh>>2]|0;HEAP32[$66+4>>2]=HEAP32[$hh+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$hh+8>>2]|0;HEAP32[$66+12>>2]=HEAP32[$hh+12>>2]|0;HEAP32[$66+16>>2]=HEAP32[$hh+16>>2]|0;HEAP32[$66+20>>2]=HEAP32[$hh+20>>2]|0;
 $67 = $0;
 $68 = $old_keys;
 _mrb_free($67,$68);
 STACKTOP = sp;return;
}
function _kh_put_st($mrb,$h,$key,$ret) {
 $mrb = $mrb|0;
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $del_k = 0, $k = 0;
 var $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $h;
 $3 = $key;
 $4 = $ret;
 $step = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 >>> 2;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 1;
 $14 = $10 | $13;
 $15 = ($7>>>0)>=($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = $2;
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<1;
  _kh_resize_st($16,$17,$20);
 }
 $21 = $3;
 $22 = $3;
 $23 = $22 << 2;
 $24 = $21 ^ $23;
 $25 = $3;
 $26 = $25 >>> 2;
 $27 = $24 ^ $26;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1)|0;
 $31 = $27 & $30;
 $k = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $del_k = $33;
 while(1) {
  $34 = $k;
  $35 = (($34>>>0) / 4)&-1;
  $36 = $2;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $k;
  $43 = (($42>>>0) % 4)&-1;
  $44 = (67951 + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $41 & $46;
  $48 = ($47|0)!=(0);
  $49 = $48 ^ 1;
  if (!($49)) {
   break;
  }
  $50 = $k;
  $51 = (($50>>>0) / 4)&-1;
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $k;
  $59 = (($58>>>0) % 4)&-1;
  $60 = (67955 + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $57 & $62;
  $64 = ($63|0)!=(0);
  if ($64) {
   $77 = $del_k;
   $78 = $2;
   $79 = HEAP32[$78>>2]|0;
   $80 = ($77|0)==($79|0);
   if ($80) {
    $81 = $k;
    $del_k = $81;
   }
  } else {
   $65 = $k;
   $66 = $2;
   $67 = ((($66)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + ($65<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $3;
   $72 = ($70|0)==($71|0);
   if ($72) {
    label = 7;
    break;
   }
  }
  $82 = $k;
  $83 = $step;
  $84 = (($83) + 1)|0;
  $step = $84;
  $85 = (($82) + ($84))|0;
  $86 = $2;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) - 1)|0;
  $89 = $85 & $88;
  $k = $89;
 }
 if ((label|0) == 7) {
  $73 = $4;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $75 = $4;
   HEAP32[$75>>2] = 0;
  }
  $76 = $k;
  $0 = $76;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $90 = $del_k;
 $91 = $2;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($90|0)!=($92|0);
 $94 = $3;
 if ($93) {
  $95 = $del_k;
  $96 = $2;
  $97 = ((($96)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95<<2)|0);
  HEAP32[$99>>2] = $94;
  $100 = $del_k;
  $101 = (($100>>>0) % 4)&-1;
  $102 = (67955 + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 ^ -1;
  $106 = $del_k;
  $107 = (($106>>>0) / 4)&-1;
  $108 = $2;
  $109 = ((($108)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + ($107)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = $113 & $105;
  $115 = $114&255;
  HEAP8[$111>>0] = $115;
  $116 = $2;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 1)|0;
  HEAP32[$117>>2] = $119;
  $120 = $4;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $122 = $4;
   HEAP32[$122>>2] = 2;
  }
  $123 = $del_k;
  $0 = $123;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 } else {
  $124 = $k;
  $125 = $2;
  $126 = ((($125)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($124<<2)|0);
  HEAP32[$128>>2] = $94;
  $129 = $k;
  $130 = (($129>>>0) % 4)&-1;
  $131 = (67951 + ($130)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = $133 ^ -1;
  $135 = $k;
  $136 = (($135>>>0) / 4)&-1;
  $137 = $2;
  $138 = ((($137)) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + ($136)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = $142 & $134;
  $144 = $143&255;
  HEAP8[$140>>0] = $144;
  $145 = $2;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 1)|0;
  HEAP32[$146>>2] = $148;
  $149 = $2;
  $150 = ((($149)) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + 1)|0;
  HEAP32[$150>>2] = $152;
  $153 = $4;
  $154 = ($153|0)!=(0|0);
  if ($154) {
   $155 = $4;
   HEAP32[$155>>2] = 1;
  }
  $156 = $k;
  $0 = $156;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _mrb_class_instance_method_list($agg$result,$mrb,$recur,$klass,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $recur = $recur|0;
 $klass = $klass|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0, $i = 0, $oldklass = 0, $or$cond = 0, $or$cond3 = 0, $prepended = 0, $set = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $ary$byval_copy = sp + 48|0;
 $ary = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $1 = $recur;
 $2 = $klass;
 $3 = $obj;
 $prepended = 0;
 $6 = $0;
 $7 = (_kh_init_st($6)|0);
 $set = $7;
 $8 = $1;
 $9 = ($8<<24>>24)!=(0);
 if (!($9)) {
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 11;
  $13 = $12 & 524288;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $2;
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 >>> 11;
   $18 = $17 & 524288;
   $19 = ($18|0)!=(0);
   L4: do {
    if ($19) {
     $20 = $2;
     $21 = ((($20)) + 20|0);
     $22 = HEAP32[$21>>2]|0;
     $2 = $22;
     while(1) {
      $23 = $2;
      $24 = HEAP32[$23>>2]|0;
      $25 = $24 >>> 11;
      $26 = $25 & 1048576;
      $27 = ($26|0)!=(0);
      $28 = $27 ^ 1;
      if (!($28)) {
       break L4;
      }
      $29 = $2;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $2 = $31;
     }
    }
   } while(0);
   $prepended = 1;
  }
 }
 $oldklass = 0;
 while(1) {
  $32 = $2;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $2;
  $35 = $oldklass;
  $36 = ($34|0)!=($35|0);
  if (!($36)) {
   break;
  }
  $37 = $0;
  $38 = $2;
  $39 = $set;
  _method_entry_loop($37,$38,$39);
  $40 = $2;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & 255;
  $43 = ($42|0)!=(11);
  $44 = $prepended;
  $45 = ($44<<24>>24)!=(0);
  $or$cond = $43 | $45;
  if ($or$cond) {
   $46 = $2;
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 255;
   $49 = ($48|0)==(12);
   $50 = $1;
   $51 = ($50<<24>>24)!=(0);
   $or$cond3 = $49 | $51;
   if (!($or$cond3)) {
    break;
   }
  }
  $52 = $2;
  $oldklass = $52;
  $53 = $2;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $2 = $55;
 }
 $56 = $0;
 _mrb_ary_new($4,$56);
 ;HEAP32[$ary>>2]=HEAP32[$4>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$4+4>>2]|0;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = $set;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($57>>>0)<($59>>>0);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = (($61>>>0) / 4)&-1;
  $63 = $set;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $i;
  $70 = (($69>>>0) % 4)&-1;
  $71 = (67959 + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $68 & $73;
  $75 = ($74|0)!=(0);
  if (!($75)) {
   $76 = $0;
   $77 = $i;
   $78 = $set;
   $79 = ((($78)) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($77<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   _mrb_symbol_value_1017($5,$82);
   ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
   _mrb_ary_push($76,$ary$byval_copy,$$byval_copy);
  }
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 $85 = $0;
 $86 = $set;
 _kh_destroy_st($85,$86);
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _method_entry_loop($mrb,$klass,$set) {
 $mrb = $mrb|0;
 $klass = $klass|0;
 $set = $set|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $klass;
 $2 = $set;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $h = $5;
 $6 = $h;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $h;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = (($12>>>0) / 4)&-1;
  $14 = $h;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $i;
  $21 = (($20>>>0) % 4)&-1;
  $22 = (67959 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $19 & $24;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $27 = $i;
   $28 = $h;
   $29 = ((($28)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = $0;
    $35 = $2;
    $36 = $i;
    $37 = $h;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + ($36<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    (_kh_put_st($34,$35,$41,0)|0);
   }
  }
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function _mrb_symbol_value_1017($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 4;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_f_raise($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $argc = 0, $exc = 0, $exc$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exc$byval_copy = sp + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy = sp + 80|0;
 $vararg_buffer = sp;
 $a = sp + 56|0;
 $exc = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $0 = $mrb;
 $5 = $0;
 $6 = ((($a)) + 8|0);
 HEAP32[$vararg_buffer>>2] = $a;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $7 = (_mrb_get_args($5,67963,$vararg_buffer)|0);
 $argc = $7;
 $8 = $argc;
 switch ($8|0) {
 case 0:  {
  $9 = $0;
  $10 = $0;
  $11 = (_mrb_class_get($10,67967)|0);
  _mrb_raise($9,$11,75436);
  // unreachable;
  break;
 }
 case 1:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 do {
  if ((label|0) == 3) {
   $12 = ((($a)) + 8|0);
   $13 = $0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
   _mrb_check_string_type($1,$13,$$byval_copy);
   ;HEAP32[$12>>2]=HEAP32[$1>>2]|0;HEAP32[$12+4>>2]=HEAP32[$1+4>>2]|0;
   $14 = ((($a)) + 8|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = ((($a)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break;
    }
   }
   $argc = 2;
   $21 = $0;
   $22 = (_mrb_class_get($21,67967)|0);
   _mrb_obj_value_1005($2,$22);
   ;HEAP32[$a>>2]=HEAP32[$2>>2]|0;HEAP32[$a+4>>2]=HEAP32[$2+4>>2]|0;
  }
 } while(0);
 $23 = $0;
 $24 = $argc;
 _mrb_make_exception($3,$23,$24,$a);
 ;HEAP32[$exc>>2]=HEAP32[$3>>2]|0;HEAP32[$exc+4>>2]=HEAP32[$3+4>>2]|0;
 $25 = $0;
 $26 = HEAP32[$exc>>2]|0;
 $27 = $0;
 $28 = (_mrb_intern_static($27,67980,6)|0);
 $29 = $0;
 $30 = $0;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 _mrb_cptr_value_1022($4,$29,$36);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_obj_iv_set($25,$26,$28,$$byval_copy2);
 $37 = $0;
 ;HEAP32[$exc$byval_copy>>2]=HEAP32[$exc>>2]|0;HEAP32[$exc$byval_copy+4>>2]=HEAP32[$exc+4>>2]|0;
 _mrb_exc_raise($37,$exc$byval_copy);
 // unreachable;
}
function _mrb_cptr_value_1022($agg$result,$mrb,$p) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $p;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = 7;
 $3 = $1;
 HEAP32[$v>>2] = $3;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_init_kernel($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $krn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_define_module($1,69618)|0);
 $krn = $2;
 $3 = $0;
 $4 = ((($3)) + 84|0);
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = $krn;
 _mrb_define_class_method($5,$6,67987,283,0);
 $7 = $0;
 $8 = $krn;
 _mrb_define_class_method($7,$8,68000,284,0);
 $9 = $0;
 $10 = $krn;
 _mrb_define_class_method($9,$10,68017,283,0);
 $11 = $0;
 $12 = $krn;
 _mrb_define_class_method($11,$12,68027,285,0);
 $13 = $0;
 $14 = $krn;
 _mrb_define_class_method($13,$14,68043,286,16384);
 $15 = $0;
 $16 = $krn;
 _mrb_define_method($15,$16,68049,199,0);
 $17 = $0;
 $18 = $krn;
 _mrb_define_method($17,$18,68902,287,262144);
 $19 = $0;
 $20 = $krn;
 _mrb_define_method($19,$20,68065,288,262144);
 $21 = $0;
 $22 = $krn;
 _mrb_define_method($21,$22,69450,289,262144);
 $23 = $0;
 $24 = $krn;
 _mrb_define_method($23,$24,68068,290,0);
 $25 = $0;
 $26 = $krn;
 _mrb_define_method($25,$26,68075,291,4096);
 $27 = $0;
 $28 = $krn;
 _mrb_define_method($27,$28,67987,283,0);
 $29 = $0;
 $30 = $krn;
 _mrb_define_method($29,$30,68084,292,0);
 $31 = $0;
 $32 = $krn;
 _mrb_define_method($31,$32,68090,293,0);
 $33 = $0;
 $34 = $krn;
 _mrb_define_method($33,$34,68096,294,0);
 $35 = $0;
 $36 = $krn;
 _mrb_define_method($35,$36,68994,287,262144);
 $37 = $0;
 $38 = $krn;
 _mrb_define_method($37,$38,68100,287,262144);
 $39 = $0;
 $40 = $krn;
 _mrb_define_method($39,$40,68107,295,4096);
 $41 = $0;
 $42 = $krn;
 _mrb_define_method($41,$42,68000,284,0);
 $43 = $0;
 $44 = $krn;
 _mrb_define_method($43,$44,68178,296,0);
 $45 = $0;
 $46 = $krn;
 _mrb_define_method($45,$46,68999,297,262144);
 $47 = $0;
 $48 = $krn;
 _mrb_define_method($47,$48,68986,298,0);
 $49 = $0;
 $50 = $krn;
 _mrb_define_method($49,$50,68229,299,4096);
 $51 = $0;
 $52 = $krn;
 _mrb_define_method($51,$52,68243,300,262144);
 $53 = $0;
 $54 = $krn;
 _mrb_define_method($53,$54,68258,301,262144);
 $55 = $0;
 $56 = $krn;
 _mrb_define_method($55,$56,68287,302,262144);
 $57 = $0;
 $58 = $krn;
 _mrb_define_method($57,$58,68309,303,524288);
 $59 = $0;
 $60 = $krn;
 _mrb_define_method($59,$60,68334,304,0);
 $61 = $0;
 $62 = $krn;
 _mrb_define_method($61,$62,68353,305,262144);
 $63 = $0;
 $64 = $krn;
 _mrb_define_method($63,$64,68017,283,0);
 $65 = $0;
 $66 = $krn;
 _mrb_define_method($65,$66,68359,305,262144);
 $67 = $0;
 $68 = $krn;
 _mrb_define_method($67,$68,68027,285,0);
 $69 = $0;
 $70 = $krn;
 _mrb_define_method($69,$70,68368,306,8192);
 $71 = $0;
 $72 = $krn;
 _mrb_define_method($71,$72,68379,307,0);
 $73 = $0;
 $74 = $krn;
 _mrb_define_method($73,$74,68384,290,0);
 $75 = $0;
 $76 = $krn;
 _mrb_define_method($75,$76,68394,308,8192);
 $77 = $0;
 $78 = $krn;
 _mrb_define_method($77,$78,68410,309,8192);
 $79 = $0;
 $80 = $krn;
 _mrb_define_method($79,$80,68428,310,8192);
 $81 = $0;
 $82 = $krn;
 _mrb_define_method($81,$82,68043,286,4096);
 $83 = $0;
 $84 = $krn;
 _mrb_define_method($83,$84,68443,311,262144);
 $85 = $0;
 $86 = $krn;
 _mrb_define_method($85,$86,68501,312,4096);
 $87 = $0;
 $88 = $krn;
 _mrb_define_method($87,$88,68556,291,4096);
 $89 = $0;
 $90 = $krn;
 _mrb_define_method($89,$90,68561,313,8192);
 $91 = $0;
 $92 = $krn;
 _mrb_define_method($91,$92,68579,314,4096);
 $93 = $0;
 $94 = $krn;
 _mrb_define_method($93,$94,68977,282,0);
 $95 = $0;
 $96 = $krn;
 _mrb_define_method($95,$96,69439,315,262144);
 $97 = $0;
 $98 = $0;
 $99 = ((($98)) + 32|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $0;
 $102 = ((($101)) + 84|0);
 $103 = HEAP32[$102>>2]|0;
 _mrb_include_module($97,$100,$103);
 $104 = $0;
 $105 = $0;
 $106 = ((($105)) + 40|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $0;
 $109 = (_mrb_intern_static($108,68096,3)|0);
 $110 = $0;
 $111 = (_mrb_intern_static($110,68090,5)|0);
 _mrb_alias_method($104,$107,$109,$111);
 STACKTOP = sp;return;
}
function _mrb_f_block_given_p_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $bp = 0, $ci = 0, $e = 0, $given_p = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $ci = $5;
 $6 = $ci;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $bp = $9;
 $10 = $ci;
 $11 = ((($10)) + -48|0);
 $ci = $11;
 $12 = $ci;
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($12>>>0)<=($17>>>0);
 if ($18) {
  $given_p = 0;
 } else {
  $19 = $ci;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  do {
   if ($24) {
    $25 = $ci;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($27)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $e = $29;
    while(1) {
     $30 = $e;
     $31 = ((($30)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)!=(0|0);
     $34 = $e;
     if (!($33)) {
      break;
     }
     $35 = ((($34)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $e = $36;
    }
    $37 = ((($34)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $sp = $38;
    $39 = $sp;
    $40 = ($39|0)!=(0|0);
    if ($40) {
     $41 = $sp;
     $42 = $0;
     $43 = ((($42)) + 12|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($44)) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($41|0)==($46|0);
     if (!($47)) {
      $48 = $0;
      $49 = ((($48)) + 12|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($50)) + 20|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $e;
      $54 = ((($53)) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($52) + (($55*48)|0)|0);
      $ci = $56;
      $57 = $ci;
      $58 = ((($57)) + 48|0);
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($60)) + 8|0);
      $bp = $61;
      break;
     }
     _mrb_false_value_1027($agg$result);
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $62 = $ci;
  $63 = ((($62)) + 36|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)>(0);
  if ($65) {
   $66 = $ci;
   $67 = ((($66)) + 36|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $bp;
   $70 = (($69) + ($68<<3)|0);
   $bp = $70;
  }
  $71 = $bp;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0);
  if ($74) {
   $75 = $bp;
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)!=(0);
   $78 = $77 ^ 1;
   $80 = $78;
  } else {
   $80 = 0;
  }
  $79 = $80 ^ 1;
  $81 = $79&1;
  $82 = $81&255;
  $given_p = $82;
 }
 $83 = $given_p;
 _mrb_bool_value_1028($agg$result,$83);
 STACKTOP = sp;return;
}
function _mrb_false_value_1027($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_bool_value_1028($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_local_variables($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $e = 0, $i = 0, $irep = 0, $proc = 0, $ret = 0, $ret$byval_copy = 0, $ret$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 88|0;
 $ret$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $ret$byval_copy = sp + 64|0;
 $ret = sp + 48|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp;
 $0 = $mrb;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + -48|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $proc = $11;
 $12 = $proc;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 11;
 $15 = $14 & 128;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $0;
  _mrb_ary_new($agg$result,$17);
  STACKTOP = sp;return;
 }
 $18 = $proc;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $irep = $20;
 $21 = $irep;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = $0;
 if (!($24)) {
  _mrb_ary_new($agg$result,$25);
  STACKTOP = sp;return;
 }
 $26 = $irep;
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = (($28) - 1)|0;
 _mrb_ary_new_capa($1,$25,$29);
 ;HEAP32[$ret>>2]=HEAP32[$1>>2]|0;HEAP32[$ret+4>>2]=HEAP32[$1+4>>2]|0;
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = (($30) + 1)|0;
  $32 = $irep;
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = ($31>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = $irep;
  $38 = ((($37)) + 24|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<3)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $0;
   $44 = $i;
   $45 = $irep;
   $46 = ((($45)) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44<<3)|0);
   $49 = HEAP32[$48>>2]|0;
   _mrb_symbol_value_1017($2,$49);
   ;HEAP32[$ret$byval_copy>>2]=HEAP32[$ret>>2]|0;HEAP32[$ret$byval_copy+4>>2]=HEAP32[$ret+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   _mrb_ary_push($43,$ret$byval_copy,$$byval_copy);
  }
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $proc;
 $53 = ((($52)) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0|0);
 L16: do {
  if ($55) {
   $56 = $proc;
   $57 = ((($56)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $e = $58;
   while(1) {
    $59 = $e;
    $60 = ($59|0)!=(0|0);
    if (!($60)) {
     break L16;
    }
    $61 = $e;
    $62 = ((($61)) + 20|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $0;
    $65 = ((($64)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + (($63*48)|0)|0);
    $70 = ((($69)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 >>> 11;
    $74 = $73 & 128;
    $75 = ($74|0)!=(0);
    L21: do {
     if (!($75)) {
      $76 = $e;
      $77 = ((($76)) + 20|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $0;
      $80 = ((($79)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($81)) + 20|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + (($78*48)|0)|0);
      $85 = ((($84)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($86)) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      $irep = $88;
      $89 = $irep;
      $90 = ((($89)) + 24|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)!=(0|0);
      if ($92) {
       $i = 0;
       while(1) {
        $93 = $i;
        $94 = (($93) + 1)|0;
        $95 = $irep;
        $96 = HEAP16[$95>>1]|0;
        $97 = $96&65535;
        $98 = ($94>>>0)<($97>>>0);
        if (!($98)) {
         break L21;
        }
        $99 = $i;
        $100 = $irep;
        $101 = ((($100)) + 24|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($102) + ($99<<3)|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = ($104|0)!=(0);
        if ($105) {
         $106 = $0;
         $107 = $i;
         $108 = $irep;
         $109 = ((($108)) + 24|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = (($110) + ($107<<3)|0);
         $112 = HEAP32[$111>>2]|0;
         _mrb_symbol_value_1017($3,$112);
         ;HEAP32[$ret$byval_copy1>>2]=HEAP32[$ret>>2]|0;HEAP32[$ret$byval_copy1+4>>2]=HEAP32[$ret+4>>2]|0;
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
         _mrb_ary_push($106,$ret$byval_copy1,$$byval_copy2);
        }
        $113 = $i;
        $114 = (($113) + 1)|0;
        $i = $114;
       }
      }
     }
    } while(0);
    $115 = $e;
    $116 = ((($115)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $e = $117;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$ret>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ret+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_equal_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg = 0, $arg$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $arg;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$arg$byval_copy>>2]=HEAP32[$arg>>2]|0;HEAP32[$arg$byval_copy+4>>2]=HEAP32[$arg+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$self$byval_copy,$arg$byval_copy)|0);
 _mrb_bool_value_1028($agg$result,$3);
 STACKTOP = sp;return;
}
function _mrb_obj_not_equal_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg = 0, $arg$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $arg;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$arg$byval_copy>>2]=HEAP32[$arg>>2]|0;HEAP32[$arg$byval_copy+4>>2]=HEAP32[$arg+4>>2]|0;
 $3 = (_mrb_equal($2,$self$byval_copy,$arg$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 $5 = $4 ^ 1;
 $6 = $5&1;
 $7 = $6&255;
 _mrb_bool_value_1028($agg$result,$7);
 STACKTOP = sp;return;
}
function _mrb_equal_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg = 0, $arg$byval_copy = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $arg;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$arg$byval_copy>>2]=HEAP32[$arg>>2]|0;HEAP32[$arg$byval_copy+4>>2]=HEAP32[$arg+4>>2]|0;
 $3 = (_mrb_equal($2,$self$byval_copy,$arg$byval_copy)|0);
 _mrb_bool_value_1028($agg$result,$3);
 STACKTOP = sp;return;
}
function _mrb_obj_id_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $1 = (_mrb_obj_id($self$byval_copy)|0);
 _mrb_fixnum_value_1010($agg$result,$1);
 STACKTOP = sp;return;
}
function _mrb_obj_class_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $self$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $2 = (_mrb_obj_class($1,$self$byval_copy)|0);
 _mrb_obj_value_1005($agg$result,$2);
 STACKTOP = sp;return;
}
function _mrb_obj_extend_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $argc = 0, $argv = 0, $self$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $argv = sp + 12|0;
 $argc = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $argv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $argc;
 (_mrb_get_args($1,68114,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$argc>>2]|0;
 $4 = HEAP32[$argv>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_extend($agg$result,$2,$3,$4,$self$byval_copy);
 STACKTOP = sp;return;
}
function _mrb_obj_extend($agg$result,$mrb,$argc,$argv,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy5 = sp + 64|0;
 $$byval_copy4 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $0 = $mrb;
 $1 = $argc;
 $2 = $argv;
 $5 = $1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  $8 = $0;
  $9 = (_mrb_class_get($8,68855)|0);
  _mrb_raise($7,$9,68116);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $1;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = $i;
  $15 = $2;
  $16 = (($15) + ($14<<3)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;
  _mrb_check_type($13,$$byval_copy,10);
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 while(1) {
  $19 = $1;
  $20 = (($19) + -1)|0;
  $1 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $0;
  $23 = $1;
  $24 = $2;
  $25 = (($24) + ($23<<3)|0);
  ;HEAP8[$vararg_buffer>>0]=HEAP8[$obj>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$obj+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$obj+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$obj+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$obj+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$obj+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$obj+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$obj+7>>0]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$25+4>>2]|0;
  _mrb_funcall($3,$22,$$byval_copy4,68155,1,$vararg_buffer);
  $26 = $0;
  $27 = $1;
  $28 = $2;
  $29 = (($28) + ($27<<3)|0);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$obj>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$obj+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$obj+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$obj+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$obj+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$obj+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$obj+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$obj+7>>0]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$29+4>>2]|0;
  _mrb_funcall($4,$26,$$byval_copy5,68169,1,$vararg_buffer1);
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$obj>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$obj+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_init_copy($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $orig = 0, $orig$byval_copy = 0;
 var $orig$byval_copy2 = 0, $self$byval_copy = 0, $self$byval_copy1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $orig$byval_copy2 = sp + 48|0;
 $self$byval_copy1 = sp + 40|0;
 $orig$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $orig = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $orig;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$orig$byval_copy>>2]=HEAP32[$orig>>2]|0;HEAP32[$orig$byval_copy+4>>2]=HEAP32[$orig+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$self$byval_copy,$orig$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
 $5 = ((($self)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($orig)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)!=($8|0);
 if ($9) {
  $15 = $0;
  $16 = $0;
  $17 = (_mrb_class_get($16,68905)|0);
  _mrb_raise($15,$17,68183);
  // unreachable;
 }
 $10 = $0;
 ;HEAP32[$self$byval_copy1>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy1+4>>2]=HEAP32[$self+4>>2]|0;
 $11 = (_mrb_obj_class($10,$self$byval_copy1)|0);
 $12 = $0;
 ;HEAP32[$orig$byval_copy2>>2]=HEAP32[$orig>>2]|0;HEAP32[$orig$byval_copy2+4>>2]=HEAP32[$orig+4>>2]|0;
 $13 = (_mrb_obj_class($12,$orig$byval_copy2)|0);
 $14 = ($11|0)!=($13|0);
 if ($14) {
  $15 = $0;
  $16 = $0;
  $17 = (_mrb_class_get($16,68905)|0);
  _mrb_raise($15,$17,68183);
  // unreachable;
 }
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _obj_is_instance_of($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $arg;
 (_mrb_get_args($1,68256,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$arg>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $4 = (_mrb_obj_is_instance_of($2,$self$byval_copy,$3)|0);
 _mrb_bool_value_1028($agg$result,$4);
 STACKTOP = sp;return;
}
function _mrb_obj_ivar_defined($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $self$byval_copy = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $sym = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $sym;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$sym>>2]|0;
 _mrb_iv_check($2,$3);
 $4 = $0;
 $5 = HEAP32[$sym>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $6 = (_mrb_iv_defined($4,$self$byval_copy,$5)|0);
 _mrb_bool_value_1028($agg$result,$6);
 STACKTOP = sp;return;
}
function _mrb_obj_ivar_get($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $iv_name = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $iv_name = sp + 4|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $iv_name;
 (_mrb_get_args($1,68285,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$iv_name>>2]|0;
 _mrb_iv_check($2,$3);
 $4 = $0;
 $5 = HEAP32[$iv_name>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_iv_get($agg$result,$4,$self$byval_copy,$5);
 STACKTOP = sp;return;
}
function _mrb_obj_ivar_set($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $iv_name = 0, $self$byval_copy = 0, $val = 0, $val$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 32|0;
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $iv_name = sp + 16|0;
 $val = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $iv_name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $val;
 (_mrb_get_args($1,68331,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$iv_name>>2]|0;
 _mrb_iv_check($2,$3);
 $4 = $0;
 $5 = HEAP32[$iv_name>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 _mrb_iv_set($4,$self$byval_copy,$5,$val$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_is_kind_of_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $arg;
 (_mrb_get_args($1,68256,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP32[$arg>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 $4 = (_mrb_obj_is_kind_of($2,$self$byval_copy,$3)|0);
 _mrb_bool_value_1028($agg$result,$4);
 STACKTOP = sp;return;
}
function _mrb_obj_methods_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $recur = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $recur = sp + 16|0;
 $0 = $mrb;
 HEAP8[$recur>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($1,68376,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP8[$recur>>0]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_methods($agg$result,$2,$3,$self$byval_copy,0);
 STACKTOP = sp;return;
}
function _mrb_obj_methods($agg$result,$mrb,$recur,$obj,$flag) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $recur = $recur|0;
 $obj = $obj|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy1 = sp + 16|0;
 $obj$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $recur;
 $2 = $flag;
 $3 = $1;
 $4 = ($3<<24>>24)!=(0);
 $5 = $0;
 $6 = $1;
 if ($4) {
  $7 = $0;
  ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
  $8 = (_mrb_class_998($7,$obj$byval_copy)|0);
  _mrb_class_instance_method_list($agg$result,$5,$6,$8,0);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
  _mrb_obj_singleton_methods($agg$result,$5,$6,$obj$byval_copy1);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_singleton_methods($agg$result,$mrb,$recur,$obj) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $recur = $recur|0;
 $obj = $obj|0;
 var $$byval_copy = 0, $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ary = 0, $ary$byval_copy = 0, $i = 0, $klass = 0, $obj$byval_copy = 0, $or$cond = 0, $set = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $ary$byval_copy = sp + 48|0;
 $obj$byval_copy = sp + 40|0;
 $ary = sp + 24|0;
 $2 = sp + 8|0;
 $3 = sp;
 $0 = $mrb;
 $1 = $recur;
 $4 = $0;
 $5 = (_kh_init_st($4)|0);
 $set = $5;
 $6 = $0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $7 = (_mrb_class_998($6,$obj$byval_copy)|0);
 $klass = $7;
 $8 = $klass;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $klass;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 255;
  $13 = ($12|0)==(12);
  if ($13) {
   $14 = $0;
   $15 = $klass;
   $16 = $set;
   _method_entry_loop($14,$15,$16);
   $17 = $klass;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $klass = $19;
  }
 }
 $20 = $1;
 $21 = ($20<<24>>24)!=(0);
 $22 = $klass;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 L5: do {
  if ($or$cond) {
   while(1) {
    $24 = $klass;
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 255;
    $27 = ($26|0)==(12);
    if (!($27)) {
     $28 = $klass;
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 & 255;
     $31 = ($30|0)==(11);
     if (!($31)) {
      break L5;
     }
    }
    $32 = $0;
    $33 = $klass;
    $34 = $set;
    _method_entry_loop($32,$33,$34);
    $35 = $klass;
    $36 = ((($35)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $klass = $37;
    $$old = $klass;
    $$old2 = ($$old|0)!=(0|0);
    if (!($$old2)) {
     break;
    }
   }
  }
 } while(0);
 $38 = $0;
 _mrb_ary_new($2,$38);
 ;HEAP32[$ary>>2]=HEAP32[$2>>2]|0;HEAP32[$ary+4>>2]=HEAP32[$2+4>>2]|0;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $set;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $i;
  $44 = (($43>>>0) / 4)&-1;
  $45 = $set;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($44)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $i;
  $52 = (($51>>>0) % 4)&-1;
  $53 = (67959 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $50 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $0;
   $59 = $i;
   $60 = $set;
   $61 = ((($60)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($59<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   _mrb_symbol_value_1017($3,$64);
   ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
   _mrb_ary_push($58,$ary$byval_copy,$$byval_copy);
  }
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $67 = $0;
 $68 = $set;
 _kh_destroy_st($67,$68);
 ;HEAP32[$agg$result>>2]=HEAP32[$ary>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ary+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_false($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 _mrb_false_value_1027($agg$result);
 STACKTOP = sp;return;
}
function _mrb_obj_private_methods($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $recur = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $recur = sp + 16|0;
 $0 = $mrb;
 HEAP8[$recur>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($1,68376,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP8[$recur>>0]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_methods($agg$result,$2,$3,$self$byval_copy,2);
 STACKTOP = sp;return;
}
function _mrb_obj_protected_methods($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $recur = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $recur = sp + 16|0;
 $0 = $mrb;
 HEAP8[$recur>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($1,68376,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP8[$recur>>0]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_methods($agg$result,$2,$3,$self$byval_copy,4);
 STACKTOP = sp;return;
}
function _mrb_obj_public_methods($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $recur = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $recur = sp + 16|0;
 $0 = $mrb;
 HEAP8[$recur>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($1,68376,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP8[$recur>>0]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_methods($agg$result,$2,$3,$self$byval_copy,0);
 STACKTOP = sp;return;
}
function _mrb_obj_remove_instance_variable($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self$byval_copy = 0, $sym = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sym = sp + 40|0;
 $val = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $sym;
 (_mrb_get_args($3,68285,$vararg_buffer)|0);
 $4 = $0;
 $5 = HEAP32[$sym>>2]|0;
 _mrb_iv_check($4,$5);
 $6 = $0;
 $7 = HEAP32[$sym>>2]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_iv_remove($1,$6,$self$byval_copy,$7);
 ;HEAP32[$val>>2]=HEAP32[$1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$1+4>>2]|0;
 $8 = ((($val)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(5);
 if ($10) {
  $11 = $0;
  $12 = HEAP32[$sym>>2]|0;
  $13 = $0;
  $14 = HEAP32[$sym>>2]|0;
  _mrb_sym2str($2,$13,$14);
  ;HEAP8[$vararg_buffer1>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$2+7>>0]|0;
  _mrb_name_error($11,$12,68468,$vararg_buffer1);
  // unreachable;
 } else {
  ;HEAP32[$agg$result>>2]=HEAP32[$val>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$val+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _obj_respond_to($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $id = 0, $mid = 0, $mid$byval_copy = 0;
 var $mid$byval_copy5 = 0, $mid$byval_copy6 = 0, $priv = 0, $respond_to_p = 0, $rtm_id = 0, $self$byval_copy = 0, $self$byval_copy7 = 0, $self$byval_copy8 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy8 = sp + 136|0;
 $self$byval_copy7 = sp + 128|0;
 $self$byval_copy = sp + 120|0;
 $mid$byval_copy6 = sp + 112|0;
 $mid$byval_copy5 = sp + 104|0;
 $mid$byval_copy = sp + 96|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mid = sp + 80|0;
 $priv = sp + 145|0;
 $tmp = sp + 64|0;
 $1 = sp + 56|0;
 $2 = sp + 48|0;
 $3 = sp + 40|0;
 $args = sp + 24|0;
 $4 = sp + 16|0;
 $0 = $mrb;
 HEAP8[$priv>>0] = 0;
 $respond_to_p = 1;
 $5 = $0;
 HEAP32[$vararg_buffer>>2] = $mid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $priv;
 (_mrb_get_args($5,68513,$vararg_buffer)|0);
 $6 = ((($mid)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(4);
 do {
  if ($8) {
   $9 = HEAP32[$mid>>2]|0;
   $id = $9;
  } else {
   $10 = ((($mid)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(16);
   if (!($12)) {
    $13 = $0;
    ;HEAP32[$mid$byval_copy>>2]=HEAP32[$mid>>2]|0;HEAP32[$mid$byval_copy+4>>2]=HEAP32[$mid+4>>2]|0;
    _mrb_check_string_type($1,$13,$mid$byval_copy);
    ;HEAP32[$tmp>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$1+4>>2]|0;
    $14 = ((($tmp)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = HEAP32[$tmp>>2]|0;
     $18 = ($17|0)!=(0);
     if (!($18)) {
      $19 = $0;
      ;HEAP32[$mid$byval_copy5>>2]=HEAP32[$mid>>2]|0;HEAP32[$mid$byval_copy5+4>>2]=HEAP32[$mid+4>>2]|0;
      _mrb_inspect($2,$19,$mid$byval_copy5);
      ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0;
      $20 = $0;
      $21 = $0;
      $22 = (_mrb_class_get($21,68905)|0);
      ;HEAP8[$vararg_buffer2>>0]=HEAP8[$tmp>>0]|0;HEAP8[$vararg_buffer2+1>>0]=HEAP8[$tmp+1>>0]|0;HEAP8[$vararg_buffer2+2>>0]=HEAP8[$tmp+2>>0]|0;HEAP8[$vararg_buffer2+3>>0]=HEAP8[$tmp+3>>0]|0;HEAP8[$vararg_buffer2+4>>0]=HEAP8[$tmp+4>>0]|0;HEAP8[$vararg_buffer2+5>>0]=HEAP8[$tmp+5>>0]|0;HEAP8[$vararg_buffer2+6>>0]=HEAP8[$tmp+6>>0]|0;HEAP8[$vararg_buffer2+7>>0]=HEAP8[$tmp+7>>0]|0;
      _mrb_raisef($20,$22,68517,$vararg_buffer2);
      // unreachable;
     }
    }
   }
   $23 = $0;
   ;HEAP32[$mid$byval_copy6>>2]=HEAP32[$mid>>2]|0;HEAP32[$mid$byval_copy6+4>>2]=HEAP32[$mid+4>>2]|0;
   _mrb_check_intern_str($3,$23,$mid$byval_copy6);
   ;HEAP32[$tmp>>2]=HEAP32[$3>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$3+4>>2]|0;
   $24 = ((($tmp)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$tmp>>2]|0;
    $28 = ($27|0)!=(0);
    if (!($28)) {
     $respond_to_p = 0;
     break;
    }
   }
   $29 = HEAP32[$tmp>>2]|0;
   $id = $29;
  }
 } while(0);
 $30 = $respond_to_p;
 $31 = ($30<<24>>24)!=(0);
 if ($31) {
  $32 = $0;
  $33 = $id;
  $34 = HEAP8[$priv>>0]|0;
  $35 = ($34<<24>>24)!=(0);
  $36 = $35 ^ 1;
  $37 = $36&1;
  ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
  $38 = (_basic_obj_respond_to($32,$self$byval_copy,$33,$37)|0);
  $respond_to_p = $38;
 }
 $39 = $respond_to_p;
 $40 = ($39<<24>>24)!=(0);
 if (!($40)) {
  $41 = $0;
  $42 = (_mrb_intern_static($41,68536,19)|0);
  $rtm_id = $42;
  $43 = $0;
  $44 = $rtm_id;
  $45 = HEAP8[$priv>>0]|0;
  $46 = ($45<<24>>24)!=(0);
  $47 = $46 ^ 1;
  $48 = $47&1;
  ;HEAP32[$self$byval_copy7>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy7+4>>2]=HEAP32[$self+4>>2]|0;
  $49 = (_basic_obj_respond_to($43,$self$byval_copy7,$44,$48)|0);
  $50 = ($49<<24>>24)!=(0);
  if ($50) {
   ;HEAP32[$args>>2]=HEAP32[$mid>>2]|0;HEAP32[$args+4>>2]=HEAP32[$mid+4>>2]|0;
   $51 = ((($args)) + 8|0);
   $52 = HEAP8[$priv>>0]|0;
   _mrb_bool_value_1028($4,$52);
   ;HEAP32[$51>>2]=HEAP32[$4>>2]|0;HEAP32[$51+4>>2]=HEAP32[$4+4>>2]|0;
   $53 = $0;
   $54 = $rtm_id;
   ;HEAP32[$self$byval_copy8>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy8+4>>2]=HEAP32[$self+4>>2]|0;
   _mrb_funcall_argv($agg$result,$53,$self$byval_copy8,$54,2,$args);
   STACKTOP = sp;return;
  }
 }
 $55 = $respond_to_p;
 _mrb_bool_value_1028($agg$result,$55);
 STACKTOP = sp;return;
}
function _basic_obj_respond_to($mrb,$obj,$id,$pub) {
 $mrb = $mrb|0;
 $obj = $obj|0;
 $id = $id|0;
 $pub = $pub|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $obj$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $id;
 $2 = $pub;
 $3 = $0;
 $4 = $1;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $5 = (_mrb_respond_to($3,$obj$byval_copy,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _mrb_obj_singleton_methods_m($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $recur = 0, $self$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $recur = sp + 16|0;
 $0 = $mrb;
 HEAP8[$recur>>0] = 1;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $recur;
 (_mrb_get_args($1,68376,$vararg_buffer)|0);
 $2 = $0;
 $3 = HEAP8[$recur>>0]|0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_obj_singleton_methods($agg$result,$2,$3,$self$byval_copy);
 STACKTOP = sp;return;
}
function _mod_define_singleton_method($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blk = 0, $mid = 0, $p = 0, $self$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $self$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $mid = sp + 24|0;
 $blk = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 _mrb_nil_value_1081($blk);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $mid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $blk;
 (_mrb_get_args($2,68603,$vararg_buffer)|0);
 $3 = ((($blk)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$blk>>2]|0;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   $8 = $0;
   $9 = $0;
   $10 = (_mrb_class_get($9,68855)|0);
   _mrb_raise($8,$10,68606);
   // unreachable;
  }
 }
 $11 = $0;
 $12 = $0;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mrb_obj_alloc($11,13,$14)|0);
 $p = $15;
 $16 = $p;
 $17 = HEAP32[$blk>>2]|0;
 _mrb_proc_copy($16,$17);
 $18 = $p;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 11;
 $21 = $20 | 256;
 $22 = HEAP32[$18>>2]|0;
 $23 = $21 & 2097151;
 $24 = $23 << 11;
 $25 = $22 & 2047;
 $26 = $25 | $24;
 HEAP32[$18>>2] = $26;
 $27 = $0;
 $28 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_singleton_class($1,$28,$self$byval_copy);
 $29 = HEAP32[$1>>2]|0;
 $30 = HEAP32[$mid>>2]|0;
 $31 = $p;
 _mrb_define_method_raw($27,$29,$30,$31);
 $32 = HEAP32[$mid>>2]|0;
 _mrb_symbol_value_1017($agg$result,$32);
 STACKTOP = sp;return;
}
function _mrb_nil_value_1081($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_obj_ceqq($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ary = 0, $ary$byval_copy = 0, $c = 0, $eqq = 0, $i = 0, $len = 0, $self$byval_copy = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $ary$byval_copy = sp + 72|0;
 $self$byval_copy = sp + 64|0;
 $vararg_buffer = sp;
 $v = sp + 48|0;
 $ary = sp + 24|0;
 $c = sp + 16|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = $0;
 $3 = (_mrb_intern_static($2,69450,3)|0);
 $eqq = $3;
 $4 = $0;
 ;HEAP32[$self$byval_copy>>2]=HEAP32[$self>>2]|0;HEAP32[$self$byval_copy+4>>2]=HEAP32[$self+4>>2]|0;
 _mrb_ary_splat($ary,$4,$self$byval_copy);
 $5 = $0;
 HEAP32[$vararg_buffer>>2] = $v;
 (_mrb_get_args($5,68900,$vararg_buffer)|0);
 $6 = HEAP32[$ary>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $len = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $len;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $0;
  $13 = $i;
  ;HEAP32[$ary$byval_copy>>2]=HEAP32[$ary>>2]|0;HEAP32[$ary$byval_copy+4>>2]=HEAP32[$ary+4>>2]|0;
  _mrb_ary_entry($1,$ary$byval_copy,$13);
  $14 = $eqq;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _mrb_funcall_argv($c,$12,$$byval_copy,$14,1,$v);
  $15 = ((($c)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   label = 4;
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  _mrb_true_value_1085($agg$result);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  _mrb_false_value_1027($agg$result);
  STACKTOP = sp;return;
 }
}
function _mrb_true_value_1085($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_pool_open($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_malloc_simple($1,8)|0);
 $pool = $2;
 $3 = $pool;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $9 = $pool;
  STACKTOP = sp;return ($9|0);
 }
 $5 = $0;
 $6 = $pool;
 HEAP32[$6>>2] = $5;
 $7 = $pool;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $pool;
 STACKTOP = sp;return ($9|0);
}
function _mrb_pool_close($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $page = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pool;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $page = $5;
 while(1) {
  $6 = $page;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $page;
  $tmp = $8;
  $9 = $page;
  $10 = HEAP32[$9>>2]|0;
  $page = $10;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $tmp;
  _mrb_free($12,$13);
 }
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 _mrb_free($15,$16);
 STACKTOP = sp;return;
}
function _mrb_pool_alloc($pool,$len) {
 $pool = $pool|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $page = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pool;
 $2 = $len;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $5 = $2;
 $6 = (-1 - ($5))|0;
 $7 = (($6) + 1)|0;
 $8 = $7 & 3;
 $9 = $2;
 $10 = (($9) + ($8))|0;
 $2 = $10;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $page = $13;
 while(1) {
  $14 = $page;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $page;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = (($18) + ($19))|0;
  $21 = $page;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20>>>0)<=($23>>>0);
  $25 = $page;
  if ($24) {
   label = 6;
   break;
  }
  $42 = HEAP32[$25>>2]|0;
  $page = $42;
 }
 if ((label|0) == 6) {
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $n = $27;
  $28 = $2;
  $29 = $page;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28))|0;
  HEAP32[$30>>2] = $32;
  $33 = $page;
  $34 = ((($33)) + 16|0);
  $35 = $n;
  $36 = (($34) + ($35)|0);
  $37 = $page;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $36;
  $39 = $page;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $0 = $41;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $43 = $1;
 $44 = $2;
 $45 = (_page_alloc($43,$44)|0);
 $page = $45;
 $46 = $page;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $2;
  $49 = $page;
  $50 = ((($49)) + 4|0);
  HEAP32[$50>>2] = $48;
  $51 = $1;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $page;
  HEAP32[$54>>2] = $53;
  $55 = $page;
  $56 = $1;
  $57 = ((($56)) + 4|0);
  HEAP32[$57>>2] = $55;
  $58 = $page;
  $59 = ((($58)) + 16|0);
  $60 = $page;
  $61 = ((($60)) + 12|0);
  HEAP32[$61>>2] = $59;
  $62 = $page;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $0 = $64;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 } else {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _page_alloc($pool,$len) {
 $pool = $pool|0;
 $len = $len|0;
 var $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $page = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pool;
 $1 = $len;
 $2 = $1;
 $3 = ($2>>>0)<(4096);
 $$len = $3 ? 4096 : $len;
 $1 = $$len;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (20 + ($6))|0;
 $8 = (_mrb_malloc_simple($5,$7)|0);
 $page = $8;
 $9 = $page;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $16 = $page;
  STACKTOP = sp;return ($16|0);
 }
 $11 = $page;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = $page;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $page;
 STACKTOP = sp;return ($16|0);
}
function _mrb_proc_new($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $ci = $6;
 $7 = $0;
 $8 = $0;
 $9 = ((($8)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_mrb_obj_alloc($7,13,$10)|0);
 $p = $11;
 $12 = $p;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = $ci;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $ci;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $ci;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $p;
   $26 = ((($25)) + 16|0);
   HEAP32[$26>>2] = $24;
  }
  $27 = $p;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   $31 = $ci;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $p;
   $35 = ((($34)) + 16|0);
   HEAP32[$35>>2] = $33;
  }
 }
 $36 = $1;
 $37 = $p;
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = $36;
 $39 = $p;
 $40 = ((($39)) + 20|0);
 HEAP32[$40>>2] = 0;
 $41 = $0;
 $42 = $1;
 _mrb_irep_incref($41,$42);
 $43 = $p;
 STACKTOP = sp;return ($43|0);
}
function _mrb_closure_new($mrb,$irep) {
 $mrb = $mrb|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $irep;
 $2 = $0;
 $3 = $1;
 $4 = (_mrb_proc_new($2,$3)|0);
 $p = $4;
 $5 = $0;
 $6 = $p;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 _closure_setup($5,$6,$17);
 $18 = $p;
 STACKTOP = sp;return ($18|0);
}
function _closure_setup($mrb,$p,$nlocals) {
 $mrb = $mrb|0;
 $p = $p|0;
 $nlocals = $nlocals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $nlocals;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $0;
 if ($10) {
  $21 = ((($11)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $e = $26;
  $27 = $e;
  $28 = $1;
  $29 = ((($28)) + 20|0);
  HEAP32[$29>>2] = $27;
  STACKTOP = sp;return;
 } else {
  $12 = $2;
  $13 = (_env_new($11,$12)|0);
  $e = $13;
  $14 = $e;
  $15 = $0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 24|0);
  HEAP32[$20>>2] = $14;
  $27 = $e;
  $28 = $1;
  $29 = ((($28)) + 20|0);
  HEAP32[$29>>2] = $27;
  STACKTOP = sp;return;
 }
}
function _env_new($mrb,$nlocals) {
 $mrb = $mrb|0;
 $nlocals = $nlocals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $nlocals;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_mrb_obj_alloc($2,20,$11)|0);
 $e = $12;
 $13 = $1;
 $14 = $e;
 $15 = HEAP32[$14>>2]|0;
 $16 = $13 & 2097151;
 $17 = $16 << 11;
 $18 = $15 & 2047;
 $19 = $18 | $17;
 HEAP32[$14>>2] = $19;
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $e;
 $27 = ((($26)) + 16|0);
 HEAP32[$27>>2] = $25;
 $28 = $0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $0;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $32;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 48)&-1;
 $42 = $e;
 $43 = ((($42)) + 20|0);
 HEAP32[$43>>2] = $41;
 $44 = $0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $e;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = $48;
 $51 = $e;
 STACKTOP = sp;return ($51|0);
}
function _mrb_proc_new_cfunc($mrb,$func) {
 $mrb = $mrb|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $func;
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mrb_obj_alloc($2,13,$5)|0);
 $p = $6;
 $7 = $1;
 $8 = $p;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = $7;
 $10 = $p;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 11;
 $13 = $12 | 128;
 $14 = HEAP32[$10>>2]|0;
 $15 = $13 & 2097151;
 $16 = $15 << 11;
 $17 = $14 & 2047;
 $18 = $17 | $16;
 HEAP32[$10>>2] = $18;
 $19 = $p;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = 0;
 $21 = $p;
 STACKTOP = sp;return ($21|0);
}
function _mrb_proc_new_cfunc_with_env($mrb,$func,$argc,$argv) {
 $mrb = $mrb|0;
 $func = $func|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $func;
 $2 = $argc;
 $3 = $argv;
 $4 = $0;
 $5 = $1;
 $6 = (_mrb_proc_new_cfunc($4,$5)|0);
 $p = $6;
 $7 = $0;
 $8 = $2;
 $9 = (_env_new($7,$8)|0);
 $e = $9;
 $10 = $p;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = $p;
 $14 = $p;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 _mrb_field_write_barrier($12,$13,$16);
 $17 = $e;
 $18 = ((($17)) + 20|0);
 HEAP32[$18>>2] = -1;
 $19 = $0;
 $20 = $2;
 $21 = $20<<3;
 $22 = (_mrb_malloc($19,$21)|0);
 $23 = $e;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $3;
 $26 = ($25|0)!=(0|0);
 $i = 0;
 if ($26) {
  while(1) {
   $27 = $i;
   $28 = $2;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = $e;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<3)|0);
   $35 = $i;
   $36 = $3;
   $37 = (($36) + ($35<<3)|0);
   ;HEAP32[$34>>2]=HEAP32[$37>>2]|0;HEAP32[$34+4>>2]=HEAP32[$37+4>>2]|0;
   $38 = $i;
   $39 = (($38) + 1)|0;
   $i = $39;
  }
  $56 = $p;
  STACKTOP = sp;return ($56|0);
 } else {
  while(1) {
   $40 = $i;
   $41 = $2;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = $i;
   $44 = $e;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<3)|0);
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = 0;
   $49 = $i;
   $50 = $e;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49<<3)|0);
   HEAP32[$53>>2] = 0;
   $54 = $i;
   $55 = (($54) + 1)|0;
   $i = $55;
  }
  $56 = $p;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _mrb_proc_cfunc_env_get($agg$result,$mrb,$idx) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $p = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $0 = $mrb;
 $1 = $idx;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $p = $10;
 $11 = $p;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $e = $13;
 $14 = $p;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 11;
 $17 = $16 & 128;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $19 = $0;
  $20 = $0;
  $21 = (_mrb_class_get($20,68905)|0);
  _mrb_raise($19,$21,68621);
  // unreachable;
 }
 $22 = $e;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $24 = $0;
  $25 = $0;
  $26 = (_mrb_class_get($25,68905)|0);
  _mrb_raise($24,$26,68662);
  // unreachable;
 }
 $27 = $1;
 $28 = ($27|0)<(0);
 if (!($28)) {
  $29 = $e;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 11;
  $32 = $1;
  $33 = ($31|0)<=($32|0);
  if (!($33)) {
   $41 = $1;
   $42 = $e;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<3)|0);
   ;HEAP32[$agg$result>>2]=HEAP32[$45>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$45+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $34 = $0;
 $35 = $0;
 $36 = (_mrb_class_get($35,68712)|0);
 $37 = $1;
 _mrb_fixnum_value_1106($2,$37);
 $38 = $e;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 11;
 _mrb_fixnum_value_1106($3,$40);
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$2>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$2+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$2+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$2+7>>0]|0;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 ;HEAP8[$vararg_ptr1>>0]=HEAP8[$3>>0]|0;HEAP8[$vararg_ptr1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$vararg_ptr1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$vararg_ptr1+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$vararg_ptr1+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$vararg_ptr1+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$vararg_ptr1+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$vararg_ptr1+7>>0]=HEAP8[$3+7>>0]|0;
 _mrb_raisef($34,$36,68723,$vararg_buffer);
 // unreachable;
}
function _mrb_fixnum_value_1106($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_proc_copy($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 11;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $4 & 2097151;
 $8 = $7 << 11;
 $9 = $6 & 2047;
 $10 = $9 | $8;
 HEAP32[$5>>2] = $10;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = $1;
 $14 = ((($13)) + 12|0);
 ;HEAP32[$12>>2]=HEAP32[$14>>2]|0;
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 128;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 56|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$23>>2] = $25;
 }
 $26 = $1;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = ((($29)) + 16|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = ((($34)) + 20|0);
 HEAP32[$35>>2] = $33;
 STACKTOP = sp;return;
}
function _mrb_proc_iseq($mrb,$p) {
 $mrb = $mrb|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $p;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _mrb_init_proc($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call_irep = 0, $m = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = (_mrb_malloc($1,60)|0);
 $call_irep = $2;
 $3 = $call_irep;
 dest=$3; src=74580; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $call_irep;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = 1;
 $6 = $call_irep;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 2544;
 $8 = $call_irep;
 $9 = ((($8)) + 40|0);
 HEAP32[$9>>2] = 1;
 $10 = $0;
 $11 = $0;
 $12 = ((($11)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 _mrb_define_method($10,$13,68953,316,0);
 $14 = $0;
 $15 = $0;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 _mrb_define_method($14,$17,68999,317,262144);
 $18 = $0;
 $19 = $0;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 _mrb_define_method($18,$21,68835,318,0);
 $22 = $0;
 $23 = $call_irep;
 $24 = (_mrb_proc_new($22,$23)|0);
 $m = $24;
 $25 = $0;
 $26 = $0;
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = (_mrb_intern_static($29,69512,4)|0);
 $31 = $m;
 _mrb_define_method_raw($25,$28,$30,$31);
 $32 = $0;
 $33 = $0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $0;
 $37 = (_mrb_intern_static($36,68841,2)|0);
 $38 = $m;
 _mrb_define_method_raw($32,$35,$37,$38);
 $39 = $0;
 $40 = $0;
 $41 = ((($40)) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 _mrb_define_class_method($39,$42,68844,319,0);
 $43 = $0;
 $44 = $0;
 $45 = ((($44)) + 84|0);
 $46 = HEAP32[$45>>2]|0;
 _mrb_define_method($43,$46,68844,319,0);
 STACKTOP = sp;return;
}
function _mrb_proc_initialize($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blk = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $blk = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $blk;
 (_mrb_get_args($1,68778,$vararg_buffer)|0);
 $2 = ((($blk)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$blk>>2]|0;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   $7 = $0;
   $8 = $0;
   $9 = (_mrb_class_get($8,68855)|0);
   _mrb_raise($7,$9,68780);
   // unreachable;
  }
 }
 $10 = HEAP32[$self>>2]|0;
 $11 = HEAP32[$blk>>2]|0;
 _mrb_proc_copy($10,$11);
 ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_proc_init_copy($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $proc = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $proc;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = ((($proc)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(13);
 if ($4) {
  $5 = $0;
  $6 = $0;
  $7 = (_mrb_class_get($6,68855)|0);
  _mrb_raise($5,$7,68824);
  // unreachable;
 } else {
  $8 = HEAP32[$self>>2]|0;
  $9 = HEAP32[$proc>>2]|0;
  _mrb_proc_copy($8,$9);
  ;HEAP32[$agg$result>>2]=HEAP32[$self>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$self+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _mrb_proc_arity($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arity = 0, $aspec = 0, $iseq = 0, $ma = 0, $op = 0, $or$cond = 0, $p = 0, $pa = 0, $ra = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$self>>2]|0;
 $p = $1;
 $2 = $0;
 $3 = $p;
 $4 = (_mrb_proc_iseq($2,$3)|0);
 $iseq = $4;
 $5 = $p;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >>> 11;
 $8 = $7 & 128;
 $9 = ($8|0)!=(0);
 if ($9) {
  _mrb_fixnum_value_1106($agg$result,-1);
  STACKTOP = sp;return;
 }
 $10 = $iseq;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 127;
 $13 = ($12|0)!=(38);
 if ($13) {
  _mrb_fixnum_value_1106($agg$result,0);
  STACKTOP = sp;return;
 }
 $14 = $iseq;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 7;
 $17 = $16 & 33554431;
 $aspec = $17;
 $18 = $aspec;
 $19 = $18 >>> 18;
 $20 = $19 & 31;
 $ma = $20;
 $21 = $aspec;
 $22 = $21 >>> 13;
 $23 = $22 & 31;
 $op = $23;
 $24 = $aspec;
 $25 = $24 >>> 12;
 $26 = $25 & 1;
 $ra = $26;
 $27 = $aspec;
 $28 = $27 >>> 7;
 $29 = $28 & 31;
 $pa = $29;
 $30 = $ra;
 $31 = ($30|0)!=(0);
 if ($31) {
  label = 7;
 } else {
  $32 = $p;
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 11;
  $35 = $34 & 256;
  $36 = ($35|0)!=(0);
  $37 = $op;
  $38 = ($37|0)!=(0);
  $or$cond = $36 & $38;
  if ($or$cond) {
   label = 7;
  } else {
   $44 = $ma;
   $45 = $pa;
   $46 = (($44) + ($45))|0;
   $47 = $46;
  }
 }
 if ((label|0) == 7) {
  $39 = $ma;
  $40 = $pa;
  $41 = (($39) + ($40))|0;
  $42 = (($41) + 1)|0;
  $43 = (0 - ($42))|0;
  $47 = $43;
 }
 $arity = $47;
 $48 = $arity;
 _mrb_fixnum_value_1106($agg$result,$48);
 STACKTOP = sp;return;
}
function _proc_lambda($agg$result,$mrb,$self) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blk = 0;
 var $p = 0, $p2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $blk = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $blk;
 (_mrb_get_args($1,68778,$vararg_buffer)|0);
 $2 = ((($blk)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$blk>>2]|0;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   $7 = $0;
   $8 = $0;
   $9 = (_mrb_class_get($8,68855)|0);
   _mrb_raise($7,$9,68780);
   // unreachable;
  }
 }
 $10 = ((($blk)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(13);
 if ($12) {
  $13 = $0;
  $14 = $0;
  $15 = (_mrb_class_get($14,68855)|0);
  _mrb_raise($13,$15,68824);
  // unreachable;
 }
 $16 = HEAP32[$blk>>2]|0;
 $p = $16;
 $17 = $p;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 11;
 $20 = $19 & 256;
 $21 = ($20|0)!=(0);
 if ($21) {
  ;HEAP32[$agg$result>>2]=HEAP32[$blk>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$blk+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $22 = $0;
  $23 = $p;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_mrb_obj_alloc($22,13,$25)|0);
  $p2 = $26;
  $27 = $p2;
  $28 = $p;
  _mrb_proc_copy($27,$28);
  $29 = $p2;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 11;
  $32 = $31 | 256;
  $33 = HEAP32[$29>>2]|0;
  $34 = $32 & 2097151;
  $35 = $34 << 11;
  $36 = $33 & 2047;
  $37 = $36 | $35;
  HEAP32[$29>>2] = $37;
  $38 = $p2;
  _mrb_obj_value_1123($agg$result,$38);
  STACKTOP = sp;return;
 }
}
function _mrb_obj_value_1123($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_new($agg$result,$mrb,$beg,$end,$excl) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $beg = $beg|0;
 $end = $end|0;
 $excl = $excl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beg$byval_copy = 0, $end$byval_copy = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end$byval_copy = sp + 16|0;
 $beg$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $excl;
 $2 = $0;
 ;HEAP32[$beg$byval_copy>>2]=HEAP32[$beg>>2]|0;HEAP32[$beg$byval_copy+4>>2]=HEAP32[$beg+4>>2]|0;
 ;HEAP32[$end$byval_copy>>2]=HEAP32[$end>>2]|0;HEAP32[$end$byval_copy+4>>2]=HEAP32[$end+4>>2]|0;
 _range_check($2,$beg$byval_copy,$end$byval_copy);
 $3 = $0;
 $4 = $0;
 $5 = (_mrb_class_get($4,68889)|0);
 $6 = (_mrb_obj_alloc($3,17,$5)|0);
 $r = $6;
 $7 = $0;
 $8 = (_mrb_malloc($7,16)|0);
 $9 = $r;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $8;
 $11 = $r;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$13>>2]=HEAP32[$beg>>2]|0;HEAP32[$13+4>>2]=HEAP32[$beg+4>>2]|0;
 $14 = $r;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 ;HEAP32[$17>>2]=HEAP32[$end>>2]|0;HEAP32[$17+4>>2]=HEAP32[$end+4>>2]|0;
 $18 = $1;
 $19 = $r;
 $20 = ((($19)) + 16|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $18 & 1;
 $23 = $21 & -2;
 $24 = $23 | $22;
 HEAP8[$20>>0] = $24;
 $25 = $r;
 _mrb_obj_value_1130($agg$result,$25);
 STACKTOP = sp;return;
}
function _range_check($mrb,$a,$b) {
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a$byval_copy = 0, $ans = 0, $or$cond = 0, $or$cond3 = 0, $ta = 0, $tb = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $ans = sp + 24|0;
 $1 = sp + 8|0;
 $0 = $mrb;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $ta = $3;
 $4 = ((($b)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $tb = $5;
 $6 = $ta;
 $7 = ($6|0)==(3);
 $8 = $ta;
 $9 = ($8|0)==(6);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $10 = $tb;
  $11 = ($10|0)==(3);
  $12 = $tb;
  $13 = ($12|0)==(6);
  $or$cond3 = $11 | $13;
  if ($or$cond3) {
   STACKTOP = sp;return;
  }
 }
 $14 = $0;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$b>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$b+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$b+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$b+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$b+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$b+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$b+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$b+7>>0]|0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 _mrb_funcall($1,$14,$a$byval_copy,68851,1,$vararg_buffer);
 ;HEAP32[$ans>>2]=HEAP32[$1>>2]|0;HEAP32[$ans+4>>2]=HEAP32[$1+4>>2]|0;
 $15 = ((($ans)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$ans>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  STACKTOP = sp;return;
 } else {
  $20 = $0;
  $21 = $0;
  $22 = (_mrb_class_get($21,68855)|0);
  _mrb_raise($20,$22,68869);
  // unreachable;
 }
}
function _mrb_obj_value_1130($agg$result,$p) {
 $agg$result = $agg$result|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 255;
 $4 = ((($v)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $0;
 HEAP32[$v>>2] = $5;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_beg($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$range>>2]|0;
 $r = $1;
 $2 = $r;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 ;HEAP32[$agg$result>>2]=HEAP32[$4>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_end($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$range>>2]|0;
 $r = $1;
 $2 = $r;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$5>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_excl($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = HEAP32[$range>>2]|0;
 $r = $1;
 $2 = $r;
 $3 = ((($2)) + 16|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 _mrb_bool_value_1131($agg$result,$5);
 STACKTOP = sp;return;
}
function _mrb_bool_value_1131($agg$result,$boolean) {
 $agg$result = $agg$result|0;
 $boolean = $boolean|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $boolean;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 2 : 0;
 $5 = ((($v)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_initialize($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $beg = 0, $beg$byval_copy = 0, $end = 0, $end$byval_copy = 0, $exclusive = 0, $n = 0, $range$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end$byval_copy = sp + 56|0;
 $beg$byval_copy = sp + 48|0;
 $range$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $beg = sp + 24|0;
 $end = sp + 16|0;
 $exclusive = sp + 64|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $beg;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $end;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $exclusive;
 $2 = (_mrb_get_args($1,68895,$vararg_buffer)|0);
 $n = $2;
 $3 = $n;
 $4 = ($3|0)!=(3);
 if ($4) {
  HEAP8[$exclusive>>0] = 0;
 }
 $5 = $0;
 $6 = HEAP8[$exclusive>>0]|0;
 ;HEAP32[$range$byval_copy>>2]=HEAP32[$range>>2]|0;HEAP32[$range$byval_copy+4>>2]=HEAP32[$range+4>>2]|0;
 ;HEAP32[$beg$byval_copy>>2]=HEAP32[$beg>>2]|0;HEAP32[$beg$byval_copy+4>>2]=HEAP32[$beg+4>>2]|0;
 ;HEAP32[$end$byval_copy>>2]=HEAP32[$end>>2]|0;HEAP32[$end$byval_copy+4>>2]=HEAP32[$end+4>>2]|0;
 _range_init($5,$range$byval_copy,$beg$byval_copy,$end$byval_copy,$6);
 ;HEAP32[$agg$result>>2]=HEAP32[$range>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$range+4>>2]|0;
 STACKTOP = sp;return;
}
function _range_init($mrb,$range,$beg,$end,$exclude_end) {
 $mrb = $mrb|0;
 $range = $range|0;
 $beg = $beg|0;
 $end = $end|0;
 $exclude_end = $exclude_end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beg$byval_copy = 0, $end$byval_copy = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end$byval_copy = sp + 16|0;
 $beg$byval_copy = sp + 8|0;
 $0 = $mrb;
 $1 = $exclude_end;
 $2 = HEAP32[$range>>2]|0;
 $r = $2;
 $3 = $0;
 ;HEAP32[$beg$byval_copy>>2]=HEAP32[$beg>>2]|0;HEAP32[$beg$byval_copy+4>>2]=HEAP32[$beg+4>>2]|0;
 ;HEAP32[$end$byval_copy>>2]=HEAP32[$end>>2]|0;HEAP32[$end$byval_copy+4>>2]=HEAP32[$end+4>>2]|0;
 _range_check($3,$beg$byval_copy,$end$byval_copy);
 $4 = $1;
 $5 = $r;
 $6 = ((($5)) + 16|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $4 & 1;
 $9 = $7 & -2;
 $10 = $9 | $8;
 HEAP8[$6>>0] = $10;
 $11 = $r;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $0;
  $16 = (_mrb_malloc($15,16)|0);
  $17 = $r;
  $18 = ((($17)) + 12|0);
  HEAP32[$18>>2] = $16;
 }
 $19 = $r;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$21>>2]=HEAP32[$beg>>2]|0;HEAP32[$21+4>>2]=HEAP32[$beg+4>>2]|0;
 $22 = $r;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 8|0);
 ;HEAP32[$25>>2]=HEAP32[$end>>2]|0;HEAP32[$25+4>>2]=HEAP32[$end+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_eq($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $$byval_copy = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, $obj$byval_copy = 0, $obj$byval_copy8 = 0, $range$byval_copy = 0, $range$byval_copy7 = 0, $ro = 0, $rr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 104|0;
 $$byval_copy = sp + 96|0;
 $obj$byval_copy8 = sp + 88|0;
 $range$byval_copy7 = sp + 80|0;
 $obj$byval_copy = sp + 72|0;
 $range$byval_copy = sp + 64|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $obj = sp + 40|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $0 = $mrb;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($3,68900,$vararg_buffer)|0);
 $4 = $0;
 ;HEAP32[$range$byval_copy>>2]=HEAP32[$range>>2]|0;HEAP32[$range$byval_copy+4>>2]=HEAP32[$range+4>>2]|0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $5 = (_mrb_obj_equal($4,$range$byval_copy,$obj$byval_copy)|0);
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  _mrb_true_value_1134($agg$result);
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $0;
 ;HEAP32[$range$byval_copy7>>2]=HEAP32[$range>>2]|0;HEAP32[$range$byval_copy7+4>>2]=HEAP32[$range+4>>2]|0;
 $9 = (_mrb_obj_class($8,$range$byval_copy7)|0);
 ;HEAP32[$obj$byval_copy8>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy8+4>>2]=HEAP32[$obj+4>>2]|0;
 $10 = (_mrb_obj_is_instance_of($7,$obj$byval_copy8,$9)|0);
 $11 = ($10<<24>>24)!=(0);
 if (!($11)) {
  _mrb_false_value_1135($agg$result);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$range>>2]|0;
 $rr = $12;
 $13 = HEAP32[$obj>>2]|0;
 $ro = $13;
 $14 = $0;
 $15 = $rr;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $ro;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 ;HEAP8[$vararg_buffer1>>0]=HEAP8[$20>>0]|0;HEAP8[$vararg_buffer1+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$vararg_buffer1+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$vararg_buffer1+3>>0]=HEAP8[$20+3>>0]|0;HEAP8[$vararg_buffer1+4>>0]=HEAP8[$20+4>>0]|0;HEAP8[$vararg_buffer1+5>>0]=HEAP8[$20+5>>0]|0;HEAP8[$vararg_buffer1+6>>0]=HEAP8[$20+6>>0]|0;HEAP8[$vararg_buffer1+7>>0]=HEAP8[$20+7>>0]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;
 _mrb_funcall($1,$14,$$byval_copy,68902,1,$vararg_buffer1);
 $21 = ((($1)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $0;
  $25 = $rr;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = $ro;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  ;HEAP8[$vararg_buffer4>>0]=HEAP8[$32>>0]|0;HEAP8[$vararg_buffer4+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$vararg_buffer4+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$vararg_buffer4+3>>0]=HEAP8[$32+3>>0]|0;HEAP8[$vararg_buffer4+4>>0]=HEAP8[$32+4>>0]|0;HEAP8[$vararg_buffer4+5>>0]=HEAP8[$32+5>>0]|0;HEAP8[$vararg_buffer4+6>>0]=HEAP8[$32+6>>0]|0;HEAP8[$vararg_buffer4+7>>0]=HEAP8[$32+7>>0]|0;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$28+4>>2]|0;
  _mrb_funcall($2,$24,$$byval_copy9,68902,1,$vararg_buffer4);
  $33 = ((($2)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $rr;
   $37 = ((($36)) + 16|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38 & 1;
   $40 = $39&255;
   $41 = $ro;
   $42 = ((($41)) + 16|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43 & 1;
   $45 = $44&255;
   $46 = ($40|0)!=($45|0);
   if (!($46)) {
    _mrb_true_value_1134($agg$result);
    STACKTOP = sp;return;
   }
  }
 }
 _mrb_false_value_1135($agg$result);
 STACKTOP = sp;return;
}
function _mrb_true_value_1134($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 2;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_false_value_1135($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$v>>2] = 1;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_range_include($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beg = 0, $beg$byval_copy = 0, $end = 0, $end$byval_copy = 0, $end$byval_copy2 = 0, $include_p = 0, $r = 0, $val = 0;
 var $val$byval_copy = 0, $val$byval_copy1 = 0, $val$byval_copy3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy3 = sp + 88|0;
 $end$byval_copy2 = sp + 80|0;
 $val$byval_copy1 = sp + 72|0;
 $end$byval_copy = sp + 64|0;
 $val$byval_copy = sp + 56|0;
 $beg$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $val = sp + 32|0;
 $beg = sp + 16|0;
 $end = sp + 8|0;
 $0 = $mrb;
 $1 = HEAP32[$range>>2]|0;
 $r = $1;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $val;
 (_mrb_get_args($2,68900,$vararg_buffer)|0);
 $3 = $r;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$beg>>2]=HEAP32[$5>>2]|0;HEAP32[$beg+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $r;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 ;HEAP32[$end>>2]=HEAP32[$9>>2]|0;HEAP32[$end+4>>2]=HEAP32[$9+4>>2]|0;
 $10 = $0;
 ;HEAP32[$beg$byval_copy>>2]=HEAP32[$beg>>2]|0;HEAP32[$beg$byval_copy+4>>2]=HEAP32[$beg+4>>2]|0;
 ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
 $11 = (_r_le($10,$beg$byval_copy,$val$byval_copy)|0);
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $29 = 0;
  $28 = $29&1;
  $30 = $28&255;
  $include_p = $30;
  $31 = $include_p;
  _mrb_bool_value_1131($agg$result,$31);
  STACKTOP = sp;return;
 }
 $14 = $r;
 $15 = ((($14)) + 16|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 & 1;
 $18 = $17&255;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $0;
  ;HEAP32[$end$byval_copy>>2]=HEAP32[$end>>2]|0;HEAP32[$end$byval_copy+4>>2]=HEAP32[$end+4>>2]|0;
  ;HEAP32[$val$byval_copy1>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy1+4>>2]=HEAP32[$val+4>>2]|0;
  $21 = (_r_gt($20,$end$byval_copy,$val$byval_copy1)|0);
  $22 = $21&255;
  $23 = ($22|0)!=(0);
  if ($23) {
   $29 = 1;
   $28 = $29&1;
   $30 = $28&255;
   $include_p = $30;
   $31 = $include_p;
   _mrb_bool_value_1131($agg$result,$31);
   STACKTOP = sp;return;
  }
 }
 $24 = $0;
 ;HEAP32[$end$byval_copy2>>2]=HEAP32[$end>>2]|0;HEAP32[$end$byval_copy2+4>>2]=HEAP32[$end+4>>2]|0;
 ;HEAP32[$val$byval_copy3>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy3+4>>2]=HEAP32[$val+4>>2]|0;
 $25 = (_r_ge($24,$end$byval_copy2,$val$byval_copy3)|0);
 $26 = $25&255;
 $27 = ($26|0)!=(0);
 $29 = $27;
 $28 = $29&1;
 $30 = $28&255;
 $include_p = $30;
 $31 = $include_p;
 _mrb_bool_value_1131($agg$result,$31);
 STACKTOP = sp;return;
}
function _r_le($mrb,$a,$b) {
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$byval_copy = 0, $c = 0, $or$cond = 0, $r = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $r = sp + 16|0;
 $1 = $mrb;
 $2 = $1;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$b>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$b+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$b+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$b+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$b+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$b+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$b+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$b+7>>0]|0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 _mrb_funcall($r,$2,$a$byval_copy,68851,1,$vararg_buffer);
 $3 = ((($r)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(3);
 if ($5) {
  $6 = HEAP32[$r>>2]|0;
  $c = $6;
  $7 = $c;
  $8 = ($7|0)==(0);
  $9 = $c;
  $10 = ($9|0)==(-1);
  $or$cond = $8 | $10;
  if ($or$cond) {
   $0 = 1;
   $11 = $0;
   STACKTOP = sp;return ($11|0);
  }
 }
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _r_gt($mrb,$a,$b) {
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$byval_copy = 0, $r = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $r = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$b>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$b+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$b+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$b+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$b+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$b+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$b+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$b+7>>0]|0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 _mrb_funcall($r,$1,$a$byval_copy,68851,1,$vararg_buffer);
 $2 = ((($r)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 $5 = HEAP32[$r>>2]|0;
 $6 = ($5|0)==(1);
 $7 = $4 ? $6 : 0;
 $8 = $7&1;
 $9 = $8&255;
 STACKTOP = sp;return ($9|0);
}
function _r_ge($mrb,$a,$b) {
 $mrb = $mrb|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$byval_copy = 0, $c = 0, $or$cond = 0, $r = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $r = sp + 16|0;
 $1 = $mrb;
 $2 = $1;
 ;HEAP8[$vararg_buffer>>0]=HEAP8[$b>>0]|0;HEAP8[$vararg_buffer+1>>0]=HEAP8[$b+1>>0]|0;HEAP8[$vararg_buffer+2>>0]=HEAP8[$b+2>>0]|0;HEAP8[$vararg_buffer+3>>0]=HEAP8[$b+3>>0]|0;HEAP8[$vararg_buffer+4>>0]=HEAP8[$b+4>>0]|0;HEAP8[$vararg_buffer+5>>0]=HEAP8[$b+5>>0]|0;HEAP8[$vararg_buffer+6>>0]=HEAP8[$b+6>>0]|0;HEAP8[$vararg_buffer+7>>0]=HEAP8[$b+7>>0]|0;
 ;HEAP32[$a$byval_copy>>2]=HEAP32[$a>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;
 _mrb_funcall($r,$2,$a$byval_copy,68851,1,$vararg_buffer);
 $3 = ((($r)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(3);
 if ($5) {
  $6 = HEAP32[$r>>2]|0;
  $c = $6;
  $7 = $c;
  $8 = ($7|0)==(0);
  $9 = $c;
  $10 = ($9|0)==(1);
  $or$cond = $8 | $10;
  if ($or$cond) {
   $0 = 1;
   $11 = $0;
   STACKTOP = sp;return ($11|0);
  }
 }
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _mrb_range_beg_len($mrb,$range,$begp,$lenp,$len) {
 $mrb = $mrb|0;
 $range = $range|0;
 $begp = $begp|0;
 $lenp = $lenp|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $range$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $range$byval_copy = sp + 16|0;
 $0 = $mrb;
 $1 = $begp;
 $2 = $lenp;
 $3 = $len;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$range$byval_copy>>2]=HEAP32[$range>>2]|0;HEAP32[$range$byval_copy+4>>2]=HEAP32[$range+4>>2]|0;
 $8 = (_range_beg_len($4,$range$byval_copy,$5,$6,$7,1)|0);
 STACKTOP = sp;return ($8|0);
}
function _range_beg_len($mrb,$range,$begp,$lenp,$len,$trunc) {
 $mrb = $mrb|0;
 $range = $range|0;
 $begp = $begp|0;
 $lenp = $lenp|0;
 $len = $len|0;
 $trunc = $trunc|0;
 var $$ = 0, $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $beg = 0, $end = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $6 = sp + 8|0;
 $7 = sp;
 $1 = $mrb;
 $2 = $begp;
 $3 = $lenp;
 $4 = $len;
 $5 = $trunc;
 $8 = HEAP32[$range>>2]|0;
 $r = $8;
 $9 = ((($range)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(17);
 if ($11) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $12 = $1;
 $13 = $r;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$15+4>>2]|0;
 _mrb_to_int($6,$12,$$byval_copy);
 $16 = HEAP32[$6>>2]|0;
 $beg = $16;
 $17 = $1;
 $18 = $r;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$21+4>>2]|0;
 _mrb_to_int($7,$17,$$byval_copy1);
 $22 = HEAP32[$7>>2]|0;
 $end = $22;
 $23 = $beg;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $4;
  $26 = $beg;
  $27 = (($26) + ($25))|0;
  $beg = $27;
  $28 = $beg;
  $29 = ($28|0)<(0);
  if ($29) {
   $0 = 0;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 }
 $30 = $5;
 $31 = ($30<<24>>24)!=(0);
 do {
  if ($31) {
   $32 = $beg;
   $33 = $4;
   $34 = ($32|0)>($33|0);
   if ($34) {
    $0 = 0;
    $65 = $0;
    STACKTOP = sp;return ($65|0);
   } else {
    $35 = $end;
    $36 = $4;
    $37 = ($35|0)>($36|0);
    if (!($37)) {
     break;
    }
    $38 = $4;
    $end = $38;
    break;
   }
  }
 } while(0);
 $39 = $end;
 $40 = ($39|0)<(0);
 if ($40) {
  $41 = $4;
  $42 = $end;
  $43 = (($42) + ($41))|0;
  $end = $43;
 }
 $44 = $r;
 $45 = ((($44)) + 16|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)!=(0);
 do {
  if (!($48)) {
   $49 = $5;
   $50 = ($49<<24>>24)!=(0);
   if ($50) {
    $51 = $end;
    $52 = $4;
    $53 = ($51|0)<($52|0);
    if (!($53)) {
     break;
    }
   }
   $54 = $end;
   $55 = (($54) + 1)|0;
   $end = $55;
  }
 } while(0);
 $56 = $end;
 $57 = $beg;
 $58 = (($56) - ($57))|0;
 $4 = $58;
 $59 = $4;
 $60 = ($59|0)<(0);
 $$ = $60 ? 0 : $58;
 $4 = $$;
 $61 = $beg;
 $62 = $2;
 HEAP32[$62>>2] = $61;
 $63 = $4;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $0 = 1;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _mrb_init_range($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mrb_define_class($1,68889,$4)|0);
 $r = $5;
 $6 = $r;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 11;
 $9 = $8 & -256;
 $10 = $9 | 17;
 $11 = $r;
 $12 = HEAP32[$11>>2]|0;
 $13 = $10 & 2097151;
 $14 = $13 << 11;
 $15 = $12 & 2047;
 $16 = $15 | $14;
 HEAP32[$11>>2] = $16;
 $17 = $0;
 $18 = $r;
 _mrb_define_method($17,$18,68915,320,0);
 $19 = $0;
 $20 = $r;
 _mrb_define_method($19,$20,68921,321,0);
 $21 = $0;
 $22 = $r;
 _mrb_define_method($21,$22,68902,322,262144);
 $23 = $0;
 $24 = $r;
 _mrb_define_method($23,$24,69450,323,262144);
 $25 = $0;
 $26 = $r;
 _mrb_define_method($25,$26,68925,324,0);
 $27 = $0;
 $28 = $r;
 _mrb_define_method($27,$28,68938,320,0);
 $29 = $0;
 $30 = $r;
 _mrb_define_method($29,$30,68944,323,262144);
 $31 = $0;
 $32 = $r;
 _mrb_define_method($31,$32,68953,325,4096);
 $33 = $0;
 $34 = $r;
 _mrb_define_method($33,$34,68964,321,0);
 $35 = $0;
 $36 = $r;
 _mrb_define_method($35,$36,68969,323,262144);
 $37 = $0;
 $38 = $r;
 _mrb_define_method($37,$38,68977,326,0);
 $39 = $0;
 $40 = $r;
 _mrb_define_method($39,$40,68986,327,0);
 $41 = $0;
 $42 = $r;
 _mrb_define_method($41,$42,68994,328,262144);
 $43 = $0;
 $44 = $r;
 _mrb_define_method($43,$44,68999,329,262144);
 STACKTOP = sp;return;
}
function _range_to_s($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $str2 = 0, $str2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy = sp + 112|0;
 $str$byval_copy3 = sp + 104|0;
 $str$byval_copy2 = sp + 96|0;
 $str$byval_copy = sp + 88|0;
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $str = sp + 56|0;
 $str2 = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $6 = HEAP32[$range>>2]|0;
 $r = $6;
 $7 = $0;
 $8 = $r;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;
 _mrb_obj_as_string($1,$7,$$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $11 = $0;
 $12 = $r;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$15+4>>2]|0;
 _mrb_obj_as_string($2,$11,$$byval_copy1);
 ;HEAP32[$str2>>2]=HEAP32[$2>>2]|0;HEAP32[$str2+4>>2]=HEAP32[$2+4>>2]|0;
 $16 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_dup($3,$16,$str$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$3>>2]|0;HEAP32[$str+4>>2]=HEAP32[$3+4>>2]|0;
 $17 = $0;
 $18 = $r;
 $19 = ((($18)) + 16|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 1;
 $22 = $21&255;
 $23 = ($22|0)!=(0);
 $24 = $23 ? 3 : 2;
 ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($4,$17,$str$byval_copy2,68982,$24);
 $25 = $0;
 ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 _mrb_str_cat_str($5,$25,$str$byval_copy3,$str2$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _range_inspect($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $str = 0, $str$byval_copy = 0, $str$byval_copy2 = 0, $str$byval_copy3 = 0, $str2 = 0, $str2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str2$byval_copy = sp + 112|0;
 $str$byval_copy3 = sp + 104|0;
 $str$byval_copy2 = sp + 96|0;
 $str$byval_copy = sp + 88|0;
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $str = sp + 56|0;
 $str2 = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mrb;
 $6 = HEAP32[$range>>2]|0;
 $r = $6;
 $7 = $0;
 $8 = $r;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;
 _mrb_inspect($1,$7,$$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$1>>2]|0;HEAP32[$str+4>>2]=HEAP32[$1+4>>2]|0;
 $11 = $0;
 $12 = $r;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$15+4>>2]|0;
 _mrb_inspect($2,$11,$$byval_copy1);
 ;HEAP32[$str2>>2]=HEAP32[$2>>2]|0;HEAP32[$str2+4>>2]=HEAP32[$2+4>>2]|0;
 $16 = $0;
 ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_dup($3,$16,$str$byval_copy);
 ;HEAP32[$str>>2]=HEAP32[$3>>2]|0;HEAP32[$str+4>>2]=HEAP32[$3+4>>2]|0;
 $17 = $0;
 $18 = $r;
 $19 = ((($18)) + 16|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 1;
 $22 = $21&255;
 $23 = ($22|0)!=(0);
 $24 = $23 ? 3 : 2;
 ;HEAP32[$str$byval_copy2>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy2+4>>2]=HEAP32[$str+4>>2]|0;
 _mrb_str_cat($4,$17,$str$byval_copy2,68982,$24);
 $25 = $0;
 ;HEAP32[$str$byval_copy3>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy3+4>>2]=HEAP32[$str+4>>2]|0;
 ;HEAP32[$str2$byval_copy>>2]=HEAP32[$str2>>2]|0;HEAP32[$str2$byval_copy+4>>2]=HEAP32[$str2+4>>2]|0;
 _mrb_str_cat_str($5,$25,$str$byval_copy3,$str2$byval_copy);
 ;HEAP32[$agg$result>>2]=HEAP32[$str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$str+4>>2]|0;
 STACKTOP = sp;return;
}
function _range_eql($agg$result,$mrb,$range) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $range = $range|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $o = 0, $obj = 0, $obj$byval_copy = 0, $obj$byval_copy1 = 0, $r = 0, $range$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 72|0;
 $$byval_copy2 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $obj$byval_copy1 = sp + 48|0;
 $obj$byval_copy = sp + 40|0;
 $range$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $obj = sp + 16|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $obj;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$range$byval_copy>>2]=HEAP32[$range>>2]|0;HEAP32[$range$byval_copy+4>>2]=HEAP32[$range+4>>2]|0;
 ;HEAP32[$obj$byval_copy>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy+4>>2]=HEAP32[$obj+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$range$byval_copy,$obj$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  _mrb_true_value_1134($agg$result);
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $0;
 $7 = (_mrb_class_get($6,68889)|0);
 ;HEAP32[$obj$byval_copy1>>2]=HEAP32[$obj>>2]|0;HEAP32[$obj$byval_copy1+4>>2]=HEAP32[$obj+4>>2]|0;
 $8 = (_mrb_obj_is_kind_of($5,$obj$byval_copy1,$7)|0);
 $9 = ($8<<24>>24)!=(0);
 if (!($9)) {
  _mrb_false_value_1135($agg$result);
  STACKTOP = sp;return;
 }
 $10 = ((($obj)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(17);
 if ($12) {
  _mrb_false_value_1135($agg$result);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$range>>2]|0;
 $r = $13;
 $14 = HEAP32[$obj>>2]|0;
 $o = $14;
 $15 = $0;
 $16 = $r;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $o;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$21+4>>2]|0;
 $22 = (_mrb_eql($15,$$byval_copy,$$byval_copy2)|0);
 $23 = ($22<<24>>24)!=(0);
 if ($23) {
  $24 = $0;
  $25 = $r;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = $o;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$28+4>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$32+4>>2]|0;
  $33 = (_mrb_eql($24,$$byval_copy3,$$byval_copy4)|0);
  $34 = ($33<<24>>24)!=(0);
  if ($34) {
   $35 = $r;
   $36 = ((($35)) + 16|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 & 1;
   $39 = $38&255;
   $40 = $o;
   $41 = ((($40)) + 16|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 & 1;
   $44 = $43&255;
   $45 = ($39|0)!=($44|0);
   if (!($45)) {
    _mrb_true_value_1134($agg$result);
    STACKTOP = sp;return;
   }
  }
 }
 _mrb_false_value_1135($agg$result);
 STACKTOP = sp;return;
}
function _range_initialize_copy($agg$result,$mrb,$copy) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $copy = $copy|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy$byval_copy = 0, $copy$byval_copy1 = 0, $copy$byval_copy3 = 0, $r = 0, $src = 0, $src$byval_copy = 0, $src$byval_copy2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $copy$byval_copy3 = sp + 56|0;
 $src$byval_copy2 = sp + 48|0;
 $copy$byval_copy1 = sp + 40|0;
 $src$byval_copy = sp + 32|0;
 $copy$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $src = sp + 8|0;
 $0 = $mrb;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $src;
 (_mrb_get_args($1,68900,$vararg_buffer)|0);
 $2 = $0;
 ;HEAP32[$copy$byval_copy>>2]=HEAP32[$copy>>2]|0;HEAP32[$copy$byval_copy+4>>2]=HEAP32[$copy+4>>2]|0;
 ;HEAP32[$src$byval_copy>>2]=HEAP32[$src>>2]|0;HEAP32[$src$byval_copy+4>>2]=HEAP32[$src+4>>2]|0;
 $3 = (_mrb_obj_equal($2,$copy$byval_copy,$src$byval_copy)|0);
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  ;HEAP32[$agg$result>>2]=HEAP32[$copy>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$copy+4>>2]|0;
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $0;
 ;HEAP32[$copy$byval_copy1>>2]=HEAP32[$copy>>2]|0;HEAP32[$copy$byval_copy1+4>>2]=HEAP32[$copy+4>>2]|0;
 $7 = (_mrb_obj_class($6,$copy$byval_copy1)|0);
 ;HEAP32[$src$byval_copy2>>2]=HEAP32[$src>>2]|0;HEAP32[$src$byval_copy2+4>>2]=HEAP32[$src+4>>2]|0;
 $8 = (_mrb_obj_is_instance_of($5,$src$byval_copy2,$7)|0);
 $9 = ($8<<24>>24)!=(0);
 if (!($9)) {
  $10 = $0;
  $11 = $0;
  $12 = (_mrb_class_get($11,68905)|0);
  _mrb_raise($10,$12,69015);
  // unreachable;
 }
 $13 = HEAP32[$src>>2]|0;
 $r = $13;
 $14 = $0;
 $15 = $r;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $r;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = $r;
 $23 = ((($22)) + 16|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 1;
 ;HEAP32[$copy$byval_copy3>>2]=HEAP32[$copy>>2]|0;HEAP32[$copy$byval_copy3+4>>2]=HEAP32[$copy+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$21+4>>2]|0;
 _range_init($14,$copy$byval_copy3,$$byval_copy,$$byval_copy4,$25);
 ;HEAP32[$agg$result>>2]=HEAP32[$copy>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$copy+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_init_version($mrb) {
 $mrb = $mrb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mruby_version = 0, $mruby_version$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 128|0;
 $$byval_copy5 = sp + 120|0;
 $$byval_copy4 = sp + 112|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 96|0;
 $mruby_version$byval_copy = sp + 88|0;
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $mruby_version = sp + 56|0;
 $1 = sp + 48|0;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $0 = $mrb;
 $8 = $0;
 _mrb_str_new_static($mruby_version,$8,69036,5);
 $9 = $0;
 $10 = $0;
 _mrb_str_new_static($1,$10,69042,3);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _mrb_define_global_const($9,69046,$$byval_copy);
 $11 = $0;
 $12 = $0;
 _mrb_str_new_static($2,$12,69059,5);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 _mrb_define_global_const($11,69065,$$byval_copy1);
 $13 = $0;
 ;HEAP32[$mruby_version$byval_copy>>2]=HEAP32[$mruby_version>>2]|0;HEAP32[$mruby_version$byval_copy+4>>2]=HEAP32[$mruby_version+4>>2]|0;
 _mrb_define_global_const($13,69077,$mruby_version$byval_copy);
 $14 = $0;
 $15 = $0;
 _mrb_str_new_static($3,$15,69036,5);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 _mrb_define_global_const($14,69097,$$byval_copy2);
 $16 = $0;
 _mrb_fixnum_value_1168($4,10200);
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;
 _mrb_define_global_const($16,69111,$$byval_copy3);
 $17 = $0;
 $18 = $0;
 _mrb_str_new_static($5,$18,69128,10);
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$5+4>>2]|0;
 _mrb_define_global_const($17,69139,$$byval_copy4);
 $19 = $0;
 $20 = $0;
 _mrb_str_new_static($6,$20,69158,25);
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$6+4>>2]|0;
 _mrb_define_global_const($19,69184,$$byval_copy5);
 $21 = $0;
 $22 = $0;
 _mrb_str_new_static($7,$22,69202,48);
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$7+4>>2]|0;
 _mrb_define_global_const($21,69251,$$byval_copy6);
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_1168($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _mrb_generate_code($mrb,$p) {
 $mrb = $mrb|0;
 $p = $p|0;
 var $$0 = 0, $$reg2mem26$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, $cond28 = 0, $cond29 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_iiii(330,($mrb|0),(0|0),(0|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = (threwValue); } else { $2 = -1; };
 $3 = tempRet0;
 $cond = ($2|0)==(1);
 do {
  if ($cond) {
   $$reg2mem26$0 = $3;
  } else {
   $4 = ($0|0)!=(0|0);
   if ($4) {
    HEAP32[$0>>2] = $mrb;
    $5 = ((($0)) + 248|0);
    HEAP32[$5>>2] = $p;
    $6 = ((($p)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($0)) + 196|0);
    HEAP32[$8>>2] = $7;
    $9 = ((($p)) + 1400|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10&65535;
    $12 = ((($0)) + 244|0);
    HEAP16[$12>>1] = $11;
    $13 = ((($0)) + 8|0);
    _setjmpTable = _saveSetjmp($13,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
    __THREW__ = 0;
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond28 = ($15|0)==(1);
    if ($cond28) {
     $$reg2mem26$0 = $16;
     break;
    }
    $$reg2mem26$0 = 0;
    break;
   } else {
    $$0 = 0;
    _free(_setjmpTable|0);
    return ($$0|0);
   }
  }
 } while(0);
 while(1) {
  $17 = ($$reg2mem26$0|0)==(0);
  if ($17) {
   $18 = ((($p)) + 1144|0);
   $19 = HEAP32[$18>>2]|0;
   __THREW__ = 0;
   invoke_viii(331,($0|0),($19|0),0);
   $20 = __THREW__; __THREW__ = 0;
   if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = (threwValue); } else { $21 = -1; };
   $22 = tempRet0;
   $cond31 = ($21|0)==(1);
   if ($cond31) {
    $$reg2mem26$0 = $22;
    continue;
   }
   $23 = ((($0)) + 216|0);
   $24 = HEAP32[$23>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_iii(195,($mrb|0),($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
   $28 = tempRet0;
   $cond32 = ($27|0)==(1);
   if ($cond32) {
    $$reg2mem26$0 = $28;
    continue;
   }
   $29 = ((($0)) + 216|0);
   $30 = HEAP32[$29>>2]|0;
   __THREW__ = 0;
   invoke_vii(332,($mrb|0),($30|0));
   $31 = __THREW__; __THREW__ = 0;
   if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = (threwValue); } else { $32 = -1; };
   $33 = tempRet0;
   $cond33 = ($32|0)==(1);
   if ($cond33) {
    $$reg2mem26$0 = $33;
    continue;
   }
   $34 = ((($0)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   invoke_vi(333,($35|0));
   $36 = __THREW__; __THREW__ = 0;
   if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = (threwValue); } else { $37 = -1; };
   $38 = tempRet0;
   $cond34 = ($37|0)==(1);
   if ($cond34) {
    $$reg2mem26$0 = $38;
    continue;
   } else {
    label = 11;
    break;
   }
  } else {
   $39 = ((($0)) + 196|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($0)) + 216|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)==($44|0);
   if ($45) {
    $46 = ((($0)) + 216|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 28|0);
    HEAP32[$48>>2] = 0;
   }
   $49 = ((($0)) + 216|0);
   $50 = HEAP32[$49>>2]|0;
   __THREW__ = 0;
   invoke_vii(332,($mrb|0),($50|0));
   $51 = __THREW__; __THREW__ = 0;
   if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } tempRet0 = (threwValue); } else { $52 = -1; };
   $53 = tempRet0;
   $cond29 = ($52|0)==(1);
   if ($cond29) {
    $$reg2mem26$0 = $53;
    continue;
   }
   $54 = ((($0)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   __THREW__ = 0;
   invoke_vi(333,($55|0));
   $56 = __THREW__; __THREW__ = 0;
   if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = (threwValue); } else { $57 = -1; };
   $58 = tempRet0;
   $cond30 = ($57|0)==(1);
   if ($cond30) {
    $$reg2mem26$0 = $58;
    continue;
   } else {
    label = 16;
    break;
   }
  }
 }
 if ((label|0) == 11) {
  $$0 = $25;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  $$0 = 0;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 return (0)|0;
}
function _scope_new($mrb,$prev,$lv) {
 $mrb = $mrb|0;
 $prev = $prev|0;
 $lv = $lv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $n = 0, $p = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mrb;
 $2 = $prev;
 $3 = $lv;
 $4 = $1;
 $5 = (_mrb_pool_open($4)|0);
 $pool = $5;
 $6 = $pool;
 $7 = (_mrb_pool_alloc($6,252)|0);
 $p = $7;
 $8 = $p;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $0 = 0;
  $240 = $0;
  STACKTOP = sp;return ($240|0);
 }
 $10 = $p;
 _memcpy(($10|0),(74640|0),252)|0;
 $11 = $1;
 $12 = $p;
 HEAP32[$12>>2] = $11;
 $13 = $pool;
 $14 = $p;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $2;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = $p;
  $0 = $18;
  $240 = $0;
  STACKTOP = sp;return ($240|0);
 }
 $19 = $2;
 $20 = $p;
 $21 = ((($20)) + 164|0);
 HEAP32[$21>>2] = $19;
 $22 = $p;
 $23 = ((($22)) + 184|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 & -32768;
 $26 = $25 | 32767;
 HEAP16[$23>>1] = $26;
 $27 = $p;
 $28 = ((($27)) + 184|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 & 32767;
 HEAP16[$28>>1] = $30;
 $31 = $1;
 $32 = (_mrb_add_irep($31)|0);
 $33 = $p;
 $34 = ((($33)) + 216|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 $36 = $p;
 $37 = ((($36)) + 216|0);
 $38 = HEAP32[$37>>2]|0;
 _scope_add_irep($35,$38);
 $39 = $p;
 $40 = ((($39)) + 228|0);
 HEAP32[$40>>2] = 8;
 $41 = $1;
 $42 = $p;
 $43 = ((($42)) + 228|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44<<2;
 $46 = (_mrb_malloc($41,$45)|0);
 $47 = $p;
 $48 = ((($47)) + 216|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 20|0);
 HEAP32[$50>>2] = $46;
 $51 = $p;
 $52 = ((($51)) + 212|0);
 HEAP32[$52>>2] = 1024;
 $53 = $1;
 $54 = $p;
 $55 = ((($54)) + 212|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56<<2;
 $58 = (_mrb_malloc($53,$57)|0);
 $59 = $p;
 $60 = ((($59)) + 204|0);
 HEAP32[$60>>2] = $58;
 $61 = $p;
 $62 = ((($61)) + 204|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $p;
 $65 = ((($64)) + 216|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 8|0);
 HEAP32[$67>>2] = $63;
 $68 = $p;
 $69 = ((($68)) + 220|0);
 HEAP32[$69>>2] = 32;
 $70 = $1;
 $71 = $p;
 $72 = ((($71)) + 220|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73<<3;
 $75 = (_mrb_malloc($70,$74)|0);
 $76 = $p;
 $77 = ((($76)) + 216|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 12|0);
 HEAP32[$79>>2] = $75;
 $80 = $p;
 $81 = ((($80)) + 216|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 44|0);
 HEAP32[$83>>2] = 0;
 $84 = $p;
 $85 = ((($84)) + 224|0);
 HEAP32[$85>>2] = 256;
 $86 = $1;
 $87 = $p;
 $88 = ((($87)) + 224|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89<<2;
 $91 = (_mrb_malloc($86,$90)|0);
 $92 = $p;
 $93 = ((($92)) + 216|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 16|0);
 HEAP32[$95>>2] = $91;
 $96 = $p;
 $97 = ((($96)) + 216|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 48|0);
 HEAP32[$99>>2] = 0;
 $100 = $3;
 $101 = $p;
 $102 = ((($101)) + 168|0);
 HEAP32[$102>>2] = $100;
 $103 = $3;
 $104 = (_node_len($103)|0);
 $105 = (($104) + 1)|0;
 $106 = $p;
 $107 = ((($106)) + 172|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + ($105))|0;
 HEAP32[$107>>2] = $109;
 $110 = $p;
 $111 = ((($110)) + 172|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112&65535;
 $114 = $p;
 $115 = ((($114)) + 232|0);
 HEAP16[$115>>1] = $113;
 $116 = $3;
 $117 = ($116|0)!=(0|0);
 L9: do {
  if ($117) {
   $118 = $3;
   $n = $118;
   $i = 0;
   $119 = $1;
   $120 = $p;
   $121 = ((($120)) + 232|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122&65535;
   $124 = (($123) - 1)|0;
   $125 = $124<<3;
   $126 = (_mrb_malloc($119,$125)|0);
   $127 = $p;
   $128 = ((($127)) + 216|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ((($129)) + 24|0);
   HEAP32[$130>>2] = $126;
   $i = 0;
   $131 = $3;
   $n = $131;
   while(1) {
    $132 = $n;
    $133 = ($132|0)!=(0|0);
    if (!($133)) {
     break L9;
    }
    $134 = $n;
    $135 = HEAP32[$134>>2]|0;
    $136 = $135;
    $137 = $i;
    $138 = $p;
    $139 = ((($138)) + 216|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($140)) + 24|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($137<<3)|0);
    HEAP32[$143>>2] = $136;
    $144 = $n;
    $145 = HEAP32[$144>>2]|0;
    $146 = $145;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $p;
     $149 = $n;
     $150 = HEAP32[$149>>2]|0;
     $151 = $150;
     $152 = (_lv_idx($148,$151)|0);
     $153 = $152&65535;
     $154 = $i;
     $155 = $p;
     $156 = ((($155)) + 216|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($157)) + 24|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($159) + ($154<<3)|0);
     $161 = ((($160)) + 4|0);
     HEAP16[$161>>1] = $153;
    } else {
     $162 = $i;
     $163 = $p;
     $164 = ((($163)) + 216|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ((($165)) + 24|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + ($162<<3)|0);
     $169 = ((($168)) + 4|0);
     HEAP16[$169>>1] = 0;
    }
    $170 = $i;
    $171 = (($170) + 1)|0;
    $i = $171;
    $172 = $n;
    $173 = ((($172)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $n = $174;
   }
  }
 } while(0);
 $175 = $1;
 $176 = (_mrb_gc_arena_save($175)|0);
 $177 = $p;
 $178 = ((($177)) + 236|0);
 HEAP32[$178>>2] = $176;
 $179 = $2;
 $180 = ((($179)) + 196|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $p;
 $183 = ((($182)) + 196|0);
 HEAP32[$183>>2] = $181;
 $184 = $p;
 $185 = ((($184)) + 196|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)!=(0|0);
 if ($187) {
  $188 = $1;
  $189 = $p;
  $190 = ((($189)) + 212|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $191<<1;
  $193 = (_mrb_malloc($188,$192)|0);
  $194 = $p;
  $195 = ((($194)) + 208|0);
  HEAP32[$195>>2] = $193;
 }
 $196 = $2;
 $197 = ((($196)) + 200|0);
 $198 = HEAP16[$197>>1]|0;
 $199 = $p;
 $200 = ((($199)) + 200|0);
 HEAP16[$200>>1] = $198;
 $201 = $p;
 $202 = ((($201)) + 240|0);
 HEAP32[$202>>2] = 0;
 $203 = $p;
 $204 = ((($203)) + 196|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = $1;
  $208 = $p;
  $209 = ((($208)) + 216|0);
  $210 = HEAP32[$209>>2]|0;
  (_mrb_debug_info_alloc($207,$210)|0);
  $211 = $p;
  $212 = ((($211)) + 196|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = $p;
  $215 = ((($214)) + 216|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 28|0);
  HEAP32[$217>>2] = $213;
  $218 = $p;
  $219 = ((($218)) + 208|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $p;
  $222 = ((($221)) + 216|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ((($223)) + 32|0);
  HEAP32[$224>>2] = $220;
 } else {
  $225 = $p;
  $226 = ((($225)) + 216|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = ((($227)) + 36|0);
  HEAP32[$228>>2] = 0;
 }
 $229 = $2;
 $230 = ((($229)) + 248|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = $p;
 $233 = ((($232)) + 248|0);
 HEAP32[$233>>2] = $231;
 $234 = $2;
 $235 = ((($234)) + 244|0);
 $236 = HEAP16[$235>>1]|0;
 $237 = $p;
 $238 = ((($237)) + 244|0);
 HEAP16[$238>>1] = $236;
 $239 = $p;
 $0 = $239;
 $240 = $0;
 STACKTOP = sp;return ($240|0);
}
function _scope_add_irep($s,$irep) {
 $s = $s|0;
 $irep = $irep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $irep;
 $2 = $0;
 $3 = ((($2)) + 216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $1;
  $7 = $0;
  $8 = ((($7)) + 216|0);
  HEAP32[$8>>2] = $6;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 216|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = ((($14)) + 228|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 228|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20<<1;
  HEAP32[$19>>2] = $21;
  $22 = $0;
  $23 = $0;
  $24 = ((($23)) + 216|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  $29 = ((($28)) + 228|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<2;
  $32 = (_codegen_realloc($22,$27,$31)|0);
  $33 = $0;
  $34 = ((($33)) + 216|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 20|0);
  HEAP32[$36>>2] = $32;
 }
 $37 = $1;
 $38 = $0;
 $39 = ((($38)) + 216|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $0;
 $44 = ((($43)) + 216|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 20|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($42<<2)|0);
 HEAP32[$48>>2] = $37;
 $49 = $0;
 $50 = ((($49)) + 216|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$52>>2] = $54;
 STACKTOP = sp;return;
}
function _codegen_realloc($s,$p,$len) {
 $s = $s|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $p;
 $2 = $len;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $2;
 $7 = (_mrb_realloc_simple($4,$5,$6)|0);
 $1 = $7;
 $8 = $1;
 $9 = ($8|0)==(0|0);
 $10 = $2;
 $11 = ($10>>>0)>(0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 $12 = $0;
 _codegen_error($12,69267);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _codegen_error($s,$message) {
 $s = $s|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $message;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = $0;
  $5 = ((($4)) + 164|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = $0;
  if (!($7)) {
   break;
  }
  $9 = ((($8)) + 164|0);
  $10 = HEAP32[$9>>2]|0;
  $tmp = $10;
  $11 = $0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _mrb_pool_close($13);
  $14 = $tmp;
  $0 = $14;
 }
 $15 = ((($8)) + 196|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 200|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = HEAP32[637]|0;
   $24 = $0;
   $25 = ((($24)) + 196|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = ((($27)) + 200|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   $31 = $1;
   HEAP32[$vararg_buffer>>2] = $26;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $30;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $31;
   (_fprintf($23,69279,$vararg_buffer)|0);
   $34 = $0;
   $35 = ((($34)) + 8|0);
   _longjmp(($35|0),1);
   // unreachable;
  }
 }
 $32 = HEAP32[637]|0;
 $33 = $1;
 HEAP32[$vararg_buffer3>>2] = $33;
 (_fprintf($32,69304,$vararg_buffer3)|0);
 $34 = $0;
 $35 = ((($34)) + 8|0);
 _longjmp(($35|0),1);
 // unreachable;
}
function _node_len($tree) {
 $tree = $tree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tree;
 $n = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  $3 = $n;
  if (!($2)) {
   break;
  }
  $4 = (($3) + 1)|0;
  $n = $4;
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
 }
 STACKTOP = sp;return ($3|0);
}
function _lv_idx($s,$id) {
 $s = $s|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lv = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $id;
 $3 = $1;
 $4 = ((($3)) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $lv = $5;
 $n = 1;
 while(1) {
  $6 = $lv;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $lv;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  $11 = $2;
  $12 = ($10|0)==($11|0);
  $13 = $n;
  if ($12) {
   label = 4;
   break;
  }
  $14 = (($13) + 1)|0;
  $n = $14;
  $15 = $lv;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $lv = $17;
 }
 if ((label|0) == 4) {
  $0 = $13;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _codegen($s,$tree,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $val = $val|0;
 var $$byval_copy = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0;
 var $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0;
 var $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0;
 var $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0;
 var $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0;
 var $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0;
 var $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0;
 var $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0;
 var $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0;
 var $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0;
 var $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0;
 var $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0;
 var $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0;
 var $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0;
 var $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0;
 var $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0;
 var $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0;
 var $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0;
 var $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0;
 var $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0;
 var $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0;
 var $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0;
 var $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0;
 var $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0;
 var $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0;
 var $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0;
 var $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0;
 var $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0;
 var $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0;
 var $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0;
 var $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0;
 var $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0;
 var $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0;
 var $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0;
 var $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0;
 var $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0;
 var $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0;
 var $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0;
 var $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0;
 var $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0;
 var $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0;
 var $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0;
 var $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0.0, $2154 = 0;
 var $2155 = 0, $2156 = 0, $2157 = 0.0, $2158 = 0.0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0;
 var $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0;
 var $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0.0, $2206 = 0, $2207 = 0, $2208 = 0;
 var $2209 = 0.0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0;
 var $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0.0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0.0, $2237 = 0.0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0;
 var $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0;
 var $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0.0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0.0, $2272 = 0.0, $2273 = 0.0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0;
 var $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0;
 var $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0;
 var $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0;
 var $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0;
 var $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0;
 var $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0;
 var $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0;
 var $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0;
 var $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0;
 var $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0;
 var $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0;
 var $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0;
 var $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0;
 var $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0;
 var $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0;
 var $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0;
 var $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0;
 var $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0;
 var $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0;
 var $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0;
 var $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0;
 var $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0;
 var $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0;
 var $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0;
 var $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0;
 var $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0;
 var $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0;
 var $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0;
 var $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0;
 var $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0;
 var $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0;
 var $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0;
 var $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0;
 var $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0;
 var $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0;
 var $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0;
 var $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0;
 var $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0;
 var $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0;
 var $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0;
 var $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0;
 var $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0;
 var $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0;
 var $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0;
 var $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0;
 var $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0;
 var $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0;
 var $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0;
 var $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0;
 var $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0;
 var $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0;
 var $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0;
 var $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0;
 var $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0;
 var $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0;
 var $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0;
 var $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0;
 var $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0;
 var $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0;
 var $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0;
 var $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0;
 var $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0;
 var $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0;
 var $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0;
 var $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0;
 var $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0;
 var $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0;
 var $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $ai = 0, $ai60 = 0, $ai64 = 0, $ai67 = 0, $ai71 = 0, $ainfo = 0, $ainfo23 = 0, $argc = 0, $argc73 = 0, $args = 0;
 var $b = 0, $base = 0, $base46 = 0, $buf = 0, $c = 0, $co = 0, $co48 = 0, $e = 0, $epush = 0, $exc = 0, $exend = 0, $f = 0.0, $f40 = 0.0, $f43 = 0.0, $f50 = 0.0, $fix = 0, $fix$byval_copy = 0, $head = 0, $i = 0, $i47 = 0;
 var $idx = 0, $idx1 = 0, $idx18 = 0, $idx2 = 0, $idx28 = 0, $idx80 = 0, $idx81 = 0, $idx82 = 0, $idx84 = 0, $idx86 = 0, $len = 0, $len14 = 0, $len17 = 0, $len55 = 0, $len63 = 0, $lp = 0, $lp26 = 0, $lp6 = 0, $lp7 = 0, $lv = 0;
 var $lv22 = 0, $lv29 = 0, $mrb = 0, $msg = 0, $n = 0, $n13 = 0, $n15 = 0, $n2 = 0, $n20 = 0, $n24 = 0, $n27 = 0, $n3 = 0, $n4 = 0, $n57 = 0, $n58 = 0, $n59 = 0, $n70 = 0, $n77 = 0, $name = 0, $noexc = 0;
 var $noop = 0, $nt = 0, $num = 0, $off = 0, $off38 = 0, $off41 = 0, $off44 = 0, $off51 = 0, $off52 = 0, $off56 = 0, $off66 = 0, $off69 = 0, $off74 = 0, $onerr = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $overflow = 0;
 var $overflow49 = 0, $p = 0, $p1 = 0, $p2 = 0, $p276 = 0, $p3 = 0, $p37 = 0, $p39 = 0, $p42 = 0, $p45 = 0, $p54 = 0, $p62 = 0, $p75 = 0, $pos = 0, $pos1 = 0, $pos11 = 0, $pos13 = 0, $pos18 = 0, $pos19 = 0, $pos2 = 0;
 var $pos24 = 0, $pos29 = 0, $pos3 = 0, $pos5 = 0, $post = 0, $recv = 0, $rhs = 0, $rn = 0, $s2 = 0, $s221 = 0, $sendv = 0, $sendv25 = 0, $str = 0, $str$byval_copy = 0, $str36 = 0, $str36$byval_copy = 0, $str36$byval_copy10 = 0, $str36$byval_copy11 = 0, $sym = 0, $sym12 = 0;
 var $sym16 = 0, $sym30 = 0, $sym31 = 0, $sym32 = 0, $sym33 = 0, $sym34 = 0, $sym35 = 0, $sym53 = 0, $sym61 = 0, $sym65 = 0, $sym68 = 0, $sym72 = 0, $sym78 = 0, $sym83 = 0, $sym85 = 0, $symbol = 0, $t = 0, $t79 = 0, $tmp = 0, $tmp10 = 0;
 var $undef = 0, $up = 0, $update = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy24 = sp + 920|0;
 $$byval_copy23 = sp + 912|0;
 $$byval_copy22 = sp + 904|0;
 $$byval_copy21 = sp + 896|0;
 $$byval_copy20 = sp + 888|0;
 $$byval_copy19 = sp + 880|0;
 $$byval_copy18 = sp + 872|0;
 $$byval_copy17 = sp + 864|0;
 $$byval_copy16 = sp + 856|0;
 $$byval_copy15 = sp + 848|0;
 $$byval_copy14 = sp + 840|0;
 $$byval_copy13 = sp + 832|0;
 $$byval_copy12 = sp + 824|0;
 $str36$byval_copy11 = sp + 816|0;
 $$byval_copy = sp + 808|0;
 $str36$byval_copy10 = sp + 800|0;
 $fix$byval_copy = sp + 792|0;
 $str36$byval_copy = sp + 784|0;
 $str$byval_copy = sp + 776|0;
 $len17 = sp + 588|0;
 $buf = sp + 930|0;
 $str = sp + 480|0;
 $3 = sp + 464|0;
 $fix = sp + 448|0;
 $str36 = sp + 440|0;
 $4 = sp + 432|0;
 $5 = sp + 424|0;
 $6 = sp + 416|0;
 $overflow = sp + 929|0;
 $7 = sp + 384|0;
 $8 = sp + 368|0;
 $9 = sp + 344|0;
 $10 = sp + 320|0;
 $overflow49 = sp + 928|0;
 $11 = sp + 288|0;
 $12 = sp + 272|0;
 $13 = sp + 240|0;
 $14 = sp + 192|0;
 $15 = sp + 160|0;
 $16 = sp + 144|0;
 $17 = sp + 136|0;
 $18 = sp + 104|0;
 $19 = sp + 88|0;
 $0 = $s;
 $1 = $tree;
 $2 = $val;
 $20 = $1;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = ((($22)) + 216|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $0;
  $27 = ((($26)) + 244|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $1;
  $31 = ((($30)) + 10|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($29|0)!=($33|0);
  if ($34) {
   $35 = $0;
   $36 = ((($35)) + 248|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $0;
   $39 = ((($38)) + 244|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = (_mrb_parser_get_filename($37,$40)|0);
   $42 = $0;
   $43 = ((($42)) + 216|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 28|0);
   HEAP32[$45>>2] = $41;
   $46 = $0;
   $47 = HEAP32[$46>>2]|0;
   $48 = $0;
   $49 = ((($48)) + 216|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $0;
   $52 = ((($51)) + 240|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $0;
   $55 = ((($54)) + 176|0);
   $56 = HEAP32[$55>>2]|0;
   (_mrb_debug_info_append_file($47,$50,$53,$56)|0);
   $57 = $0;
   $58 = ((($57)) + 176|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $0;
   $61 = ((($60)) + 240|0);
   HEAP32[$61>>2] = $59;
   $62 = $1;
   $63 = ((($62)) + 10|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $0;
   $66 = ((($65)) + 244|0);
   HEAP16[$66>>1] = $64;
   $67 = $0;
   $68 = ((($67)) + 248|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $1;
   $71 = ((($70)) + 10|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = (_mrb_parser_get_filename($69,$72)|0);
   $74 = $0;
   $75 = ((($74)) + 196|0);
   HEAP32[$75>>2] = $73;
  }
 }
 $76 = $1;
 $77 = HEAP32[$76>>2]|0;
 $78 = $77;
 $nt = $78;
 $79 = $1;
 $80 = ((($79)) + 8|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $0;
 $83 = ((($82)) + 200|0);
 HEAP16[$83>>1] = $81;
 $84 = $1;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $1 = $86;
 $87 = $nt;
 do {
  switch ($87|0) {
  case 17:  {
   $88 = $2;
   $89 = ($88|0)==(0);
   $90 = $1;
   $91 = ($90|0)!=(0|0);
   $or$cond = $89 | $91;
   if (!($or$cond)) {
    $92 = $0;
    $93 = $0;
    $94 = ((($93)) + 172|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $95 & 511;
    $97 = $96 << 23;
    $98 = 5 | $97;
    (_genop($92,$98)|0);
    $99 = $0;
    _push_($99);
   }
   while(1) {
    $100 = $1;
    $101 = ($100|0)!=(0|0);
    if (!($101)) {
     break;
    }
    $102 = $0;
    $103 = $1;
    $104 = HEAP32[$103>>2]|0;
    $105 = $1;
    $106 = ((($105)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)!=(0|0);
    $109 = $2;
    $110 = $108 ? 0 : $109;
    _codegen($102,$104,$110);
    $111 = $1;
    $112 = ((($111)) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $1 = $113;
   }
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $114 = $0;
   $115 = (_genop($114,26)|0);
   $onerr = $115;
   $116 = $0;
   $117 = (_loop_push($116,3)|0);
   $lp = $117;
   $118 = $onerr;
   $119 = $lp;
   $120 = ((($119)) + 4|0);
   HEAP32[$120>>2] = $118;
   $121 = $1;
   $122 = HEAP32[$121>>2]|0;
   $123 = ($122|0)!=(0|0);
   if ($123) {
    $124 = $0;
    $125 = $1;
    $126 = HEAP32[$125>>2]|0;
    $127 = $2;
    _codegen($124,$126,$127);
    $128 = $2;
    $129 = ($128|0)!=(0);
    if ($129) {
     $130 = $0;
     $131 = ((($130)) + 172|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + -1)|0;
     HEAP32[$131>>2] = $133;
    }
   }
   $134 = $lp;
   HEAP32[$134>>2] = 4;
   $135 = $0;
   $136 = (_genop($135,23)|0);
   $noexc = $136;
   $137 = $0;
   $138 = $onerr;
   _dispatch($137,$138);
   $139 = $1;
   $140 = ((($139)) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   $1 = $141;
   $exend = 0;
   $pos1 = 0;
   $142 = $1;
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)!=(0|0);
   if ($144) {
    $145 = $1;
    $146 = HEAP32[$145>>2]|0;
    $n2 = $146;
    $147 = $0;
    $148 = ((($147)) + 172|0);
    $149 = HEAP32[$148>>2]|0;
    $exc = $149;
    $150 = $0;
    $151 = $exc;
    $152 = $151 & 511;
    $153 = $152 << 23;
    $154 = 27 | $153;
    (_genop($150,$154)|0);
    $155 = $0;
    _push_($155);
    while(1) {
     $156 = $n2;
     $157 = ($156|0)!=(0|0);
     if (!($157)) {
      break;
     }
     $158 = $n2;
     $159 = HEAP32[$158>>2]|0;
     $n3 = $159;
     $160 = $n3;
     $161 = HEAP32[$160>>2]|0;
     $n4 = $161;
     $162 = $pos1;
     $163 = ($162|0)!=(0);
     if ($163) {
      $164 = $0;
      $165 = $pos1;
      _dispatch($164,$165);
     }
     $pos2 = 0;
     while(1) {
      $166 = $n4;
      $167 = ($166|0)!=(0|0);
      $168 = $0;
      if ($167) {
       $169 = $n4;
       $170 = HEAP32[$169>>2]|0;
       _codegen($168,$170,1);
      } else {
       $171 = $0;
       $172 = ((($171)) + 172|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = $173 & 511;
       $175 = $174 << 23;
       $176 = 17 | $175;
       $177 = $0;
       $178 = $0;
       $179 = HEAP32[$178>>2]|0;
       $180 = (_mrb_intern_static($179,69398,13)|0);
       $181 = (_new_msym($177,$180)|0);
       $182 = $181 & 65535;
       $183 = $182 << 7;
       $184 = $176 | $183;
       (_genop($168,$184)|0);
       $185 = $0;
       _push_($185);
      }
      $186 = $0;
      $187 = $0;
      $188 = ((($187)) + 172|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $189 & 511;
      $191 = $190 << 23;
      $192 = 1 | $191;
      $193 = $exc;
      $194 = $193 & 511;
      $195 = $194 << 14;
      $196 = $192 | $195;
      (_genop($186,$196)|0);
      $197 = $0;
      $198 = ((($197)) + 172|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = (($199) + -1)|0;
      HEAP32[$198>>2] = $200;
      $201 = $n4;
      $202 = ($201|0)!=(0|0);
      if ($202) {
       $203 = $n4;
       $204 = HEAP32[$203>>2]|0;
       $205 = ($204|0)!=(0|0);
       if ($205) {
        $206 = $n4;
        $207 = HEAP32[$206>>2]|0;
        $208 = HEAP32[$207>>2]|0;
        $209 = $208;
        $210 = ($209|0)==(66);
        if ($210) {
         $211 = $0;
         $212 = $0;
         $213 = ((($212)) + 172|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = $214 & 511;
         $216 = $215 << 23;
         $217 = 32 | $216;
         $218 = $0;
         $219 = $0;
         $220 = HEAP32[$219>>2]|0;
         $221 = (_mrb_intern_static($220,69439,10)|0);
         $222 = (_new_msym($218,$221)|0);
         $223 = $222 & 511;
         $224 = $223 << 14;
         $225 = $217 | $224;
         $226 = $225 | 128;
         (_genop($211,$226)|0);
        } else {
         label = 26;
        }
       } else {
        label = 26;
       }
      } else {
       label = 26;
      }
      if ((label|0) == 26) {
       label = 0;
       $227 = $0;
       $228 = $0;
       $229 = ((($228)) + 172|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = $230 & 511;
       $232 = $231 << 23;
       $233 = 32 | $232;
       $234 = $0;
       $235 = $0;
       $236 = HEAP32[$235>>2]|0;
       $237 = (_mrb_intern_static($236,69450,3)|0);
       $238 = (_new_msym($234,$237)|0);
       $239 = $238 & 511;
       $240 = $239 << 14;
       $241 = $233 | $240;
       $242 = $241 | 128;
       (_genop($227,$242)|0);
      }
      $243 = $0;
      $244 = $0;
      $245 = ((($244)) + 172|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = $246 & 511;
      $248 = $247 << 23;
      $249 = 24 | $248;
      $250 = $pos2;
      $251 = (($250) + 32767)|0;
      $252 = $251 & 65535;
      $253 = $252 << 7;
      $254 = $249 | $253;
      $255 = (_genop($243,$254)|0);
      $tmp = $255;
      $256 = $tmp;
      $pos2 = $256;
      $257 = $n4;
      $258 = ($257|0)!=(0|0);
      if ($258) {
       $259 = $n4;
       $260 = ((($259)) + 4|0);
       $261 = HEAP32[$260>>2]|0;
       $n4 = $261;
      }
      $262 = $n4;
      $263 = ($262|0)!=(0|0);
      if (!($263)) {
       break;
      }
     }
     $264 = $0;
     $265 = (_genop($264,4194199)|0);
     $pos1 = $265;
     $266 = $0;
     $267 = $pos2;
     _dispatch_linked($266,$267);
     $268 = $0;
     $269 = ((($268)) + 172|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = (($270) + -1)|0;
     HEAP32[$269>>2] = $271;
     $272 = $n3;
     $273 = ((($272)) + 4|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = HEAP32[$274>>2]|0;
     $276 = ($275|0)!=(0|0);
     if ($276) {
      $277 = $0;
      $278 = $n3;
      $279 = ((($278)) + 4|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = HEAP32[$280>>2]|0;
      $282 = $exc;
      _gen_assignment($277,$281,$282,0);
     }
     $283 = $n3;
     $284 = ((($283)) + 4|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ((($285)) + 4|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)!=(0|0);
     if ($289) {
      $290 = $0;
      $291 = $n3;
      $292 = ((($291)) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = ((($293)) + 4|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = HEAP32[$295>>2]|0;
      $297 = $2;
      _codegen($290,$296,$297);
      $298 = $2;
      $299 = ($298|0)!=(0);
      if ($299) {
       $300 = $0;
       $301 = ((($300)) + 172|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = (($302) + -1)|0;
       HEAP32[$301>>2] = $303;
      }
     }
     $304 = $0;
     $305 = $exend;
     $306 = (($305) + 32767)|0;
     $307 = $306 & 65535;
     $308 = $307 << 7;
     $309 = 23 | $308;
     $310 = (_genop($304,$309)|0);
     $tmp = $310;
     $311 = $tmp;
     $exend = $311;
     $312 = $n2;
     $313 = ((($312)) + 4|0);
     $314 = HEAP32[$313>>2]|0;
     $n2 = $314;
     $315 = $0;
     _push_($315);
    }
    $316 = $pos1;
    $317 = ($316|0)!=(0);
    if ($317) {
     $318 = $0;
     $319 = $pos1;
     _dispatch($318,$319);
     $320 = $0;
     $321 = $exc;
     $322 = $321 & 511;
     $323 = $322 << 23;
     $324 = 29 | $323;
     (_genop($320,$324)|0);
    }
   }
   $325 = $0;
   $326 = ((($325)) + 172|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + -1)|0;
   HEAP32[$326>>2] = $328;
   $329 = $1;
   $330 = ((($329)) + 4|0);
   $331 = HEAP32[$330>>2]|0;
   $1 = $331;
   $332 = $0;
   $333 = $noexc;
   _dispatch($332,$333);
   $334 = $0;
   (_genop($334,8388636)|0);
   $335 = $1;
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)!=(0|0);
   if ($337) {
    $338 = $0;
    $339 = $1;
    $340 = HEAP32[$339>>2]|0;
    $341 = $2;
    _codegen($338,$340,$341);
   } else {
    $342 = $2;
    $343 = ($342|0)!=(0);
    if ($343) {
     $344 = $0;
     _push_($344);
    }
   }
   $345 = $0;
   $346 = $exend;
   _dispatch_linked($345,$346);
   $347 = $0;
   _loop_pop($347,0);
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $348 = $0;
   $349 = ((($348)) + 176|0);
   $350 = HEAP32[$349>>2]|0;
   $epush = $350;
   $351 = $0;
   (_genop($351,30)|0);
   $352 = $0;
   $353 = ((($352)) + 192|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($354) + 1)|0;
   HEAP32[$353>>2] = $355;
   $356 = $0;
   $357 = $1;
   $358 = HEAP32[$357>>2]|0;
   $359 = $2;
   _codegen($356,$358,$359);
   $360 = $0;
   $361 = $1;
   $362 = ((($361)) + 4|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = (_scope_body($360,$363,0)|0);
   $idx = $364;
   $365 = $idx;
   $366 = $365 & 65535;
   $367 = $366 << 7;
   $368 = 30 | $367;
   $369 = $epush;
   $370 = $0;
   $371 = ((($370)) + 204|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (($372) + ($369<<2)|0);
   HEAP32[$373>>2] = $368;
   $374 = $0;
   $375 = ((($374)) + 192|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = (($376) + -1)|0;
   HEAP32[$375>>2] = $377;
   $378 = $0;
   (_genop_peep($378,8388639,0)|0);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $379 = $0;
   $380 = $1;
   $381 = (_lambda_body($379,$380,1)|0);
   $idx1 = $381;
   $382 = $0;
   $383 = $0;
   $384 = ((($383)) + 172|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = $385 & 511;
   $387 = $386 << 23;
   $388 = 64 | $387;
   $389 = $idx1;
   $390 = $389 & 16383;
   $391 = $390 << 9;
   $392 = $391 | 384;
   $393 = $388 | $392;
   (_genop($382,$393)|0);
   $394 = $0;
   _push_($394);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $395 = $0;
   $396 = $1;
   $397 = (_lambda_body($395,$396,1)|0);
   $idx2 = $397;
   $398 = $0;
   $399 = $0;
   $400 = ((($399)) + 172|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = $401 & 511;
   $403 = $402 << 23;
   $404 = 64 | $403;
   $405 = $idx2;
   $406 = $405 & 16383;
   $407 = $406 << 9;
   $408 = $407 | 256;
   $409 = $404 | $408;
   (_genop($398,$409)|0);
   $410 = $0;
   _push_($410);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $411 = $1;
   $412 = ((($411)) + 4|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = ((($413)) + 4|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = HEAP32[$415>>2]|0;
   $e = $416;
   $417 = $1;
   $418 = HEAP32[$417>>2]|0;
   $419 = HEAP32[$418>>2]|0;
   $420 = $419;
   switch ($420|0) {
   case 55: case 50: case 87:  {
    $421 = $0;
    $422 = $1;
    $423 = ((($422)) + 4|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = HEAP32[$424>>2]|0;
    $426 = $2;
    _codegen($421,$425,$426);
    STACKTOP = sp;return;
    break;
   }
   case 86: case 88:  {
    $427 = $0;
    $428 = $e;
    $429 = $2;
    _codegen($427,$428,$429);
    STACKTOP = sp;return;
    break;
   }
   default: {
    $430 = $0;
    $431 = $1;
    $432 = HEAP32[$431>>2]|0;
    _codegen($430,$432,1);
    $433 = $0;
    $434 = ((($433)) + 172|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = (($435) + -1)|0;
    HEAP32[$434>>2] = $436;
    $437 = $0;
    $438 = $0;
    $439 = ((($438)) + 172|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = $440 & 511;
    $442 = $441 << 23;
    $443 = 25 | $442;
    $444 = $443 | 4194176;
    $445 = (_genop_peep($437,$444,0)|0);
    $pos13 = $445;
    $446 = $0;
    $447 = $1;
    $448 = ((($447)) + 4|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = HEAP32[$449>>2]|0;
    $451 = $2;
    _codegen($446,$450,$451);
    $452 = $2;
    $453 = ($452|0)!=(0);
    if ($453) {
     $454 = $1;
     $455 = ((($454)) + 4|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = HEAP32[$456>>2]|0;
     $458 = ($457|0)!=(0|0);
     if (!($458)) {
      $459 = $0;
      $460 = $0;
      $461 = ((($460)) + 172|0);
      $462 = HEAP32[$461>>2]|0;
      $463 = $462 & 511;
      $464 = $463 << 23;
      $465 = 5 | $464;
      (_genop($459,$465)|0);
      $466 = $0;
      _push_($466);
     }
    }
    $467 = $e;
    $468 = ($467|0)!=(0|0);
    $469 = $2;
    $470 = ($469|0)!=(0);
    if ($468) {
     if ($470) {
      $471 = $0;
      $472 = ((($471)) + 172|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = (($473) + -1)|0;
      HEAP32[$472>>2] = $474;
     }
     $475 = $0;
     $476 = (_genop($475,4194199)|0);
     $pos24 = $476;
     $477 = $0;
     $478 = $pos13;
     _dispatch($477,$478);
     $479 = $0;
     $480 = $e;
     $481 = $2;
     _codegen($479,$480,$481);
     $482 = $0;
     $483 = $pos24;
     _dispatch($482,$483);
     STACKTOP = sp;return;
    }
    $484 = $0;
    if ($470) {
     $485 = ((($484)) + 172|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = (($486) + -1)|0;
     HEAP32[$485>>2] = $487;
     $488 = $0;
     $489 = (_genop($488,4194199)|0);
     $pos24 = $489;
     $490 = $0;
     $491 = $pos13;
     _dispatch($490,$491);
     $492 = $0;
     $493 = $0;
     $494 = ((($493)) + 172|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = $495 & 511;
     $497 = $496 << 23;
     $498 = 5 | $497;
     (_genop($492,$498)|0);
     $499 = $0;
     $500 = $pos24;
     _dispatch($499,$500);
     $501 = $0;
     _push_($501);
     STACKTOP = sp;return;
    } else {
     $502 = $pos13;
     _dispatch($484,$502);
     STACKTOP = sp;return;
    }
   }
   }
   break;
  }
  case 20:  {
   $503 = $0;
   $504 = $1;
   $505 = HEAP32[$504>>2]|0;
   _codegen($503,$505,1);
   $506 = $0;
   $507 = ((($506)) + 172|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = (($508) + -1)|0;
   HEAP32[$507>>2] = $509;
   $510 = $0;
   $511 = $0;
   $512 = ((($511)) + 172|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = $513 & 511;
   $515 = $514 << 23;
   $516 = 25 | $515;
   $517 = $516 | 4194176;
   $518 = (_genop($510,$517)|0);
   $pos = $518;
   $519 = $0;
   $520 = $1;
   $521 = ((($520)) + 4|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = $2;
   _codegen($519,$522,$523);
   $524 = $0;
   $525 = $pos;
   _dispatch($524,$525);
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $526 = $0;
   $527 = $1;
   $528 = HEAP32[$527>>2]|0;
   _codegen($526,$528,1);
   $529 = $0;
   $530 = ((($529)) + 172|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = (($531) + -1)|0;
   HEAP32[$530>>2] = $532;
   $533 = $0;
   $534 = $0;
   $535 = ((($534)) + 172|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = $536 & 511;
   $538 = $537 << 23;
   $539 = 24 | $538;
   $540 = $539 | 4194176;
   $541 = (_genop($533,$540)|0);
   $pos5 = $541;
   $542 = $0;
   $543 = $1;
   $544 = ((($543)) + 4|0);
   $545 = HEAP32[$544>>2]|0;
   $546 = $2;
   _codegen($542,$545,$546);
   $547 = $0;
   $548 = $pos5;
   _dispatch($547,$548);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $549 = $0;
   $550 = (_loop_push($549,0)|0);
   $lp6 = $550;
   $551 = $0;
   $552 = (_genop($551,4194199)|0);
   $553 = $lp6;
   $554 = ((($553)) + 4|0);
   HEAP32[$554>>2] = $552;
   $555 = $0;
   $556 = (_new_label($555)|0);
   $557 = $lp6;
   $558 = ((($557)) + 8|0);
   HEAP32[$558>>2] = $556;
   $559 = $0;
   $560 = $1;
   $561 = ((($560)) + 4|0);
   $562 = HEAP32[$561>>2]|0;
   _codegen($559,$562,0);
   $563 = $0;
   $564 = $lp6;
   $565 = ((($564)) + 4|0);
   $566 = HEAP32[$565>>2]|0;
   _dispatch($563,$566);
   $567 = $0;
   $568 = $1;
   $569 = HEAP32[$568>>2]|0;
   _codegen($567,$569,1);
   $570 = $0;
   $571 = ((($570)) + 172|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = (($572) + -1)|0;
   HEAP32[$571>>2] = $573;
   $574 = $0;
   $575 = $0;
   $576 = ((($575)) + 172|0);
   $577 = HEAP32[$576>>2]|0;
   $578 = $577 & 511;
   $579 = $578 << 23;
   $580 = 24 | $579;
   $581 = $lp6;
   $582 = ((($581)) + 8|0);
   $583 = HEAP32[$582>>2]|0;
   $584 = $0;
   $585 = ((($584)) + 176|0);
   $586 = HEAP32[$585>>2]|0;
   $587 = (($583) - ($586))|0;
   $588 = (($587) + 32767)|0;
   $589 = $588 & 65535;
   $590 = $589 << 7;
   $591 = $580 | $590;
   (_genop($574,$591)|0);
   $592 = $0;
   $593 = $2;
   _loop_pop($592,$593);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $594 = $0;
   $595 = (_loop_push($594,0)|0);
   $lp7 = $595;
   $596 = $0;
   $597 = (_genop($596,4194199)|0);
   $598 = $lp7;
   $599 = ((($598)) + 4|0);
   HEAP32[$599>>2] = $597;
   $600 = $0;
   $601 = (_new_label($600)|0);
   $602 = $lp7;
   $603 = ((($602)) + 8|0);
   HEAP32[$603>>2] = $601;
   $604 = $0;
   $605 = $1;
   $606 = ((($605)) + 4|0);
   $607 = HEAP32[$606>>2]|0;
   _codegen($604,$607,0);
   $608 = $0;
   $609 = $lp7;
   $610 = ((($609)) + 4|0);
   $611 = HEAP32[$610>>2]|0;
   _dispatch($608,$611);
   $612 = $0;
   $613 = $1;
   $614 = HEAP32[$613>>2]|0;
   _codegen($612,$614,1);
   $615 = $0;
   $616 = ((($615)) + 172|0);
   $617 = HEAP32[$616>>2]|0;
   $618 = (($617) + -1)|0;
   HEAP32[$616>>2] = $618;
   $619 = $0;
   $620 = $0;
   $621 = ((($620)) + 172|0);
   $622 = HEAP32[$621>>2]|0;
   $623 = $622 & 511;
   $624 = $623 << 23;
   $625 = 25 | $624;
   $626 = $lp7;
   $627 = ((($626)) + 8|0);
   $628 = HEAP32[$627>>2]|0;
   $629 = $0;
   $630 = ((($629)) + 176|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = (($628) - ($631))|0;
   $633 = (($632) + 32767)|0;
   $634 = $633 & 65535;
   $635 = $634 << 7;
   $636 = $625 | $635;
   (_genop($619,$636)|0);
   $637 = $0;
   $638 = $2;
   _loop_pop($637,$638);
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $639 = $0;
   $640 = $1;
   _for_body($639,$640);
   $641 = $2;
   $642 = ($641|0)!=(0);
   if (!($642)) {
    STACKTOP = sp;return;
   }
   $643 = $0;
   _push_($643);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $head = 0;
   $pos3 = 0;
   $644 = $1;
   $645 = HEAP32[$644>>2]|0;
   $646 = ($645|0)!=(0|0);
   if ($646) {
    $647 = $0;
    $648 = ((($647)) + 172|0);
    $649 = HEAP32[$648>>2]|0;
    $head = $649;
    $650 = $0;
    $651 = $1;
    $652 = HEAP32[$651>>2]|0;
    _codegen($650,$652,1);
   }
   $653 = $1;
   $654 = ((($653)) + 4|0);
   $655 = HEAP32[$654>>2]|0;
   $1 = $655;
   while(1) {
    $656 = $1;
    $657 = ($656|0)!=(0|0);
    if (!($657)) {
     break;
    }
    $658 = $1;
    $659 = HEAP32[$658>>2]|0;
    $660 = HEAP32[$659>>2]|0;
    $n = $660;
    $pos29 = 0;
    $pos18 = 0;
    while(1) {
     $661 = $n;
     $662 = ($661|0)!=(0|0);
     if (!($662)) {
      break;
     }
     $663 = $0;
     $664 = $n;
     $665 = HEAP32[$664>>2]|0;
     _codegen($663,$665,1);
     $666 = $head;
     $667 = ($666|0)!=(0);
     $668 = $0;
     do {
      if ($667) {
       $669 = $0;
       $670 = ((($669)) + 172|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = $671 & 511;
       $673 = $672 << 23;
       $674 = 1 | $673;
       $675 = $head;
       $676 = $675 & 511;
       $677 = $676 << 14;
       $678 = $674 | $677;
       (_genop($668,$678)|0);
       $679 = $0;
       $680 = ((($679)) + 172|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = (($681) + -1)|0;
       HEAP32[$680>>2] = $682;
       $683 = $n;
       $684 = HEAP32[$683>>2]|0;
       $685 = HEAP32[$684>>2]|0;
       $686 = $685;
       $687 = ($686|0)==(66);
       $688 = $0;
       $689 = $0;
       $690 = ((($689)) + 172|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = $691 & 511;
       $693 = $692 << 23;
       $694 = 32 | $693;
       $695 = $0;
       $696 = $0;
       $697 = HEAP32[$696>>2]|0;
       if ($687) {
        $698 = (_mrb_intern_static($697,69439,10)|0);
        $699 = (_new_msym($695,$698)|0);
        $700 = $699 & 511;
        $701 = $700 << 14;
        $702 = $694 | $701;
        $703 = $702 | 128;
        (_genop($688,$703)|0);
        break;
       } else {
        $704 = (_mrb_intern_static($697,69450,3)|0);
        $705 = (_new_msym($695,$704)|0);
        $706 = $705 & 511;
        $707 = $706 << 14;
        $708 = $694 | $707;
        $709 = $708 | 128;
        (_genop($688,$709)|0);
        break;
       }
      } else {
       $710 = ((($668)) + 172|0);
       $711 = HEAP32[$710>>2]|0;
       $712 = (($711) + -1)|0;
       HEAP32[$710>>2] = $712;
      }
     } while(0);
     $713 = $0;
     $714 = $0;
     $715 = ((($714)) + 172|0);
     $716 = HEAP32[$715>>2]|0;
     $717 = $716 & 511;
     $718 = $717 << 23;
     $719 = 24 | $718;
     $720 = $pos29;
     $721 = (($720) + 32767)|0;
     $722 = $721 & 65535;
     $723 = $722 << 7;
     $724 = $719 | $723;
     $725 = (_genop($713,$724)|0);
     $tmp10 = $725;
     $726 = $tmp10;
     $pos29 = $726;
     $727 = $n;
     $728 = ((($727)) + 4|0);
     $729 = HEAP32[$728>>2]|0;
     $n = $729;
    }
    $730 = $1;
    $731 = HEAP32[$730>>2]|0;
    $732 = HEAP32[$731>>2]|0;
    $733 = ($732|0)!=(0|0);
    if ($733) {
     $734 = $0;
     $735 = (_genop($734,4194199)|0);
     $pos18 = $735;
     $736 = $0;
     $737 = $pos29;
     _dispatch_linked($736,$737);
    }
    $738 = $0;
    $739 = $1;
    $740 = HEAP32[$739>>2]|0;
    $741 = ((($740)) + 4|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = $2;
    _codegen($738,$742,$743);
    $744 = $2;
    $745 = ($744|0)!=(0);
    if ($745) {
     $746 = $0;
     $747 = ((($746)) + 172|0);
     $748 = HEAP32[$747>>2]|0;
     $749 = (($748) + -1)|0;
     HEAP32[$747>>2] = $749;
    }
    $750 = $0;
    $751 = $pos3;
    $752 = (($751) + 32767)|0;
    $753 = $752 & 65535;
    $754 = $753 << 7;
    $755 = 23 | $754;
    $756 = (_genop($750,$755)|0);
    $tmp10 = $756;
    $757 = $tmp10;
    $pos3 = $757;
    $758 = $pos18;
    $759 = ($758|0)!=(0);
    if ($759) {
     $760 = $0;
     $761 = $pos18;
     _dispatch($760,$761);
    }
    $762 = $1;
    $763 = ((($762)) + 4|0);
    $764 = HEAP32[$763>>2]|0;
    $1 = $764;
   }
   $765 = $2;
   $766 = ($765|0)!=(0);
   if ($766) {
    $767 = $0;
    $768 = ((($767)) + 172|0);
    $769 = HEAP32[$768>>2]|0;
    $pos11 = $769;
    $770 = $0;
    $771 = $0;
    $772 = ((($771)) + 172|0);
    $773 = HEAP32[$772>>2]|0;
    $774 = $773 & 511;
    $775 = $774 << 23;
    $776 = 5 | $775;
    (_genop($770,$776)|0);
    $777 = $pos3;
    $778 = ($777|0)!=(0);
    if ($778) {
     $779 = $0;
     $780 = $pos3;
     _dispatch_linked($779,$780);
    }
    $781 = $head;
    $782 = ($781|0)!=(0);
    if ($782) {
     $783 = $0;
     $784 = ((($783)) + 172|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = (($785) + -1)|0;
     HEAP32[$784>>2] = $786;
    }
    $787 = $0;
    $788 = $0;
    $789 = ((($788)) + 172|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = $790 & 511;
    $792 = $791 << 23;
    $793 = 1 | $792;
    $794 = $pos11;
    $795 = $794 & 511;
    $796 = $795 << 14;
    $797 = $793 | $796;
    (_genop($787,$797)|0);
    $798 = $0;
    _push_($798);
    STACKTOP = sp;return;
   } else {
    $799 = $pos3;
    $800 = ($799|0)!=(0);
    if ($800) {
     $801 = $0;
     $802 = $pos3;
     _dispatch_linked($801,$802);
    }
    $803 = $head;
    $804 = ($803|0)!=(0);
    if (!($804)) {
     STACKTOP = sp;return;
    }
    $805 = $0;
    $806 = ((($805)) + 172|0);
    $807 = HEAP32[$806>>2]|0;
    $808 = (($807) + -1)|0;
    HEAP32[$806>>2] = $808;
    STACKTOP = sp;return;
   }
   break;
  }
  case 3:  {
   $809 = $0;
   $810 = $1;
   (_scope_body($809,$810,0)|0);
   STACKTOP = sp;return;
   break;
  }
  case 29: case 30:  {
   $811 = $0;
   $812 = $1;
   $813 = $2;
   _gen_call($811,$812,0,0,$813);
   STACKTOP = sp;return;
   break;
  }
  case 80:  {
   $814 = $0;
   $815 = $1;
   $816 = HEAP32[$815>>2]|0;
   $817 = $2;
   _codegen($814,$816,$817);
   $818 = $0;
   $819 = $1;
   $820 = ((($819)) + 4|0);
   $821 = HEAP32[$820>>2]|0;
   $822 = $2;
   _codegen($818,$821,$822);
   $823 = $2;
   $824 = ($823|0)!=(0);
   if (!($824)) {
    STACKTOP = sp;return;
   }
   $825 = $0;
   $826 = ((($825)) + 172|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = (($827) + -1)|0;
   HEAP32[$826>>2] = $828;
   $829 = $0;
   $830 = ((($829)) + 172|0);
   $831 = HEAP32[$830>>2]|0;
   $832 = (($831) + -1)|0;
   HEAP32[$830>>2] = $832;
   $833 = $0;
   $834 = $0;
   $835 = ((($834)) + 172|0);
   $836 = HEAP32[$835>>2]|0;
   $837 = $836 & 511;
   $838 = $837 << 23;
   $839 = 65 | $838;
   $840 = $0;
   $841 = ((($840)) + 172|0);
   $842 = HEAP32[$841>>2]|0;
   $843 = $842 & 511;
   $844 = $843 << 14;
   $845 = $839 | $844;
   (_genop($833,$845)|0);
   $846 = $0;
   _push_($846);
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   $847 = $0;
   $848 = $1;
   $849 = HEAP32[$848>>2]|0;
   $850 = $2;
   _codegen($847,$849,$850);
   $851 = $0;
   $852 = $1;
   $853 = ((($852)) + 4|0);
   $854 = HEAP32[$853>>2]|0;
   $855 = $2;
   _codegen($851,$854,$855);
   $856 = $2;
   $857 = ($856|0)!=(0);
   if (!($857)) {
    STACKTOP = sp;return;
   }
   $858 = $0;
   $859 = ((($858)) + 172|0);
   $860 = HEAP32[$859>>2]|0;
   $861 = (($860) + -1)|0;
   HEAP32[$859>>2] = $861;
   $862 = $0;
   $863 = ((($862)) + 172|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = (($864) + -1)|0;
   HEAP32[$863>>2] = $865;
   $866 = $0;
   $867 = $0;
   $868 = ((($867)) + 172|0);
   $869 = HEAP32[$868>>2]|0;
   $870 = $869 & 511;
   $871 = $870 << 23;
   $872 = 65 | $871;
   $873 = $0;
   $874 = ((($873)) + 172|0);
   $875 = HEAP32[$874>>2]|0;
   $876 = $875 & 511;
   $877 = $876 << 14;
   $878 = $872 | $877;
   $879 = $878 | 128;
   (_genop($866,$879)|0);
   $880 = $0;
   _push_($880);
   STACKTOP = sp;return;
   break;
  }
  case 77:  {
   $881 = $0;
   $882 = $1;
   $883 = ((($882)) + 4|0);
   $884 = HEAP32[$883>>2]|0;
   $885 = $884;
   $886 = (_new_sym_1188($881,$885)|0);
   $sym = $886;
   $887 = $0;
   $888 = $1;
   $889 = HEAP32[$888>>2]|0;
   _codegen($887,$889,1);
   $890 = $0;
   $891 = ((($890)) + 172|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = (($892) + -1)|0;
   HEAP32[$891>>2] = $893;
   $894 = $0;
   $895 = $0;
   $896 = ((($895)) + 172|0);
   $897 = HEAP32[$896>>2]|0;
   $898 = $897 & 511;
   $899 = $898 << 23;
   $900 = 19 | $899;
   $901 = $sym;
   $902 = $901 & 65535;
   $903 = $902 << 7;
   $904 = $900 | $903;
   (_genop($894,$904)|0);
   $905 = $2;
   $906 = ($905|0)!=(0);
   if (!($906)) {
    STACKTOP = sp;return;
   }
   $907 = $0;
   _push_($907);
   STACKTOP = sp;return;
   break;
  }
  case 78:  {
   $908 = $0;
   $909 = $1;
   $910 = $909;
   $911 = (_new_sym_1188($908,$910)|0);
   $sym12 = $911;
   $912 = $0;
   $913 = $0;
   $914 = ((($913)) + 172|0);
   $915 = HEAP32[$914>>2]|0;
   $916 = $915 & 511;
   $917 = $916 << 23;
   $918 = 66 | $917;
   (_genop($912,$918)|0);
   $919 = $0;
   $920 = $0;
   $921 = ((($920)) + 172|0);
   $922 = HEAP32[$921>>2]|0;
   $923 = $922 & 511;
   $924 = $923 << 23;
   $925 = 19 | $924;
   $926 = $sym12;
   $927 = $926 & 65535;
   $928 = $927 << 7;
   $929 = $925 | $928;
   (_genop($919,$929)|0);
   $930 = $2;
   $931 = ($930|0)!=(0);
   if (!($931)) {
    STACKTOP = sp;return;
   }
   $932 = $0;
   _push_($932);
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $933 = $0;
   $934 = $1;
   $935 = $2;
   $936 = (_gen_values($933,$934,$935)|0);
   $n13 = $936;
   $937 = $n13;
   $938 = ($937|0)>=(0);
   $939 = $2;
   $940 = ($939|0)!=(0);
   if ($938) {
    if (!($940)) {
     STACKTOP = sp;return;
    }
    $941 = $n13;
    $942 = $0;
    $943 = ((($942)) + 172|0);
    $944 = HEAP32[$943>>2]|0;
    $945 = (($944) - ($941))|0;
    HEAP32[$943>>2] = $945;
    $946 = $0;
    $947 = $0;
    $948 = ((($947)) + 172|0);
    $949 = HEAP32[$948>>2]|0;
    $950 = $949 & 511;
    $951 = $950 << 23;
    $952 = 55 | $951;
    $953 = $0;
    $954 = ((($953)) + 172|0);
    $955 = HEAP32[$954>>2]|0;
    $956 = $955 & 511;
    $957 = $956 << 14;
    $958 = $952 | $957;
    $959 = $n13;
    $960 = $959 & 127;
    $961 = $960 << 7;
    $962 = $958 | $961;
    (_genop($946,$962)|0);
    $963 = $0;
    _push_($963);
    STACKTOP = sp;return;
   } else {
    if (!($940)) {
     STACKTOP = sp;return;
    }
    $964 = $0;
    _push_($964);
    STACKTOP = sp;return;
   }
   break;
  }
  case 36:  {
   $len = 0;
   $update = 0;
   while(1) {
    $965 = $1;
    $966 = ($965|0)!=(0|0);
    if (!($966)) {
     break;
    }
    $967 = $0;
    $968 = $1;
    $969 = HEAP32[$968>>2]|0;
    $970 = HEAP32[$969>>2]|0;
    $971 = $2;
    _codegen($967,$970,$971);
    $972 = $0;
    $973 = $1;
    $974 = HEAP32[$973>>2]|0;
    $975 = ((($974)) + 4|0);
    $976 = HEAP32[$975>>2]|0;
    $977 = $2;
    _codegen($972,$976,$977);
    $978 = $len;
    $979 = (($978) + 1)|0;
    $len = $979;
    $980 = $1;
    $981 = ((($980)) + 4|0);
    $982 = HEAP32[$981>>2]|0;
    $1 = $982;
    $983 = $2;
    $984 = ($983|0)!=(0);
    $985 = $len;
    $986 = ($985|0)==(126);
    $or$cond3 = $984 & $986;
    if (!($or$cond3)) {
     continue;
    }
    $987 = $len;
    $988 = $987<<1;
    $989 = $0;
    $990 = ((($989)) + 172|0);
    $991 = HEAP32[$990>>2]|0;
    $992 = (($991) - ($988))|0;
    HEAP32[$990>>2] = $992;
    $993 = $0;
    $994 = $0;
    $995 = ((($994)) + 172|0);
    $996 = HEAP32[$995>>2]|0;
    $997 = $996 & 511;
    $998 = $997 << 23;
    $999 = 63 | $998;
    $1000 = $0;
    $1001 = ((($1000)) + 172|0);
    $1002 = HEAP32[$1001>>2]|0;
    $1003 = $1002 & 511;
    $1004 = $1003 << 14;
    $1005 = $999 | $1004;
    $1006 = $len;
    $1007 = $1006 & 127;
    $1008 = $1007 << 7;
    $1009 = $1005 | $1008;
    (_genop($993,$1009)|0);
    $1010 = $update;
    $1011 = ($1010<<24>>24)!=(0);
    if ($1011) {
     $1012 = $0;
     $1013 = ((($1012)) + 172|0);
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = (($1014) + -1)|0;
     HEAP32[$1013>>2] = $1015;
     $1016 = $0;
     $1017 = $0;
     $1018 = ((($1017)) + 172|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = $1019 & 511;
     $1021 = $1020 << 23;
     $1022 = 32 | $1021;
     $1023 = $0;
     $1024 = $0;
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = (_mrb_intern_static($1025,69503,8)|0);
     $1027 = (_new_msym($1023,$1026)|0);
     $1028 = $1027 & 511;
     $1029 = $1028 << 14;
     $1030 = $1022 | $1029;
     $1031 = $1030 | 128;
     (_genop($1016,$1031)|0);
    }
    $1032 = $0;
    _push_($1032);
    $update = 1;
    $len = 0;
   }
   $1033 = $2;
   $1034 = ($1033|0)!=(0);
   if (!($1034)) {
    STACKTOP = sp;return;
   }
   $1035 = $len;
   $1036 = $1035<<1;
   $1037 = $0;
   $1038 = ((($1037)) + 172|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = (($1039) - ($1036))|0;
   HEAP32[$1038>>2] = $1040;
   $1041 = $0;
   $1042 = $0;
   $1043 = ((($1042)) + 172|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = $1044 & 511;
   $1046 = $1045 << 23;
   $1047 = 63 | $1046;
   $1048 = $0;
   $1049 = ((($1048)) + 172|0);
   $1050 = HEAP32[$1049>>2]|0;
   $1051 = $1050 & 511;
   $1052 = $1051 << 14;
   $1053 = $1047 | $1052;
   $1054 = $len;
   $1055 = $1054 & 127;
   $1056 = $1055 << 7;
   $1057 = $1053 | $1056;
   (_genop($1041,$1057)|0);
   $1058 = $update;
   $1059 = ($1058<<24>>24)!=(0);
   if ($1059) {
    $1060 = $0;
    $1061 = ((($1060)) + 172|0);
    $1062 = HEAP32[$1061>>2]|0;
    $1063 = (($1062) + -1)|0;
    HEAP32[$1061>>2] = $1063;
    $1064 = $0;
    $1065 = $0;
    $1066 = ((($1065)) + 172|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = $1067 & 511;
    $1069 = $1068 << 23;
    $1070 = 32 | $1069;
    $1071 = $0;
    $1072 = $0;
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = (_mrb_intern_static($1073,69503,8)|0);
    $1075 = (_new_msym($1071,$1074)|0);
    $1076 = $1075 & 511;
    $1077 = $1076 << 14;
    $1078 = $1070 | $1077;
    $1079 = $1078 | 128;
    (_genop($1064,$1079)|0);
   }
   $1080 = $0;
   _push_($1080);
   STACKTOP = sp;return;
   break;
  }
  case 66:  {
   $1081 = $0;
   $1082 = $1;
   _codegen($1081,$1082,1);
   STACKTOP = sp;return;
   break;
  }
  case 24:  {
   $1083 = $0;
   $1084 = $1;
   $1085 = ((($1084)) + 4|0);
   $1086 = HEAP32[$1085>>2]|0;
   _codegen($1083,$1086,1);
   $1087 = $0;
   $1088 = ((($1087)) + 172|0);
   $1089 = HEAP32[$1088>>2]|0;
   $1090 = (($1089) + -1)|0;
   HEAP32[$1088>>2] = $1090;
   $1091 = $0;
   $1092 = $1;
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = $0;
   $1095 = ((($1094)) + 172|0);
   $1096 = HEAP32[$1095>>2]|0;
   $1097 = $2;
   _gen_assignment($1091,$1093,$1096,$1097);
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $len14 = 0;
   $n15 = 0;
   $post = 0;
   $1098 = $1;
   $1099 = ((($1098)) + 4|0);
   $1100 = HEAP32[$1099>>2]|0;
   $t = $1100;
   $1101 = $0;
   $1102 = ((($1101)) + 172|0);
   $1103 = HEAP32[$1102>>2]|0;
   $rhs = $1103;
   $1104 = $t;
   $1105 = HEAP32[$1104>>2]|0;
   $1106 = $1105;
   $1107 = ($1106|0)==(34);
   if ($1107) {
    $1108 = $t;
    $1109 = ((($1108)) + 4|0);
    $1110 = HEAP32[$1109>>2]|0;
    $1111 = (_nosplat($1110)|0);
    $1112 = $1111&255;
    $1113 = ($1112|0)!=(0);
    if ($1113) {
     $1114 = $t;
     $1115 = ((($1114)) + 4|0);
     $1116 = HEAP32[$1115>>2]|0;
     $t = $1116;
     while(1) {
      $1117 = $t;
      $1118 = ($1117|0)!=(0|0);
      if (!($1118)) {
       break;
      }
      $1119 = $0;
      $1120 = $t;
      $1121 = HEAP32[$1120>>2]|0;
      _codegen($1119,$1121,1);
      $1122 = $len14;
      $1123 = (($1122) + 1)|0;
      $len14 = $1123;
      $1124 = $t;
      $1125 = ((($1124)) + 4|0);
      $1126 = HEAP32[$1125>>2]|0;
      $t = $1126;
     }
     $1127 = $1;
     $1128 = HEAP32[$1127>>2]|0;
     $1 = $1128;
     $1129 = $1;
     $1130 = HEAP32[$1129>>2]|0;
     $1131 = ($1130|0)!=(0|0);
     L213: do {
      if ($1131) {
       $1132 = $1;
       $1133 = HEAP32[$1132>>2]|0;
       $t = $1133;
       $n15 = 0;
       while(1) {
        $1134 = $t;
        $1135 = ($1134|0)!=(0|0);
        if (!($1135)) {
         break L213;
        }
        $1136 = $0;
        $1137 = $t;
        $1138 = HEAP32[$1137>>2]|0;
        $1139 = $rhs;
        $1140 = $n15;
        $1141 = (($1139) + ($1140))|0;
        _gen_assignment($1136,$1138,$1141,0);
        $1142 = $n15;
        $1143 = (($1142) + 1)|0;
        $n15 = $1143;
        $1144 = $t;
        $1145 = ((($1144)) + 4|0);
        $1146 = HEAP32[$1145>>2]|0;
        $t = $1146;
       }
      }
     } while(0);
     $1147 = $1;
     $1148 = ((($1147)) + 4|0);
     $1149 = HEAP32[$1148>>2]|0;
     $t = $1149;
     $1150 = $t;
     $1151 = ($1150|0)!=(0|0);
     L219: do {
      if ($1151) {
       $1152 = $t;
       $1153 = ((($1152)) + 4|0);
       $1154 = HEAP32[$1153>>2]|0;
       $1155 = ($1154|0)!=(0|0);
       L221: do {
        if ($1155) {
         $1156 = $t;
         $1157 = ((($1156)) + 4|0);
         $1158 = HEAP32[$1157>>2]|0;
         $1159 = HEAP32[$1158>>2]|0;
         $p = $1159;
         while(1) {
          $1160 = $p;
          $1161 = ($1160|0)!=(0|0);
          if (!($1161)) {
           break L221;
          }
          $1162 = $post;
          $1163 = (($1162) + 1)|0;
          $post = $1163;
          $1164 = $p;
          $1165 = ((($1164)) + 4|0);
          $1166 = HEAP32[$1165>>2]|0;
          $p = $1166;
         }
        }
       } while(0);
       $1167 = $t;
       $1168 = HEAP32[$1167>>2]|0;
       $1169 = ($1168|0)!=(0|0);
       if ($1169) {
        $1170 = $len14;
        $1171 = $post;
        $1172 = $n15;
        $1173 = (($1171) + ($1172))|0;
        $1174 = ($1170|0)<($1173|0);
        if ($1174) {
         $rn = 0;
        } else {
         $1175 = $len14;
         $1176 = $post;
         $1177 = (($1175) - ($1176))|0;
         $1178 = $n15;
         $1179 = (($1177) - ($1178))|0;
         $rn = $1179;
        }
        $1180 = $0;
        $1181 = $0;
        $1182 = ((($1181)) + 172|0);
        $1183 = HEAP32[$1182>>2]|0;
        $1184 = $1183 & 511;
        $1185 = $1184 << 23;
        $1186 = 55 | $1185;
        $1187 = $rhs;
        $1188 = $n15;
        $1189 = (($1187) + ($1188))|0;
        $1190 = $1189 & 511;
        $1191 = $1190 << 14;
        $1192 = $1186 | $1191;
        $1193 = $rn;
        $1194 = $1193 & 127;
        $1195 = $1194 << 7;
        $1196 = $1192 | $1195;
        (_genop($1180,$1196)|0);
        $1197 = $0;
        $1198 = $t;
        $1199 = HEAP32[$1198>>2]|0;
        $1200 = $0;
        $1201 = ((($1200)) + 172|0);
        $1202 = HEAP32[$1201>>2]|0;
        _gen_assignment($1197,$1199,$1202,0);
        $1203 = $rn;
        $1204 = $n15;
        $1205 = (($1204) + ($1203))|0;
        $n15 = $1205;
       }
       $1206 = $t;
       $1207 = ((($1206)) + 4|0);
       $1208 = HEAP32[$1207>>2]|0;
       $1209 = ($1208|0)!=(0|0);
       if ($1209) {
        $1210 = $t;
        $1211 = ((($1210)) + 4|0);
        $1212 = HEAP32[$1211>>2]|0;
        $1213 = HEAP32[$1212>>2]|0;
        $1214 = ($1213|0)!=(0|0);
        if ($1214) {
         $1215 = $t;
         $1216 = ((($1215)) + 4|0);
         $1217 = HEAP32[$1216>>2]|0;
         $1218 = HEAP32[$1217>>2]|0;
         $t = $1218;
         while(1) {
          $1219 = $n15;
          $1220 = $len14;
          $1221 = ($1219|0)<($1220|0);
          if (!($1221)) {
           break L219;
          }
          $1222 = $0;
          $1223 = $t;
          $1224 = HEAP32[$1223>>2]|0;
          $1225 = $rhs;
          $1226 = $n15;
          $1227 = (($1225) + ($1226))|0;
          _gen_assignment($1222,$1224,$1227,0);
          $1228 = $t;
          $1229 = ((($1228)) + 4|0);
          $1230 = HEAP32[$1229>>2]|0;
          $t = $1230;
          $1231 = $n15;
          $1232 = (($1231) + 1)|0;
          $n15 = $1232;
         }
        }
       }
      }
     } while(0);
     $1233 = $len14;
     $1234 = $0;
     $1235 = ((($1234)) + 172|0);
     $1236 = HEAP32[$1235>>2]|0;
     $1237 = (($1236) - ($1233))|0;
     HEAP32[$1235>>2] = $1237;
     $1238 = $2;
     $1239 = ($1238|0)!=(0);
     if (!($1239)) {
      STACKTOP = sp;return;
     }
     $1240 = $0;
     $1241 = $rhs;
     $1242 = $1241 & 511;
     $1243 = $1242 << 23;
     $1244 = 55 | $1243;
     $1245 = $rhs;
     $1246 = $1245 & 511;
     $1247 = $1246 << 14;
     $1248 = $1244 | $1247;
     $1249 = $len14;
     $1250 = $1249 & 127;
     $1251 = $1250 << 7;
     $1252 = $1248 | $1251;
     (_genop($1240,$1252)|0);
     $1253 = $0;
     _push_($1253);
     STACKTOP = sp;return;
    }
   }
   $1254 = $0;
   $1255 = $t;
   _codegen($1254,$1255,1);
   $1256 = $0;
   $1257 = $1;
   $1258 = HEAP32[$1257>>2]|0;
   $1259 = $rhs;
   $1260 = $2;
   _gen_vmassignment($1256,$1258,$1259,$1260);
   $1261 = $2;
   $1262 = ($1261|0)!=(0);
   if ($1262) {
    STACKTOP = sp;return;
   }
   $1263 = $0;
   $1264 = ((($1263)) + 172|0);
   $1265 = HEAP32[$1264>>2]|0;
   $1266 = (($1265) + -1)|0;
   HEAP32[$1264>>2] = $1266;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $1267 = $1;
   $1268 = ((($1267)) + 4|0);
   $1269 = HEAP32[$1268>>2]|0;
   $1270 = HEAP32[$1269>>2]|0;
   $1271 = $1270;
   $sym16 = $1271;
   $1272 = $0;
   $1273 = HEAP32[$1272>>2]|0;
   $1274 = $sym16;
   $1275 = (_mrb_sym2name_len($1273,$1274,$len17)|0);
   $name = $1275;
   $1276 = $0;
   $1277 = $1;
   $1278 = HEAP32[$1277>>2]|0;
   _codegen($1276,$1278,1);
   $1279 = HEAP32[$len17>>2]|0;
   $1280 = ($1279|0)==(2);
   do {
    if ($1280) {
     $1281 = $name;
     $1282 = HEAP8[$1281>>0]|0;
     $1283 = $1282 << 24 >> 24;
     $1284 = ($1283|0)==(124);
     if ($1284) {
      $1285 = $name;
      $1286 = ((($1285)) + 1|0);
      $1287 = HEAP8[$1286>>0]|0;
      $1288 = $1287 << 24 >> 24;
      $1289 = ($1288|0)==(124);
      if (!($1289)) {
       label = 152;
      }
     } else {
      label = 152;
     }
     if ((label|0) == 152) {
      $1290 = $name;
      $1291 = HEAP8[$1290>>0]|0;
      $1292 = $1291 << 24 >> 24;
      $1293 = ($1292|0)==(38);
      if (!($1293)) {
       break;
      }
      $1294 = $name;
      $1295 = ((($1294)) + 1|0);
      $1296 = HEAP8[$1295>>0]|0;
      $1297 = $1296 << 24 >> 24;
      $1298 = ($1297|0)==(38);
      if (!($1298)) {
       break;
      }
     }
     $1299 = $0;
     $1300 = ((($1299)) + 172|0);
     $1301 = HEAP32[$1300>>2]|0;
     $1302 = (($1301) + -1)|0;
     HEAP32[$1300>>2] = $1302;
     $1303 = $0;
     $1304 = $name;
     $1305 = HEAP8[$1304>>0]|0;
     $1306 = $1305 << 24 >> 24;
     $1307 = ($1306|0)==(124);
     $1308 = $1307 ? 24 : 25;
     $1309 = $1308 & 127;
     $1310 = $0;
     $1311 = ((($1310)) + 172|0);
     $1312 = HEAP32[$1311>>2]|0;
     $1313 = $1312 & 511;
     $1314 = $1313 << 23;
     $1315 = $1309 | $1314;
     $1316 = $1315 | 4194176;
     $1317 = (_genop_peep($1303,$1316,0)|0);
     $pos19 = $1317;
     $1318 = $0;
     $1319 = $1;
     $1320 = ((($1319)) + 4|0);
     $1321 = HEAP32[$1320>>2]|0;
     $1322 = ((($1321)) + 4|0);
     $1323 = HEAP32[$1322>>2]|0;
     $1324 = HEAP32[$1323>>2]|0;
     _codegen($1318,$1324,1);
     $1325 = $0;
     $1326 = ((($1325)) + 172|0);
     $1327 = HEAP32[$1326>>2]|0;
     $1328 = (($1327) + -1)|0;
     HEAP32[$1326>>2] = $1328;
     $1329 = $0;
     $1330 = $1;
     $1331 = HEAP32[$1330>>2]|0;
     $1332 = $0;
     $1333 = ((($1332)) + 172|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = $2;
     _gen_assignment($1329,$1331,$1334,$1335);
     $1336 = $0;
     $1337 = $pos19;
     _dispatch($1336,$1337);
     STACKTOP = sp;return;
    }
   } while(0);
   $1338 = $0;
   $1339 = $1;
   $1340 = ((($1339)) + 4|0);
   $1341 = HEAP32[$1340>>2]|0;
   $1342 = ((($1341)) + 4|0);
   $1343 = HEAP32[$1342>>2]|0;
   $1344 = HEAP32[$1343>>2]|0;
   _codegen($1338,$1344,1);
   $1345 = $0;
   _push_($1345);
   $1346 = $0;
   $1347 = ((($1346)) + 172|0);
   $1348 = HEAP32[$1347>>2]|0;
   $1349 = (($1348) + -1)|0;
   HEAP32[$1347>>2] = $1349;
   $1350 = $0;
   $1351 = ((($1350)) + 172|0);
   $1352 = HEAP32[$1351>>2]|0;
   $1353 = (($1352) + -1)|0;
   HEAP32[$1351>>2] = $1353;
   $1354 = $0;
   $1355 = ((($1354)) + 172|0);
   $1356 = HEAP32[$1355>>2]|0;
   $1357 = (($1356) + -1)|0;
   HEAP32[$1355>>2] = $1357;
   $1358 = $0;
   $1359 = $sym16;
   $1360 = (_new_msym($1358,$1359)|0);
   $idx18 = $1360;
   $1361 = HEAP32[$len17>>2]|0;
   $1362 = ($1361|0)==(1);
   if ($1362) {
    $1363 = $name;
    $1364 = HEAP8[$1363>>0]|0;
    $1365 = $1364 << 24 >> 24;
    $1366 = ($1365|0)==(43);
    if ($1366) {
     $1367 = $0;
     $1368 = $0;
     $1369 = ((($1368)) + 172|0);
     $1370 = HEAP32[$1369>>2]|0;
     $1371 = $1370 & 511;
     $1372 = $1371 << 23;
     $1373 = 44 | $1372;
     $1374 = $idx18;
     $1375 = $1374 & 511;
     $1376 = $1375 << 14;
     $1377 = $1373 | $1376;
     $1378 = $1377 | 128;
     $1379 = $2;
     (_genop_peep($1367,$1378,$1379)|0);
    } else {
     label = 158;
    }
   } else {
    label = 158;
   }
   do {
    if ((label|0) == 158) {
     $1380 = HEAP32[$len17>>2]|0;
     $1381 = ($1380|0)==(1);
     if ($1381) {
      $1382 = $name;
      $1383 = HEAP8[$1382>>0]|0;
      $1384 = $1383 << 24 >> 24;
      $1385 = ($1384|0)==(45);
      if ($1385) {
       $1386 = $0;
       $1387 = $0;
       $1388 = ((($1387)) + 172|0);
       $1389 = HEAP32[$1388>>2]|0;
       $1390 = $1389 & 511;
       $1391 = $1390 << 23;
       $1392 = 46 | $1391;
       $1393 = $idx18;
       $1394 = $1393 & 511;
       $1395 = $1394 << 14;
       $1396 = $1392 | $1395;
       $1397 = $1396 | 128;
       $1398 = $2;
       (_genop_peep($1386,$1397,$1398)|0);
       break;
      }
     }
     $1399 = HEAP32[$len17>>2]|0;
     $1400 = ($1399|0)==(1);
     if ($1400) {
      $1401 = $name;
      $1402 = HEAP8[$1401>>0]|0;
      $1403 = $1402 << 24 >> 24;
      $1404 = ($1403|0)==(42);
      if ($1404) {
       $1405 = $0;
       $1406 = $0;
       $1407 = ((($1406)) + 172|0);
       $1408 = HEAP32[$1407>>2]|0;
       $1409 = $1408 & 511;
       $1410 = $1409 << 23;
       $1411 = 48 | $1410;
       $1412 = $idx18;
       $1413 = $1412 & 511;
       $1414 = $1413 << 14;
       $1415 = $1411 | $1414;
       $1416 = $1415 | 128;
       (_genop($1405,$1416)|0);
       break;
      }
     }
     $1417 = HEAP32[$len17>>2]|0;
     $1418 = ($1417|0)==(1);
     if ($1418) {
      $1419 = $name;
      $1420 = HEAP8[$1419>>0]|0;
      $1421 = $1420 << 24 >> 24;
      $1422 = ($1421|0)==(47);
      if ($1422) {
       $1423 = $0;
       $1424 = $0;
       $1425 = ((($1424)) + 172|0);
       $1426 = HEAP32[$1425>>2]|0;
       $1427 = $1426 & 511;
       $1428 = $1427 << 23;
       $1429 = 49 | $1428;
       $1430 = $idx18;
       $1431 = $1430 & 511;
       $1432 = $1431 << 14;
       $1433 = $1429 | $1432;
       $1434 = $1433 | 128;
       (_genop($1423,$1434)|0);
       break;
      }
     }
     $1435 = HEAP32[$len17>>2]|0;
     $1436 = ($1435|0)==(1);
     if ($1436) {
      $1437 = $name;
      $1438 = HEAP8[$1437>>0]|0;
      $1439 = $1438 << 24 >> 24;
      $1440 = ($1439|0)==(60);
      if ($1440) {
       $1441 = $0;
       $1442 = $0;
       $1443 = ((($1442)) + 172|0);
       $1444 = HEAP32[$1443>>2]|0;
       $1445 = $1444 & 511;
       $1446 = $1445 << 23;
       $1447 = 51 | $1446;
       $1448 = $idx18;
       $1449 = $1448 & 511;
       $1450 = $1449 << 14;
       $1451 = $1447 | $1450;
       $1452 = $1451 | 128;
       (_genop($1441,$1452)|0);
       break;
      }
     }
     $1453 = HEAP32[$len17>>2]|0;
     $1454 = ($1453|0)==(2);
     if ($1454) {
      $1455 = $name;
      $1456 = HEAP8[$1455>>0]|0;
      $1457 = $1456 << 24 >> 24;
      $1458 = ($1457|0)==(60);
      if ($1458) {
       $1459 = $name;
       $1460 = ((($1459)) + 1|0);
       $1461 = HEAP8[$1460>>0]|0;
       $1462 = $1461 << 24 >> 24;
       $1463 = ($1462|0)==(61);
       if ($1463) {
        $1464 = $0;
        $1465 = $0;
        $1466 = ((($1465)) + 172|0);
        $1467 = HEAP32[$1466>>2]|0;
        $1468 = $1467 & 511;
        $1469 = $1468 << 23;
        $1470 = 52 | $1469;
        $1471 = $idx18;
        $1472 = $1471 & 511;
        $1473 = $1472 << 14;
        $1474 = $1470 | $1473;
        $1475 = $1474 | 128;
        (_genop($1464,$1475)|0);
        break;
       }
      }
     }
     $1476 = HEAP32[$len17>>2]|0;
     $1477 = ($1476|0)==(1);
     if ($1477) {
      $1478 = $name;
      $1479 = HEAP8[$1478>>0]|0;
      $1480 = $1479 << 24 >> 24;
      $1481 = ($1480|0)==(62);
      if ($1481) {
       $1482 = $0;
       $1483 = $0;
       $1484 = ((($1483)) + 172|0);
       $1485 = HEAP32[$1484>>2]|0;
       $1486 = $1485 & 511;
       $1487 = $1486 << 23;
       $1488 = 53 | $1487;
       $1489 = $idx18;
       $1490 = $1489 & 511;
       $1491 = $1490 << 14;
       $1492 = $1488 | $1491;
       $1493 = $1492 | 128;
       (_genop($1482,$1493)|0);
       break;
      }
     }
     $1494 = HEAP32[$len17>>2]|0;
     $1495 = ($1494|0)==(2);
     if ($1495) {
      $1496 = $name;
      $1497 = HEAP8[$1496>>0]|0;
      $1498 = $1497 << 24 >> 24;
      $1499 = ($1498|0)==(62);
      if ($1499) {
       $1500 = $name;
       $1501 = ((($1500)) + 1|0);
       $1502 = HEAP8[$1501>>0]|0;
       $1503 = $1502 << 24 >> 24;
       $1504 = ($1503|0)==(61);
       if ($1504) {
        $1505 = $0;
        $1506 = $0;
        $1507 = ((($1506)) + 172|0);
        $1508 = HEAP32[$1507>>2]|0;
        $1509 = $1508 & 511;
        $1510 = $1509 << 23;
        $1511 = 54 | $1510;
        $1512 = $idx18;
        $1513 = $1512 & 511;
        $1514 = $1513 << 14;
        $1515 = $1511 | $1514;
        $1516 = $1515 | 128;
        (_genop($1505,$1516)|0);
        break;
       }
      }
     }
     $1517 = $0;
     $1518 = $0;
     $1519 = ((($1518)) + 172|0);
     $1520 = HEAP32[$1519>>2]|0;
     $1521 = $1520 & 511;
     $1522 = $1521 << 23;
     $1523 = 32 | $1522;
     $1524 = $idx18;
     $1525 = $1524 & 511;
     $1526 = $1525 << 14;
     $1527 = $1523 | $1526;
     $1528 = $1527 | 128;
     (_genop($1517,$1528)|0);
    }
   } while(0);
   $1529 = $0;
   $1530 = $1;
   $1531 = HEAP32[$1530>>2]|0;
   $1532 = $0;
   $1533 = ((($1532)) + 172|0);
   $1534 = HEAP32[$1533>>2]|0;
   $1535 = $2;
   _gen_assignment($1529,$1531,$1534,$1535);
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $n20 = 0;
   $noop = 0;
   $sendv = 0;
   $1536 = $0;
   _push_($1536);
   $1537 = $1;
   $1538 = ($1537|0)!=(0|0);
   if ($1538) {
    $1539 = $1;
    $1540 = HEAP32[$1539>>2]|0;
    $args = $1540;
    $1541 = $args;
    $1542 = ($1541|0)!=(0|0);
    if ($1542) {
     $1543 = $0;
     $1544 = $args;
     $1545 = (_gen_values($1543,$1544,1)|0);
     $n20 = $1545;
     $1546 = $n20;
     $1547 = ($1546|0)<(0);
     if ($1547) {
      $sendv = 1;
      $noop = 1;
      $n20 = 1;
      $1548 = $0;
      _push_($1548);
     }
    }
   }
   $1549 = $1;
   $1550 = ($1549|0)!=(0|0);
   if ($1550) {
    $1551 = $1;
    $1552 = ((($1551)) + 4|0);
    $1553 = HEAP32[$1552>>2]|0;
    $1554 = ($1553|0)!=(0|0);
    if ($1554) {
     $1555 = $0;
     $1556 = $1;
     $1557 = ((($1556)) + 4|0);
     $1558 = HEAP32[$1557>>2]|0;
     _codegen($1555,$1558,1);
     $1559 = $0;
     $1560 = ((($1559)) + 172|0);
     $1561 = HEAP32[$1560>>2]|0;
     $1562 = (($1561) + -1)|0;
     HEAP32[$1560>>2] = $1562;
    } else {
     label = 190;
    }
   } else {
    label = 190;
   }
   if ((label|0) == 190) {
    $1563 = $0;
    $1564 = $0;
    $1565 = ((($1564)) + 172|0);
    $1566 = HEAP32[$1565>>2]|0;
    $1567 = $1566 & 511;
    $1568 = $1567 << 23;
    $1569 = 5 | $1568;
    (_genop($1563,$1569)|0);
    $1570 = $0;
    _push_($1570);
    $1571 = $0;
    $1572 = ((($1571)) + 172|0);
    $1573 = HEAP32[$1572>>2]|0;
    $1574 = (($1573) + -1)|0;
    HEAP32[$1572>>2] = $1574;
   }
   $1575 = $n20;
   $1576 = (($1575) + 1)|0;
   $1577 = $0;
   $1578 = ((($1577)) + 172|0);
   $1579 = HEAP32[$1578>>2]|0;
   $1580 = (($1579) - ($1576))|0;
   HEAP32[$1578>>2] = $1580;
   $1581 = $sendv;
   $1582 = ($1581|0)!=(0);
   if ($1582) {
    $n20 = 127;
   }
   $1583 = $0;
   $1584 = $0;
   $1585 = ((($1584)) + 172|0);
   $1586 = HEAP32[$1585>>2]|0;
   $1587 = $1586 & 511;
   $1588 = $1587 << 23;
   $1589 = 36 | $1588;
   $1590 = $n20;
   $1591 = $1590 & 127;
   $1592 = $1591 << 7;
   $1593 = $1589 | $1592;
   (_genop($1583,$1593)|0);
   $1594 = $2;
   $1595 = ($1594|0)!=(0);
   if (!($1595)) {
    STACKTOP = sp;return;
   }
   $1596 = $0;
   _push_($1596);
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $1597 = $0;
   $s2 = $1597;
   $lv = 0;
   $ainfo = 0;
   $1598 = $0;
   _push_($1598);
   while(1) {
    $1599 = $s2;
    $1600 = ((($1599)) + 184|0);
    $1601 = HEAP16[$1600>>1]|0;
    $1602 = ($1601&65535) >>> 15;
    $1603 = $1602&255;
    $1604 = ($1603<<24>>24)!=(0);
    $1605 = $1604 ^ 1;
    if (!($1605)) {
     break;
    }
    $1606 = $lv;
    $1607 = (($1606) + 1)|0;
    $lv = $1607;
    $1608 = $s2;
    $1609 = ((($1608)) + 164|0);
    $1610 = HEAP32[$1609>>2]|0;
    $s2 = $1610;
    $1611 = $s2;
    $1612 = ($1611|0)!=(0|0);
    if (!($1612)) {
     break;
    }
   }
   $1613 = $s2;
   $1614 = ($1613|0)!=(0|0);
   if ($1614) {
    $1615 = $s2;
    $1616 = ((($1615)) + 184|0);
    $1617 = HEAP16[$1616>>1]|0;
    $1618 = ($1617 << 1)&65535;
    $1619 = ($1618<<16>>16) >> 1;
    $1620 = $1619 << 16 >> 16;
    $ainfo = $1620;
   }
   $1621 = $0;
   $1622 = $0;
   $1623 = ((($1622)) + 172|0);
   $1624 = HEAP32[$1623>>2]|0;
   $1625 = $1624 & 511;
   $1626 = $1625 << 23;
   $1627 = 37 | $1626;
   $1628 = $ainfo;
   $1629 = $1628 << 4;
   $1630 = $lv;
   $1631 = $1630 & 15;
   $1632 = $1629 | $1631;
   $1633 = $1632 & 65535;
   $1634 = $1633 << 7;
   $1635 = $1627 | $1634;
   (_genop($1621,$1635)|0);
   $1636 = $0;
   _push_($1636);
   $1637 = $0;
   _push_($1637);
   $1638 = $0;
   $1639 = ((($1638)) + 172|0);
   $1640 = HEAP32[$1639>>2]|0;
   $1641 = (($1640) + -1)|0;
   HEAP32[$1639>>2] = $1641;
   $1642 = $1;
   $1643 = ($1642|0)!=(0|0);
   if ($1643) {
    $1644 = $1;
    $1645 = ((($1644)) + 4|0);
    $1646 = HEAP32[$1645>>2]|0;
    $1647 = ($1646|0)!=(0|0);
    if ($1647) {
     $1648 = $0;
     $1649 = $1;
     $1650 = ((($1649)) + 4|0);
     $1651 = HEAP32[$1650>>2]|0;
     _codegen($1648,$1651,1);
     $1652 = $0;
     $1653 = ((($1652)) + 172|0);
     $1654 = HEAP32[$1653>>2]|0;
     $1655 = (($1654) + -1)|0;
     HEAP32[$1653>>2] = $1655;
    }
   }
   $1656 = $0;
   $1657 = ((($1656)) + 172|0);
   $1658 = HEAP32[$1657>>2]|0;
   $1659 = (($1658) + -1)|0;
   HEAP32[$1657>>2] = $1659;
   $1660 = $0;
   $1661 = ((($1660)) + 172|0);
   $1662 = HEAP32[$1661>>2]|0;
   $1663 = (($1662) + -1)|0;
   HEAP32[$1661>>2] = $1663;
   $1664 = $0;
   $1665 = $0;
   $1666 = ((($1665)) + 172|0);
   $1667 = HEAP32[$1666>>2]|0;
   $1668 = $1667 & 511;
   $1669 = $1668 << 23;
   $1670 = 36 | $1669;
   $1671 = $1670 | 16256;
   (_genop($1664,$1671)|0);
   $1672 = $2;
   $1673 = ($1672|0)!=(0);
   if (!($1673)) {
    STACKTOP = sp;return;
   }
   $1674 = $0;
   _push_($1674);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $1675 = $1;
   $1676 = ($1675|0)!=(0|0);
   $1677 = $0;
   if ($1676) {
    $1678 = $1;
    _codegen($1677,$1678,1);
    $1679 = $0;
    $1680 = ((($1679)) + 172|0);
    $1681 = HEAP32[$1680>>2]|0;
    $1682 = (($1681) + -1)|0;
    HEAP32[$1680>>2] = $1682;
   } else {
    $1683 = $0;
    $1684 = ((($1683)) + 172|0);
    $1685 = HEAP32[$1684>>2]|0;
    $1686 = $1685 & 511;
    $1687 = $1686 << 23;
    $1688 = 5 | $1687;
    (_genop($1677,$1688)|0);
   }
   $1689 = $0;
   $1690 = ((($1689)) + 188|0);
   $1691 = HEAP32[$1690>>2]|0;
   $1692 = ($1691|0)!=(0|0);
   $1693 = $0;
   $1694 = $0;
   $1695 = ((($1694)) + 172|0);
   $1696 = HEAP32[$1695>>2]|0;
   $1697 = $1696 & 511;
   $1698 = $1697 << 23;
   $1699 = 41 | $1698;
   if ($1692) {
    $1700 = $1699 | 32768;
    (_genop($1693,$1700)|0);
   } else {
    (_genop_peep($1693,$1699,0)|0);
   }
   $1701 = $2;
   $1702 = ($1701|0)!=(0);
   if (!($1702)) {
    STACKTOP = sp;return;
   }
   $1703 = $0;
   _push_($1703);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $1704 = $0;
   $s221 = $1704;
   $lv22 = 0;
   $ainfo23 = 0;
   $n24 = 0;
   $sendv25 = 0;
   while(1) {
    $1705 = $s221;
    $1706 = ((($1705)) + 184|0);
    $1707 = HEAP16[$1706>>1]|0;
    $1708 = ($1707&65535) >>> 15;
    $1709 = $1708&255;
    $1710 = ($1709<<24>>24)!=(0);
    $1711 = $1710 ^ 1;
    if (!($1711)) {
     break;
    }
    $1712 = $lv22;
    $1713 = (($1712) + 1)|0;
    $lv22 = $1713;
    $1714 = $s221;
    $1715 = ((($1714)) + 164|0);
    $1716 = HEAP32[$1715>>2]|0;
    $s221 = $1716;
    $1717 = $s221;
    $1718 = ($1717|0)!=(0|0);
    if (!($1718)) {
     break;
    }
   }
   $1719 = $s221;
   $1720 = ($1719|0)!=(0|0);
   if ($1720) {
    $1721 = $s221;
    $1722 = ((($1721)) + 184|0);
    $1723 = HEAP16[$1722>>1]|0;
    $1724 = ($1723 << 1)&65535;
    $1725 = ($1724<<16>>16) >> 1;
    $1726 = $1725 << 16 >> 16;
    $ainfo23 = $1726;
   }
   $1727 = $0;
   $1728 = $0;
   $1729 = ((($1728)) + 172|0);
   $1730 = HEAP32[$1729>>2]|0;
   $1731 = $1730 & 511;
   $1732 = $1731 << 23;
   $1733 = 43 | $1732;
   $1734 = $ainfo23;
   $1735 = $1734 << 4;
   $1736 = $lv22;
   $1737 = $1736 & 15;
   $1738 = $1735 | $1737;
   $1739 = $1738 & 65535;
   $1740 = $1739 << 7;
   $1741 = $1733 | $1740;
   (_genop($1727,$1741)|0);
   $1742 = $0;
   _push_($1742);
   $1743 = $1;
   $1744 = ($1743|0)!=(0|0);
   if ($1744) {
    $1745 = $0;
    $1746 = $1;
    $1747 = (_gen_values($1745,$1746,1)|0);
    $n24 = $1747;
    $1748 = $n24;
    $1749 = ($1748|0)<(0);
    if ($1749) {
     $sendv25 = 1;
     $n24 = 1;
     $1750 = $0;
     _push_($1750);
    }
   }
   $1751 = $n24;
   $1752 = (($1751) + 1)|0;
   $1753 = $0;
   $1754 = ((($1753)) + 172|0);
   $1755 = HEAP32[$1754>>2]|0;
   $1756 = (($1755) - ($1752))|0;
   HEAP32[$1754>>2] = $1756;
   $1757 = $sendv25;
   $1758 = ($1757|0)!=(0);
   if ($1758) {
    $n24 = 127;
   }
   $1759 = $0;
   $1760 = $0;
   $1761 = ((($1760)) + 172|0);
   $1762 = HEAP32[$1761>>2]|0;
   $1763 = $1762 & 511;
   $1764 = $1763 << 23;
   $1765 = 32 | $1764;
   $1766 = $0;
   $1767 = $0;
   $1768 = HEAP32[$1767>>2]|0;
   $1769 = (_mrb_intern_static($1768,69512,4)|0);
   $1770 = (_new_msym($1766,$1769)|0);
   $1771 = $1770 & 511;
   $1772 = $1771 << 14;
   $1773 = $1765 | $1772;
   $1774 = $n24;
   $1775 = $1774 & 127;
   $1776 = $1775 << 7;
   $1777 = $1773 | $1776;
   (_genop($1759,$1777)|0);
   $1778 = $2;
   $1779 = ($1778|0)!=(0);
   if (!($1779)) {
    STACKTOP = sp;return;
   }
   $1780 = $0;
   _push_($1780);
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $1781 = $0;
   $1782 = $1;
   _loop_break($1781,$1782);
   $1783 = $2;
   $1784 = ($1783|0)!=(0);
   if (!($1784)) {
    STACKTOP = sp;return;
   }
   $1785 = $0;
   _push_($1785);
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $1786 = $0;
   $1787 = ((($1786)) + 188|0);
   $1788 = HEAP32[$1787>>2]|0;
   $1789 = ($1788|0)!=(0|0);
   $1790 = $0;
   do {
    if ($1789) {
     $1791 = ((($1790)) + 188|0);
     $1792 = HEAP32[$1791>>2]|0;
     $1793 = HEAP32[$1792>>2]|0;
     $1794 = ($1793|0)==(0);
     if ($1794) {
      $1795 = $0;
      $1796 = ((($1795)) + 192|0);
      $1797 = HEAP32[$1796>>2]|0;
      $1798 = $0;
      $1799 = ((($1798)) + 188|0);
      $1800 = HEAP32[$1799>>2]|0;
      $1801 = ((($1800)) + 20|0);
      $1802 = HEAP32[$1801>>2]|0;
      $1803 = ($1797|0)>($1802|0);
      if ($1803) {
       $1804 = $0;
       $1805 = $0;
       $1806 = ((($1805)) + 192|0);
       $1807 = HEAP32[$1806>>2]|0;
       $1808 = $0;
       $1809 = ((($1808)) + 188|0);
       $1810 = HEAP32[$1809>>2]|0;
       $1811 = ((($1810)) + 20|0);
       $1812 = HEAP32[$1811>>2]|0;
       $1813 = (($1807) - ($1812))|0;
       $1814 = $1813 & 511;
       $1815 = $1814 << 23;
       $1816 = 31 | $1815;
       (_genop_peep($1804,$1816,0)|0);
      }
      $1817 = $0;
      $1818 = $1;
      _codegen($1817,$1818,0);
      $1819 = $0;
      $1820 = $0;
      $1821 = ((($1820)) + 188|0);
      $1822 = HEAP32[$1821>>2]|0;
      $1823 = ((($1822)) + 4|0);
      $1824 = HEAP32[$1823>>2]|0;
      $1825 = $0;
      $1826 = ((($1825)) + 176|0);
      $1827 = HEAP32[$1826>>2]|0;
      $1828 = (($1824) - ($1827))|0;
      $1829 = (($1828) + 32767)|0;
      $1830 = $1829 & 65535;
      $1831 = $1830 << 7;
      $1832 = 23 | $1831;
      (_genop($1819,$1832)|0);
      break;
     }
     $1833 = $1;
     $1834 = ($1833|0)!=(0|0);
     $1835 = $0;
     if ($1834) {
      $1836 = $1;
      _codegen($1835,$1836,1);
      $1837 = $0;
      $1838 = ((($1837)) + 172|0);
      $1839 = HEAP32[$1838>>2]|0;
      $1840 = (($1839) + -1)|0;
      HEAP32[$1838>>2] = $1840;
     } else {
      $1841 = $0;
      $1842 = ((($1841)) + 172|0);
      $1843 = HEAP32[$1842>>2]|0;
      $1844 = $1843 & 511;
      $1845 = $1844 << 23;
      $1846 = 5 | $1845;
      (_genop($1835,$1846)|0);
     }
     $1847 = $0;
     $1848 = $0;
     $1849 = ((($1848)) + 172|0);
     $1850 = HEAP32[$1849>>2]|0;
     $1851 = $1850 & 511;
     $1852 = $1851 << 23;
     $1853 = 41 | $1852;
     (_genop_peep($1847,$1853,0)|0);
    } else {
     _raise_error($1790,69534);
    }
   } while(0);
   $1854 = $2;
   $1855 = ($1854|0)!=(0);
   if (!($1855)) {
    STACKTOP = sp;return;
   }
   $1856 = $0;
   _push_($1856);
   STACKTOP = sp;return;
   break;
  }
  case 15:  {
   $1857 = $0;
   $1858 = ((($1857)) + 188|0);
   $1859 = HEAP32[$1858>>2]|0;
   $1860 = ($1859|0)!=(0|0);
   $1861 = $0;
   if (!($1860)) {
    _raise_error($1861,69550);
    STACKTOP = sp;return;
   }
   $1862 = ((($1861)) + 192|0);
   $1863 = HEAP32[$1862>>2]|0;
   $1864 = $0;
   $1865 = ((($1864)) + 188|0);
   $1866 = HEAP32[$1865>>2]|0;
   $1867 = ((($1866)) + 20|0);
   $1868 = HEAP32[$1867>>2]|0;
   $1869 = ($1863|0)>($1868|0);
   if ($1869) {
    $1870 = $0;
    $1871 = $0;
    $1872 = ((($1871)) + 192|0);
    $1873 = HEAP32[$1872>>2]|0;
    $1874 = $0;
    $1875 = ((($1874)) + 188|0);
    $1876 = HEAP32[$1875>>2]|0;
    $1877 = ((($1876)) + 20|0);
    $1878 = HEAP32[$1877>>2]|0;
    $1879 = (($1873) - ($1878))|0;
    $1880 = $1879 & 511;
    $1881 = $1880 << 23;
    $1882 = 31 | $1881;
    (_genop_peep($1870,$1882,0)|0);
   }
   $1883 = $0;
   $1884 = $0;
   $1885 = ((($1884)) + 188|0);
   $1886 = HEAP32[$1885>>2]|0;
   $1887 = ((($1886)) + 8|0);
   $1888 = HEAP32[$1887>>2]|0;
   $1889 = $0;
   $1890 = ((($1889)) + 176|0);
   $1891 = HEAP32[$1890>>2]|0;
   $1892 = (($1888) - ($1891))|0;
   $1893 = (($1892) + 32767)|0;
   $1894 = $1893 & 65535;
   $1895 = $1894 << 7;
   $1896 = 23 | $1895;
   (_genop($1883,$1896)|0);
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $msg = 69566;
   $1897 = $0;
   $1898 = ((($1897)) + 188|0);
   $1899 = HEAP32[$1898>>2]|0;
   $1900 = ($1899|0)!=(0|0);
   $1901 = $0;
   if (!($1900)) {
    $1902 = $msg;
    _raise_error($1901,$1902);
    STACKTOP = sp;return;
   }
   $1903 = ((($1901)) + 188|0);
   $1904 = HEAP32[$1903>>2]|0;
   $lp26 = $1904;
   $n27 = 0;
   while(1) {
    $1905 = $lp26;
    $1906 = ($1905|0)!=(0|0);
    if ($1906) {
     $1907 = $lp26;
     $1908 = HEAP32[$1907>>2]|0;
     $1909 = ($1908|0)!=(4);
     $3514 = $1909;
    } else {
     $3514 = 0;
    }
    $1910 = $lp26;
    if (!($3514)) {
     break;
    }
    $1911 = HEAP32[$1910>>2]|0;
    $1912 = ($1911|0)==(3);
    if ($1912) {
     $1913 = $n27;
     $1914 = (($1913) + 1)|0;
     $n27 = $1914;
    }
    $1915 = $lp26;
    $1916 = ((($1915)) + 24|0);
    $1917 = HEAP32[$1916>>2]|0;
    $lp26 = $1917;
   }
   $1918 = ($1910|0)!=(0|0);
   if (!($1918)) {
    $1919 = $0;
    $1920 = $msg;
    _raise_error($1919,$1920);
    STACKTOP = sp;return;
   }
   $1921 = $n27;
   $1922 = ($1921|0)>(0);
   L416: do {
    if ($1922) {
     while(1) {
      $1923 = $n27;
      $1924 = (($1923) + -1)|0;
      $n27 = $1924;
      $1925 = ($1923|0)!=(0);
      if (!($1925)) {
       break L416;
      }
      $1926 = $0;
      (_genop_peep($1926,8388636,0)|0);
     }
    }
   } while(0);
   $1927 = $0;
   $1928 = ((($1927)) + 192|0);
   $1929 = HEAP32[$1928>>2]|0;
   $1930 = $lp26;
   $1931 = ((($1930)) + 20|0);
   $1932 = HEAP32[$1931>>2]|0;
   $1933 = ($1929|0)>($1932|0);
   if ($1933) {
    $1934 = $0;
    $1935 = $0;
    $1936 = ((($1935)) + 192|0);
    $1937 = HEAP32[$1936>>2]|0;
    $1938 = $lp26;
    $1939 = ((($1938)) + 20|0);
    $1940 = HEAP32[$1939>>2]|0;
    $1941 = (($1937) - ($1940))|0;
    $1942 = $1941 & 511;
    $1943 = $1942 << 23;
    $1944 = 31 | $1943;
    (_genop_peep($1934,$1944,0)|0);
   }
   $1945 = $0;
   $1946 = $lp26;
   $1947 = ((($1946)) + 4|0);
   $1948 = HEAP32[$1947>>2]|0;
   $1949 = $0;
   $1950 = ((($1949)) + 176|0);
   $1951 = HEAP32[$1950>>2]|0;
   $1952 = (($1948) - ($1951))|0;
   $1953 = (($1952) + 32767)|0;
   $1954 = $1953 & 65535;
   $1955 = $1954 << 7;
   $1956 = 23 | $1955;
   (_genop($1945,$1956)|0);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $1957 = $2;
   $1958 = ($1957|0)!=(0);
   if (!($1958)) {
    STACKTOP = sp;return;
   }
   $1959 = $0;
   $1960 = $1;
   $1961 = $1960;
   $1962 = (_lv_idx($1959,$1961)|0);
   $idx28 = $1962;
   $1963 = $idx28;
   $1964 = ($1963|0)>(0);
   L429: do {
    if ($1964) {
     $1965 = $0;
     $1966 = $0;
     $1967 = ((($1966)) + 172|0);
     $1968 = HEAP32[$1967>>2]|0;
     $1969 = $1968 & 511;
     $1970 = $1969 << 23;
     $1971 = 1 | $1970;
     $1972 = $idx28;
     $1973 = $1972 & 511;
     $1974 = $1973 << 14;
     $1975 = $1971 | $1974;
     (_genop_peep($1965,$1975,0)|0);
    } else {
     $lv29 = 0;
     $1976 = $0;
     $1977 = ((($1976)) + 164|0);
     $1978 = HEAP32[$1977>>2]|0;
     $up = $1978;
     while(1) {
      $1979 = $up;
      $1980 = ($1979|0)!=(0|0);
      if (!($1980)) {
       break L429;
      }
      $1981 = $up;
      $1982 = $1;
      $1983 = $1982;
      $1984 = (_lv_idx($1981,$1983)|0);
      $idx28 = $1984;
      $1985 = $idx28;
      $1986 = ($1985|0)>(0);
      if ($1986) {
       break;
      }
      $2002 = $lv29;
      $2003 = (($2002) + 1)|0;
      $lv29 = $2003;
      $2004 = $up;
      $2005 = ((($2004)) + 164|0);
      $2006 = HEAP32[$2005>>2]|0;
      $up = $2006;
     }
     $1987 = $0;
     $1988 = $0;
     $1989 = ((($1988)) + 172|0);
     $1990 = HEAP32[$1989>>2]|0;
     $1991 = $1990 & 511;
     $1992 = $1991 << 23;
     $1993 = 21 | $1992;
     $1994 = $idx28;
     $1995 = $1994 & 511;
     $1996 = $1995 << 14;
     $1997 = $1993 | $1996;
     $1998 = $lv29;
     $1999 = $1998 & 127;
     $2000 = $1999 << 7;
     $2001 = $1997 | $2000;
     (_genop($1987,$2001)|0);
    }
   } while(0);
   $2007 = $0;
   _push_($2007);
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $2008 = $2;
   $2009 = ($2008|0)!=(0);
   if (!($2009)) {
    STACKTOP = sp;return;
   }
   $2010 = $0;
   $2011 = $1;
   $2012 = $2011;
   $2013 = (_new_sym_1188($2010,$2012)|0);
   $sym30 = $2013;
   $2014 = $0;
   $2015 = $0;
   $2016 = ((($2015)) + 172|0);
   $2017 = HEAP32[$2016>>2]|0;
   $2018 = $2017 & 511;
   $2019 = $2018 << 23;
   $2020 = 9 | $2019;
   $2021 = $sym30;
   $2022 = $2021 & 65535;
   $2023 = $2022 << 7;
   $2024 = $2020 | $2023;
   (_genop($2014,$2024)|0);
   $2025 = $0;
   _push_($2025);
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $2026 = $2;
   $2027 = ($2026|0)!=(0);
   if (!($2027)) {
    STACKTOP = sp;return;
   }
   $2028 = $0;
   $2029 = $1;
   $2030 = $2029;
   $2031 = (_new_sym_1188($2028,$2030)|0);
   $sym31 = $2031;
   $2032 = $0;
   $2033 = $0;
   $2034 = ((($2033)) + 172|0);
   $2035 = HEAP32[$2034>>2]|0;
   $2036 = $2035 & 511;
   $2037 = $2036 << 23;
   $2038 = 13 | $2037;
   $2039 = $sym31;
   $2040 = $2039 & 65535;
   $2041 = $2040 << 7;
   $2042 = $2038 | $2041;
   (_genop($2032,$2042)|0);
   $2043 = $0;
   _push_($2043);
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   $2044 = $2;
   $2045 = ($2044|0)!=(0);
   if (!($2045)) {
    STACKTOP = sp;return;
   }
   $2046 = $0;
   $2047 = $1;
   $2048 = $2047;
   $2049 = (_new_sym_1188($2046,$2048)|0);
   $sym32 = $2049;
   $2050 = $0;
   $2051 = $0;
   $2052 = ((($2051)) + 172|0);
   $2053 = HEAP32[$2052>>2]|0;
   $2054 = $2053 & 511;
   $2055 = $2054 << 23;
   $2056 = 15 | $2055;
   $2057 = $sym32;
   $2058 = $2057 & 65535;
   $2059 = $2058 << 7;
   $2060 = $2056 | $2059;
   (_genop($2050,$2060)|0);
   $2061 = $0;
   _push_($2061);
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $2062 = $0;
   $2063 = $1;
   $2064 = $2063;
   $2065 = (_new_sym_1188($2062,$2064)|0);
   $sym33 = $2065;
   $2066 = $0;
   $2067 = $0;
   $2068 = ((($2067)) + 172|0);
   $2069 = HEAP32[$2068>>2]|0;
   $2070 = $2069 & 511;
   $2071 = $2070 << 23;
   $2072 = 17 | $2071;
   $2073 = $sym33;
   $2074 = $2073 & 65535;
   $2075 = $2074 << 7;
   $2076 = $2072 | $2075;
   (_genop($2066,$2076)|0);
   $2077 = $2;
   $2078 = ($2077|0)!=(0);
   if (!($2078)) {
    STACKTOP = sp;return;
   }
   $2079 = $0;
   _push_($2079);
   STACKTOP = sp;return;
   break;
  }
  case 89:  {
   $2080 = $0;
   $2081 = $1;
   _codegen($2080,$2081,1);
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $2082 = $2;
   $2083 = ($2082|0)!=(0);
   if (!($2083)) {
    STACKTOP = sp;return;
   }
   ;HEAP8[$buf>>0]=HEAP8[69583>>0]|0;HEAP8[$buf+1>>0]=HEAP8[69583+1>>0]|0;
   $2084 = $1;
   $2085 = $2084;
   $2086 = $2085&255;
   $2087 = ((($buf)) + 1|0);
   HEAP8[$2087>>0] = $2086;
   $2088 = $0;
   $2089 = HEAP32[$2088>>2]|0;
   _mrb_str_new($3,$2089,$buf,2);
   ;HEAP32[$str>>2]=HEAP32[$3>>2]|0;HEAP32[$str+4>>2]=HEAP32[$3+4>>2]|0;
   $2090 = $0;
   $2091 = $0;
   $2092 = HEAP32[$2091>>2]|0;
   ;HEAP32[$str$byval_copy>>2]=HEAP32[$str>>2]|0;HEAP32[$str$byval_copy+4>>2]=HEAP32[$str+4>>2]|0;
   $2093 = (_mrb_intern_str($2092,$str$byval_copy)|0);
   $2094 = (_new_sym_1188($2090,$2093)|0);
   $sym34 = $2094;
   $2095 = $0;
   $2096 = $0;
   $2097 = ((($2096)) + 172|0);
   $2098 = HEAP32[$2097>>2]|0;
   $2099 = $2098 & 511;
   $2100 = $2099 << 23;
   $2101 = 9 | $2100;
   $2102 = $sym34;
   $2103 = $2102 & 65535;
   $2104 = $2103 << 7;
   $2105 = $2101 | $2104;
   (_genop($2095,$2105)|0);
   $2106 = $0;
   _push_($2106);
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   $2107 = $2;
   $2108 = ($2107|0)!=(0);
   if (!($2108)) {
    STACKTOP = sp;return;
   }
   $2109 = $0;
   $2110 = HEAP32[$2109>>2]|0;
   $mrb = $2110;
   $2111 = $1;
   $2112 = $2111;
   _mrb_fixnum_value_1199($fix,$2112);
   $2113 = $mrb;
   _mrb_str_buf_new($str36,$2113,4);
   $2114 = $mrb;
   ;HEAP32[$str36$byval_copy>>2]=HEAP32[$str36>>2]|0;HEAP32[$str36$byval_copy+4>>2]=HEAP32[$str36+4>>2]|0;
   _mrb_str_cat($4,$2114,$str36$byval_copy,69583,1);
   $2115 = $mrb;
   $2116 = $mrb;
   ;HEAP32[$fix$byval_copy>>2]=HEAP32[$fix>>2]|0;HEAP32[$fix$byval_copy+4>>2]=HEAP32[$fix+4>>2]|0;
   _mrb_fixnum_to_str($5,$2116,$fix$byval_copy,10);
   ;HEAP32[$str36$byval_copy10>>2]=HEAP32[$str36>>2]|0;HEAP32[$str36$byval_copy10+4>>2]=HEAP32[$str36+4>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
   _mrb_str_cat_str($6,$2115,$str36$byval_copy10,$$byval_copy);
   $2117 = $0;
   $2118 = $mrb;
   ;HEAP32[$str36$byval_copy11>>2]=HEAP32[$str36>>2]|0;HEAP32[$str36$byval_copy11+4>>2]=HEAP32[$str36+4>>2]|0;
   $2119 = (_mrb_intern_str($2118,$str36$byval_copy11)|0);
   $2120 = (_new_sym_1188($2117,$2119)|0);
   $sym35 = $2120;
   $2121 = $0;
   $2122 = $0;
   $2123 = ((($2122)) + 172|0);
   $2124 = HEAP32[$2123>>2]|0;
   $2125 = $2124 & 511;
   $2126 = $2125 << 23;
   $2127 = 9 | $2126;
   $2128 = $sym35;
   $2129 = $2128 & 65535;
   $2130 = $2129 << 7;
   $2131 = $2127 | $2130;
   (_genop($2121,$2131)|0);
   $2132 = $0;
   _push_($2132);
   STACKTOP = sp;return;
   break;
  }
  case 91:  {
   $3512 = $0;
   $3513 = $1;
   _codegen($3512,$3513,0);
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $2133 = $0;
   $2134 = $1;
   _codegen($2133,$2134,1);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $2135 = $2;
   $2136 = ($2135|0)!=(0);
   if (!($2136)) {
    STACKTOP = sp;return;
   }
   $2137 = $1;
   $2138 = HEAP32[$2137>>2]|0;
   $p37 = $2138;
   $2139 = $1;
   $2140 = ((($2139)) + 4|0);
   $2141 = HEAP32[$2140>>2]|0;
   $2142 = HEAP32[$2141>>2]|0;
   $2143 = $2142;
   $base = $2143;
   $2144 = $0;
   $2145 = $p37;
   $2146 = $base;
   $2147 = (_readint_mrb_int($2144,$2145,$2146,0,$overflow)|0);
   $i = $2147;
   $2148 = HEAP8[$overflow>>0]|0;
   $2149 = ($2148<<24>>24)!=(0);
   if ($2149) {
    $2150 = $0;
    $2151 = $p37;
    $2152 = $base;
    $2153 = (+_readint_float($2150,$2151,$2152));
    $f = $2153;
    $2154 = $0;
    $2155 = $0;
    $2156 = HEAP32[$2155>>2]|0;
    $2157 = $f;
    $2158 = $2157;
    _mrb_float_value_1202($7,$2156,$2158);
    ;HEAP32[$$byval_copy12>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$7+4>>2]|0;
    $2159 = (_new_lit($2154,$$byval_copy12)|0);
    $off = $2159;
    $2160 = $0;
    $2161 = $0;
    $2162 = ((($2161)) + 172|0);
    $2163 = HEAP32[$2162>>2]|0;
    $2164 = $2163 & 511;
    $2165 = $2164 << 23;
    $2166 = 2 | $2165;
    $2167 = $off;
    $2168 = $2167 & 65535;
    $2169 = $2168 << 7;
    $2170 = $2166 | $2169;
    (_genop($2160,$2170)|0);
   } else {
    $2171 = $i;
    $2172 = ($2171|0)<(32767);
    $2173 = $i;
    $2174 = ($2173|0)>(-32767);
    $or$cond5 = $2172 & $2174;
    $2175 = $0;
    if ($or$cond5) {
     $2176 = ((($2175)) + 172|0);
     $2177 = HEAP32[$2176>>2]|0;
     $2178 = $2177 & 511;
     $2179 = $2178 << 23;
     $2180 = 3 | $2179;
     $2181 = $i;
     $2182 = (($2181) + 32767)|0;
     $2183 = $2182 & 65535;
     $2184 = $2183 << 7;
     $2185 = $2180 | $2184;
     $co = $2185;
    } else {
     $2186 = $i;
     _mrb_fixnum_value_1199($8,$2186);
     ;HEAP32[$$byval_copy13>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$8+4>>2]|0;
     $2187 = (_new_lit($2175,$$byval_copy13)|0);
     $off38 = $2187;
     $2188 = $0;
     $2189 = ((($2188)) + 172|0);
     $2190 = HEAP32[$2189>>2]|0;
     $2191 = $2190 & 511;
     $2192 = $2191 << 23;
     $2193 = 2 | $2192;
     $2194 = $off38;
     $2195 = $2194 & 65535;
     $2196 = $2195 << 7;
     $2197 = $2193 | $2196;
     $co = $2197;
    }
    $2198 = $0;
    $2199 = $co;
    (_genop($2198,$2199)|0);
   }
   $2200 = $0;
   _push_($2200);
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $2201 = $2;
   $2202 = ($2201|0)!=(0);
   if (!($2202)) {
    STACKTOP = sp;return;
   }
   $2203 = $1;
   $p39 = $2203;
   $2204 = $p39;
   $2205 = (+_strtof($2204,0));
   $f40 = $2205;
   $2206 = $0;
   $2207 = $0;
   $2208 = HEAP32[$2207>>2]|0;
   $2209 = $f40;
   _mrb_float_value_1202($9,$2208,$2209);
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$9+4>>2]|0;
   $2210 = (_new_lit($2206,$$byval_copy14)|0);
   $off41 = $2210;
   $2211 = $0;
   $2212 = $0;
   $2213 = ((($2212)) + 172|0);
   $2214 = HEAP32[$2213>>2]|0;
   $2215 = $2214 & 511;
   $2216 = $2215 << 23;
   $2217 = 2 | $2216;
   $2218 = $off41;
   $2219 = $2218 & 65535;
   $2220 = $2219 << 7;
   $2221 = $2217 | $2220;
   (_genop($2211,$2221)|0);
   $2222 = $0;
   _push_($2222);
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $2223 = $1;
   $2224 = HEAP32[$2223>>2]|0;
   $2225 = $2224;
   $nt = $2225;
   $2226 = $1;
   $2227 = ((($2226)) + 4|0);
   $2228 = HEAP32[$2227>>2]|0;
   $1 = $2228;
   $2229 = $nt;
   switch ($2229|0) {
   case 51:  {
    $2230 = $1;
    $p42 = $2230;
    $2231 = $p42;
    $2232 = (+_strtof($2231,0));
    $f43 = $2232;
    $2233 = $0;
    $2234 = $0;
    $2235 = HEAP32[$2234>>2]|0;
    $2236 = $f43;
    $2237 = -$2236;
    _mrb_float_value_1202($10,$2235,$2237);
    ;HEAP32[$$byval_copy15>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$10+4>>2]|0;
    $2238 = (_new_lit($2233,$$byval_copy15)|0);
    $off44 = $2238;
    $2239 = $0;
    $2240 = $0;
    $2241 = ((($2240)) + 172|0);
    $2242 = HEAP32[$2241>>2]|0;
    $2243 = $2242 & 511;
    $2244 = $2243 << 23;
    $2245 = 2 | $2244;
    $2246 = $off44;
    $2247 = $2246 & 65535;
    $2248 = $2247 << 7;
    $2249 = $2245 | $2248;
    (_genop($2239,$2249)|0);
    $2250 = $0;
    _push_($2250);
    STACKTOP = sp;return;
    break;
   }
   case 50:  {
    $2251 = $1;
    $2252 = HEAP32[$2251>>2]|0;
    $p45 = $2252;
    $2253 = $1;
    $2254 = ((($2253)) + 4|0);
    $2255 = HEAP32[$2254>>2]|0;
    $2256 = HEAP32[$2255>>2]|0;
    $2257 = $2256;
    $base46 = $2257;
    $2258 = $0;
    $2259 = $p45;
    $2260 = $base46;
    $2261 = (_readint_mrb_int($2258,$2259,$2260,1,$overflow49)|0);
    $i47 = $2261;
    $2262 = HEAP8[$overflow49>>0]|0;
    $2263 = ($2262<<24>>24)!=(0);
    if ($2263) {
     $2264 = $0;
     $2265 = $p45;
     $2266 = $base46;
     $2267 = (+_readint_float($2264,$2265,$2266));
     $f50 = $2267;
     $2268 = $0;
     $2269 = $0;
     $2270 = HEAP32[$2269>>2]|0;
     $2271 = $f50;
     $2272 = -$2271;
     $2273 = $2272;
     _mrb_float_value_1202($11,$2270,$2273);
     ;HEAP32[$$byval_copy16>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$11+4>>2]|0;
     $2274 = (_new_lit($2268,$$byval_copy16)|0);
     $off51 = $2274;
     $2275 = $0;
     $2276 = $0;
     $2277 = ((($2276)) + 172|0);
     $2278 = HEAP32[$2277>>2]|0;
     $2279 = $2278 & 511;
     $2280 = $2279 << 23;
     $2281 = 2 | $2280;
     $2282 = $off51;
     $2283 = $2282 & 65535;
     $2284 = $2283 << 7;
     $2285 = $2281 | $2284;
     (_genop($2275,$2285)|0);
    } else {
     $2286 = $i47;
     $2287 = ($2286|0)<(32767);
     $2288 = $i47;
     $2289 = ($2288|0)>(-32767);
     $or$cond7 = $2287 & $2289;
     $2290 = $0;
     if ($or$cond7) {
      $2291 = ((($2290)) + 172|0);
      $2292 = HEAP32[$2291>>2]|0;
      $2293 = $2292 & 511;
      $2294 = $2293 << 23;
      $2295 = 3 | $2294;
      $2296 = $i47;
      $2297 = (($2296) + 32767)|0;
      $2298 = $2297 & 65535;
      $2299 = $2298 << 7;
      $2300 = $2295 | $2299;
      $co48 = $2300;
     } else {
      $2301 = $i47;
      _mrb_fixnum_value_1199($12,$2301);
      ;HEAP32[$$byval_copy17>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$12+4>>2]|0;
      $2302 = (_new_lit($2290,$$byval_copy17)|0);
      $off52 = $2302;
      $2303 = $0;
      $2304 = ((($2303)) + 172|0);
      $2305 = HEAP32[$2304>>2]|0;
      $2306 = $2305 & 511;
      $2307 = $2306 << 23;
      $2308 = 2 | $2307;
      $2309 = $off52;
      $2310 = $2309 & 65535;
      $2311 = $2310 << 7;
      $2312 = $2308 | $2311;
      $co48 = $2312;
     }
     $2313 = $0;
     $2314 = $co48;
     (_genop($2313,$2314)|0);
    }
    $2315 = $0;
    _push_($2315);
    STACKTOP = sp;return;
    break;
   }
   default: {
    $2316 = $0;
    $2317 = $0;
    $2318 = HEAP32[$2317>>2]|0;
    $2319 = (_mrb_intern_static($2318,69609,1)|0);
    $2320 = (_new_msym($2316,$2319)|0);
    $sym53 = $2320;
    $2321 = $0;
    $2322 = $0;
    $2323 = ((($2322)) + 172|0);
    $2324 = HEAP32[$2323>>2]|0;
    $2325 = $2324 & 511;
    $2326 = $2325 << 23;
    $2327 = 3 | $2326;
    (_genop($2321,$2327)|0);
    $2328 = $0;
    _push_($2328);
    $2329 = $0;
    $2330 = $1;
    _codegen($2329,$2330,1);
    $2331 = $0;
    $2332 = ((($2331)) + 172|0);
    $2333 = HEAP32[$2332>>2]|0;
    $2334 = (($2333) + -1)|0;
    HEAP32[$2332>>2] = $2334;
    $2335 = $0;
    $2336 = ((($2335)) + 172|0);
    $2337 = HEAP32[$2336>>2]|0;
    $2338 = (($2337) + -1)|0;
    HEAP32[$2336>>2] = $2338;
    $2339 = $0;
    $2340 = $0;
    $2341 = ((($2340)) + 172|0);
    $2342 = HEAP32[$2341>>2]|0;
    $2343 = $2342 & 511;
    $2344 = $2343 << 23;
    $2345 = 46 | $2344;
    $2346 = $sym53;
    $2347 = $2346 & 511;
    $2348 = $2347 << 14;
    $2349 = $2345 | $2348;
    $2350 = $2349 | 256;
    (_genop($2339,$2350)|0);
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 55:  {
   $2351 = $2;
   $2352 = ($2351|0)!=(0);
   if (!($2352)) {
    STACKTOP = sp;return;
   }
   $2353 = $1;
   $2354 = HEAP32[$2353>>2]|0;
   $p54 = $2354;
   $2355 = $1;
   $2356 = ((($2355)) + 4|0);
   $2357 = HEAP32[$2356>>2]|0;
   $2358 = $2357;
   $len55 = $2358;
   $2359 = $0;
   $2360 = HEAP32[$2359>>2]|0;
   $2361 = (_mrb_gc_arena_save($2360)|0);
   $ai = $2361;
   $2362 = $0;
   $2363 = $0;
   $2364 = HEAP32[$2363>>2]|0;
   $2365 = $p54;
   $2366 = $len55;
   _mrb_str_new($13,$2364,$2365,$2366);
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$13+4>>2]|0;
   $2367 = (_new_lit($2362,$$byval_copy18)|0);
   $off56 = $2367;
   $2368 = $0;
   $2369 = HEAP32[$2368>>2]|0;
   $2370 = $ai;
   _mrb_gc_arena_restore($2369,$2370);
   $2371 = $0;
   $2372 = $0;
   $2373 = ((($2372)) + 172|0);
   $2374 = HEAP32[$2373>>2]|0;
   $2375 = $2374 & 511;
   $2376 = $2375 << 23;
   $2377 = 61 | $2376;
   $2378 = $off56;
   $2379 = $2378 & 65535;
   $2380 = $2379 << 7;
   $2381 = $2377 | $2380;
   (_genop($2371,$2381)|0);
   $2382 = $0;
   _push_($2382);
   STACKTOP = sp;return;
   break;
  }
  case 99:  {
   $2383 = $1;
   $2384 = ((($2383)) + 16|0);
   $2385 = HEAP32[$2384>>2]|0;
   $1 = $2385;
   break;
  }
  case 56:  {
   break;
  }
  case 101:  {
   $2441 = $0;
   $2442 = $1;
   $2443 = $2;
   _gen_literal_array($2441,$2442,0,$2443);
   STACKTOP = sp;return;
   break;
  }
  case 102:  {
   $2444 = $0;
   $2445 = $1;
   $2446 = $2;
   _gen_literal_array($2444,$2445,1,$2446);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   $2447 = $0;
   $2448 = HEAP32[$2447>>2]|0;
   $2449 = (_mrb_gc_arena_save($2448)|0);
   $ai60 = $2449;
   $2450 = $0;
   $2451 = $0;
   $2452 = HEAP32[$2451>>2]|0;
   $2453 = (_mrb_intern_static($2452,69618,6)|0);
   $2454 = (_new_sym_1188($2450,$2453)|0);
   $sym61 = $2454;
   $2455 = $2;
   $2456 = ($2455|0)==(0);
   if ($2456) {
    $2457 = $0;
    _push_($2457);
   }
   $2458 = $0;
   $2459 = $0;
   $2460 = ((($2459)) + 172|0);
   $2461 = HEAP32[$2460>>2]|0;
   $2462 = $2461 & 511;
   $2463 = $2462 << 23;
   $2464 = 66 | $2463;
   (_genop($2458,$2464)|0);
   $2465 = $0;
   $2466 = $0;
   $2467 = ((($2466)) + 172|0);
   $2468 = HEAP32[$2467>>2]|0;
   $2469 = $2468 & 511;
   $2470 = $2469 << 23;
   $2471 = 19 | $2470;
   $2472 = $sym61;
   $2473 = $2472 & 65535;
   $2474 = $2473 << 7;
   $2475 = $2471 | $2474;
   (_genop($2465,$2475)|0);
   $2476 = $0;
   _push_($2476);
   $2477 = $0;
   $2478 = $1;
   $2479 = HEAP32[$2478>>2]|0;
   _codegen($2477,$2479,1);
   $2480 = $1;
   $2481 = ((($2480)) + 4|0);
   $2482 = HEAP32[$2481>>2]|0;
   $n59 = $2482;
   while(1) {
    $2483 = $n59;
    $2484 = ($2483|0)!=(0|0);
    if (!($2484)) {
     break;
    }
    $2485 = $n59;
    $2486 = HEAP32[$2485>>2]|0;
    $2487 = HEAP32[$2486>>2]|0;
    $2488 = $2487;
    $2489 = ($2488|0)==(57);
    if ($2489) {
     $2490 = $n59;
     $2491 = HEAP32[$2490>>2]|0;
     HEAP32[$2491>>2] = (55);
    }
    $2492 = $0;
    $2493 = $n59;
    $2494 = HEAP32[$2493>>2]|0;
    _codegen($2492,$2494,1);
    $2495 = $0;
    $2496 = ((($2495)) + 172|0);
    $2497 = HEAP32[$2496>>2]|0;
    $2498 = (($2497) + -1)|0;
    HEAP32[$2496>>2] = $2498;
    $2499 = $0;
    $2500 = ((($2499)) + 172|0);
    $2501 = HEAP32[$2500>>2]|0;
    $2502 = (($2501) + -1)|0;
    HEAP32[$2500>>2] = $2502;
    $2503 = $0;
    $2504 = $0;
    $2505 = ((($2504)) + 172|0);
    $2506 = HEAP32[$2505>>2]|0;
    $2507 = $2506 & 511;
    $2508 = $2507 << 23;
    $2509 = 62 | $2508;
    $2510 = $0;
    $2511 = ((($2510)) + 172|0);
    $2512 = HEAP32[$2511>>2]|0;
    $2513 = (($2512) + 1)|0;
    $2514 = $2513 & 511;
    $2515 = $2514 << 14;
    $2516 = $2509 | $2515;
    (_genop_peep($2503,$2516,1)|0);
    $2517 = $0;
    _push_($2517);
    $2518 = $n59;
    $2519 = ((($2518)) + 4|0);
    $2520 = HEAP32[$2519>>2]|0;
    $n59 = $2520;
   }
   $2521 = $0;
   $2522 = ((($2521)) + 172|0);
   $2523 = HEAP32[$2522>>2]|0;
   $2524 = (($2523) + -1)|0;
   HEAP32[$2522>>2] = $2524;
   $2525 = $0;
   $2526 = ((($2525)) + 172|0);
   $2527 = HEAP32[$2526>>2]|0;
   $2528 = (($2527) + -1)|0;
   HEAP32[$2526>>2] = $2528;
   $2529 = $0;
   $2530 = $0;
   $2531 = HEAP32[$2530>>2]|0;
   $2532 = (_mrb_intern_static($2531,69625,1)|0);
   $2533 = (_new_sym_1188($2529,$2532)|0);
   $sym61 = $2533;
   $2534 = $0;
   $2535 = $0;
   $2536 = ((($2535)) + 172|0);
   $2537 = HEAP32[$2536>>2]|0;
   $2538 = $2537 & 511;
   $2539 = $2538 << 23;
   $2540 = 32 | $2539;
   $2541 = $sym61;
   $2542 = $2541 & 511;
   $2543 = $2542 << 14;
   $2544 = $2540 | $2543;
   $2545 = $2544 | 128;
   (_genop($2534,$2545)|0);
   $2546 = $2;
   $2547 = ($2546|0)==(0);
   $2548 = $0;
   if ($2547) {
    $2549 = ((($2548)) + 172|0);
    $2550 = HEAP32[$2549>>2]|0;
    $2551 = (($2550) + -1)|0;
    HEAP32[$2549>>2] = $2551;
   } else {
    _push_($2548);
   }
   $2552 = $0;
   $2553 = HEAP32[$2552>>2]|0;
   $2554 = $ai60;
   _mrb_gc_arena_restore($2553,$2554);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   $2555 = $1;
   $2556 = HEAP32[$2555>>2]|0;
   $p62 = $2556;
   $2557 = $1;
   $2558 = ((($2557)) + 4|0);
   $2559 = HEAP32[$2558>>2]|0;
   $2560 = $2559;
   $len63 = $2560;
   $2561 = $0;
   $2562 = HEAP32[$2561>>2]|0;
   $2563 = (_mrb_gc_arena_save($2562)|0);
   $ai64 = $2563;
   $2564 = $0;
   $2565 = $0;
   $2566 = HEAP32[$2565>>2]|0;
   $2567 = (_mrb_intern_static($2566,69618,6)|0);
   $2568 = (_new_sym_1188($2564,$2567)|0);
   $sym65 = $2568;
   $2569 = $0;
   $2570 = $0;
   $2571 = HEAP32[$2570>>2]|0;
   $2572 = $p62;
   $2573 = $len63;
   _mrb_str_new($14,$2571,$2572,$2573);
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$14+4>>2]|0;
   $2574 = (_new_lit($2569,$$byval_copy19)|0);
   $off66 = $2574;
   $2575 = $2;
   $2576 = ($2575|0)==(0);
   if ($2576) {
    $2577 = $0;
    _push_($2577);
   }
   $2578 = $0;
   $2579 = $0;
   $2580 = ((($2579)) + 172|0);
   $2581 = HEAP32[$2580>>2]|0;
   $2582 = $2581 & 511;
   $2583 = $2582 << 23;
   $2584 = 66 | $2583;
   (_genop($2578,$2584)|0);
   $2585 = $0;
   $2586 = $0;
   $2587 = ((($2586)) + 172|0);
   $2588 = HEAP32[$2587>>2]|0;
   $2589 = $2588 & 511;
   $2590 = $2589 << 23;
   $2591 = 19 | $2590;
   $2592 = $sym65;
   $2593 = $2592 & 65535;
   $2594 = $2593 << 7;
   $2595 = $2591 | $2594;
   (_genop($2585,$2595)|0);
   $2596 = $0;
   _push_($2596);
   $2597 = $0;
   $2598 = $0;
   $2599 = ((($2598)) + 172|0);
   $2600 = HEAP32[$2599>>2]|0;
   $2601 = $2600 & 511;
   $2602 = $2601 << 23;
   $2603 = 61 | $2602;
   $2604 = $off66;
   $2605 = $2604 & 65535;
   $2606 = $2605 << 7;
   $2607 = $2603 | $2606;
   (_genop($2597,$2607)|0);
   $2608 = $0;
   $2609 = ((($2608)) + 172|0);
   $2610 = HEAP32[$2609>>2]|0;
   $2611 = (($2610) + -1)|0;
   HEAP32[$2609>>2] = $2611;
   $2612 = $0;
   $2613 = $0;
   $2614 = HEAP32[$2613>>2]|0;
   $2615 = (_mrb_intern_static($2614,69625,1)|0);
   $2616 = (_new_sym_1188($2612,$2615)|0);
   $sym65 = $2616;
   $2617 = $0;
   $2618 = $0;
   $2619 = ((($2618)) + 172|0);
   $2620 = HEAP32[$2619>>2]|0;
   $2621 = $2620 & 511;
   $2622 = $2621 << 23;
   $2623 = 32 | $2622;
   $2624 = $sym65;
   $2625 = $2624 & 511;
   $2626 = $2625 << 14;
   $2627 = $2623 | $2626;
   $2628 = $2627 | 128;
   (_genop($2617,$2628)|0);
   $2629 = $2;
   $2630 = ($2629|0)==(0);
   $2631 = $0;
   if ($2630) {
    $2632 = ((($2631)) + 172|0);
    $2633 = HEAP32[$2632>>2]|0;
    $2634 = (($2633) + -1)|0;
    HEAP32[$2632>>2] = $2634;
   } else {
    _push_($2631);
   }
   $2635 = $0;
   $2636 = HEAP32[$2635>>2]|0;
   $2637 = $ai64;
   _mrb_gc_arena_restore($2636,$2637);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   $2638 = $2;
   $2639 = ($2638|0)!=(0);
   if (!($2639)) {
    STACKTOP = sp;return;
   }
   $2640 = $1;
   $2641 = HEAP32[$2640>>2]|0;
   $p1 = $2641;
   $2642 = $1;
   $2643 = ((($2642)) + 4|0);
   $2644 = HEAP32[$2643>>2]|0;
   $2645 = HEAP32[$2644>>2]|0;
   $p2 = $2645;
   $2646 = $1;
   $2647 = ((($2646)) + 4|0);
   $2648 = HEAP32[$2647>>2]|0;
   $2649 = ((($2648)) + 4|0);
   $2650 = HEAP32[$2649>>2]|0;
   $p3 = $2650;
   $2651 = $0;
   $2652 = HEAP32[$2651>>2]|0;
   $2653 = (_mrb_gc_arena_save($2652)|0);
   $ai67 = $2653;
   $2654 = $0;
   $2655 = $0;
   $2656 = HEAP32[$2655>>2]|0;
   $2657 = (_mrb_intern_static($2656,69627,6)|0);
   $2658 = (_new_sym_1188($2654,$2657)|0);
   $sym68 = $2658;
   $2659 = $0;
   $2660 = $0;
   $2661 = HEAP32[$2660>>2]|0;
   $2662 = $p1;
   _mrb_str_new_cstr($15,$2661,$2662);
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$15+4>>2]|0;
   $2663 = (_new_lit($2659,$$byval_copy20)|0);
   $off69 = $2663;
   $argc = 1;
   $2664 = $0;
   $2665 = $0;
   $2666 = ((($2665)) + 172|0);
   $2667 = HEAP32[$2666>>2]|0;
   $2668 = $2667 & 511;
   $2669 = $2668 << 23;
   $2670 = 66 | $2669;
   (_genop($2664,$2670)|0);
   $2671 = $0;
   $2672 = $0;
   $2673 = ((($2672)) + 172|0);
   $2674 = HEAP32[$2673>>2]|0;
   $2675 = $2674 & 511;
   $2676 = $2675 << 23;
   $2677 = 19 | $2676;
   $2678 = $sym68;
   $2679 = $2678 & 65535;
   $2680 = $2679 << 7;
   $2681 = $2677 | $2680;
   (_genop($2671,$2681)|0);
   $2682 = $0;
   _push_($2682);
   $2683 = $0;
   $2684 = $0;
   $2685 = ((($2684)) + 172|0);
   $2686 = HEAP32[$2685>>2]|0;
   $2687 = $2686 & 511;
   $2688 = $2687 << 23;
   $2689 = 61 | $2688;
   $2690 = $off69;
   $2691 = $2690 & 65535;
   $2692 = $2691 << 7;
   $2693 = $2689 | $2692;
   (_genop($2683,$2693)|0);
   $2694 = $p2;
   $2695 = ($2694|0)!=(0|0);
   $2696 = $p3;
   $2697 = ($2696|0)!=(0|0);
   $or$cond9 = $2695 | $2697;
   if ($or$cond9) {
    $2698 = $0;
    _push_($2698);
    $2699 = $p2;
    $2700 = ($2699|0)!=(0|0);
    $2701 = $0;
    $2702 = $0;
    if ($2700) {
     $2703 = HEAP32[$2702>>2]|0;
     $2704 = $p2;
     _mrb_str_new_cstr($16,$2703,$2704);
     ;HEAP32[$$byval_copy21>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy21+4>>2]=HEAP32[$16+4>>2]|0;
     $2705 = (_new_lit($2701,$$byval_copy21)|0);
     $off69 = $2705;
     $2706 = $0;
     $2707 = $0;
     $2708 = ((($2707)) + 172|0);
     $2709 = HEAP32[$2708>>2]|0;
     $2710 = $2709 & 511;
     $2711 = $2710 << 23;
     $2712 = 61 | $2711;
     $2713 = $off69;
     $2714 = $2713 & 65535;
     $2715 = $2714 << 7;
     $2716 = $2712 | $2715;
     (_genop($2706,$2716)|0);
    } else {
     $2717 = ((($2702)) + 172|0);
     $2718 = HEAP32[$2717>>2]|0;
     $2719 = $2718 & 511;
     $2720 = $2719 << 23;
     $2721 = 5 | $2720;
     (_genop($2701,$2721)|0);
    }
    $2722 = $argc;
    $2723 = (($2722) + 1)|0;
    $argc = $2723;
    $2724 = $p3;
    $2725 = ($2724|0)!=(0|0);
    if ($2725) {
     $2726 = $0;
     _push_($2726);
     $2727 = $0;
     $2728 = $0;
     $2729 = HEAP32[$2728>>2]|0;
     $2730 = $p3;
     _mrb_str_new($17,$2729,$2730,1);
     ;HEAP32[$$byval_copy22>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy22+4>>2]=HEAP32[$17+4>>2]|0;
     $2731 = (_new_lit($2727,$$byval_copy22)|0);
     $off69 = $2731;
     $2732 = $0;
     $2733 = $0;
     $2734 = ((($2733)) + 172|0);
     $2735 = HEAP32[$2734>>2]|0;
     $2736 = $2735 & 511;
     $2737 = $2736 << 23;
     $2738 = 61 | $2737;
     $2739 = $off69;
     $2740 = $2739 & 65535;
     $2741 = $2740 << 7;
     $2742 = $2738 | $2741;
     (_genop($2732,$2742)|0);
     $2743 = $argc;
     $2744 = (($2743) + 1)|0;
     $argc = $2744;
     $2745 = $0;
     $2746 = ((($2745)) + 172|0);
     $2747 = HEAP32[$2746>>2]|0;
     $2748 = (($2747) + -1)|0;
     HEAP32[$2746>>2] = $2748;
    }
    $2749 = $0;
    $2750 = ((($2749)) + 172|0);
    $2751 = HEAP32[$2750>>2]|0;
    $2752 = (($2751) + -1)|0;
    HEAP32[$2750>>2] = $2752;
   }
   $2753 = $0;
   $2754 = ((($2753)) + 172|0);
   $2755 = HEAP32[$2754>>2]|0;
   $2756 = (($2755) + -1)|0;
   HEAP32[$2754>>2] = $2756;
   $2757 = $0;
   $2758 = $0;
   $2759 = HEAP32[$2758>>2]|0;
   $2760 = (_mrb_intern_static($2759,69634,7)|0);
   $2761 = (_new_sym_1188($2757,$2760)|0);
   $sym68 = $2761;
   $2762 = $0;
   $2763 = $0;
   $2764 = ((($2763)) + 172|0);
   $2765 = HEAP32[$2764>>2]|0;
   $2766 = $2765 & 511;
   $2767 = $2766 << 23;
   $2768 = 32 | $2767;
   $2769 = $sym68;
   $2770 = $2769 & 511;
   $2771 = $2770 << 14;
   $2772 = $2768 | $2771;
   $2773 = $argc;
   $2774 = $2773 & 127;
   $2775 = $2774 << 7;
   $2776 = $2772 | $2775;
   (_genop($2762,$2776)|0);
   $2777 = $0;
   $2778 = HEAP32[$2777>>2]|0;
   $2779 = $ai67;
   _mrb_gc_arena_restore($2778,$2779);
   $2780 = $0;
   _push_($2780);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   $2781 = $2;
   $2782 = ($2781|0)!=(0);
   $2783 = $1;
   $2784 = HEAP32[$2783>>2]|0;
   if (!($2782)) {
    $n77 = $2784;
    while(1) {
     $2954 = $n77;
     $2955 = ($2954|0)!=(0|0);
     if (!($2955)) {
      break;
     }
     $2956 = $n77;
     $2957 = HEAP32[$2956>>2]|0;
     $2958 = HEAP32[$2957>>2]|0;
     $2959 = $2958;
     $2960 = ($2959|0)!=(55);
     if ($2960) {
      $2961 = $0;
      $2962 = $n77;
      $2963 = HEAP32[$2962>>2]|0;
      _codegen($2961,$2963,0);
     }
     $2964 = $n77;
     $2965 = ((($2964)) + 4|0);
     $2966 = HEAP32[$2965>>2]|0;
     $n77 = $2966;
    }
    STACKTOP = sp;return;
   }
   $n70 = $2784;
   $2785 = $0;
   $2786 = HEAP32[$2785>>2]|0;
   $2787 = (_mrb_gc_arena_save($2786)|0);
   $ai71 = $2787;
   $2788 = $0;
   $2789 = $0;
   $2790 = HEAP32[$2789>>2]|0;
   $2791 = (_mrb_intern_static($2790,69627,6)|0);
   $2792 = (_new_sym_1188($2788,$2791)|0);
   $sym72 = $2792;
   $argc73 = 1;
   $2793 = $0;
   $2794 = $0;
   $2795 = ((($2794)) + 172|0);
   $2796 = HEAP32[$2795>>2]|0;
   $2797 = $2796 & 511;
   $2798 = $2797 << 23;
   $2799 = 66 | $2798;
   (_genop($2793,$2799)|0);
   $2800 = $0;
   $2801 = $0;
   $2802 = ((($2801)) + 172|0);
   $2803 = HEAP32[$2802>>2]|0;
   $2804 = $2803 & 511;
   $2805 = $2804 << 23;
   $2806 = 19 | $2805;
   $2807 = $sym72;
   $2808 = $2807 & 65535;
   $2809 = $2808 << 7;
   $2810 = $2806 | $2809;
   (_genop($2800,$2810)|0);
   $2811 = $0;
   _push_($2811);
   $2812 = $0;
   $2813 = $n70;
   $2814 = HEAP32[$2813>>2]|0;
   _codegen($2812,$2814,1);
   $2815 = $n70;
   $2816 = ((($2815)) + 4|0);
   $2817 = HEAP32[$2816>>2]|0;
   $n70 = $2817;
   while(1) {
    $2818 = $n70;
    $2819 = ($2818|0)!=(0|0);
    if (!($2819)) {
     break;
    }
    $2820 = $0;
    $2821 = $n70;
    $2822 = HEAP32[$2821>>2]|0;
    _codegen($2820,$2822,1);
    $2823 = $0;
    $2824 = ((($2823)) + 172|0);
    $2825 = HEAP32[$2824>>2]|0;
    $2826 = (($2825) + -1)|0;
    HEAP32[$2824>>2] = $2826;
    $2827 = $0;
    $2828 = ((($2827)) + 172|0);
    $2829 = HEAP32[$2828>>2]|0;
    $2830 = (($2829) + -1)|0;
    HEAP32[$2828>>2] = $2830;
    $2831 = $0;
    $2832 = $0;
    $2833 = ((($2832)) + 172|0);
    $2834 = HEAP32[$2833>>2]|0;
    $2835 = $2834 & 511;
    $2836 = $2835 << 23;
    $2837 = 62 | $2836;
    $2838 = $0;
    $2839 = ((($2838)) + 172|0);
    $2840 = HEAP32[$2839>>2]|0;
    $2841 = (($2840) + 1)|0;
    $2842 = $2841 & 511;
    $2843 = $2842 << 14;
    $2844 = $2837 | $2843;
    (_genop_peep($2831,$2844,1)|0);
    $2845 = $0;
    _push_($2845);
    $2846 = $n70;
    $2847 = ((($2846)) + 4|0);
    $2848 = HEAP32[$2847>>2]|0;
    $n70 = $2848;
   }
   $2849 = $1;
   $2850 = ((($2849)) + 4|0);
   $2851 = HEAP32[$2850>>2]|0;
   $2852 = ((($2851)) + 4|0);
   $2853 = HEAP32[$2852>>2]|0;
   $n70 = $2853;
   $2854 = $n70;
   $2855 = HEAP32[$2854>>2]|0;
   $2856 = ($2855|0)!=(0|0);
   if ($2856) {
    $2857 = $n70;
    $2858 = HEAP32[$2857>>2]|0;
    $p75 = $2858;
    $2859 = $0;
    $2860 = $0;
    $2861 = HEAP32[$2860>>2]|0;
    $2862 = $p75;
    _mrb_str_new_cstr($18,$2861,$2862);
    ;HEAP32[$$byval_copy23>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$18+4>>2]|0;
    $2863 = (_new_lit($2859,$$byval_copy23)|0);
    $off74 = $2863;
    $2864 = $0;
    $2865 = $1;
    $2866 = HEAP32[$2865>>2]|0;
    _codegen($2864,$2866,1);
    $2867 = $0;
    $2868 = $0;
    $2869 = ((($2868)) + 172|0);
    $2870 = HEAP32[$2869>>2]|0;
    $2871 = $2870 & 511;
    $2872 = $2871 << 23;
    $2873 = 61 | $2872;
    $2874 = $off74;
    $2875 = $2874 & 65535;
    $2876 = $2875 << 7;
    $2877 = $2873 | $2876;
    (_genop($2867,$2877)|0);
    $2878 = $0;
    $2879 = ((($2878)) + 172|0);
    $2880 = HEAP32[$2879>>2]|0;
    $2881 = (($2880) + -1)|0;
    HEAP32[$2879>>2] = $2881;
    $2882 = $0;
    $2883 = $0;
    $2884 = ((($2883)) + 172|0);
    $2885 = HEAP32[$2884>>2]|0;
    $2886 = $2885 & 511;
    $2887 = $2886 << 23;
    $2888 = 62 | $2887;
    $2889 = $0;
    $2890 = ((($2889)) + 172|0);
    $2891 = HEAP32[$2890>>2]|0;
    $2892 = (($2891) + 1)|0;
    $2893 = $2892 & 511;
    $2894 = $2893 << 14;
    $2895 = $2888 | $2894;
    (_genop_peep($2882,$2895,1)|0);
   }
   $2896 = $n70;
   $2897 = ((($2896)) + 4|0);
   $2898 = HEAP32[$2897>>2]|0;
   $2899 = ($2898|0)!=(0|0);
   if ($2899) {
    $2900 = $n70;
    $2901 = ((($2900)) + 4|0);
    $2902 = HEAP32[$2901>>2]|0;
    $p276 = $2902;
    $2903 = $0;
    _push_($2903);
    $2904 = $0;
    $2905 = $0;
    $2906 = HEAP32[$2905>>2]|0;
    $2907 = $p276;
    _mrb_str_new_cstr($19,$2906,$2907);
    ;HEAP32[$$byval_copy24>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$19+4>>2]|0;
    $2908 = (_new_lit($2904,$$byval_copy24)|0);
    $off74 = $2908;
    $2909 = $0;
    $2910 = $0;
    $2911 = ((($2910)) + 172|0);
    $2912 = HEAP32[$2911>>2]|0;
    $2913 = $2912 & 511;
    $2914 = $2913 << 23;
    $2915 = 61 | $2914;
    $2916 = $off74;
    $2917 = $2916 & 65535;
    $2918 = $2917 << 7;
    $2919 = $2915 | $2918;
    (_genop($2909,$2919)|0);
    $2920 = $argc73;
    $2921 = (($2920) + 1)|0;
    $argc73 = $2921;
    $2922 = $0;
    $2923 = ((($2922)) + 172|0);
    $2924 = HEAP32[$2923>>2]|0;
    $2925 = (($2924) + -1)|0;
    HEAP32[$2923>>2] = $2925;
   }
   $2926 = $0;
   $2927 = ((($2926)) + 172|0);
   $2928 = HEAP32[$2927>>2]|0;
   $2929 = (($2928) + -1)|0;
   HEAP32[$2927>>2] = $2929;
   $2930 = $0;
   $2931 = $0;
   $2932 = HEAP32[$2931>>2]|0;
   $2933 = (_mrb_intern_static($2932,69634,7)|0);
   $2934 = (_new_sym_1188($2930,$2933)|0);
   $sym72 = $2934;
   $2935 = $0;
   $2936 = $0;
   $2937 = ((($2936)) + 172|0);
   $2938 = HEAP32[$2937>>2]|0;
   $2939 = $2938 & 511;
   $2940 = $2939 << 23;
   $2941 = 32 | $2940;
   $2942 = $sym72;
   $2943 = $2942 & 511;
   $2944 = $2943 << 14;
   $2945 = $2941 | $2944;
   $2946 = $argc73;
   $2947 = $2946 & 127;
   $2948 = $2947 << 7;
   $2949 = $2945 | $2948;
   (_genop($2935,$2949)|0);
   $2950 = $0;
   $2951 = HEAP32[$2950>>2]|0;
   $2952 = $ai71;
   _mrb_gc_arena_restore($2951,$2952);
   $2953 = $0;
   _push_($2953);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   $2967 = $2;
   $2968 = ($2967|0)!=(0);
   if (!($2968)) {
    STACKTOP = sp;return;
   }
   $2969 = $0;
   $2970 = $1;
   $2971 = $2970;
   $2972 = (_new_sym_1188($2969,$2971)|0);
   $sym78 = $2972;
   $2973 = $0;
   $2974 = $0;
   $2975 = ((($2974)) + 172|0);
   $2976 = HEAP32[$2975>>2]|0;
   $2977 = $2976 & 511;
   $2978 = $2977 << 23;
   $2979 = 4 | $2978;
   $2980 = $sym78;
   $2981 = $2980 & 65535;
   $2982 = $2981 << 7;
   $2983 = $2979 | $2982;
   (_genop($2973,$2983)|0);
   $2984 = $0;
   _push_($2984);
   STACKTOP = sp;return;
   break;
  }
  case 97:  {
   $2985 = $0;
   $2986 = $1;
   $2987 = $2;
   _codegen($2985,$2986,$2987);
   $2988 = $2;
   $2989 = ($2988|0)!=(0);
   if (!($2989)) {
    STACKTOP = sp;return;
   }
   $2990 = $0;
   _gen_send_intern($2990);
   STACKTOP = sp;return;
   break;
  }
  case 85:  {
   $2991 = $2;
   $2992 = ($2991|0)!=(0);
   if (!($2992)) {
    STACKTOP = sp;return;
   }
   $2993 = $0;
   $2994 = $0;
   $2995 = ((($2994)) + 172|0);
   $2996 = HEAP32[$2995>>2]|0;
   $2997 = $2996 & 511;
   $2998 = $2997 << 23;
   $2999 = 6 | $2998;
   (_genop($2993,$2999)|0);
   $3000 = $0;
   _push_($3000);
   STACKTOP = sp;return;
   break;
  }
  case 86:  {
   $3001 = $2;
   $3002 = ($3001|0)!=(0);
   if (!($3002)) {
    STACKTOP = sp;return;
   }
   $3003 = $0;
   $3004 = $0;
   $3005 = ((($3004)) + 172|0);
   $3006 = HEAP32[$3005>>2]|0;
   $3007 = $3006 & 511;
   $3008 = $3007 << 23;
   $3009 = 5 | $3008;
   (_genop($3003,$3009)|0);
   $3010 = $0;
   _push_($3010);
   STACKTOP = sp;return;
   break;
  }
  case 87:  {
   $3011 = $2;
   $3012 = ($3011|0)!=(0);
   if (!($3012)) {
    STACKTOP = sp;return;
   }
   $3013 = $0;
   $3014 = $0;
   $3015 = ((($3014)) + 172|0);
   $3016 = HEAP32[$3015>>2]|0;
   $3017 = $3016 & 511;
   $3018 = $3017 << 23;
   $3019 = 7 | $3018;
   (_genop($3013,$3019)|0);
   $3020 = $0;
   _push_($3020);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $3021 = $2;
   $3022 = ($3021|0)!=(0);
   if (!($3022)) {
    STACKTOP = sp;return;
   }
   $3023 = $0;
   $3024 = $0;
   $3025 = ((($3024)) + 172|0);
   $3026 = HEAP32[$3025>>2]|0;
   $3027 = $3026 & 511;
   $3028 = $3027 << 23;
   $3029 = 8 | $3028;
   (_genop($3023,$3029)|0);
   $3030 = $0;
   _push_($3030);
   STACKTOP = sp;return;
   break;
  }
  case 72:  {
   $3031 = $0;
   $3032 = $1;
   $3033 = HEAP32[$3032>>2]|0;
   $3034 = $3033;
   $3035 = (_new_msym($3031,$3034)|0);
   $a = $3035;
   $3036 = $0;
   $3037 = $1;
   $3038 = ((($3037)) + 4|0);
   $3039 = HEAP32[$3038>>2]|0;
   $3040 = $3039;
   $3041 = (_new_msym($3036,$3040)|0);
   $b = $3041;
   $3042 = $0;
   $3043 = $0;
   $3044 = HEAP32[$3043>>2]|0;
   $3045 = (_mrb_intern_static($3044,69642,12)|0);
   $3046 = (_new_msym($3042,$3045)|0);
   $c = $3046;
   $3047 = $0;
   $3048 = $0;
   $3049 = ((($3048)) + 172|0);
   $3050 = HEAP32[$3049>>2]|0;
   $3051 = $3050 & 511;
   $3052 = $3051 << 23;
   $3053 = 72 | $3052;
   (_genop($3047,$3053)|0);
   $3054 = $0;
   _push_($3054);
   $3055 = $0;
   $3056 = $0;
   $3057 = ((($3056)) + 172|0);
   $3058 = HEAP32[$3057>>2]|0;
   $3059 = $3058 & 511;
   $3060 = $3059 << 23;
   $3061 = 4 | $3060;
   $3062 = $a;
   $3063 = $3062 & 65535;
   $3064 = $3063 << 7;
   $3065 = $3061 | $3064;
   (_genop($3055,$3065)|0);
   $3066 = $0;
   _push_($3066);
   $3067 = $0;
   $3068 = $0;
   $3069 = ((($3068)) + 172|0);
   $3070 = HEAP32[$3069>>2]|0;
   $3071 = $3070 & 511;
   $3072 = $3071 << 23;
   $3073 = 4 | $3072;
   $3074 = $b;
   $3075 = $3074 & 65535;
   $3076 = $3075 << 7;
   $3077 = $3073 | $3076;
   (_genop($3067,$3077)|0);
   $3078 = $0;
   _push_($3078);
   $3079 = $0;
   $3080 = $0;
   $3081 = ((($3080)) + 172|0);
   $3082 = HEAP32[$3081>>2]|0;
   $3083 = $3082 & 511;
   $3084 = $3083 << 23;
   $3085 = 5 | $3084;
   (_genop($3079,$3085)|0);
   $3086 = $0;
   $3087 = ((($3086)) + 172|0);
   $3088 = HEAP32[$3087>>2]|0;
   $3089 = (($3088) - 3)|0;
   HEAP32[$3087>>2] = $3089;
   $3090 = $0;
   $3091 = $0;
   $3092 = ((($3091)) + 172|0);
   $3093 = HEAP32[$3092>>2]|0;
   $3094 = $3093 & 511;
   $3095 = $3094 << 23;
   $3096 = 32 | $3095;
   $3097 = $c;
   $3098 = $3097 & 511;
   $3099 = $3098 << 14;
   $3100 = $3096 | $3099;
   $3101 = $3100 | 256;
   (_genop($3090,$3101)|0);
   $3102 = $2;
   $3103 = ($3102|0)!=(0);
   if (!($3103)) {
    STACKTOP = sp;return;
   }
   $3104 = $0;
   _push_($3104);
   STACKTOP = sp;return;
   break;
  }
  case 73:  {
   $3105 = $0;
   $3106 = $0;
   $3107 = HEAP32[$3106>>2]|0;
   $3108 = (_mrb_intern_static($3107,69655,12)|0);
   $3109 = (_new_msym($3105,$3108)|0);
   $undef = $3109;
   $num = 0;
   $3110 = $1;
   $t79 = $3110;
   $3111 = $0;
   $3112 = $0;
   $3113 = ((($3112)) + 172|0);
   $3114 = HEAP32[$3113>>2]|0;
   $3115 = $3114 & 511;
   $3116 = $3115 << 23;
   $3117 = 72 | $3116;
   (_genop($3111,$3117)|0);
   $3118 = $0;
   _push_($3118);
   while(1) {
    $3119 = $t79;
    $3120 = ($3119|0)!=(0|0);
    if (!($3120)) {
     break;
    }
    $3121 = $0;
    $3122 = $t79;
    $3123 = HEAP32[$3122>>2]|0;
    $3124 = $3123;
    $3125 = (_new_msym($3121,$3124)|0);
    $symbol = $3125;
    $3126 = $0;
    $3127 = $0;
    $3128 = ((($3127)) + 172|0);
    $3129 = HEAP32[$3128>>2]|0;
    $3130 = $3129 & 511;
    $3131 = $3130 << 23;
    $3132 = 4 | $3131;
    $3133 = $symbol;
    $3134 = $3133 & 65535;
    $3135 = $3134 << 7;
    $3136 = $3132 | $3135;
    (_genop($3126,$3136)|0);
    $3137 = $0;
    _push_($3137);
    $3138 = $t79;
    $3139 = ((($3138)) + 4|0);
    $3140 = HEAP32[$3139>>2]|0;
    $t79 = $3140;
    $3141 = $num;
    $3142 = (($3141) + 1)|0;
    $num = $3142;
   }
   $3143 = $num;
   $3144 = (($3143) + 1)|0;
   $3145 = $0;
   $3146 = ((($3145)) + 172|0);
   $3147 = HEAP32[$3146>>2]|0;
   $3148 = (($3147) - ($3144))|0;
   HEAP32[$3146>>2] = $3148;
   $3149 = $0;
   $3150 = $0;
   $3151 = ((($3150)) + 172|0);
   $3152 = HEAP32[$3151>>2]|0;
   $3153 = $3152 & 511;
   $3154 = $3153 << 23;
   $3155 = 32 | $3154;
   $3156 = $undef;
   $3157 = $3156 & 511;
   $3158 = $3157 << 14;
   $3159 = $3155 | $3158;
   $3160 = $num;
   $3161 = $3160 & 127;
   $3162 = $3161 << 7;
   $3163 = $3159 | $3162;
   (_genop($3149,$3163)|0);
   $3164 = $2;
   $3165 = ($3164|0)!=(0);
   if (!($3165)) {
    STACKTOP = sp;return;
   }
   $3166 = $0;
   _push_($3166);
   STACKTOP = sp;return;
   break;
  }
  case 74:  {
   $3167 = $1;
   $3168 = HEAP32[$3167>>2]|0;
   $3169 = HEAP32[$3168>>2]|0;
   $3170 = ($3169|0)==(0|0);
   do {
    if ($3170) {
     $3171 = $0;
     $3172 = $0;
     $3173 = ((($3172)) + 172|0);
     $3174 = HEAP32[$3173>>2]|0;
     $3175 = $3174 & 511;
     $3176 = $3175 << 23;
     $3177 = 5 | $3176;
     (_genop($3171,$3177)|0);
     $3178 = $0;
     _push_($3178);
    } else {
     $3179 = $1;
     $3180 = HEAP32[$3179>>2]|0;
     $3181 = HEAP32[$3180>>2]|0;
     $3182 = ($3181|0)==((1)|0);
     $3183 = $0;
     if ($3182) {
      $3184 = $0;
      $3185 = ((($3184)) + 172|0);
      $3186 = HEAP32[$3185>>2]|0;
      $3187 = $3186 & 511;
      $3188 = $3187 << 23;
      $3189 = 66 | $3188;
      (_genop($3183,$3189)|0);
      $3190 = $0;
      _push_($3190);
      break;
     } else {
      $3191 = $1;
      $3192 = HEAP32[$3191>>2]|0;
      $3193 = HEAP32[$3192>>2]|0;
      _codegen($3183,$3193,1);
      break;
     }
    }
   } while(0);
   $3194 = $1;
   $3195 = ((($3194)) + 4|0);
   $3196 = HEAP32[$3195>>2]|0;
   $3197 = HEAP32[$3196>>2]|0;
   $3198 = ($3197|0)!=(0|0);
   $3199 = $0;
   if ($3198) {
    $3200 = $1;
    $3201 = ((($3200)) + 4|0);
    $3202 = HEAP32[$3201>>2]|0;
    $3203 = HEAP32[$3202>>2]|0;
    _codegen($3199,$3203,1);
   } else {
    $3204 = $0;
    $3205 = ((($3204)) + 172|0);
    $3206 = HEAP32[$3205>>2]|0;
    $3207 = $3206 & 511;
    $3208 = $3207 << 23;
    $3209 = 5 | $3208;
    (_genop($3199,$3209)|0);
    $3210 = $0;
    _push_($3210);
   }
   $3211 = $0;
   $3212 = ((($3211)) + 172|0);
   $3213 = HEAP32[$3212>>2]|0;
   $3214 = (($3213) + -1)|0;
   HEAP32[$3212>>2] = $3214;
   $3215 = $0;
   $3216 = ((($3215)) + 172|0);
   $3217 = HEAP32[$3216>>2]|0;
   $3218 = (($3217) + -1)|0;
   HEAP32[$3216>>2] = $3218;
   $3219 = $0;
   $3220 = $1;
   $3221 = HEAP32[$3220>>2]|0;
   $3222 = ((($3221)) + 4|0);
   $3223 = HEAP32[$3222>>2]|0;
   $3224 = $3223;
   $3225 = (_new_msym($3219,$3224)|0);
   $idx80 = $3225;
   $3226 = $0;
   $3227 = $0;
   $3228 = ((($3227)) + 172|0);
   $3229 = HEAP32[$3228>>2]|0;
   $3230 = $3229 & 511;
   $3231 = $3230 << 23;
   $3232 = 67 | $3231;
   $3233 = $idx80;
   $3234 = $3233 & 511;
   $3235 = $3234 << 14;
   $3236 = $3232 | $3235;
   (_genop($3226,$3236)|0);
   $3237 = $0;
   $3238 = $1;
   $3239 = ((($3238)) + 4|0);
   $3240 = HEAP32[$3239>>2]|0;
   $3241 = ((($3240)) + 4|0);
   $3242 = HEAP32[$3241>>2]|0;
   $3243 = HEAP32[$3242>>2]|0;
   $3244 = $2;
   $3245 = (_scope_body($3237,$3243,$3244)|0);
   $idx80 = $3245;
   $3246 = $0;
   $3247 = $0;
   $3248 = ((($3247)) + 172|0);
   $3249 = HEAP32[$3248>>2]|0;
   $3250 = $3249 & 511;
   $3251 = $3250 << 23;
   $3252 = 69 | $3251;
   $3253 = $idx80;
   $3254 = $3253 & 65535;
   $3255 = $3254 << 7;
   $3256 = $3252 | $3255;
   (_genop($3246,$3256)|0);
   $3257 = $2;
   $3258 = ($3257|0)!=(0);
   if (!($3258)) {
    STACKTOP = sp;return;
   }
   $3259 = $0;
   _push_($3259);
   STACKTOP = sp;return;
   break;
  }
  case 75:  {
   $3260 = $1;
   $3261 = HEAP32[$3260>>2]|0;
   $3262 = HEAP32[$3261>>2]|0;
   $3263 = ($3262|0)==(0|0);
   do {
    if ($3263) {
     $3264 = $0;
     $3265 = $0;
     $3266 = ((($3265)) + 172|0);
     $3267 = HEAP32[$3266>>2]|0;
     $3268 = $3267 & 511;
     $3269 = $3268 << 23;
     $3270 = 5 | $3269;
     (_genop($3264,$3270)|0);
     $3271 = $0;
     _push_($3271);
    } else {
     $3272 = $1;
     $3273 = HEAP32[$3272>>2]|0;
     $3274 = HEAP32[$3273>>2]|0;
     $3275 = ($3274|0)==((1)|0);
     $3276 = $0;
     if ($3275) {
      $3277 = $0;
      $3278 = ((($3277)) + 172|0);
      $3279 = HEAP32[$3278>>2]|0;
      $3280 = $3279 & 511;
      $3281 = $3280 << 23;
      $3282 = 66 | $3281;
      (_genop($3276,$3282)|0);
      $3283 = $0;
      _push_($3283);
      break;
     } else {
      $3284 = $1;
      $3285 = HEAP32[$3284>>2]|0;
      $3286 = HEAP32[$3285>>2]|0;
      _codegen($3276,$3286,1);
      break;
     }
    }
   } while(0);
   $3287 = $0;
   $3288 = ((($3287)) + 172|0);
   $3289 = HEAP32[$3288>>2]|0;
   $3290 = (($3289) + -1)|0;
   HEAP32[$3288>>2] = $3290;
   $3291 = $0;
   $3292 = $1;
   $3293 = HEAP32[$3292>>2]|0;
   $3294 = ((($3293)) + 4|0);
   $3295 = HEAP32[$3294>>2]|0;
   $3296 = $3295;
   $3297 = (_new_msym($3291,$3296)|0);
   $idx81 = $3297;
   $3298 = $0;
   $3299 = $0;
   $3300 = ((($3299)) + 172|0);
   $3301 = HEAP32[$3300>>2]|0;
   $3302 = $3301 & 511;
   $3303 = $3302 << 23;
   $3304 = 68 | $3303;
   $3305 = $idx81;
   $3306 = $3305 & 511;
   $3307 = $3306 << 14;
   $3308 = $3304 | $3307;
   (_genop($3298,$3308)|0);
   $3309 = $0;
   $3310 = $1;
   $3311 = ((($3310)) + 4|0);
   $3312 = HEAP32[$3311>>2]|0;
   $3313 = HEAP32[$3312>>2]|0;
   $3314 = $2;
   $3315 = (_scope_body($3309,$3313,$3314)|0);
   $idx81 = $3315;
   $3316 = $0;
   $3317 = $0;
   $3318 = ((($3317)) + 172|0);
   $3319 = HEAP32[$3318>>2]|0;
   $3320 = $3319 & 511;
   $3321 = $3320 << 23;
   $3322 = 69 | $3321;
   $3323 = $idx81;
   $3324 = $3323 & 65535;
   $3325 = $3324 << 7;
   $3326 = $3322 | $3325;
   (_genop($3316,$3326)|0);
   $3327 = $2;
   $3328 = ($3327|0)!=(0);
   if (!($3328)) {
    STACKTOP = sp;return;
   }
   $3329 = $0;
   _push_($3329);
   STACKTOP = sp;return;
   break;
  }
  case 76:  {
   $3330 = $0;
   $3331 = $1;
   $3332 = HEAP32[$3331>>2]|0;
   _codegen($3330,$3332,1);
   $3333 = $0;
   $3334 = ((($3333)) + 172|0);
   $3335 = HEAP32[$3334>>2]|0;
   $3336 = (($3335) + -1)|0;
   HEAP32[$3334>>2] = $3336;
   $3337 = $0;
   $3338 = $0;
   $3339 = ((($3338)) + 172|0);
   $3340 = HEAP32[$3339>>2]|0;
   $3341 = $3340 & 511;
   $3342 = $3341 << 23;
   $3343 = 71 | $3342;
   $3344 = $0;
   $3345 = ((($3344)) + 172|0);
   $3346 = HEAP32[$3345>>2]|0;
   $3347 = $3346 & 511;
   $3348 = $3347 << 14;
   $3349 = $3343 | $3348;
   (_genop($3337,$3349)|0);
   $3350 = $0;
   $3351 = $1;
   $3352 = ((($3351)) + 4|0);
   $3353 = HEAP32[$3352>>2]|0;
   $3354 = HEAP32[$3353>>2]|0;
   $3355 = $2;
   $3356 = (_scope_body($3350,$3354,$3355)|0);
   $idx82 = $3356;
   $3357 = $0;
   $3358 = $0;
   $3359 = ((($3358)) + 172|0);
   $3360 = HEAP32[$3359>>2]|0;
   $3361 = $3360 & 511;
   $3362 = $3361 << 23;
   $3363 = 69 | $3362;
   $3364 = $idx82;
   $3365 = $3364 & 65535;
   $3366 = $3365 << 7;
   $3367 = $3363 | $3366;
   (_genop($3357,$3367)|0);
   $3368 = $2;
   $3369 = ($3368|0)!=(0);
   if (!($3369)) {
    STACKTOP = sp;return;
   }
   $3370 = $0;
   _push_($3370);
   STACKTOP = sp;return;
   break;
  }
  case 70:  {
   $3371 = $0;
   $3372 = $1;
   $3373 = HEAP32[$3372>>2]|0;
   $3374 = $3373;
   $3375 = (_new_msym($3371,$3374)|0);
   $sym83 = $3375;
   $3376 = $0;
   $3377 = $1;
   $3378 = ((($3377)) + 4|0);
   $3379 = HEAP32[$3378>>2]|0;
   $3380 = (_lambda_body($3376,$3379,0)|0);
   $idx84 = $3380;
   $3381 = $0;
   $3382 = $0;
   $3383 = ((($3382)) + 172|0);
   $3384 = HEAP32[$3383>>2]|0;
   $3385 = $3384 & 511;
   $3386 = $3385 << 23;
   $3387 = 72 | $3386;
   (_genop($3381,$3387)|0);
   $3388 = $0;
   _push_($3388);
   $3389 = $0;
   $3390 = $0;
   $3391 = ((($3390)) + 172|0);
   $3392 = HEAP32[$3391>>2]|0;
   $3393 = $3392 & 511;
   $3394 = $3393 << 23;
   $3395 = 64 | $3394;
   $3396 = $idx84;
   $3397 = $3396 & 16383;
   $3398 = $3397 << 9;
   $3399 = $3398 | 128;
   $3400 = $3395 | $3399;
   (_genop($3389,$3400)|0);
   $3401 = $0;
   _push_($3401);
   $3402 = $0;
   $3403 = ((($3402)) + 172|0);
   $3404 = HEAP32[$3403>>2]|0;
   $3405 = (($3404) + -1)|0;
   HEAP32[$3403>>2] = $3405;
   $3406 = $0;
   $3407 = ((($3406)) + 172|0);
   $3408 = HEAP32[$3407>>2]|0;
   $3409 = (($3408) + -1)|0;
   HEAP32[$3407>>2] = $3409;
   $3410 = $0;
   $3411 = $0;
   $3412 = ((($3411)) + 172|0);
   $3413 = HEAP32[$3412>>2]|0;
   $3414 = $3413 & 511;
   $3415 = $3414 << 23;
   $3416 = 70 | $3415;
   $3417 = $sym83;
   $3418 = $3417 & 511;
   $3419 = $3418 << 14;
   $3420 = $3416 | $3419;
   (_genop($3410,$3420)|0);
   $3421 = $2;
   $3422 = ($3421|0)!=(0);
   if (!($3422)) {
    STACKTOP = sp;return;
   }
   $3423 = $0;
   $3424 = $0;
   $3425 = ((($3424)) + 172|0);
   $3426 = HEAP32[$3425>>2]|0;
   $3427 = $3426 & 511;
   $3428 = $3427 << 23;
   $3429 = 4 | $3428;
   $3430 = $sym83;
   $3431 = $3430 & 65535;
   $3432 = $3431 << 7;
   $3433 = $3429 | $3432;
   (_genop($3423,$3433)|0);
   $3434 = $0;
   _push_($3434);
   STACKTOP = sp;return;
   break;
  }
  case 71:  {
   $3435 = $1;
   $3436 = HEAP32[$3435>>2]|0;
   $recv = $3436;
   $3437 = $0;
   $3438 = $1;
   $3439 = ((($3438)) + 4|0);
   $3440 = HEAP32[$3439>>2]|0;
   $3441 = HEAP32[$3440>>2]|0;
   $3442 = $3441;
   $3443 = (_new_msym($3437,$3442)|0);
   $sym85 = $3443;
   $3444 = $0;
   $3445 = $1;
   $3446 = ((($3445)) + 4|0);
   $3447 = HEAP32[$3446>>2]|0;
   $3448 = ((($3447)) + 4|0);
   $3449 = HEAP32[$3448>>2]|0;
   $3450 = (_lambda_body($3444,$3449,0)|0);
   $idx86 = $3450;
   $3451 = $0;
   $3452 = $recv;
   _codegen($3451,$3452,1);
   $3453 = $0;
   $3454 = ((($3453)) + 172|0);
   $3455 = HEAP32[$3454>>2]|0;
   $3456 = (($3455) + -1)|0;
   HEAP32[$3454>>2] = $3456;
   $3457 = $0;
   $3458 = $0;
   $3459 = ((($3458)) + 172|0);
   $3460 = HEAP32[$3459>>2]|0;
   $3461 = $3460 & 511;
   $3462 = $3461 << 23;
   $3463 = 71 | $3462;
   $3464 = $0;
   $3465 = ((($3464)) + 172|0);
   $3466 = HEAP32[$3465>>2]|0;
   $3467 = $3466 & 511;
   $3468 = $3467 << 14;
   $3469 = $3463 | $3468;
   (_genop($3457,$3469)|0);
   $3470 = $0;
   _push_($3470);
   $3471 = $0;
   $3472 = $0;
   $3473 = ((($3472)) + 172|0);
   $3474 = HEAP32[$3473>>2]|0;
   $3475 = $3474 & 511;
   $3476 = $3475 << 23;
   $3477 = 64 | $3476;
   $3478 = $idx86;
   $3479 = $3478 & 16383;
   $3480 = $3479 << 9;
   $3481 = $3480 | 128;
   $3482 = $3477 | $3481;
   (_genop($3471,$3482)|0);
   $3483 = $0;
   $3484 = ((($3483)) + 172|0);
   $3485 = HEAP32[$3484>>2]|0;
   $3486 = (($3485) + -1)|0;
   HEAP32[$3484>>2] = $3486;
   $3487 = $0;
   $3488 = $0;
   $3489 = ((($3488)) + 172|0);
   $3490 = HEAP32[$3489>>2]|0;
   $3491 = $3490 & 511;
   $3492 = $3491 << 23;
   $3493 = 70 | $3492;
   $3494 = $sym85;
   $3495 = $3494 & 511;
   $3496 = $3495 << 14;
   $3497 = $3493 | $3496;
   (_genop($3487,$3497)|0);
   $3498 = $2;
   $3499 = ($3498|0)!=(0);
   if (!($3499)) {
    STACKTOP = sp;return;
   }
   $3500 = $0;
   $3501 = $0;
   $3502 = ((($3501)) + 172|0);
   $3503 = HEAP32[$3502>>2]|0;
   $3504 = $3503 & 511;
   $3505 = $3504 << 23;
   $3506 = 4 | $3505;
   $3507 = $sym85;
   $3508 = $3507 & 65535;
   $3509 = $3508 << 7;
   $3510 = $3506 | $3509;
   (_genop($3500,$3510)|0);
   $3511 = $0;
   _push_($3511);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $2386 = $2;
 $2387 = ($2386|0)!=(0);
 $2388 = $1;
 if ($2387) {
  $n57 = $2388;
  $2389 = $n57;
  $2390 = ($2389|0)!=(0|0);
  if (!($2390)) {
   STACKTOP = sp;return;
  }
  $2391 = $0;
  $2392 = $n57;
  $2393 = HEAP32[$2392>>2]|0;
  _codegen($2391,$2393,1);
  $2394 = $n57;
  $2395 = ((($2394)) + 4|0);
  $2396 = HEAP32[$2395>>2]|0;
  $n57 = $2396;
  while(1) {
   $2397 = $n57;
   $2398 = ($2397|0)!=(0|0);
   if (!($2398)) {
    break;
   }
   $2399 = $0;
   $2400 = $n57;
   $2401 = HEAP32[$2400>>2]|0;
   _codegen($2399,$2401,1);
   $2402 = $0;
   $2403 = ((($2402)) + 172|0);
   $2404 = HEAP32[$2403>>2]|0;
   $2405 = (($2404) + -1)|0;
   HEAP32[$2403>>2] = $2405;
   $2406 = $0;
   $2407 = ((($2406)) + 172|0);
   $2408 = HEAP32[$2407>>2]|0;
   $2409 = (($2408) + -1)|0;
   HEAP32[$2407>>2] = $2409;
   $2410 = $0;
   $2411 = $0;
   $2412 = ((($2411)) + 172|0);
   $2413 = HEAP32[$2412>>2]|0;
   $2414 = $2413 & 511;
   $2415 = $2414 << 23;
   $2416 = 62 | $2415;
   $2417 = $0;
   $2418 = ((($2417)) + 172|0);
   $2419 = HEAP32[$2418>>2]|0;
   $2420 = (($2419) + 1)|0;
   $2421 = $2420 & 511;
   $2422 = $2421 << 14;
   $2423 = $2416 | $2422;
   (_genop_peep($2410,$2423,1)|0);
   $2424 = $0;
   _push_($2424);
   $2425 = $n57;
   $2426 = ((($2425)) + 4|0);
   $2427 = HEAP32[$2426>>2]|0;
   $n57 = $2427;
  }
  STACKTOP = sp;return;
 } else {
  $n58 = $2388;
  while(1) {
   $2428 = $n58;
   $2429 = ($2428|0)!=(0|0);
   if (!($2429)) {
    break;
   }
   $2430 = $n58;
   $2431 = HEAP32[$2430>>2]|0;
   $2432 = HEAP32[$2431>>2]|0;
   $2433 = $2432;
   $2434 = ($2433|0)!=(55);
   if ($2434) {
    $2435 = $0;
    $2436 = $n58;
    $2437 = HEAP32[$2436>>2]|0;
    _codegen($2435,$2437,0);
   }
   $2438 = $n58;
   $2439 = ((($2438)) + 4|0);
   $2440 = HEAP32[$2439>>2]|0;
   $n58 = $2440;
  }
  STACKTOP = sp;return;
 }
}
function _genop($s,$i) {
 $s = $s|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $i;
 $2 = $0;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 212|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if ($8) {
  $9 = $0;
  $10 = ((($9)) + 212|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<1;
  HEAP32[$10>>2] = $12;
  $13 = $0;
  $14 = $0;
  $15 = ((($14)) + 204|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  $18 = ((($17)) + 212|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<2;
  $21 = (_codegen_realloc($13,$16,$20)|0);
  $22 = $0;
  $23 = ((($22)) + 204|0);
  HEAP32[$23>>2] = $21;
  $24 = $0;
  $25 = ((($24)) + 208|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $0;
   $29 = $0;
   $30 = ((($29)) + 208|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   $33 = ((($32)) + 212|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34<<1;
   $36 = (_codegen_realloc($28,$31,$35)|0);
   $37 = $0;
   $38 = ((($37)) + 208|0);
   HEAP32[$38>>2] = $36;
   $39 = $0;
   $40 = ((($39)) + 208|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $0;
   $43 = ((($42)) + 216|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 32|0);
   HEAP32[$45>>2] = $41;
  }
 }
 $46 = $1;
 $47 = $0;
 $48 = ((($47)) + 176|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $0;
 $51 = ((($50)) + 204|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($49<<2)|0);
 HEAP32[$53>>2] = $46;
 $54 = $0;
 $55 = ((($54)) + 208|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  $68 = $0;
  $69 = ((($68)) + 176|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
  STACKTOP = sp;return ($70|0);
 }
 $58 = $0;
 $59 = ((($58)) + 200|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $0;
 $62 = ((($61)) + 176|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $0;
 $65 = ((($64)) + 208|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($63<<1)|0);
 HEAP16[$67>>1] = $60;
 $68 = $0;
 $69 = ((($68)) + 176|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 1)|0;
 HEAP32[$69>>2] = $71;
 STACKTOP = sp;return ($70|0);
}
function _push_($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(511);
 if ($4) {
  $5 = $0;
  _codegen_error($5,69323);
 }
 $6 = $0;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 172|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 234|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($12|0)>($16|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = ((($18)) + 172|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 $22 = $0;
 $23 = ((($22)) + 234|0);
 HEAP16[$23>>1] = $21;
 STACKTOP = sp;return;
}
function _loop_push($s,$t) {
 $s = $s|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $t;
 $2 = $0;
 $3 = (_codegen_palloc($2,28)|0);
 $p = $3;
 $4 = $1;
 $5 = $p;
 HEAP32[$5>>2] = $4;
 $6 = $p;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = $p;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $p;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 188|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $p;
 $16 = ((($15)) + 24|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = ((($17)) + 192|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $p;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = ((($22)) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $p;
 $26 = ((($25)) + 16|0);
 HEAP32[$26>>2] = $24;
 $27 = $p;
 $28 = $0;
 $29 = ((($28)) + 188|0);
 HEAP32[$29>>2] = $27;
 $30 = $p;
 STACKTOP = sp;return ($30|0);
}
function _codegen_palloc($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $len;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_mrb_pool_alloc($4,$5)|0);
 $p = $6;
 $7 = $p;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $10 = $p;
  STACKTOP = sp;return ($10|0);
 }
 $9 = $0;
 _codegen_error($9,69346);
 $10 = $p;
 STACKTOP = sp;return ($10|0);
}
function _dispatch($s,$pc) {
 $s = $s|0;
 $pc = $pc|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $diff = 0, $i = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $pc;
 $2 = $0;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $diff = $6;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $i = $12;
 $13 = $i;
 $14 = $13 & 127;
 $c = $14;
 $15 = $0;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = ((($18)) + 180|0);
 HEAP32[$19>>2] = $17;
 $20 = $c;
 $$off = (($20) + -23)|0;
 $switch = ($$off>>>0)<(4);
 if (!($switch)) {
  $21 = HEAP32[637]|0;
  (_fprintf($21,69369,$vararg_buffer)|0);
  $22 = $0;
  _scope_error($22);
 }
 $23 = $c;
 $24 = $23 & 127;
 $25 = $i;
 $26 = $25 >>> 23;
 $27 = $26 & 511;
 $28 = $27 & 511;
 $29 = $28 << 23;
 $30 = $24 | $29;
 $31 = $diff;
 $32 = (($31) + 32767)|0;
 $33 = $32 & 65535;
 $34 = $33 << 7;
 $35 = $30 | $34;
 $36 = $1;
 $37 = $0;
 $38 = ((($37)) + 204|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 HEAP32[$40>>2] = $35;
 STACKTOP = sp;return;
}
function _scope_error($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 _exit(1);
 // unreachable;
}
function _new_msym($s,$sym) {
 $s = $s|0;
 $sym = $sym|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $sym;
 $3 = $1;
 $4 = ((($3)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $len = $7;
 $8 = $len;
 $9 = ($8>>>0)>(256);
 $$ = $9 ? 256 : $7;
 $len = $$;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $len;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $1;
  $15 = ((($14)) + 216|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ($20|0)==($21|0);
  $23 = $i;
  if ($22) {
   label = 4;
   break;
  }
  $24 = $1;
  $25 = ((($24)) + 216|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($23<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if ($31) {
   break;
  }
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 if ((label|0) == 4) {
  $0 = $23;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $34 = $i;
 $35 = ($34|0)==(256);
 if ($35) {
  $36 = $1;
  _codegen_error($36,69412);
 }
 $37 = $2;
 $38 = $i;
 $39 = $1;
 $40 = ((($39)) + 216|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($38<<2)|0);
 HEAP32[$44>>2] = $37;
 $45 = $i;
 $46 = $1;
 $47 = ((($46)) + 216|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 48|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($45|0)==($50|0);
 if ($51) {
  $52 = $1;
  $53 = ((($52)) + 216|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$55>>2] = $57;
 }
 $58 = $i;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _dispatch_linked($s,$pc) {
 $s = $s|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $pc;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = $1;
  $5 = $0;
  $6 = ((($5)) + 204|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($4<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $i = $9;
  $10 = $i;
  $11 = $10 >>> 7;
  $12 = $11 & 65535;
  $13 = (($12) - 32767)|0;
  $pos = $13;
  $14 = $0;
  $15 = $1;
  _dispatch($14,$15);
  $16 = $pos;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $1 = $18;
 }
 STACKTOP = sp;return;
}
function _gen_assignment($s,$tree,$sp,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $sp = $sp|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $idx = 0, $lv = 0, $type = 0, $up = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $tree;
 $2 = $sp;
 $3 = $val;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $type = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $1 = $9;
 $10 = $type;
 L1: do {
  switch ($10|0) {
  case 41:  {
   $11 = $0;
   $12 = $1;
   $13 = $12;
   $14 = (_new_sym_1188($11,$13)|0);
   $idx = $14;
   $15 = $0;
   $16 = $2;
   $17 = $16 & 511;
   $18 = $17 << 23;
   $19 = 10 | $18;
   $20 = $idx;
   $21 = $20 & 65535;
   $22 = $21 << 7;
   $23 = $19 | $22;
   $24 = $3;
   (_genop_peep($15,$23,$24)|0);
   break;
  }
  case 39:  {
   $25 = $0;
   $26 = $1;
   $27 = $26;
   $28 = (_lv_idx($25,$27)|0);
   $idx = $28;
   $29 = $idx;
   $30 = ($29|0)>(0);
   if ($30) {
    $31 = $idx;
    $32 = $2;
    $33 = ($31|0)!=($32|0);
    if (!($33)) {
     break L1;
    }
    $34 = $0;
    $35 = $idx;
    $36 = $35 & 511;
    $37 = $36 << 23;
    $38 = 1 | $37;
    $39 = $2;
    $40 = $39 & 511;
    $41 = $40 << 14;
    $42 = $38 | $41;
    $43 = $3;
    (_genop_peep($34,$42,$43)|0);
    break L1;
   }
   $lv = 0;
   $44 = $0;
   $45 = ((($44)) + 164|0);
   $46 = HEAP32[$45>>2]|0;
   $up = $46;
   while(1) {
    $47 = $up;
    $48 = ($47|0)!=(0|0);
    if (!($48)) {
     break L1;
    }
    $49 = $up;
    $50 = $1;
    $51 = $50;
    $52 = (_lv_idx($49,$51)|0);
    $idx = $52;
    $53 = $idx;
    $54 = ($53|0)>(0);
    if ($54) {
     break;
    }
    $69 = $lv;
    $70 = (($69) + 1)|0;
    $lv = $70;
    $71 = $up;
    $72 = ((($71)) + 164|0);
    $73 = HEAP32[$72>>2]|0;
    $up = $73;
   }
   $55 = $0;
   $56 = $2;
   $57 = $56 & 511;
   $58 = $57 << 23;
   $59 = 22 | $58;
   $60 = $idx;
   $61 = $60 & 511;
   $62 = $61 << 14;
   $63 = $59 | $62;
   $64 = $lv;
   $65 = $64 & 127;
   $66 = $65 << 7;
   $67 = $63 | $66;
   $68 = $3;
   (_genop_peep($55,$67,$68)|0);
   break;
  }
  case 42:  {
   $74 = $0;
   $75 = $1;
   $76 = $75;
   $77 = (_new_sym_1188($74,$76)|0);
   $idx = $77;
   $78 = $0;
   $79 = $2;
   $80 = $79 & 511;
   $81 = $80 << 23;
   $82 = 14 | $81;
   $83 = $idx;
   $84 = $83 & 65535;
   $85 = $84 << 7;
   $86 = $82 | $85;
   $87 = $3;
   (_genop_peep($78,$86,$87)|0);
   break;
  }
  case 44:  {
   $88 = $0;
   $89 = $1;
   $90 = $89;
   $91 = (_new_sym_1188($88,$90)|0);
   $idx = $91;
   $92 = $0;
   $93 = $2;
   $94 = $93 & 511;
   $95 = $94 << 23;
   $96 = 16 | $95;
   $97 = $idx;
   $98 = $97 & 65535;
   $99 = $98 << 7;
   $100 = $96 | $99;
   $101 = $3;
   (_genop_peep($92,$100,$101)|0);
   break;
  }
  case 43:  {
   $102 = $0;
   $103 = $1;
   $104 = $103;
   $105 = (_new_sym_1188($102,$104)|0);
   $idx = $105;
   $106 = $0;
   $107 = $2;
   $108 = $107 & 511;
   $109 = $108 << 23;
   $110 = 18 | $109;
   $111 = $idx;
   $112 = $111 & 65535;
   $113 = $112 << 7;
   $114 = $110 | $113;
   $115 = $3;
   (_genop_peep($106,$114,$115)|0);
   break;
  }
  case 77:  {
   $116 = $0;
   $117 = $1;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119;
   $121 = (_new_sym_1188($116,$120)|0);
   $idx = $121;
   $122 = $0;
   $123 = $0;
   $124 = ((($123)) + 172|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $125 & 511;
   $127 = $126 << 23;
   $128 = 1 | $127;
   $129 = $2;
   $130 = $129 & 511;
   $131 = $130 << 14;
   $132 = $128 | $131;
   (_genop_peep($122,$132,0)|0);
   $133 = $0;
   _push_($133);
   $134 = $0;
   $135 = $1;
   $136 = HEAP32[$135>>2]|0;
   _codegen($134,$136,1);
   $137 = $0;
   $138 = ((($137)) + 172|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) - 2)|0;
   HEAP32[$138>>2] = $140;
   $141 = $0;
   $142 = $0;
   $143 = ((($142)) + 172|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $144 & 511;
   $146 = $145 << 23;
   $147 = 20 | $146;
   $148 = $idx;
   $149 = $148 & 65535;
   $150 = $149 << 7;
   $151 = $147 | $150;
   $152 = $3;
   (_genop_peep($141,$151,$152)|0);
   break;
  }
  case 29:  {
   $153 = $0;
   _push_($153);
   $154 = $0;
   $155 = $1;
   $156 = $0;
   $157 = $1;
   $158 = ((($157)) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = HEAP32[$159>>2]|0;
   $161 = $160;
   $162 = (_attrsym($156,$161)|0);
   $163 = $2;
   _gen_call($154,$155,$162,$163,0);
   $164 = $0;
   $165 = ((($164)) + 172|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + -1)|0;
   HEAP32[$165>>2] = $167;
   $168 = $3;
   $169 = ($168|0)!=(0);
   if ($169) {
    $170 = $0;
    $171 = $0;
    $172 = ((($171)) + 172|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $173 & 511;
    $175 = $174 << 23;
    $176 = 1 | $175;
    $177 = $2;
    $178 = $177 & 511;
    $179 = $178 << 14;
    $180 = $176 | $179;
    $181 = $3;
    (_genop_peep($170,$180,$181)|0);
   }
   break;
  }
  case 23:  {
   $182 = $0;
   $183 = $1;
   $184 = HEAP32[$183>>2]|0;
   $185 = $2;
   $186 = $3;
   _gen_vmassignment($182,$184,$185,$186);
   break;
  }
  case 86:  {
   break;
  }
  default: {
   $187 = $type;
   HEAP32[$vararg_buffer>>2] = $187;
   (_printf(69454,$vararg_buffer)|0);
  }
  }
 } while(0);
 $188 = $3;
 $189 = ($188|0)!=(0);
 if (!($189)) {
  STACKTOP = sp;return;
 }
 $190 = $0;
 _push_($190);
 STACKTOP = sp;return;
}
function _new_sym_1188($s,$sym) {
 $s = $s|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $sym;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ((($4)) + 216|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($3>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = $1;
  $12 = ((($11)) + 216|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($10<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = ($17|0)==($18|0);
  $20 = $i;
  if ($19) {
   label = 4;
   break;
  }
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 4) {
  $0 = $20;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $22 = $1;
 $23 = ((($22)) + 216|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)>(125);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 216|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32>>>0)<(256);
  if ($33) {
   $34 = $1;
   $35 = $1;
   $36 = ((($35)) + 216|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_codegen_realloc($34,$39,262144)|0);
   $41 = $1;
   $42 = ((($41)) + 216|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 16|0);
   HEAP32[$44>>2] = $40;
   $i = 0;
   while(1) {
    $45 = $i;
    $46 = $1;
    $47 = ((($46)) + 216|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 48|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (256 - ($50))|0;
    $52 = ($45>>>0)<($51>>>0);
    if (!($52)) {
     break;
    }
    $53 = $i;
    $54 = $1;
    $55 = ((($54)) + 216|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 48|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($53) + ($58))|0;
    $60 = $1;
    $61 = ((($60)) + 216|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 16|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($59<<2)|0);
    HEAP32[$65>>2] = 0;
    $66 = $i;
    $67 = (($66) + 1)|0;
    $i = $67;
   }
   $68 = $1;
   $69 = ((($68)) + 216|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 48|0);
   HEAP32[$71>>2] = 256;
  }
 }
 $72 = $2;
 $73 = $1;
 $74 = ((($73)) + 216|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 48|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $1;
 $79 = ((($78)) + 216|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + ($77<<2)|0);
 HEAP32[$83>>2] = $72;
 $84 = $1;
 $85 = ((($84)) + 216|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 48|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 1)|0;
 HEAP32[$87>>2] = $89;
 $0 = $88;
 $90 = $0;
 STACKTOP = sp;return ($90|0);
}
function _genop_peep($s,$i,$val) {
 $s = $s|0;
 $i = $i|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c0 = 0, $c1 = 0, $i0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $1 = $s;
 $2 = $i;
 $3 = $val;
 $4 = $1;
 $5 = (_no_optimize($4)|0);
 $6 = ($5<<24>>24)!=(0);
 L1: do {
  if (!($6)) {
   $7 = $1;
   $8 = ((($7)) + 180|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $1;
   $11 = ((($10)) + 176|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)!=($12|0);
   if ($13) {
    $14 = $1;
    $15 = ((($14)) + 176|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)>(0);
    if ($17) {
     $18 = $1;
     $19 = ((($18)) + 176|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) - 1)|0;
     $22 = $1;
     $23 = ((($22)) + 204|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + ($21<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $i0 = $26;
     $27 = $2;
     $28 = $27 & 127;
     $c1 = $28;
     $29 = $i0;
     $30 = $29 & 127;
     $c0 = $30;
     $31 = $c1;
     switch ($31|0) {
     case 1:  {
      $32 = $2;
      $33 = $32 >>> 23;
      $34 = $33 & 511;
      $35 = $2;
      $36 = $35 >>> 14;
      $37 = $36 & 511;
      $38 = ($34|0)==($37|0);
      if ($38) {
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
      }
      $39 = $3;
      $40 = ($39|0)!=(0);
      if ($40) {
       break L1;
      }
      $41 = $c0;
      switch ($41|0) {
      case 1:  {
       $42 = $2;
       $43 = $42 >>> 23;
       $44 = $43 & 511;
       $45 = $i0;
       $46 = $45 >>> 23;
       $47 = $46 & 511;
       $48 = ($44|0)==($47|0);
       if ($48) {
        $49 = $1;
        $50 = ((($49)) + 176|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (($51) + -1)|0;
        HEAP32[$50>>2] = $52;
        $53 = $2;
        $54 = $1;
        $55 = ((($54)) + 176|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = $1;
        $58 = ((($57)) + 204|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = (($59) + ($56<<2)|0);
        HEAP32[$60>>2] = $53;
       }
       $61 = $2;
       $62 = $61 >>> 14;
       $63 = $62 & 511;
       $64 = $i0;
       $65 = $64 >>> 23;
       $66 = $65 & 511;
       $67 = ($63|0)==($66|0);
       if ($67) {
        $68 = $2;
        $69 = $68 >>> 23;
        $70 = $69 & 511;
        $71 = $i0;
        $72 = $71 >>> 14;
        $73 = $72 & 511;
        $74 = ($70|0)==($73|0);
        if ($74) {
         $0 = 0;
         $584 = $0;
         STACKTOP = sp;return ($584|0);
        }
       }
       $75 = $2;
       $76 = $75 >>> 14;
       $77 = $76 & 511;
       $78 = $i0;
       $79 = $78 >>> 23;
       $80 = $79 & 511;
       $81 = ($77|0)==($80|0);
       if (!($81)) {
        break L1;
       }
       $82 = $i0;
       $83 = $82 >>> 23;
       $84 = $83 & 511;
       $85 = $1;
       $86 = ((($85)) + 232|0);
       $87 = HEAP16[$86>>1]|0;
       $88 = $87&65535;
       $89 = ($84|0)>=($88|0);
       if (!($89)) {
        break L1;
       }
       $90 = $1;
       $91 = ((($90)) + 176|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + -1)|0;
       HEAP32[$91>>2] = $93;
       $94 = $1;
       $95 = $2;
       $96 = $95 >>> 23;
       $97 = $96 & 511;
       $98 = $97 & 511;
       $99 = $98 << 23;
       $100 = 1 | $99;
       $101 = $i0;
       $102 = $101 >>> 14;
       $103 = $102 & 511;
       $104 = $103 & 511;
       $105 = $104 << 14;
       $106 = $100 | $105;
       $107 = $3;
       $108 = (_genop_peep($94,$106,$107)|0);
       $0 = $108;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 3:  {
       $109 = $2;
       $110 = $109 >>> 14;
       $111 = $110 & 511;
       $112 = $i0;
       $113 = $112 >>> 23;
       $114 = $113 & 511;
       $115 = ($111|0)==($114|0);
       if (!($115)) {
        break L1;
       }
       $116 = $i0;
       $117 = $116 >>> 23;
       $118 = $117 & 511;
       $119 = $1;
       $120 = ((($119)) + 232|0);
       $121 = HEAP16[$120>>1]|0;
       $122 = $121&65535;
       $123 = ($118|0)>=($122|0);
       if (!($123)) {
        break L1;
       }
       $124 = $2;
       $125 = $124 >>> 23;
       $126 = $125 & 511;
       $127 = $126 & 511;
       $128 = $127 << 23;
       $129 = 3 | $128;
       $130 = $i0;
       $131 = $130 >>> 7;
       $132 = $131 & 65535;
       $133 = (($132) - 32767)|0;
       $134 = (($133) + 32767)|0;
       $135 = $134 & 65535;
       $136 = $135 << 7;
       $137 = $129 | $136;
       $138 = $1;
       $139 = ((($138)) + 176|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (($140) - 1)|0;
       $142 = $1;
       $143 = ((($142)) + 204|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = (($144) + ($141<<2)|0);
       HEAP32[$145>>2] = $137;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 21: case 58: case 65: case 63: case 55:  {
       $146 = $2;
       $147 = $146 >>> 14;
       $148 = $147 & 511;
       $149 = $i0;
       $150 = $149 >>> 23;
       $151 = $150 & 511;
       $152 = ($148|0)==($151|0);
       if (!($152)) {
        break L1;
       }
       $153 = $i0;
       $154 = $153 >>> 23;
       $155 = $154 & 511;
       $156 = $1;
       $157 = ((($156)) + 232|0);
       $158 = HEAP16[$157>>1]|0;
       $159 = $158&65535;
       $160 = ($155|0)>=($159|0);
       if (!($160)) {
        break L1;
       }
       $161 = $c0;
       $162 = $161 & 127;
       $163 = $2;
       $164 = $163 >>> 23;
       $165 = $164 & 511;
       $166 = $165 & 511;
       $167 = $166 << 23;
       $168 = $162 | $167;
       $169 = $i0;
       $170 = $169 >>> 14;
       $171 = $170 & 511;
       $172 = $171 & 511;
       $173 = $172 << 14;
       $174 = $168 | $173;
       $175 = $i0;
       $176 = $175 >>> 7;
       $177 = $176 & 127;
       $178 = $177 & 127;
       $179 = $178 << 7;
       $180 = $174 | $179;
       $181 = $1;
       $182 = ((($181)) + 176|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (($183) - 1)|0;
       $185 = $1;
       $186 = ((($185)) + 204|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($187) + ($184<<2)|0);
       HEAP32[$188>>2] = $180;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 61: case 2: case 11: case 17: case 15: case 13: case 9: case 4:  {
       $189 = $2;
       $190 = $189 >>> 14;
       $191 = $190 & 511;
       $192 = $i0;
       $193 = $192 >>> 23;
       $194 = $193 & 511;
       $195 = ($191|0)==($194|0);
       if (!($195)) {
        break L1;
       }
       $196 = $i0;
       $197 = $196 >>> 23;
       $198 = $197 & 511;
       $199 = $1;
       $200 = ((($199)) + 232|0);
       $201 = HEAP16[$200>>1]|0;
       $202 = $201&65535;
       $203 = ($198|0)>=($202|0);
       if (!($203)) {
        break L1;
       }
       $204 = $c0;
       $205 = $204 & 127;
       $206 = $2;
       $207 = $206 >>> 23;
       $208 = $207 & 511;
       $209 = $208 & 511;
       $210 = $209 << 23;
       $211 = $205 | $210;
       $212 = $i0;
       $213 = $212 >>> 7;
       $214 = $213 & 65535;
       $215 = $214 & 65535;
       $216 = $215 << 7;
       $217 = $211 | $216;
       $218 = $1;
       $219 = ((($218)) + 176|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (($220) - 1)|0;
       $222 = $1;
       $223 = ((($222)) + 204|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = (($224) + ($221<<2)|0);
       HEAP32[$225>>2] = $217;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 71:  {
       $226 = $2;
       $227 = $226 >>> 14;
       $228 = $227 & 511;
       $229 = $i0;
       $230 = $229 >>> 23;
       $231 = $230 & 511;
       $232 = ($228|0)==($231|0);
       if (!($232)) {
        break L1;
       }
       $233 = $i0;
       $234 = $233 >>> 23;
       $235 = $234 & 511;
       $236 = $1;
       $237 = ((($236)) + 232|0);
       $238 = HEAP16[$237>>1]|0;
       $239 = $238&65535;
       $240 = ($235|0)>=($239|0);
       if (!($240)) {
        break L1;
       }
       $241 = $c0;
       $242 = $241 & 127;
       $243 = $2;
       $244 = $243 >>> 23;
       $245 = $244 & 511;
       $246 = $245 & 511;
       $247 = $246 << 23;
       $248 = $242 | $247;
       $249 = $i0;
       $250 = $249 >>> 14;
       $251 = $250 & 511;
       $252 = $251 & 511;
       $253 = $252 << 14;
       $254 = $248 | $253;
       $255 = $1;
       $256 = ((($255)) + 176|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (($257) - 1)|0;
       $259 = $1;
       $260 = ((($259)) + 204|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + ($258<<2)|0);
       HEAP32[$262>>2] = $254;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 66: case 8: case 7: case 6: case 5:  {
       $263 = $2;
       $264 = $263 >>> 14;
       $265 = $264 & 511;
       $266 = $i0;
       $267 = $266 >>> 23;
       $268 = $267 & 511;
       $269 = ($265|0)==($268|0);
       if (!($269)) {
        break L1;
       }
       $270 = $i0;
       $271 = $270 >>> 23;
       $272 = $271 & 511;
       $273 = $1;
       $274 = ((($273)) + 232|0);
       $275 = HEAP16[$274>>1]|0;
       $276 = $275&65535;
       $277 = ($272|0)>=($276|0);
       if (!($277)) {
        break L1;
       }
       $278 = $c0;
       $279 = $278 & 127;
       $280 = $2;
       $281 = $280 >>> 23;
       $282 = $281 & 511;
       $283 = $282 & 511;
       $284 = $283 << 23;
       $285 = $279 | $284;
       $286 = $1;
       $287 = ((($286)) + 176|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = (($288) - 1)|0;
       $290 = $1;
       $291 = ((($290)) + 204|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = (($292) + ($289<<2)|0);
       HEAP32[$293>>2] = $285;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      default: {
       break L1;
      }
      }
      break;
     }
     case 10: case 20: case 18: case 16: case 14:  {
      $294 = $3;
      $295 = ($294|0)==(0);
      $296 = $c0;
      $297 = ($296|0)==(1);
      $or$cond3 = $295 & $297;
      if (!($or$cond3)) {
       break L1;
      }
      $298 = $2;
      $299 = $298 >>> 23;
      $300 = $299 & 511;
      $301 = $i0;
      $302 = $301 >>> 23;
      $303 = $302 & 511;
      $304 = ($300|0)==($303|0);
      if (!($304)) {
       break L1;
      }
      $305 = $c1;
      $306 = $305 & 127;
      $307 = $i0;
      $308 = $307 >>> 14;
      $309 = $308 & 511;
      $310 = $309 & 511;
      $311 = $310 << 23;
      $312 = $306 | $311;
      $313 = $2;
      $314 = $313 >>> 7;
      $315 = $314 & 65535;
      $316 = $315 & 65535;
      $317 = $316 << 7;
      $318 = $312 | $317;
      $319 = $1;
      $320 = ((($319)) + 176|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = (($321) - 1)|0;
      $323 = $1;
      $324 = ((($323)) + 204|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = (($325) + ($322<<2)|0);
      HEAP32[$326>>2] = $318;
      $0 = 0;
      $584 = $0;
      STACKTOP = sp;return ($584|0);
      break;
     }
     case 22:  {
      $327 = $3;
      $328 = ($327|0)==(0);
      $329 = $c0;
      $330 = ($329|0)==(1);
      $or$cond5 = $328 & $330;
      if (!($or$cond5)) {
       break L1;
      }
      $331 = $2;
      $332 = $331 >>> 23;
      $333 = $332 & 511;
      $334 = $i0;
      $335 = $334 >>> 23;
      $336 = $335 & 511;
      $337 = ($333|0)==($336|0);
      if (!($337)) {
       break L1;
      }
      $338 = $c1;
      $339 = $338 & 127;
      $340 = $i0;
      $341 = $340 >>> 14;
      $342 = $341 & 511;
      $343 = $342 & 511;
      $344 = $343 << 23;
      $345 = $339 | $344;
      $346 = $2;
      $347 = $346 >>> 14;
      $348 = $347 & 511;
      $349 = $348 & 511;
      $350 = $349 << 14;
      $351 = $345 | $350;
      $352 = $2;
      $353 = $352 >>> 7;
      $354 = $353 & 127;
      $355 = $354 & 127;
      $356 = $355 << 7;
      $357 = $351 | $356;
      $358 = $1;
      $359 = ((($358)) + 176|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = (($360) - 1)|0;
      $362 = $1;
      $363 = ((($362)) + 204|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + ($361<<2)|0);
      HEAP32[$365>>2] = $357;
      $0 = 0;
      $584 = $0;
      STACKTOP = sp;return ($584|0);
      break;
     }
     case 31:  {
      $366 = $c0;
      $367 = ($366|0)==(31);
      if (!($367)) {
       break L1;
      }
      $368 = $i0;
      $369 = $368 >>> 23;
      $370 = $369 & 511;
      $371 = $2;
      $372 = $371 >>> 23;
      $373 = $372 & 511;
      $374 = (($370) + ($373))|0;
      $375 = $374 & 511;
      $376 = $375 << 23;
      $377 = 31 | $376;
      $378 = $1;
      $379 = ((($378)) + 176|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) - 1)|0;
      $382 = $1;
      $383 = ((($382)) + 204|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = (($384) + ($381<<2)|0);
      HEAP32[$385>>2] = $377;
      $0 = 0;
      $584 = $0;
      STACKTOP = sp;return ($584|0);
      break;
     }
     case 28:  {
      $386 = $c0;
      $387 = ($386|0)==(28);
      if (!($387)) {
       break L1;
      }
      $388 = $i0;
      $389 = $388 >>> 23;
      $390 = $389 & 511;
      $391 = $2;
      $392 = $391 >>> 23;
      $393 = $392 & 511;
      $394 = (($390) + ($393))|0;
      $395 = $394 & 511;
      $396 = $395 << 23;
      $397 = 28 | $396;
      $398 = $1;
      $399 = ((($398)) + 176|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = (($400) - 1)|0;
      $402 = $1;
      $403 = ((($402)) + 204|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = (($404) + ($401<<2)|0);
      HEAP32[$405>>2] = $397;
      $0 = 0;
      $584 = $0;
      STACKTOP = sp;return ($584|0);
      break;
     }
     case 41:  {
      $406 = $c0;
      switch ($406|0) {
      case 41:  {
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 1:  {
       $407 = $i0;
       $408 = $407 >>> 23;
       $409 = $408 & 511;
       $410 = $1;
       $411 = ((($410)) + 232|0);
       $412 = HEAP16[$411>>1]|0;
       $413 = $412&65535;
       $414 = ($409|0)>=($413|0);
       if (!($414)) {
        break L1;
       }
       $415 = $i0;
       $416 = $415 >>> 14;
       $417 = $416 & 511;
       $418 = $417 & 511;
       $419 = $418 << 23;
       $420 = 41 | $419;
       $421 = $1;
       $422 = ((($421)) + 176|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = (($423) - 1)|0;
       $425 = $1;
       $426 = ((($425)) + 204|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = (($427) + ($424<<2)|0);
       HEAP32[$428>>2] = $420;
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      case 10: case 22: case 20: case 18: case 16: case 14:  {
       $429 = $1;
       $430 = ((($429)) + 176|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = (($431) + -1)|0;
       HEAP32[$430>>2] = $432;
       $433 = $1;
       $434 = $i0;
       (_genop_peep($433,$434,0)|0);
       $435 = $1;
       $436 = ((($435)) + 176|0);
       $437 = HEAP32[$436>>2]|0;
       $438 = (($437) - 1)|0;
       $439 = $1;
       $440 = ((($439)) + 204|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = (($441) + ($438<<2)|0);
       $443 = HEAP32[$442>>2]|0;
       $i0 = $443;
       $444 = $1;
       $445 = $i0;
       $446 = $445 >>> 23;
       $447 = $446 & 511;
       $448 = $447 & 511;
       $449 = $448 << 23;
       $450 = 41 | $449;
       $451 = (_genop($444,$450)|0);
       $0 = $451;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
       break;
      }
      default: {
       break L1;
      }
      }
      break;
     }
     case 46: case 44:  {
      $452 = $c0;
      $453 = ($452|0)==(3);
      if ($453) {
       $454 = $i0;
       $455 = $454 >>> 7;
       $456 = $455 & 65535;
       $457 = (($456) - 32767)|0;
       $c = $457;
       $458 = $c1;
       $459 = ($458|0)==(46);
       if ($459) {
        $460 = $c;
        $461 = (0 - ($460))|0;
        $c = $461;
       }
       $462 = $c;
       $463 = ($462|0)>(127);
       $464 = $c;
       $465 = ($464|0)<(-127);
       $or$cond = $463 | $465;
       if ($or$cond) {
        break L1;
       }
       $466 = $c;
       $467 = (0)<=($466|0);
       $468 = $2;
       $469 = $468 >>> 23;
       $470 = $469 & 511;
       $471 = $470 & 511;
       $472 = $471 << 23;
       if ($467) {
        $473 = 45 | $472;
        $474 = $2;
        $475 = $474 >>> 14;
        $476 = $475 & 511;
        $477 = $476 & 511;
        $478 = $477 << 14;
        $479 = $473 | $478;
        $480 = $c;
        $481 = $480 & 127;
        $482 = $481 << 7;
        $483 = $479 | $482;
        $484 = $1;
        $485 = ((($484)) + 176|0);
        $486 = HEAP32[$485>>2]|0;
        $487 = (($486) - 1)|0;
        $488 = $1;
        $489 = ((($488)) + 204|0);
        $490 = HEAP32[$489>>2]|0;
        $491 = (($490) + ($487<<2)|0);
        HEAP32[$491>>2] = $483;
       } else {
        $492 = 47 | $472;
        $493 = $2;
        $494 = $493 >>> 14;
        $495 = $494 & 511;
        $496 = $495 & 511;
        $497 = $496 << 14;
        $498 = $492 | $497;
        $499 = $c;
        $500 = (0 - ($499))|0;
        $501 = $500 & 127;
        $502 = $501 << 7;
        $503 = $498 | $502;
        $504 = $1;
        $505 = ((($504)) + 176|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = (($506) - 1)|0;
        $508 = $1;
        $509 = ((($508)) + 204|0);
        $510 = HEAP32[$509>>2]|0;
        $511 = (($510) + ($507<<2)|0);
        HEAP32[$511>>2] = $503;
       }
       $0 = 0;
       $584 = $0;
       STACKTOP = sp;return ($584|0);
      }
      break;
     }
     case 62:  {
      break;
     }
     case 25: case 24:  {
      $544 = $c0;
      $545 = ($544|0)==(1);
      if (!($545)) {
       break L1;
      }
      $546 = $2;
      $547 = $546 >>> 23;
      $548 = $547 & 511;
      $549 = $i0;
      $550 = $549 >>> 23;
      $551 = $550 & 511;
      $552 = ($548|0)==($551|0);
      if (!($552)) {
       break L1;
      }
      $553 = $c1;
      $554 = $553 & 127;
      $555 = $i0;
      $556 = $555 >>> 14;
      $557 = $556 & 511;
      $558 = $557 & 511;
      $559 = $558 << 23;
      $560 = $554 | $559;
      $561 = $2;
      $562 = $561 >>> 7;
      $563 = $562 & 65535;
      $564 = (($563) - 32767)|0;
      $565 = (($564) + 32767)|0;
      $566 = $565 & 65535;
      $567 = $566 << 7;
      $568 = $560 | $567;
      $569 = $1;
      $570 = ((($569)) + 176|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = (($571) - 1)|0;
      $573 = $1;
      $574 = ((($573)) + 204|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575) + ($572<<2)|0);
      HEAP32[$576>>2] = $568;
      $577 = $1;
      $578 = ((($577)) + 176|0);
      $579 = HEAP32[$578>>2]|0;
      $580 = (($579) - 1)|0;
      $0 = $580;
      $584 = $0;
      STACKTOP = sp;return ($584|0);
      break;
     }
     default: {
      break L1;
     }
     }
     $512 = $c0;
     $513 = ($512|0)==(61);
     if ($513) {
      $514 = $i0;
      $515 = $514 >>> 7;
      $516 = $515 & 65535;
      $517 = $1;
      $518 = ((($517)) + 216|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = ((($519)) + 12|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = (($521) + ($516<<3)|0);
      ;HEAP32[$v>>2]=HEAP32[$522>>2]|0;HEAP32[$v+4>>2]=HEAP32[$522+4>>2]|0;
      $523 = ((($v)) + 4|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = ($524|0)==(16);
      if ($525) {
       $526 = HEAP32[$v>>2]|0;
       $527 = HEAP32[$526>>2]|0;
       $528 = $527 >>> 11;
       $529 = $528 & 8;
       $530 = ($529|0)!=(0);
       $531 = HEAP32[$v>>2]|0;
       if ($530) {
        $532 = HEAP32[$531>>2]|0;
        $533 = $532 >>> 11;
        $534 = $533 & 496;
        $535 = $534 >> 4;
        $538 = $535;
       } else {
        $536 = ((($531)) + 12|0);
        $537 = HEAP32[$536>>2]|0;
        $538 = $537;
       }
       $539 = ($538|0)==(0);
       if ($539) {
        $540 = $1;
        $541 = ((($540)) + 176|0);
        $542 = HEAP32[$541>>2]|0;
        $543 = (($542) + -1)|0;
        HEAP32[$541>>2] = $543;
        $0 = 0;
        $584 = $0;
        STACKTOP = sp;return ($584|0);
       }
      }
     }
    }
   }
  }
 } while(0);
 $581 = $1;
 $582 = $2;
 $583 = (_genop($581,$582)|0);
 $0 = $583;
 $584 = $0;
 STACKTOP = sp;return ($584|0);
}
function _no_optimize($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 248|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 248|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 1148|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 & 1;
   $14 = $13&255;
   $15 = ($14|0)!=(0);
   if ($15) {
    $0 = 1;
    $16 = $0;
    STACKTOP = sp;return ($16|0);
   }
  }
 }
 $0 = 0;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _attrsym($s,$a) {
 $s = $s|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $name = 0, $name2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 4|0;
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (_mrb_sym2name_len($3,$4,$len)|0);
 $name = $5;
 $6 = $0;
 $7 = HEAP32[$len>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = (($8) + 1)|0;
 $10 = (_codegen_palloc($6,$9)|0);
 $name2 = $10;
 $11 = $name2;
 $12 = $name;
 $13 = HEAP32[$len>>2]|0;
 _memcpy(($11|0),($12|0),($13|0))|0;
 $14 = HEAP32[$len>>2]|0;
 $15 = $name2;
 $16 = (($15) + ($14)|0);
 HEAP8[$16>>0] = 61;
 $17 = HEAP32[$len>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = $name2;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $23 = $name2;
 $24 = HEAP32[$len>>2]|0;
 $25 = (($24) + 1)|0;
 $26 = (_mrb_intern($22,$23,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _gen_call($s,$tree,$name,$sp,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $name = $name|0;
 $sp = $sp|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blk = 0, $idx = 0, $n = 0, $noop = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sendv = 0, $sym = 0, $symlen = 0, $symname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $symlen = sp + 4|0;
 $0 = $s;
 $1 = $tree;
 $2 = $name;
 $3 = $sp;
 $4 = $val;
 $5 = $2;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $13 = $7;
 } else {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = $12;
 }
 $sym = $13;
 $n = 0;
 $noop = 0;
 $sendv = 0;
 $blk = 0;
 $14 = $0;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 _codegen($14,$16,1);
 $17 = $0;
 $18 = $sym;
 $19 = (_new_msym($17,$18)|0);
 $idx = $19;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $1 = $25;
 $26 = $1;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $0;
  $29 = $1;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_gen_values($28,$30,1)|0);
  $n = $31;
  $32 = $n;
  $33 = ($32|0)<(0);
  if ($33) {
   $sendv = 1;
   $noop = 1;
   $n = 1;
   $34 = $0;
   _push_($34);
  }
 }
 $35 = $3;
 $36 = ($35|0)!=(0);
 do {
  if ($36) {
   $37 = $sendv;
   $38 = ($37|0)!=(0);
   $39 = $0;
   if ($38) {
    $40 = ((($39)) + 172|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + -1)|0;
    HEAP32[$40>>2] = $42;
    $43 = $0;
    $44 = $0;
    $45 = ((($44)) + 172|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 511;
    $48 = $47 << 23;
    $49 = 57 | $48;
    $50 = $3;
    $51 = $50 & 511;
    $52 = $51 << 14;
    $53 = $49 | $52;
    (_genop($43,$53)|0);
    $54 = $0;
    _push_($54);
    break;
   } else {
    $55 = $0;
    $56 = ((($55)) + 172|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 & 511;
    $59 = $58 << 23;
    $60 = 1 | $59;
    $61 = $3;
    $62 = $61 & 511;
    $63 = $62 << 14;
    $64 = $60 | $63;
    (_genop($39,$64)|0);
    $65 = $0;
    _push_($65);
    $66 = $n;
    $67 = (($66) + 1)|0;
    $n = $67;
    break;
   }
  }
 } while(0);
 $68 = $1;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $1;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)!=(0|0);
  if ($73) {
   $noop = 1;
   $74 = $0;
   $75 = $1;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   _codegen($74,$77,1);
   $78 = $0;
   $79 = ((($78)) + 172|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + -1)|0;
   HEAP32[$79>>2] = $81;
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $82 = $0;
  $83 = ((($82)) + 172|0);
  $84 = HEAP32[$83>>2]|0;
  $blk = $84;
 }
 $85 = $0;
 _push_($85);
 $86 = $0;
 $87 = ((($86)) + 172|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + -1)|0;
 HEAP32[$87>>2] = $89;
 $90 = $n;
 $91 = (($90) + 1)|0;
 $92 = $0;
 $93 = ((($92)) + 172|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) - ($91))|0;
 HEAP32[$93>>2] = $95;
 $96 = $0;
 $97 = HEAP32[$96>>2]|0;
 $98 = $sym;
 $99 = (_mrb_sym2name_len($97,$98,$symlen)|0);
 $symname = $99;
 $100 = $noop;
 $101 = ($100|0)==(0);
 $102 = HEAP32[$symlen>>2]|0;
 $103 = ($102|0)==(1);
 $or$cond = $101 & $103;
 if ($or$cond) {
  $104 = $symname;
  $105 = HEAP8[$104>>0]|0;
  $106 = $105 << 24 >> 24;
  $107 = ($106|0)==(43);
  if ($107) {
   $108 = $0;
   $109 = $0;
   $110 = ((($109)) + 172|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 & 511;
   $113 = $112 << 23;
   $114 = 44 | $113;
   $115 = $idx;
   $116 = $115 & 511;
   $117 = $116 << 14;
   $118 = $114 | $117;
   $119 = $n;
   $120 = $119 & 127;
   $121 = $120 << 7;
   $122 = $118 | $121;
   $123 = $4;
   (_genop_peep($108,$122,$123)|0);
  } else {
   label = 18;
  }
 } else {
  label = 18;
 }
 do {
  if ((label|0) == 18) {
   $124 = $noop;
   $125 = ($124|0)==(0);
   $126 = HEAP32[$symlen>>2]|0;
   $127 = ($126|0)==(1);
   $or$cond3 = $125 & $127;
   if ($or$cond3) {
    $128 = $symname;
    $129 = HEAP8[$128>>0]|0;
    $130 = $129 << 24 >> 24;
    $131 = ($130|0)==(45);
    if ($131) {
     $132 = $0;
     $133 = $0;
     $134 = ((($133)) + 172|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & 511;
     $137 = $136 << 23;
     $138 = 46 | $137;
     $139 = $idx;
     $140 = $139 & 511;
     $141 = $140 << 14;
     $142 = $138 | $141;
     $143 = $n;
     $144 = $143 & 127;
     $145 = $144 << 7;
     $146 = $142 | $145;
     $147 = $4;
     (_genop_peep($132,$146,$147)|0);
     break;
    }
   }
   $148 = $noop;
   $149 = ($148|0)==(0);
   $150 = HEAP32[$symlen>>2]|0;
   $151 = ($150|0)==(1);
   $or$cond5 = $149 & $151;
   if ($or$cond5) {
    $152 = $symname;
    $153 = HEAP8[$152>>0]|0;
    $154 = $153 << 24 >> 24;
    $155 = ($154|0)==(42);
    if ($155) {
     $156 = $0;
     $157 = $0;
     $158 = ((($157)) + 172|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 & 511;
     $161 = $160 << 23;
     $162 = 48 | $161;
     $163 = $idx;
     $164 = $163 & 511;
     $165 = $164 << 14;
     $166 = $162 | $165;
     $167 = $n;
     $168 = $167 & 127;
     $169 = $168 << 7;
     $170 = $166 | $169;
     (_genop($156,$170)|0);
     break;
    }
   }
   $171 = $noop;
   $172 = ($171|0)==(0);
   $173 = HEAP32[$symlen>>2]|0;
   $174 = ($173|0)==(1);
   $or$cond7 = $172 & $174;
   if ($or$cond7) {
    $175 = $symname;
    $176 = HEAP8[$175>>0]|0;
    $177 = $176 << 24 >> 24;
    $178 = ($177|0)==(47);
    if ($178) {
     $179 = $0;
     $180 = $0;
     $181 = ((($180)) + 172|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $182 & 511;
     $184 = $183 << 23;
     $185 = 49 | $184;
     $186 = $idx;
     $187 = $186 & 511;
     $188 = $187 << 14;
     $189 = $185 | $188;
     $190 = $n;
     $191 = $190 & 127;
     $192 = $191 << 7;
     $193 = $189 | $192;
     (_genop($179,$193)|0);
     break;
    }
   }
   $194 = $noop;
   $195 = ($194|0)==(0);
   $196 = HEAP32[$symlen>>2]|0;
   $197 = ($196|0)==(1);
   $or$cond9 = $195 & $197;
   if ($or$cond9) {
    $198 = $symname;
    $199 = HEAP8[$198>>0]|0;
    $200 = $199 << 24 >> 24;
    $201 = ($200|0)==(60);
    if ($201) {
     $202 = $0;
     $203 = $0;
     $204 = ((($203)) + 172|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $205 & 511;
     $207 = $206 << 23;
     $208 = 51 | $207;
     $209 = $idx;
     $210 = $209 & 511;
     $211 = $210 << 14;
     $212 = $208 | $211;
     $213 = $n;
     $214 = $213 & 127;
     $215 = $214 << 7;
     $216 = $212 | $215;
     (_genop($202,$216)|0);
     break;
    }
   }
   $217 = $noop;
   $218 = ($217|0)==(0);
   $219 = HEAP32[$symlen>>2]|0;
   $220 = ($219|0)==(2);
   $or$cond11 = $218 & $220;
   if ($or$cond11) {
    $221 = $symname;
    $222 = HEAP8[$221>>0]|0;
    $223 = $222 << 24 >> 24;
    $224 = ($223|0)==(60);
    if ($224) {
     $225 = $symname;
     $226 = ((($225)) + 1|0);
     $227 = HEAP8[$226>>0]|0;
     $228 = $227 << 24 >> 24;
     $229 = ($228|0)==(61);
     if ($229) {
      $230 = $0;
      $231 = $0;
      $232 = ((($231)) + 172|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233 & 511;
      $235 = $234 << 23;
      $236 = 52 | $235;
      $237 = $idx;
      $238 = $237 & 511;
      $239 = $238 << 14;
      $240 = $236 | $239;
      $241 = $n;
      $242 = $241 & 127;
      $243 = $242 << 7;
      $244 = $240 | $243;
      (_genop($230,$244)|0);
      break;
     }
    }
   }
   $245 = $noop;
   $246 = ($245|0)==(0);
   $247 = HEAP32[$symlen>>2]|0;
   $248 = ($247|0)==(1);
   $or$cond13 = $246 & $248;
   if ($or$cond13) {
    $249 = $symname;
    $250 = HEAP8[$249>>0]|0;
    $251 = $250 << 24 >> 24;
    $252 = ($251|0)==(62);
    if ($252) {
     $253 = $0;
     $254 = $0;
     $255 = ((($254)) + 172|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $256 & 511;
     $258 = $257 << 23;
     $259 = 53 | $258;
     $260 = $idx;
     $261 = $260 & 511;
     $262 = $261 << 14;
     $263 = $259 | $262;
     $264 = $n;
     $265 = $264 & 127;
     $266 = $265 << 7;
     $267 = $263 | $266;
     (_genop($253,$267)|0);
     break;
    }
   }
   $268 = $noop;
   $269 = ($268|0)==(0);
   $270 = HEAP32[$symlen>>2]|0;
   $271 = ($270|0)==(2);
   $or$cond15 = $269 & $271;
   if ($or$cond15) {
    $272 = $symname;
    $273 = HEAP8[$272>>0]|0;
    $274 = $273 << 24 >> 24;
    $275 = ($274|0)==(62);
    if ($275) {
     $276 = $symname;
     $277 = ((($276)) + 1|0);
     $278 = HEAP8[$277>>0]|0;
     $279 = $278 << 24 >> 24;
     $280 = ($279|0)==(61);
     if ($280) {
      $281 = $0;
      $282 = $0;
      $283 = ((($282)) + 172|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = $284 & 511;
      $286 = $285 << 23;
      $287 = 54 | $286;
      $288 = $idx;
      $289 = $288 & 511;
      $290 = $289 << 14;
      $291 = $287 | $290;
      $292 = $n;
      $293 = $292 & 127;
      $294 = $293 << 7;
      $295 = $291 | $294;
      (_genop($281,$295)|0);
      break;
     }
    }
   }
   $296 = $noop;
   $297 = ($296|0)==(0);
   $298 = HEAP32[$symlen>>2]|0;
   $299 = ($298|0)==(2);
   $or$cond17 = $297 & $299;
   if ($or$cond17) {
    $300 = $symname;
    $301 = HEAP8[$300>>0]|0;
    $302 = $301 << 24 >> 24;
    $303 = ($302|0)==(61);
    if ($303) {
     $304 = $symname;
     $305 = ((($304)) + 1|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $306 << 24 >> 24;
     $308 = ($307|0)==(61);
     if ($308) {
      $309 = $0;
      $310 = $0;
      $311 = ((($310)) + 172|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = $312 & 511;
      $314 = $313 << 23;
      $315 = 50 | $314;
      $316 = $idx;
      $317 = $316 & 511;
      $318 = $317 << 14;
      $319 = $315 | $318;
      $320 = $n;
      $321 = $320 & 127;
      $322 = $321 << 7;
      $323 = $319 | $322;
      (_genop($309,$323)|0);
      break;
     }
    }
   }
   $324 = $sendv;
   $325 = ($324|0)!=(0);
   if ($325) {
    $n = 127;
   }
   $326 = $blk;
   $327 = ($326|0)>(0);
   $328 = $0;
   $329 = $0;
   $330 = ((($329)) + 172|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = $331 & 511;
   $333 = $332 << 23;
   if ($327) {
    $334 = 32 | $333;
    $335 = $idx;
    $336 = $335 & 511;
    $337 = $336 << 14;
    $338 = $334 | $337;
    $339 = $n;
    $340 = $339 & 127;
    $341 = $340 << 7;
    $342 = $338 | $341;
    (_genop($328,$342)|0);
    break;
   } else {
    $343 = 33 | $333;
    $344 = $idx;
    $345 = $344 & 511;
    $346 = $345 << 14;
    $347 = $343 | $346;
    $348 = $n;
    $349 = $348 & 127;
    $350 = $349 << 7;
    $351 = $347 | $350;
    (_genop($328,$351)|0);
    break;
   }
  }
 } while(0);
 $352 = $4;
 $353 = ($352|0)!=(0);
 if (!($353)) {
  STACKTOP = sp;return;
 }
 $354 = $0;
 _push_($354);
 STACKTOP = sp;return;
}
function _gen_values($s,$t,$val) {
 $s = $s|0;
 $t = $t|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $is_splat = 0, $n = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $t;
 $3 = $val;
 $n = 0;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 19;
   break;
  }
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
  $10 = ($9|0)==(66);
  $11 = $10&1;
  $is_splat = $11;
  $12 = $n;
  $13 = ($12|0)>=(127);
  $14 = $is_splat;
  $15 = ($14|0)!=(0);
  $or$cond = $13 | $15;
  if ($or$cond) {
   break;
  }
  $139 = $1;
  $140 = $2;
  $141 = HEAP32[$140>>2]|0;
  $142 = $3;
  _codegen($139,$141,$142);
  $143 = $n;
  $144 = (($143) + 1)|0;
  $n = $144;
  $145 = $2;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $2 = $147;
 }
 if ((label|0) == 19) {
  $148 = $n;
  $0 = $148;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 $16 = $3;
 $17 = ($16|0)!=(0);
 L9: do {
  if ($17) {
   $18 = $n;
   $19 = $1;
   $20 = ((($19)) + 172|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) - ($18))|0;
   HEAP32[$20>>2] = $22;
   $23 = $1;
   $24 = $1;
   $25 = ((($24)) + 172|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 & 511;
   $28 = $27 << 23;
   $29 = 55 | $28;
   $30 = $1;
   $31 = ((($30)) + 172|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 511;
   $34 = $33 << 14;
   $35 = $29 | $34;
   $36 = $n;
   $37 = $36 & 127;
   $38 = $37 << 7;
   $39 = $35 | $38;
   (_genop($23,$39)|0);
   $40 = $1;
   _push_($40);
   $41 = $1;
   $42 = $2;
   $43 = HEAP32[$42>>2]|0;
   _codegen($41,$43,1);
   $44 = $1;
   $45 = ((($44)) + 172|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + -1)|0;
   HEAP32[$45>>2] = $47;
   $48 = $1;
   $49 = ((($48)) + 172|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   HEAP32[$49>>2] = $51;
   $52 = $is_splat;
   $53 = ($52|0)!=(0);
   $54 = $1;
   $55 = $1;
   $56 = ((($55)) + 172|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 511;
   $59 = $58 << 23;
   if ($53) {
    $60 = 56 | $59;
    $61 = $1;
    $62 = ((($61)) + 172|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 1)|0;
    $65 = $64 & 511;
    $66 = $65 << 14;
    $67 = $60 | $66;
    (_genop($54,$67)|0);
   } else {
    $68 = 57 | $59;
    $69 = $1;
    $70 = ((($69)) + 172|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 1)|0;
    $73 = $72 & 511;
    $74 = $73 << 14;
    $75 = $68 | $74;
    (_genop($54,$75)|0);
   }
   $76 = $2;
   $77 = ((($76)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $2 = $78;
   while(1) {
    $79 = $2;
    $80 = ($79|0)!=(0|0);
    if (!($80)) {
     break L9;
    }
    $81 = $1;
    _push_($81);
    $82 = $1;
    $83 = $2;
    $84 = HEAP32[$83>>2]|0;
    _codegen($82,$84,1);
    $85 = $1;
    $86 = ((($85)) + 172|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + -1)|0;
    HEAP32[$86>>2] = $88;
    $89 = $1;
    $90 = ((($89)) + 172|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + -1)|0;
    HEAP32[$90>>2] = $92;
    $93 = $2;
    $94 = HEAP32[$93>>2]|0;
    $95 = HEAP32[$94>>2]|0;
    $96 = $95;
    $97 = ($96|0)==(66);
    $98 = $1;
    $99 = $1;
    $100 = ((($99)) + 172|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 511;
    $103 = $102 << 23;
    if ($97) {
     $104 = 56 | $103;
     $105 = $1;
     $106 = ((($105)) + 172|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (($107) + 1)|0;
     $109 = $108 & 511;
     $110 = $109 << 14;
     $111 = $104 | $110;
     (_genop($98,$111)|0);
    } else {
     $112 = 57 | $103;
     $113 = $1;
     $114 = ((($113)) + 172|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 1)|0;
     $117 = $116 & 511;
     $118 = $117 << 14;
     $119 = $112 | $118;
     (_genop($98,$119)|0);
    }
    $120 = $2;
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $2 = $122;
   }
  } else {
   $123 = $1;
   $124 = $2;
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   _codegen($123,$127,0);
   $128 = $2;
   $129 = ((($128)) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $2 = $130;
   while(1) {
    $131 = $2;
    $132 = ($131|0)!=(0|0);
    if (!($132)) {
     break L9;
    }
    $133 = $1;
    $134 = $2;
    $135 = HEAP32[$134>>2]|0;
    _codegen($133,$135,0);
    $136 = $2;
    $137 = ((($136)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $2 = $138;
   }
  }
 } while(0);
 $0 = -1;
 $149 = $0;
 STACKTOP = sp;return ($149|0);
}
function _gen_vmassignment($s,$tree,$rhs,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $rhs = $rhs|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $p = 0, $post = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $rhs;
 $3 = $val;
 $n = 0;
 $post = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 L1: do {
  if ($6) {
   $7 = $1;
   $8 = HEAP32[$7>>2]|0;
   $t = $8;
   $n = 0;
   while(1) {
    $9 = $t;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break L1;
    }
    $11 = $0;
    $12 = $0;
    $13 = ((($12)) + 172|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 511;
    $16 = $15 << 23;
    $17 = 58 | $16;
    $18 = $2;
    $19 = $18 & 511;
    $20 = $19 << 14;
    $21 = $17 | $20;
    $22 = $n;
    $23 = $22 & 127;
    $24 = $23 << 7;
    $25 = $21 | $24;
    (_genop($11,$25)|0);
    $26 = $0;
    $27 = $t;
    $28 = HEAP32[$27>>2]|0;
    $29 = $0;
    $30 = ((($29)) + 172|0);
    $31 = HEAP32[$30>>2]|0;
    _gen_assignment($26,$28,$31,0);
    $32 = $n;
    $33 = (($32) + 1)|0;
    $n = $33;
    $34 = $t;
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $t = $36;
   }
  }
 } while(0);
 $37 = $1;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $t = $39;
 $40 = $t;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $t;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 L10: do {
  if ($45) {
   $46 = $t;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP32[$48>>2]|0;
   $p = $49;
   while(1) {
    $50 = $p;
    $51 = ($50|0)!=(0|0);
    if (!($51)) {
     break L10;
    }
    $52 = $post;
    $53 = (($52) + 1)|0;
    $post = $53;
    $54 = $p;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $p = $56;
   }
  }
 } while(0);
 $57 = $3;
 $58 = ($57|0)!=(0);
 $59 = $0;
 if ($58) {
  $60 = $0;
  $61 = ((($60)) + 172|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 & 511;
  $64 = $63 << 23;
  $65 = 1 | $64;
  $66 = $2;
  $67 = $66 & 511;
  $68 = $67 << 14;
  $69 = $65 | $68;
  (_genop($59,$69)|0);
 } else {
  $70 = ((($59)) + 172|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + -1)|0;
  HEAP32[$70>>2] = $72;
 }
 $73 = $0;
 $74 = $post;
 _push_n_($73,$74);
 $75 = $post;
 $76 = $0;
 $77 = ((($76)) + 172|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) - ($75))|0;
 HEAP32[$77>>2] = $79;
 $80 = $0;
 $81 = $0;
 $82 = ((($81)) + 172|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 511;
 $85 = $84 << 23;
 $86 = 60 | $85;
 $87 = $n;
 $88 = $87 & 511;
 $89 = $88 << 14;
 $90 = $86 | $89;
 $91 = $post;
 $92 = $91 & 127;
 $93 = $92 << 7;
 $94 = $90 | $93;
 (_genop($80,$94)|0);
 $n = 1;
 $95 = $t;
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = $0;
  $99 = $t;
  $100 = HEAP32[$99>>2]|0;
  $101 = $0;
  $102 = ((($101)) + 172|0);
  $103 = HEAP32[$102>>2]|0;
  _gen_assignment($98,$100,$103,0);
 }
 $104 = $t;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 L23: do {
  if ($107) {
   $108 = $t;
   $109 = ((($108)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)!=(0|0);
   if ($112) {
    $113 = $t;
    $114 = ((($113)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$115>>2]|0;
    $t = $116;
    while(1) {
     $117 = $t;
     $118 = ($117|0)!=(0|0);
     if (!($118)) {
      break L23;
     }
     $119 = $0;
     $120 = $t;
     $121 = HEAP32[$120>>2]|0;
     $122 = $0;
     $123 = ((($122)) + 172|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $n;
     $126 = (($124) + ($125))|0;
     _gen_assignment($119,$121,$126,0);
     $127 = $t;
     $128 = ((($127)) + 4|0);
     $129 = HEAP32[$128>>2]|0;
     $t = $129;
     $130 = $n;
     $131 = (($130) + 1)|0;
     $n = $131;
    }
   }
  }
 } while(0);
 $132 = $0;
 _push_($132);
 STACKTOP = sp;return;
}
function _push_n_($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 172|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $7 = ($6>>>0)>(511);
 if ($7) {
  $8 = $0;
  _codegen_error($8,69323);
 }
 $9 = $1;
 $10 = $0;
 $11 = ((($10)) + 172|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9))|0;
 HEAP32[$11>>2] = $13;
 $14 = $0;
 $15 = ((($14)) + 172|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = ((($17)) + 234|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = ($16|0)>($20|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 $23 = ((($22)) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24&65535;
 $26 = $0;
 $27 = ((($26)) + 234|0);
 HEAP16[$27>>1] = $25;
 STACKTOP = sp;return;
}
function _loop_pop($s,$val) {
 $s = $s|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $val;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = ((($5)) + 172|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 511;
  $9 = $8 << 23;
  $10 = 5 | $9;
  (_genop($4,$10)|0);
 }
 $11 = $0;
 $12 = $0;
 $13 = ((($12)) + 188|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 _dispatch_linked($11,$16);
 $17 = $0;
 $18 = ((($17)) + 188|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 188|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $0;
 _push_($26);
 STACKTOP = sp;return;
}
function _scope_body($s,$tree,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scope = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $tree;
 $3 = $val;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_scope_new($5,$6,$8)|0);
 $scope = $9;
 $10 = $scope;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $1;
  _raise_error($12,69470);
 }
 $13 = $scope;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _codegen($13,$16,1);
 $17 = $1;
 $18 = ((($17)) + 204|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 do {
  if ($20) {
   $22 = $3;
   $23 = ($22|0)!=(0);
   $24 = $scope;
   if (!($23)) {
    (_genop($24,41)|0);
    break;
   }
   $25 = ((($24)) + 234|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = ($27|0)==(0);
   $29 = $scope;
   if ($28) {
    (_genop($29,5)|0);
    $30 = $scope;
    (_genop($30,41)|0);
    break;
   } else {
    $31 = $scope;
    $32 = ((($31)) + 172|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) - 1)|0;
    $35 = $34 & 511;
    $36 = $35 << 23;
    $37 = 41 | $36;
    (_genop_peep($29,$37,0)|0);
    break;
   }
  } else {
   $21 = $scope;
   (_genop($21,74)|0);
  }
 } while(0);
 $38 = $scope;
 _scope_finish($38);
 $39 = $1;
 $40 = ((($39)) + 216|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $1;
  $44 = ((($43)) + 216|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 52|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) - 1)|0;
  $0 = $48;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _raise_error($s,$msg) {
 $s = $s|0;
 $msg = $msg|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $2 = sp;
 $0 = $s;
 $1 = $msg;
 $3 = $0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 _mrb_str_new_cstr($2,$5,$6);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 $7 = (_new_lit($3,$$byval_copy)|0);
 $idx = $7;
 $8 = $0;
 $9 = $idx;
 $10 = $9 & 65535;
 $11 = $10 << 7;
 $12 = 8388683 | $11;
 (_genop($8,$12)|0);
 STACKTOP = sp;return;
}
function _new_lit($s,$val) {
 $s = $s|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0.0, $i = 0, $len = 0, $pv = 0, $val$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val$byval_copy = sp + 32|0;
 $2 = sp;
 $1 = $s;
 $3 = ((($val)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 16:  {
   $i = 0;
   while(1) {
    $5 = $i;
    $6 = $1;
    $7 = ((($6)) + 216|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($8)) + 44|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($5>>>0)<($10>>>0);
    if (!($11)) {
     break L1;
    }
    $12 = $i;
    $13 = $1;
    $14 = ((($13)) + 216|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($12<<3)|0);
    $pv = $18;
    $19 = $pv;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(16);
    if (!($22)) {
     $23 = $pv;
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 >>> 11;
     $27 = $26 & 8;
     $28 = ($27|0)!=(0);
     $29 = $pv;
     $30 = HEAP32[$29>>2]|0;
     if ($28) {
      $31 = HEAP32[$30>>2]|0;
      $32 = $31 >>> 11;
      $33 = $32 & 496;
      $34 = $33 >> 4;
      $37 = $34;
     } else {
      $35 = ((($30)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36;
     }
     $len = $37;
     $38 = HEAP32[$val>>2]|0;
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 >>> 11;
     $41 = $40 & 8;
     $42 = ($41|0)!=(0);
     $43 = HEAP32[$val>>2]|0;
     if ($42) {
      $44 = HEAP32[$43>>2]|0;
      $45 = $44 >>> 11;
      $46 = $45 & 496;
      $47 = $46 >> 4;
      $51 = $47;
     } else {
      $48 = ((($43)) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $51 = $49;
     }
     $50 = ($37|0)!=($51|0);
     if (!($50)) {
      $52 = $pv;
      $53 = HEAP32[$52>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = $54 >>> 11;
      $56 = $55 & 8;
      $57 = ($56|0)!=(0);
      $58 = $pv;
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($59)) + 12|0);
      if ($57) {
       $73 = $60;
      } else {
       $61 = ((($60)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $73 = $62;
      }
      $63 = HEAP32[$val>>2]|0;
      $64 = HEAP32[$63>>2]|0;
      $65 = $64 >>> 11;
      $66 = $65 & 8;
      $67 = ($66|0)!=(0);
      $68 = HEAP32[$val>>2]|0;
      $69 = ((($68)) + 12|0);
      if ($67) {
       $74 = $69;
      } else {
       $70 = ((($69)) + 8|0);
       $71 = HEAP32[$70>>2]|0;
       $74 = $71;
      }
      $72 = $len;
      $75 = (_memcmp($73,$74,$72)|0);
      $76 = ($75|0)==(0);
      if ($76) {
       break;
      }
     }
    }
    $78 = $i;
    $79 = (($78) + 1)|0;
    $i = $79;
   }
   $77 = $i;
   $0 = $77;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
   break;
  }
  case 6:  {
   $i = 0;
   while(1) {
    $80 = $i;
    $81 = $1;
    $82 = ((($81)) + 216|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 44|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($80>>>0)<($85>>>0);
    if (!($86)) {
     break L1;
    }
    $87 = $i;
    $88 = $1;
    $89 = ((($88)) + 216|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($87<<3)|0);
    $pv = $93;
    $94 = $pv;
    $95 = ((($94)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)!=(6);
    if (!($97)) {
     $98 = $pv;
     $99 = +HEAPF32[$98>>2];
     $100 = +HEAPF32[$val>>2];
     $101 = $99 == $100;
     if ($101) {
      break;
     }
    }
    $103 = $i;
    $104 = (($103) + 1)|0;
    $i = $104;
   }
   $102 = $i;
   $0 = $102;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
   break;
  }
  case 3:  {
   $i = 0;
   while(1) {
    $105 = $i;
    $106 = $1;
    $107 = ((($106)) + 216|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($108)) + 44|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($105>>>0)<($110>>>0);
    if (!($111)) {
     break L1;
    }
    $112 = $i;
    $113 = $1;
    $114 = ((($113)) + 216|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($115)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + ($112<<3)|0);
    $pv = $118;
    $119 = $pv;
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(3);
    if ($122) {
     $123 = $pv;
     $124 = HEAP32[$123>>2]|0;
     $125 = HEAP32[$val>>2]|0;
     $126 = ($124|0)==($125|0);
     if ($126) {
      break;
     }
    }
    $128 = $i;
    $129 = (($128) + 1)|0;
    $i = $129;
   }
   $127 = $i;
   $0 = $127;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
   break;
  }
  default: {
   $0 = 0;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
  }
  }
 } while(0);
 $130 = $1;
 $131 = ((($130)) + 216|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((($132)) + 44|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $1;
 $136 = ((($135)) + 220|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($134|0)==($137|0);
 if ($138) {
  $139 = $1;
  $140 = ((($139)) + 220|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $141<<1;
  HEAP32[$140>>2] = $142;
  $143 = $1;
  $144 = $1;
  $145 = ((($144)) + 216|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($146)) + 12|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $1;
  $150 = ((($149)) + 220|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $151<<3;
  $153 = (_codegen_realloc($143,$148,$152)|0);
  $154 = $1;
  $155 = ((($154)) + 216|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 12|0);
  HEAP32[$157>>2] = $153;
 }
 $158 = $1;
 $159 = ((($158)) + 216|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($160)) + 44|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $1;
 $164 = ((($163)) + 216|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ((($165)) + 12|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($167) + ($162<<3)|0);
 $pv = $168;
 $169 = $1;
 $170 = ((($169)) + 216|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ((($171)) + 44|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($173) + 1)|0;
 HEAP32[$172>>2] = $174;
 $i = $173;
 $175 = ((($val)) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 switch ($176|0) {
 case 16:  {
  $177 = $pv;
  $178 = $1;
  $179 = HEAP32[$178>>2]|0;
  ;HEAP32[$val$byval_copy>>2]=HEAP32[$val>>2]|0;HEAP32[$val$byval_copy+4>>2]=HEAP32[$val+4>>2]|0;
  _mrb_str_pool($2,$179,$val$byval_copy);
  ;HEAP32[$177>>2]=HEAP32[$2>>2]|0;HEAP32[$177+4>>2]=HEAP32[$2+4>>2]|0;
  break;
 }
 case 3: case 6:  {
  $180 = $pv;
  ;HEAP32[$180>>2]=HEAP32[$val>>2]|0;HEAP32[$180+4>>2]=HEAP32[$val+4>>2]|0;
  break;
 }
 default: {
 }
 }
 $181 = $i;
 $0 = $181;
 $182 = $0;
 STACKTOP = sp;return ($182|0);
}
function _scope_finish($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fname = 0, $fname_len = 0;
 var $irep = 0, $mrb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $mrb = $2;
 $3 = $0;
 $4 = ((($3)) + 216|0);
 $5 = HEAP32[$4>>2]|0;
 $irep = $5;
 $6 = $irep;
 $7 = ((($6)) + 4|0);
 HEAP8[$7>>0] = 0;
 $8 = $0;
 $9 = ((($8)) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 do {
  if ($11) {
   $12 = $0;
   $13 = $0;
   $14 = ((($13)) + 204|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $0;
   $17 = ((($16)) + 176|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18<<2;
   $20 = (_codegen_realloc($12,$15,$19)|0);
   $21 = $irep;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $0;
   $24 = ((($23)) + 176|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $irep;
   $27 = ((($26)) + 40|0);
   HEAP32[$27>>2] = $25;
   $28 = $0;
   $29 = ((($28)) + 208|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $0;
    $33 = $0;
    $34 = ((($33)) + 208|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $0;
    $37 = ((($36)) + 176|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38<<1;
    $40 = (_codegen_realloc($32,$35,$39)|0);
    $41 = $irep;
    $42 = ((($41)) + 32|0);
    HEAP32[$42>>2] = $40;
    break;
   } else {
    $43 = $irep;
    $44 = ((($43)) + 32|0);
    HEAP32[$44>>2] = 0;
    break;
   }
  }
 } while(0);
 $45 = $0;
 $46 = $irep;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $irep;
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51<<3;
 $53 = (_codegen_realloc($45,$48,$52)|0);
 $54 = $irep;
 $55 = ((($54)) + 12|0);
 HEAP32[$55>>2] = $53;
 $56 = $0;
 $57 = $irep;
 $58 = ((($57)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $irep;
 $61 = ((($60)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62<<2;
 $64 = (_codegen_realloc($56,$59,$63)|0);
 $65 = $irep;
 $66 = ((($65)) + 16|0);
 HEAP32[$66>>2] = $64;
 $67 = $0;
 $68 = $irep;
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $irep;
 $72 = ((($71)) + 52|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73<<2;
 $75 = (_codegen_realloc($67,$70,$74)|0);
 $76 = $irep;
 $77 = ((($76)) + 20|0);
 HEAP32[$77>>2] = $75;
 $78 = $0;
 $79 = ((($78)) + 196|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if (!($81)) {
  $122 = $0;
  $123 = ((($122)) + 232|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $irep;
  HEAP16[$125>>1] = $124;
  $126 = $0;
  $127 = ((($126)) + 234|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = $irep;
  $130 = ((($129)) + 2|0);
  HEAP16[$130>>1] = $128;
  $131 = $mrb;
  $132 = $0;
  $133 = ((($132)) + 236|0);
  $134 = HEAP32[$133>>2]|0;
  _mrb_gc_arena_restore($131,$134);
  $135 = $0;
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  _mrb_pool_close($137);
  STACKTOP = sp;return;
 }
 $82 = $0;
 $83 = ((($82)) + 248|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = ((($85)) + 244|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = (_mrb_parser_get_filename($84,$87)|0);
 $89 = $0;
 $90 = ((($89)) + 216|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 28|0);
 HEAP32[$92>>2] = $88;
 $93 = $mrb;
 $94 = $0;
 $95 = ((($94)) + 216|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $0;
 $98 = ((($97)) + 240|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $0;
 $101 = ((($100)) + 176|0);
 $102 = HEAP32[$101>>2]|0;
 (_mrb_debug_info_append_file($93,$96,$99,$102)|0);
 $103 = $0;
 $104 = ((($103)) + 196|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (_strlen($105)|0);
 $fname_len = $106;
 $107 = $0;
 $108 = $fname_len;
 $109 = (($108) + 1)|0;
 $110 = (_codegen_malloc($107,$109)|0);
 $fname = $110;
 $111 = $fname;
 $112 = $0;
 $113 = ((($112)) + 196|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $fname_len;
 _memcpy(($111|0),($114|0),($115|0))|0;
 $116 = $fname_len;
 $117 = $fname;
 $118 = (($117) + ($116)|0);
 HEAP8[$118>>0] = 0;
 $119 = $fname;
 $120 = $irep;
 $121 = ((($120)) + 28|0);
 HEAP32[$121>>2] = $119;
 $122 = $0;
 $123 = ((($122)) + 232|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $irep;
 HEAP16[$125>>1] = $124;
 $126 = $0;
 $127 = ((($126)) + 234|0);
 $128 = HEAP16[$127>>1]|0;
 $129 = $irep;
 $130 = ((($129)) + 2|0);
 HEAP16[$130>>1] = $128;
 $131 = $mrb;
 $132 = $0;
 $133 = ((($132)) + 236|0);
 $134 = HEAP32[$133>>2]|0;
 _mrb_gc_arena_restore($131,$134);
 $135 = $0;
 $136 = ((($135)) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 _mrb_pool_close($137);
 STACKTOP = sp;return;
}
function _codegen_malloc($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $len;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (_mrb_malloc_simple($3,$4)|0);
 $p = $5;
 $6 = $p;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $9 = $p;
  STACKTOP = sp;return ($9|0);
 }
 $8 = $0;
 _codegen_error($8,69487);
 $9 = $p;
 STACKTOP = sp;return ($9|0);
}
function _lambda_body($s,$tree,$blk) {
 $s = $s|0;
 $tree = $tree|0;
 $blk = $blk|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $ba = 0;
 var $c = 0, $i = 0, $idx = 0, $ka = 0, $kd = 0, $lp = 0, $ma = 0, $n = 0, $oa = 0, $opt = 0, $pa = 0, $parent = 0, $pos = 0, $ra = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $blk;
 $3 = $0;
 $parent = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_scope_new($5,$6,$8)|0);
 $0 = $9;
 $10 = $0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $parent;
  _raise_error($12,69470);
 }
 $13 = $2;
 $14 = ($13|0)!=(0);
 $15 = $14 ^ 1;
 $16 = $15&1;
 $17 = $16&255;
 $18 = $0;
 $19 = ((($18)) + 184|0);
 $20 = $17&255;
 $21 = HEAP16[$19>>1]|0;
 $22 = $20 & 1;
 $23 = ($22 << 15)&65535;
 $24 = $21 & 32767;
 $25 = $24 | $23;
 HEAP16[$19>>1] = $25;
 $26 = $2;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $0;
  $29 = (_loop_push($28,1)|0);
  $lp = $29;
  $30 = $0;
  $31 = (_new_label($30)|0);
  $32 = $lp;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = $31;
 }
 $34 = $1;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $1;
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = (_node_len($42)|0);
  $ma = $43;
  $44 = $1;
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $n = $46;
  while(1) {
   $47 = $n;
   $48 = ($47|0)!=(0|0);
   if (!($48)) {
    break;
   }
   $49 = $n;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $n = $51;
  }
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = (_node_len($56)|0);
  $oa = $57;
  $58 = $1;
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0|0);
  $66 = $65 ? 1 : 0;
  $ra = $66;
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = (_node_len($75)|0);
  $pa = $76;
  $kd = 0;
  $ka = 0;
  $77 = $1;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)!=(0|0);
  $88 = $87 ? 1 : 0;
  $ba = $88;
  $89 = $ma;
  $90 = $89 & 31;
  $91 = $90 << 18;
  $92 = $oa;
  $93 = $92 & 31;
  $94 = $93 << 13;
  $95 = $91 | $94;
  $96 = $ra;
  $97 = $96 & 1;
  $98 = $97 << 12;
  $99 = $95 | $98;
  $100 = $pa;
  $101 = $100 & 31;
  $102 = $101 << 7;
  $103 = $99 | $102;
  $104 = $ka;
  $105 = $104 & 31;
  $106 = $105 << 2;
  $107 = $103 | $106;
  $108 = $kd;
  $109 = $108 & 1;
  $110 = $109 << 1;
  $111 = $107 | $110;
  $112 = $ba;
  $113 = $112 & 1;
  $114 = $111 | $113;
  $a = $114;
  $115 = $ma;
  $116 = $oa;
  $117 = (($115) + ($116))|0;
  $118 = $117 & 63;
  $119 = $118 << 6;
  $120 = $ra;
  $121 = $120 & 1;
  $122 = $121 << 5;
  $123 = $119 | $122;
  $124 = $pa;
  $125 = $124 & 31;
  $126 = $123 | $125;
  $127 = $0;
  $128 = ((($127)) + 184|0);
  $129 = $126&65535;
  $130 = HEAP16[$128>>1]|0;
  $131 = $129 & 32767;
  $132 = $130 & -32768;
  $133 = $132 | $131;
  HEAP16[$128>>1] = $133;
  $134 = $0;
  $135 = $a;
  $136 = $135 & 33554431;
  $137 = $136 << 7;
  $138 = 38 | $137;
  (_genop($134,$138)|0);
  $139 = $0;
  $140 = (_new_label($139)|0);
  $pos = $140;
  $i = 0;
  while(1) {
   $141 = $i;
   $142 = $oa;
   $143 = ($141|0)<($142|0);
   if (!($143)) {
    break;
   }
   $144 = $0;
   (_new_label($144)|0);
   $145 = $0;
   (_genop($145,4194199)|0);
   $146 = $i;
   $147 = (($146) + 1)|0;
   $i = $147;
  }
  $148 = $oa;
  $149 = ($148|0)>(0);
  if ($149) {
   $150 = $0;
   (_genop($150,4194199)|0);
  }
  $151 = $1;
  $152 = HEAP32[$151>>2]|0;
  $153 = ((($152)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = HEAP32[$154>>2]|0;
  $opt = $155;
  $i = 0;
  while(1) {
   $156 = $opt;
   $157 = ($156|0)!=(0|0);
   if (!($157)) {
    break;
   }
   $158 = $0;
   $159 = $pos;
   $160 = $i;
   $161 = (($159) + ($160))|0;
   _dispatch($158,$161);
   $162 = $0;
   $163 = $opt;
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($164)) + 4|0);
   $166 = HEAP32[$165>>2]|0;
   _codegen($162,$166,1);
   $167 = $0;
   $168 = $opt;
   $169 = HEAP32[$168>>2]|0;
   $170 = HEAP32[$169>>2]|0;
   $171 = $170;
   $172 = (_lv_idx($167,$171)|0);
   $idx = $172;
   $173 = $0;
   $174 = ((($173)) + 172|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) + -1)|0;
   HEAP32[$174>>2] = $176;
   $177 = $0;
   $178 = $idx;
   $179 = $178 & 511;
   $180 = $179 << 23;
   $181 = 1 | $180;
   $182 = $0;
   $183 = ((($182)) + 172|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $184 & 511;
   $186 = $185 << 14;
   $187 = $181 | $186;
   (_genop_peep($177,$187,0)|0);
   $188 = $i;
   $189 = (($188) + 1)|0;
   $i = $189;
   $190 = $opt;
   $191 = ((($190)) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $opt = $192;
  }
  $193 = $oa;
  $194 = ($193|0)>(0);
  if ($194) {
   $195 = $0;
   $196 = $pos;
   $197 = $i;
   $198 = (($196) + ($197))|0;
   _dispatch($195,$198);
  }
 }
 $199 = $0;
 $200 = $1;
 $201 = ((($200)) + 4|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = HEAP32[$202>>2]|0;
 _codegen($199,$203,1);
 $204 = $0;
 $205 = ((($204)) + 172|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = (($206) + -1)|0;
 HEAP32[$205>>2] = $207;
 $208 = $0;
 $209 = ((($208)) + 176|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)>(0);
 do {
  if ($211) {
   $212 = $0;
   $213 = ((($212)) + 176|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) - 1)|0;
   $216 = $0;
   $217 = ((($216)) + 204|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + ($215<<2)|0);
   $220 = HEAP32[$219>>2]|0;
   $c = $220;
   $221 = $c;
   $222 = $221 & 127;
   $223 = ($222|0)!=(41);
   if (!($223)) {
    $224 = $c;
    $225 = $224 >>> 14;
    $226 = $225 & 511;
    $227 = ($226|0)!=(0);
    if (!($227)) {
     $228 = $0;
     $229 = ((($228)) + 176|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $0;
     $232 = ((($231)) + 180|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ($230|0)==($233|0);
     if (!($234)) {
      break;
     }
    }
   }
   $235 = $0;
   $236 = ((($235)) + 234|0);
   $237 = HEAP16[$236>>1]|0;
   $238 = $237&65535;
   $239 = ($238|0)==(0);
   $240 = $0;
   if ($239) {
    (_genop($240,5)|0);
    $241 = $0;
    (_genop($241,41)|0);
    break;
   } else {
    $242 = $0;
    $243 = ((($242)) + 172|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $244 & 511;
    $246 = $245 << 23;
    $247 = 41 | $246;
    (_genop_peep($240,$247,0)|0);
    break;
   }
  }
 } while(0);
 $248 = $2;
 $249 = ($248|0)!=(0);
 if (!($249)) {
  $251 = $0;
  _scope_finish($251);
  $252 = $parent;
  $253 = ((($252)) + 216|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ((($254)) + 52|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) - 1)|0;
  STACKTOP = sp;return ($257|0);
 }
 $250 = $0;
 _loop_pop($250,0);
 $251 = $0;
 _scope_finish($251);
 $252 = $parent;
 $253 = ((($252)) + 216|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + 52|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (($256) - 1)|0;
 STACKTOP = sp;return ($257|0);
}
function _new_label($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 180|0);
 HEAP32[$5>>2] = $3;
 $6 = $0;
 $7 = ((($6)) + 176|0);
 $8 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _for_body($s,$tree) {
 $s = $s|0;
 $tree = $tree|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $idx = 0, $lp = 0, $n2 = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $0;
 $prev = $2;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 _codegen($3,$7,1);
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = (_scope_new($9,$10,0)|0);
 $0 = $11;
 $12 = $0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $prev;
  _raise_error($14,69470);
 }
 $15 = $0;
 _push_($15);
 $16 = $0;
 $17 = (_loop_push($16,2)|0);
 $lp = $17;
 $18 = $0;
 $19 = (_new_label($18)|0);
 $20 = $lp;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $n2 = $23;
 $24 = $0;
 (_genop($24,33554470)|0);
 $25 = $n2;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $n2;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   label = 7;
  } else {
   $33 = $n2;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    label = 7;
   } else {
    $37 = $0;
    $38 = $n2;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    _gen_assignment($37,$40,1,0);
   }
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $41 = $0;
  $42 = $n2;
  _gen_vmassignment($41,$42,1,1);
 }
 $43 = $0;
 $44 = $1;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 _codegen($43,$49,1);
 $50 = $0;
 $51 = ((($50)) + 172|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + -1)|0;
 HEAP32[$51>>2] = $53;
 $54 = $0;
 $55 = ((($54)) + 176|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)>(0);
 do {
  if ($57) {
   $58 = $0;
   $59 = ((($58)) + 176|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) - 1)|0;
   $62 = $0;
   $63 = ((($62)) + 204|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($61<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $c = $66;
   $67 = $c;
   $68 = $67 & 127;
   $69 = ($68|0)!=(41);
   if (!($69)) {
    $70 = $c;
    $71 = $70 >>> 14;
    $72 = $71 & 511;
    $73 = ($72|0)!=(0);
    if (!($73)) {
     $74 = $0;
     $75 = ((($74)) + 176|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $0;
     $78 = ((($77)) + 180|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($76|0)==($79|0);
     if (!($80)) {
      break;
     }
    }
   }
   $81 = $0;
   $82 = $0;
   $83 = ((($82)) + 172|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 & 511;
   $86 = $85 << 23;
   $87 = 41 | $86;
   (_genop_peep($81,$87,0)|0);
  }
 } while(0);
 $88 = $0;
 _loop_pop($88,0);
 $89 = $0;
 _scope_finish($89);
 $90 = $prev;
 $0 = $90;
 $91 = $0;
 $92 = $0;
 $93 = ((($92)) + 172|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 511;
 $96 = $95 << 23;
 $97 = 64 | $96;
 $98 = $0;
 $99 = ((($98)) + 216|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 52|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) - 1)|0;
 $104 = $103 & 16383;
 $105 = $104 << 9;
 $106 = $105 | 256;
 $107 = $97 | $106;
 (_genop($91,$107)|0);
 $108 = $0;
 $109 = ((($108)) + 172|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) + -1)|0;
 HEAP32[$109>>2] = $111;
 $112 = $0;
 $113 = $0;
 $114 = HEAP32[$113>>2]|0;
 $115 = (_mrb_intern_static($114,69498,4)|0);
 $116 = (_new_msym($112,$115)|0);
 $idx = $116;
 $117 = $0;
 $118 = $0;
 $119 = ((($118)) + 172|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $120 & 511;
 $122 = $121 << 23;
 $123 = 33 | $122;
 $124 = $idx;
 $125 = $124 & 511;
 $126 = $125 << 14;
 $127 = $123 | $126;
 (_genop($117,$127)|0);
 STACKTOP = sp;return;
}
function _nosplat($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $t;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
  $8 = ($7|0)==(66);
  if ($8) {
   label = 4;
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _loop_break($s,$tree) {
 $s = $s|0;
 $tree = $tree|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $loop = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $0;
 $3 = ((($2)) + 188|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = $0;
  $7 = $1;
  _codegen($6,$7,0);
  $8 = $0;
  _raise_error($8,69517);
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = $1;
  _codegen($11,$12,1);
  $13 = $0;
  $14 = ((($13)) + 172|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + -1)|0;
  HEAP32[$14>>2] = $16;
 }
 $17 = $0;
 $18 = ((($17)) + 188|0);
 $19 = HEAP32[$18>>2]|0;
 $loop = $19;
 while(1) {
  $20 = $loop;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   break;
  }
  $22 = $loop;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(3);
  if (!($24)) {
   break;
  }
  $25 = $0;
  (_genop_peep($25,8388636,0)|0);
  $26 = $loop;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $loop = $28;
 }
 while(1) {
  $29 = $loop;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = $loop;
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(4);
   $98 = $33;
  } else {
   $98 = 0;
  }
  $34 = $loop;
  if (!($98)) {
   break;
  }
  $35 = ((($34)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $loop = $36;
 }
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  $38 = $0;
  _codegen_error($38,69517);
 }
 $39 = $loop;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 $42 = $0;
 if (!($41)) {
  $91 = $0;
  $92 = ((($91)) + 172|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & 511;
  $95 = $94 << 23;
  $96 = 41 | $95;
  $97 = $96 | 16384;
  (_genop($42,$97)|0);
  STACKTOP = sp;return;
 }
 $43 = ((($42)) + 192|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $0;
 $46 = ((($45)) + 188|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($44|0)>($49|0);
 if ($50) {
  $51 = $0;
  $52 = $0;
  $53 = ((($52)) + 192|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $0;
  $56 = ((($55)) + 188|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($54) - ($59))|0;
  $61 = $60 & 511;
  $62 = $61 << 23;
  $63 = 31 | $62;
  (_genop_peep($51,$63,0)|0);
 }
 $64 = $1;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $0;
  $67 = $loop;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 & 511;
  $71 = $70 << 23;
  $72 = 1 | $71;
  $73 = $0;
  $74 = ((($73)) + 172|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 & 511;
  $77 = $76 << 14;
  $78 = $72 | $77;
  (_genop_peep($66,$78,0)|0);
 }
 $79 = $0;
 $80 = $loop;
 $81 = ((($80)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 32767)|0;
 $84 = $83 & 65535;
 $85 = $84 << 7;
 $86 = 23 | $85;
 $87 = (_genop($79,$86)|0);
 $tmp = $87;
 $88 = $tmp;
 $89 = $loop;
 $90 = ((($89)) + 12|0);
 HEAP32[$90>>2] = $88;
 STACKTOP = sp;return;
}
function _mrb_fixnum_value_1199($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $i;
 $1 = ((($v)) + 4|0);
 HEAP32[$1>>2] = 3;
 $2 = $0;
 HEAP32[$v>>2] = $2;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _readint_mrb_int($s,$p,$base,$neg,$overflow) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $neg = $neg|0;
 $overflow = $overflow|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $c = 0, $e = 0, $n = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $p;
 $3 = $base;
 $4 = $neg;
 $5 = $overflow;
 $6 = $2;
 $7 = $2;
 $8 = (_strlen($7)|0);
 $9 = (($6) + ($8)|0);
 $e = $9;
 $result = 0;
 $10 = $2;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(43);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 1|0);
  $2 = $15;
 }
 while(1) {
  $16 = $2;
  $17 = $e;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   label = 18;
   break;
  }
  $19 = $2;
  $20 = HEAP8[$19>>0]|0;
  $c = $20;
  $21 = $c;
  $22 = $21&255;
  $23 = (_tolower($22)|0);
  $24 = $23&255;
  $c = $24;
  $n = 0;
  while(1) {
   $25 = $n;
   $26 = $3;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $n;
   $29 = (55345 + ($28)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = $c;
   $33 = $32 << 24 >> 24;
   $34 = ($31|0)==($33|0);
   if ($34) {
    break;
   }
   $35 = $n;
   $36 = (($35) + 1)|0;
   $n = $36;
  }
  $37 = $n;
  $38 = $3;
  $39 = ($37|0)==($38|0);
  if ($39) {
   $40 = $1;
   _codegen_error($40,69585);
  }
  $41 = $4;
  $42 = ($41<<24>>24)!=(0);
  $43 = $n;
  if ($42) {
   $44 = (-2147483648 + ($43))|0;
   $45 = $3;
   $46 = (($44|0) / ($45|0))&-1;
   $47 = $result;
   $48 = ($46|0)>($47|0);
   if ($48) {
    label = 12;
    break;
   }
   $50 = $3;
   $51 = $result;
   $52 = Math_imul($51, $50)|0;
   $result = $52;
   $53 = $n;
   $54 = $result;
   $55 = (($54) - ($53))|0;
   $result = $55;
  } else {
   $56 = (2147483647 - ($43))|0;
   $57 = $3;
   $58 = (($56|0) / ($57|0))&-1;
   $59 = $result;
   $60 = ($58|0)<($59|0);
   if ($60) {
    label = 15;
    break;
   }
   $62 = $3;
   $63 = $result;
   $64 = Math_imul($63, $62)|0;
   $result = $64;
   $65 = $n;
   $66 = $result;
   $67 = (($66) + ($65))|0;
   $result = $67;
  }
  $68 = $2;
  $69 = ((($68)) + 1|0);
  $2 = $69;
 }
 if ((label|0) == 12) {
  $49 = $5;
  HEAP8[$49>>0] = 1;
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 15) {
  $61 = $5;
  HEAP8[$61>>0] = 1;
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 18) {
  $70 = $5;
  HEAP8[$70>>0] = 0;
  $71 = $result;
  $0 = $71;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _readint_float($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $e = 0, $f = 0.0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $p;
 $2 = $base;
 $3 = $1;
 $4 = $1;
 $5 = (_strlen($4)|0);
 $6 = (($3) + ($5)|0);
 $e = $6;
 $f = 0.0;
 $7 = $1;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(43);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 1|0);
  $1 = $12;
 }
 while(1) {
  $13 = $1;
  $14 = $e;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = HEAP8[$16>>0]|0;
  $c = $17;
  $18 = $c;
  $19 = $18&255;
  $20 = (_tolower($19)|0);
  $21 = $20&255;
  $c = $21;
  $n = 0;
  while(1) {
   $22 = $n;
   $23 = $2;
   $24 = ($22|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $n;
   $26 = (55345 + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = $c;
   $30 = $29 << 24 >> 24;
   $31 = ($28|0)==($30|0);
   if ($31) {
    label = 7;
    break;
   }
   $40 = $n;
   $41 = (($40) + 1)|0;
   $n = $41;
  }
  if ((label|0) == 7) {
   label = 0;
   $32 = $2;
   $33 = (+($32|0));
   $34 = $f;
   $35 = $34 * $33;
   $f = $35;
   $36 = $n;
   $37 = (+($36|0));
   $38 = $f;
   $39 = $38 + $37;
   $f = $39;
  }
  $42 = $n;
  $43 = $2;
  $44 = ($42|0)==($43|0);
  if ($44) {
   $45 = $0;
   _codegen_error($45,69585);
  }
  $46 = $1;
  $47 = ((($46)) + 1|0);
  $1 = $47;
 }
 $48 = $f;
 STACKTOP = sp;return (+$48);
}
function _mrb_float_value_1202($agg$result,$mrb,$f) {
 $agg$result = $agg$result|0;
 $mrb = $mrb|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = $mrb;
 $1 = $f;
 $2 = ((($v)) + 4|0);
 HEAP32[$2>>2] = 6;
 $3 = $1;
 HEAPF32[$v>>2] = $3;
 ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
 STACKTOP = sp;return;
}
function _gen_literal_array($s,$tree,$sym,$val) {
 $s = $s|0;
 $tree = $tree|0;
 $sym = $sym|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $tree;
 $2 = $sym;
 $3 = $val;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  while(1) {
   $94 = $1;
   $95 = ($94|0)!=(0|0);
   if (!($95)) {
    break;
   }
   $96 = $1;
   $97 = HEAP32[$96>>2]|0;
   $98 = HEAP32[$97>>2]|0;
   $99 = $98;
   switch ($99|0) {
   case 4: case 17:  {
    $100 = $0;
    $101 = $1;
    $102 = HEAP32[$101>>2]|0;
    _codegen($100,$102,0);
    break;
   }
   default: {
   }
   }
   $103 = $1;
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $1 = $105;
  }
  STACKTOP = sp;return;
 }
 $i = 0;
 $j = 0;
 while(1) {
  $6 = $1;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
  switch ($11|0) {
  case 55:  {
   $12 = $1;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = $1;
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
    $23 = ($22|0)==(0);
    if (!($23)) {
     label = 7;
    }
   } else {
    label = 7;
   }
   break;
  }
  case 17:  {
   label = 7;
   break;
  }
  case 100:  {
   $29 = $j;
   $30 = ($29|0)>(0);
   if ($30) {
    $j = 0;
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
    $33 = $2;
    $34 = ($33<<24>>24)!=(0);
    if ($34) {
     $35 = $0;
     _gen_send_intern($35);
    }
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 7) {
   label = 0;
   $24 = $0;
   $25 = $1;
   $26 = HEAP32[$25>>2]|0;
   _codegen($24,$26,1);
   $27 = $j;
   $28 = (($27) + 1)|0;
   $j = $28;
  }
  $36 = $j;
  $37 = ($36|0)>=(2);
  if ($37) {
   $38 = $0;
   $39 = ((($38)) + 172|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + -1)|0;
   HEAP32[$39>>2] = $41;
   $42 = $0;
   $43 = ((($42)) + 172|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + -1)|0;
   HEAP32[$43>>2] = $45;
   $46 = $0;
   $47 = $0;
   $48 = ((($47)) + 172|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 511;
   $51 = $50 << 23;
   $52 = 62 | $51;
   $53 = $0;
   $54 = ((($53)) + 172|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   $57 = $56 & 511;
   $58 = $57 << 14;
   $59 = $52 | $58;
   (_genop_peep($46,$59,1)|0);
   $60 = $0;
   _push_($60);
   $j = 1;
  }
  $61 = $1;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $1 = $63;
 }
 $64 = $j;
 $65 = ($64|0)>(0);
 if ($65) {
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
  $68 = $2;
  $69 = ($68<<24>>24)!=(0);
  if ($69) {
   $70 = $0;
   _gen_send_intern($70);
  }
 }
 $71 = $i;
 $72 = $0;
 $73 = ((($72)) + 172|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) - ($71))|0;
 HEAP32[$73>>2] = $75;
 $76 = $0;
 $77 = $0;
 $78 = ((($77)) + 172|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 511;
 $81 = $80 << 23;
 $82 = 55 | $81;
 $83 = $0;
 $84 = ((($83)) + 172|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 & 511;
 $87 = $86 << 14;
 $88 = $82 | $87;
 $89 = $i;
 $90 = $89 & 127;
 $91 = $90 << 7;
 $92 = $88 | $91;
 (_genop($76,$92)|0);
 $93 = $0;
 _push_($93);
 STACKTOP = sp;return;
}
function _gen_send_intern($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = $0;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 511;
 $10 = $9 << 23;
 $11 = 32 | $10;
 $12 = $0;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_mrb_intern_static($14,69611,6)|0);
 $16 = (_new_msym($12,$15)|0);
 $17 = $16 & 511;
 $18 = $17 << 14;
 $19 = $11 | $18;
 (_genop($5,$19)|0);
 $20 = $0;
 _push_($20);
 STACKTOP = sp;return;
}
function _mrb_init_comparable($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 (_mrb_define_module($1,69668)|0);
 STACKTOP = sp;return;
}
function _mrb_init_enumerable($mrb) {
 $mrb = $mrb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mrb;
 $1 = $0;
 (_mrb_define_module($1,69679)|0);
 STACKTOP = sp;return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[18723]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 74936;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[18723]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((334|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_522($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[18723]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((335|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_517($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 2;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _strtox_545($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((69691) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((69691) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (69947 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((69691) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((69691) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((69691) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((69691) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((69691) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((69691) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((69691) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((69691) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 511]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 511]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_545($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=2900; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 511]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((69956 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 70436;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 70436;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 70436;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 70436 : (70438);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (70437);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 70436;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 70436;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 72338;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad_1244($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 72345;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (72346) : (72351);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (72348);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u_1243($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (70420 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad_1244($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad_1244($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad_1244($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad_1244($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u_1243($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad_1244($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad_1244($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u_1243($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(72376,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u_1243($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad_1244($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u_1243($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(72376,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad_1244($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad_1244($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 72364 : 72368;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 72387 : 72372;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad_1244($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad_1244($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 70436;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 70436;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (70420 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 70436;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (70436 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u_1243($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 70436;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad_1244($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad_1244($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad_1244($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad_1244($f,48,$w$2,$774,$779);
  _pad_1244($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad_1244($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 511]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 511]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u_1243($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (70446 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 70534;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 70534;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 70534;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _pad_1244($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (72378 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (72387 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$693 = $156;$694 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $170;$696 = $168;$697 = $170;$698 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $705;$394 = $707;$396 = $706;$397 = $708;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $699;$394 = 0;$396 = $700;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $395;$716 = $398;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $395;$722 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $426 = $715;$428 = $713;$429 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $426 = $721;$428 = $718;$429 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (3012 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($426) + -10)|0;
           $501 = (3012 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($426|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($426|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (3012 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $426;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $602 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $603 = ($602|0)==($a$6$i$lcssa|0);
          if (!($603)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $602;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($602) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $602;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$151 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$151 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $149;$152 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fmodf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa = 0, $$lcssa6 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $ex$0$lcssa = 0, $ex$025 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$211 = 0, $ex$3$lcssa = 0, $ex$38 = 0, $ey$0$lcssa = 0, $ey$019 = 0, $ey$1$ph = 0, $fabs = 0.0, $i$026 = 0;
 var $i$120 = 0, $or$cond = 0, $uxi$0 = 0, $uxi$1$lcssa = 0, $uxi$112 = 0, $uxi$2 = 0, $uxi$3$lcssa = 0, $uxi$3$ph = 0, $uxi$39 = 0, $uxi$4 = 0, $uy$sroa$0$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 >>> 23;
 $3 = $2 & 255;
 $4 = $1 >>> 23;
 $5 = $4 & 255;
 $6 = $0 & -2147483648;
 $7 = $1 << 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   $9 = (HEAPF32[tempDoublePtr>>2]=$fabs,HEAP32[tempDoublePtr>>2]|0);
   $10 = ($9>>>0)>(2139095040);
   $11 = ($3|0)==(255);
   $or$cond = $10 | $11;
   if ($or$cond) {
    label = 3;
   } else {
    $14 = $0 << 1;
    $15 = ($14>>>0)>($7>>>0);
    if (!($15)) {
     $16 = ($14|0)==($7|0);
     $17 = $x * 0.0;
     $$x = $16 ? $17 : $x;
     return (+$$x);
    }
    $18 = ($3|0)==(0);
    if ($18) {
     $19 = $0 << 9;
     $20 = ($19|0)>(-1);
     if ($20) {
      $ex$025 = 0;$i$026 = $19;
      while(1) {
       $21 = (($ex$025) + -1)|0;
       $22 = $i$026 << 1;
       $23 = ($22|0)>(-1);
       if ($23) {
        $ex$025 = $21;$i$026 = $22;
       } else {
        $ex$0$lcssa = $21;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $24 = (1 - ($ex$0$lcssa))|0;
     $25 = $0 << $24;
     $ex$1 = $ex$0$lcssa;$uxi$0 = $25;
    } else {
     $26 = $0 & 8388607;
     $27 = $26 | 8388608;
     $ex$1 = $3;$uxi$0 = $27;
    }
    $28 = ($5|0)==(0);
    if ($28) {
     $29 = $1 << 9;
     $30 = ($29|0)>(-1);
     if ($30) {
      $ey$019 = 0;$i$120 = $29;
      while(1) {
       $31 = (($ey$019) + -1)|0;
       $32 = $i$120 << 1;
       $33 = ($32|0)>(-1);
       if ($33) {
        $ey$019 = $31;$i$120 = $32;
       } else {
        $ey$0$lcssa = $31;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $34 = (1 - ($ey$0$lcssa))|0;
     $35 = $1 << $34;
     $ey$1$ph = $ey$0$lcssa;$uy$sroa$0$0$ph = $35;
    } else {
     $36 = $1 & 8388607;
     $37 = $36 | 8388608;
     $ey$1$ph = $5;$uy$sroa$0$0$ph = $37;
    }
    $38 = ($ex$1|0)>($ey$1$ph|0);
    $39 = (($uxi$0) - ($uy$sroa$0$0$ph))|0;
    $40 = ($39|0)>(-1);
    L23: do {
     if ($38) {
      $62 = $40;$63 = $39;$ex$211 = $ex$1;$uxi$112 = $uxi$0;
      while(1) {
       if ($62) {
        $41 = ($uxi$112|0)==($uy$sroa$0$0$ph|0);
        if ($41) {
         break;
        } else {
         $uxi$2 = $63;
        }
       } else {
        $uxi$2 = $uxi$112;
       }
       $43 = $uxi$2 << 1;
       $44 = (($ex$211) + -1)|0;
       $45 = ($44|0)>($ey$1$ph|0);
       $46 = (($43) - ($uy$sroa$0$0$ph))|0;
       $47 = ($46|0)>(-1);
       if ($45) {
        $62 = $47;$63 = $46;$ex$211 = $44;$uxi$112 = $43;
       } else {
        $$lcssa = $46;$$lcssa6 = $47;$ex$2$lcssa = $44;$uxi$1$lcssa = $43;
        break L23;
       }
      }
      $42 = $x * 0.0;
      $$0 = $42;
      break L1;
     } else {
      $$lcssa = $39;$$lcssa6 = $40;$ex$2$lcssa = $ex$1;$uxi$1$lcssa = $uxi$0;
     }
    } while(0);
    if ($$lcssa6) {
     $48 = ($uxi$1$lcssa|0)==($uy$sroa$0$0$ph|0);
     if ($48) {
      $50 = $x * 0.0;
      $$0 = $50;
      break;
     } else {
      $uxi$3$ph = $$lcssa;
     }
    } else {
     $uxi$3$ph = $uxi$1$lcssa;
    }
    $49 = ($uxi$3$ph>>>0)<(8388608);
    if ($49) {
     $ex$38 = $ex$2$lcssa;$uxi$39 = $uxi$3$ph;
     while(1) {
      $51 = $uxi$39 << 1;
      $52 = (($ex$38) + -1)|0;
      $53 = ($51>>>0)<(8388608);
      if ($53) {
       $ex$38 = $52;$uxi$39 = $51;
      } else {
       $ex$3$lcssa = $52;$uxi$3$lcssa = $51;
       break;
      }
     }
    } else {
     $ex$3$lcssa = $ex$2$lcssa;$uxi$3$lcssa = $uxi$3$ph;
    }
    $54 = ($ex$3$lcssa|0)>(0);
    if ($54) {
     $55 = (($uxi$3$lcssa) + -8388608)|0;
     $56 = $ex$3$lcssa << 23;
     $57 = $55 | $56;
     $uxi$4 = $57;
    } else {
     $58 = (1 - ($ex$3$lcssa))|0;
     $59 = $uxi$3$lcssa >>> $58;
     $uxi$4 = $59;
    }
    $60 = $uxi$4 | $6;
    $61 = (HEAP32[tempDoublePtr>>2]=$60,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $61;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $12 = $x * $y;
  $13 = $12 / $12;
  $$0 = $13;
 }
 return (+$$0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(72391,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(72391,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 4;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 2;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 3;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 1;
   $34 = HEAP32[(74896)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((74920)|0));
   $37 = HEAP32[(74916)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(74916)>>2] = $4;
   ___unlock(((74920)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((74920)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(74916)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(74916)>>2] = $14;
  }
  ___unlock(((74920)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 255]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[724]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[724]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((74920)|0));
   $$012 = HEAP32[(74916)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((74920)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 511]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   ___unlockfile($f);
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 511]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[695]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _putc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($6))|0;
 $11 = ($p|0)==(0|0);
 if (!($11)) {
  $12 = ($10|0)!=(0);
  $13 = (($s) + ($10)|0);
  $14 = $12 ? $13 : $s;
  HEAP32[$p>>2] = $14;
 }
 STACKTOP = sp;return (+$4);
}
function _strtof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,0));
 $1 = $0;
 return (+$1);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0;
 var $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0;
 var $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0;
 var $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0;
 var $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0;
 var $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic$i$i = sp;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[18735]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (74980 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[18735] = $22;
     } else {
      $23 = HEAP32[(74956)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = HEAP32[(74948)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (74980 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[18735] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(74956)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(74948)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(74960)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (74980 + ($93<<2)|0);
      $95 = HEAP32[18735]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[18735] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(74956)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(74948)>>2] = $82;
     HEAP32[(74960)>>2] = $85;
     $$0 = $70;
     STACKTOP = sp;return ($$0|0);
    }
    $107 = HEAP32[(74944)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (75244 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(74956)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (75244 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(74944)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(74944)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(74956)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(74956)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(74956)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(74948)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(74960)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (74980 + ($231<<2)|0);
       $233 = HEAP32[18735]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[18735] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(74956)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(74948)>>2] = $rsize$0$i$lcssa;
      HEAP32[(74960)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(74944)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (75244 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (75244 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(74948)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(74956)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (75244 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(74944)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(74944)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(74956)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(74956)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(74956)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (74980 + ($428<<2)|0);
          $430 = HEAP32[18735]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[18735] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(74956)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (75244 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(74944)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(74944)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(74956)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(74956)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       STACKTOP = sp;return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(74948)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(74960)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(74960)>>2] = $514;
   HEAP32[(74948)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(74948)>>2] = 0;
   HEAP32[(74960)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  STACKTOP = sp;return ($$0|0);
 }
 $527 = HEAP32[(74952)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(74952)>>2] = $529;
  $530 = HEAP32[(74964)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(74964)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  STACKTOP = sp;return ($$0|0);
 }
 $537 = HEAP32[18853]|0;
 $538 = ($537|0)==(0);
 if ($538) {
  HEAP32[(75420)>>2] = 4096;
  HEAP32[(75416)>>2] = 4096;
  HEAP32[(75424)>>2] = -1;
  HEAP32[(75428)>>2] = -1;
  HEAP32[(75432)>>2] = 0;
  HEAP32[(75384)>>2] = 0;
  $539 = $magic$i$i;
  $540 = $539 & -16;
  $541 = $540 ^ 1431655768;
  HEAP32[$magic$i$i>>2] = $541;
  HEAP32[18853] = $541;
 }
 $542 = (($nb$0) + 48)|0;
 $543 = HEAP32[(75420)>>2]|0;
 $544 = (($nb$0) + 47)|0;
 $545 = (($543) + ($544))|0;
 $546 = (0 - ($543))|0;
 $547 = $545 & $546;
 $548 = ($547>>>0)>($nb$0>>>0);
 if (!($548)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $549 = HEAP32[(75380)>>2]|0;
 $550 = ($549|0)==(0);
 if (!($550)) {
  $551 = HEAP32[(75372)>>2]|0;
  $552 = (($551) + ($547))|0;
  $553 = ($552>>>0)<=($551>>>0);
  $554 = ($552>>>0)>($549>>>0);
  $or$cond1$i16 = $553 | $554;
  if ($or$cond1$i16) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $555 = HEAP32[(75384)>>2]|0;
 $556 = $555 & 4;
 $557 = ($556|0)==(0);
 L254: do {
  if ($557) {
   $558 = HEAP32[(74964)>>2]|0;
   $559 = ($558|0)==(0|0);
   L256: do {
    if ($559) {
     label = 171;
    } else {
     $sp$0$i$i = (75388);
     while(1) {
      $560 = HEAP32[$sp$0$i$i>>2]|0;
      $561 = ($560>>>0)>($558>>>0);
      if (!($561)) {
       $562 = ((($sp$0$i$i)) + 4|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = (($560) + ($563)|0);
       $565 = ($564>>>0)>($558>>>0);
       if ($565) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $562;
        break;
       }
      }
      $566 = ((($sp$0$i$i)) + 8|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = ($567|0)==(0|0);
      if ($568) {
       label = 171;
       break L256;
      } else {
       $sp$0$i$i = $567;
      }
     }
     $591 = HEAP32[(74952)>>2]|0;
     $592 = (($545) - ($591))|0;
     $593 = $592 & $546;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = (_sbrk(($593|0))|0);
      $596 = HEAP32[$$lcssa153>>2]|0;
      $597 = HEAP32[$$lcssa155>>2]|0;
      $598 = (($596) + ($597)|0);
      $599 = ($595|0)==($598|0);
      if ($599) {
       $600 = ($595|0)==((-1)|0);
       if (!($600)) {
        $tbase$746$i = $595;$tsize$745$i = $593;
        label = 191;
        break L254;
       }
      } else {
       $br$2$ph$i = $595;$ssize$2$ph$i = $593;
       label = 181;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $569 = (_sbrk(0)|0);
     $570 = ($569|0)==((-1)|0);
     if (!($570)) {
      $571 = $569;
      $572 = HEAP32[(75416)>>2]|0;
      $573 = (($572) + -1)|0;
      $574 = $573 & $571;
      $575 = ($574|0)==(0);
      if ($575) {
       $ssize$0$i = $547;
      } else {
       $576 = (($573) + ($571))|0;
       $577 = (0 - ($572))|0;
       $578 = $576 & $577;
       $579 = (($547) - ($571))|0;
       $580 = (($579) + ($578))|0;
       $ssize$0$i = $580;
      }
      $581 = HEAP32[(75372)>>2]|0;
      $582 = (($581) + ($ssize$0$i))|0;
      $583 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $584 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $583 & $584;
      if ($or$cond$i17) {
       $585 = HEAP32[(75380)>>2]|0;
       $586 = ($585|0)==(0);
       if (!($586)) {
        $587 = ($582>>>0)<=($581>>>0);
        $588 = ($582>>>0)>($585>>>0);
        $or$cond2$i = $587 | $588;
        if ($or$cond2$i) {
         break;
        }
       }
       $589 = (_sbrk(($ssize$0$i|0))|0);
       $590 = ($589|0)==($569|0);
       if ($590) {
        $tbase$746$i = $569;$tsize$745$i = $ssize$0$i;
        label = 191;
        break L254;
       } else {
        $br$2$ph$i = $589;$ssize$2$ph$i = $ssize$0$i;
        label = 181;
       }
      }
     }
    }
   } while(0);
   L276: do {
    if ((label|0) == 181) {
     $601 = (0 - ($ssize$2$ph$i))|0;
     $602 = ($br$2$ph$i|0)!=((-1)|0);
     $603 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $603 & $602;
     $604 = ($542>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $604 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $605 = HEAP32[(75420)>>2]|0;
       $606 = (($544) - ($ssize$2$ph$i))|0;
       $607 = (($606) + ($605))|0;
       $608 = (0 - ($605))|0;
       $609 = $607 & $608;
       $610 = ($609>>>0)<(2147483647);
       if ($610) {
        $611 = (_sbrk(($609|0))|0);
        $612 = ($611|0)==((-1)|0);
        if ($612) {
         (_sbrk(($601|0))|0);
         break L276;
        } else {
         $613 = (($609) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $613;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $614 = ($br$2$ph$i|0)==((-1)|0);
     if (!($614)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 191;
      break L254;
     }
    }
   } while(0);
   $615 = HEAP32[(75384)>>2]|0;
   $616 = $615 | 4;
   HEAP32[(75384)>>2] = $616;
   label = 188;
  } else {
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $617 = ($547>>>0)<(2147483647);
  if ($617) {
   $618 = (_sbrk(($547|0))|0);
   $619 = (_sbrk(0)|0);
   $620 = ($618|0)!=((-1)|0);
   $621 = ($619|0)!=((-1)|0);
   $or$cond5$i = $620 & $621;
   $622 = ($618>>>0)<($619>>>0);
   $or$cond10$i = $622 & $or$cond5$i;
   if ($or$cond10$i) {
    $623 = $619;
    $624 = $618;
    $625 = (($623) - ($624))|0;
    $626 = (($nb$0) + 40)|0;
    $$not$i = ($625>>>0)>($626>>>0);
    if ($$not$i) {
     $tbase$746$i = $618;$tsize$745$i = $625;
     label = 191;
    }
   }
  }
 }
 if ((label|0) == 191) {
  $627 = HEAP32[(75372)>>2]|0;
  $628 = (($627) + ($tsize$745$i))|0;
  HEAP32[(75372)>>2] = $628;
  $629 = HEAP32[(75376)>>2]|0;
  $630 = ($628>>>0)>($629>>>0);
  if ($630) {
   HEAP32[(75376)>>2] = $628;
  }
  $631 = HEAP32[(74964)>>2]|0;
  $632 = ($631|0)==(0|0);
  do {
   if ($632) {
    $633 = HEAP32[(74956)>>2]|0;
    $634 = ($633|0)==(0|0);
    $635 = ($tbase$746$i>>>0)<($633>>>0);
    $or$cond11$i = $634 | $635;
    if ($or$cond11$i) {
     HEAP32[(74956)>>2] = $tbase$746$i;
    }
    HEAP32[(75388)>>2] = $tbase$746$i;
    HEAP32[(75392)>>2] = $tsize$745$i;
    HEAP32[(75400)>>2] = 0;
    $636 = HEAP32[18853]|0;
    HEAP32[(74976)>>2] = $636;
    HEAP32[(74972)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $637 = $i$01$i$i << 1;
     $638 = (74980 + ($637<<2)|0);
     $639 = ((($638)) + 12|0);
     HEAP32[$639>>2] = $638;
     $640 = ((($638)) + 8|0);
     HEAP32[$640>>2] = $638;
     $641 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($641|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $641;
     }
    }
    $642 = (($tsize$745$i) + -40)|0;
    $643 = ((($tbase$746$i)) + 8|0);
    $644 = $643;
    $645 = $644 & 7;
    $646 = ($645|0)==(0);
    $647 = (0 - ($644))|0;
    $648 = $647 & 7;
    $649 = $646 ? 0 : $648;
    $650 = (($tbase$746$i) + ($649)|0);
    $651 = (($642) - ($649))|0;
    HEAP32[(74964)>>2] = $650;
    HEAP32[(74952)>>2] = $651;
    $652 = $651 | 1;
    $653 = ((($650)) + 4|0);
    HEAP32[$653>>2] = $652;
    $654 = (($650) + ($651)|0);
    $655 = ((($654)) + 4|0);
    HEAP32[$655>>2] = 40;
    $656 = HEAP32[(75428)>>2]|0;
    HEAP32[(74968)>>2] = $656;
   } else {
    $sp$068$i = (75388);
    while(1) {
     $657 = HEAP32[$sp$068$i>>2]|0;
     $658 = ((($sp$068$i)) + 4|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = (($657) + ($659)|0);
     $661 = ($tbase$746$i|0)==($660|0);
     if ($661) {
      $$lcssa147 = $657;$$lcssa149 = $658;$$lcssa151 = $659;$sp$068$i$lcssa = $sp$068$i;
      label = 201;
      break;
     }
     $662 = ((($sp$068$i)) + 8|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = ($663|0)==(0|0);
     if ($664) {
      break;
     } else {
      $sp$068$i = $663;
     }
    }
    if ((label|0) == 201) {
     $665 = ((($sp$068$i$lcssa)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($631>>>0)>=($$lcssa147>>>0);
      $670 = ($631>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $670 & $669;
      if ($or$cond48$i) {
       $671 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $671;
       $672 = HEAP32[(74952)>>2]|0;
       $673 = ((($631)) + 8|0);
       $674 = $673;
       $675 = $674 & 7;
       $676 = ($675|0)==(0);
       $677 = (0 - ($674))|0;
       $678 = $677 & 7;
       $679 = $676 ? 0 : $678;
       $680 = (($631) + ($679)|0);
       $681 = (($tsize$745$i) - ($679))|0;
       $682 = (($681) + ($672))|0;
       HEAP32[(74964)>>2] = $680;
       HEAP32[(74952)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($680)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($680) + ($682)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(75428)>>2]|0;
       HEAP32[(74968)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(74956)>>2]|0;
    $689 = ($tbase$746$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(74956)>>2] = $tbase$746$i;
     $753 = $tbase$746$i;
    } else {
     $753 = $688;
    }
    $690 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (75388);
    while(1) {
     $691 = HEAP32[$sp$167$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 209;
      break;
     }
     $693 = ((($sp$167$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      $sp$0$i$i$i = (75388);
      break;
     } else {
      $sp$167$i = $694;
     }
    }
    if ((label|0) == 209) {
     $696 = ((($sp$167$i$lcssa)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $700 = ((($sp$167$i$lcssa)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($tsize$745$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($tbase$746$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($tbase$746$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($nb$0)|0);
      $723 = (($721) - ($nb$0))|0;
      $724 = $nb$0 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($718|0)==($631|0);
      do {
       if ($726) {
        $727 = HEAP32[(74952)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(74952)>>2] = $728;
        HEAP32[(74964)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(74960)>>2]|0;
        $732 = ($718|0)==($731|0);
        if ($732) {
         $733 = HEAP32[(74948)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(74948)>>2] = $734;
         HEAP32[(74960)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L328: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (74980 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $752 = ($746>>>0)<($753>>>0);
             if ($752) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[18735]|0;
            $761 = $760 & $759;
            HEAP32[18735] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre9$i$i = ((($748)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $763 = ($748>>>0)<($753>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi10$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $786;$RP$1$i$i = $782;
              }
             } else {
              $R$1$i$i = $784;$RP$1$i$i = $783;
             }
             while(1) {
              $788 = ((($R$1$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if (!($790)) {
               $R$1$i$i = $789;$RP$1$i$i = $788;
               continue;
              }
              $791 = ((($R$1$i$i)) + 16|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $792;$RP$1$i$i = $791;
              }
             }
             $794 = ($RP$1$i$i$lcssa>>>0)<($753>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($774>>>0)<($753>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $R$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (75244 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($718|0)==($799|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(74944)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(74944)>>2] = $804;
             break L328;
            } else {
             $805 = HEAP32[(74956)>>2]|0;
             $806 = ($769>>>0)<($805>>>0);
             if ($806) {
              _abort();
              // unreachable;
             }
             $807 = ((($769)) + 16|0);
             $808 = HEAP32[$807>>2]|0;
             $809 = ($808|0)==($718|0);
             if ($809) {
              HEAP32[$807>>2] = $R$3$i$i;
             } else {
              $810 = ((($769)) + 20|0);
              HEAP32[$810>>2] = $R$3$i$i;
             }
             $811 = ($R$3$i$i|0)==(0|0);
             if ($811) {
              break L328;
             }
            }
           } while(0);
           $812 = HEAP32[(74956)>>2]|0;
           $813 = ($R$3$i$i>>>0)<($812>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($R$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($816>>>0)<($812>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($R$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(74956)>>2]|0;
           $825 = ($822>>>0)<($824>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($R$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $oldfirst$0$i$i = $828;$qsize$0$i$i = $829;
        } else {
         $oldfirst$0$i$i = $718;$qsize$0$i$i = $723;
        }
        $830 = ((($oldfirst$0$i$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $qsize$0$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($qsize$0$i$i)|0);
        HEAP32[$835>>2] = $qsize$0$i$i;
        $836 = $qsize$0$i$i >>> 3;
        $837 = ($qsize$0$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (74980 + ($838<<2)|0);
         $840 = HEAP32[18735]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[18735] = $844;
           $$pre$i16$i = ((($839)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $839;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(74956)>>2]|0;
           $848 = ($846>>>0)<($847>>>0);
           if (!($848)) {
            $$pre$phi$i17$iZ2D = $845;$F4$0$i$i = $846;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $722;
         $849 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $F4$0$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $qsize$0$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $I7$0$i$i = 0;
         } else {
          $854 = ($qsize$0$i$i>>>0)>(16777215);
          if ($854) {
           $I7$0$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $qsize$0$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $I7$0$i$i = $876;
         }
        } while(0);
        $877 = (75244 + ($I7$0$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $I7$0$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(74944)>>2]|0;
        $882 = 1 << $I7$0$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(74944)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ($I7$0$i$i|0)==(31);
        $891 = $I7$0$i$i >>> 1;
        $892 = (25 - ($891))|0;
        $893 = $890 ? 0 : $892;
        $894 = $qsize$0$i$i << $893;
        $K8$0$i$i = $894;$T$0$i18$i = $889;
        while(1) {
         $895 = ((($T$0$i18$i)) + 4|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & -8;
         $898 = ($897|0)==($qsize$0$i$i|0);
         if ($898) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 279;
          break;
         }
         $899 = $K8$0$i$i >>> 31;
         $900 = (((($T$0$i18$i)) + 16|0) + ($899<<2)|0);
         $901 = $K8$0$i$i << 1;
         $902 = HEAP32[$900>>2]|0;
         $903 = ($902|0)==(0|0);
         if ($903) {
          $$lcssa = $900;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 276;
          break;
         } else {
          $K8$0$i$i = $901;$T$0$i18$i = $902;
         }
        }
        if ((label|0) == 276) {
         $904 = HEAP32[(74956)>>2]|0;
         $905 = ($$lcssa>>>0)<($904>>>0);
         if ($905) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $722;
          $906 = ((($722)) + 24|0);
          HEAP32[$906>>2] = $T$0$i18$i$lcssa139;
          $907 = ((($722)) + 12|0);
          HEAP32[$907>>2] = $722;
          $908 = ((($722)) + 8|0);
          HEAP32[$908>>2] = $722;
          break;
         }
        }
        else if ((label|0) == 279) {
         $909 = ((($T$0$i18$i$lcssa)) + 8|0);
         $910 = HEAP32[$909>>2]|0;
         $911 = HEAP32[(74956)>>2]|0;
         $912 = ($910>>>0)>=($911>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($911>>>0);
         $913 = $912 & $not$$i20$i;
         if ($913) {
          $914 = ((($910)) + 12|0);
          HEAP32[$914>>2] = $722;
          HEAP32[$909>>2] = $722;
          $915 = ((($722)) + 8|0);
          HEAP32[$915>>2] = $910;
          $916 = ((($722)) + 12|0);
          HEAP32[$916>>2] = $T$0$i18$i$lcssa;
          $917 = ((($722)) + 24|0);
          HEAP32[$917>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1048 = ((($710)) + 8|0);
      $$0 = $1048;
      STACKTOP = sp;return ($$0|0);
     } else {
      $sp$0$i$i$i = (75388);
     }
    }
    while(1) {
     $918 = HEAP32[$sp$0$i$i$i>>2]|0;
     $919 = ($918>>>0)>($631>>>0);
     if (!($919)) {
      $920 = ((($sp$0$i$i$i)) + 4|0);
      $921 = HEAP32[$920>>2]|0;
      $922 = (($918) + ($921)|0);
      $923 = ($922>>>0)>($631>>>0);
      if ($923) {
       $$lcssa142 = $922;
       break;
      }
     }
     $924 = ((($sp$0$i$i$i)) + 8|0);
     $925 = HEAP32[$924>>2]|0;
     $sp$0$i$i$i = $925;
    }
    $926 = ((($$lcssa142)) + -47|0);
    $927 = ((($926)) + 8|0);
    $928 = $927;
    $929 = $928 & 7;
    $930 = ($929|0)==(0);
    $931 = (0 - ($928))|0;
    $932 = $931 & 7;
    $933 = $930 ? 0 : $932;
    $934 = (($926) + ($933)|0);
    $935 = ((($631)) + 16|0);
    $936 = ($934>>>0)<($935>>>0);
    $937 = $936 ? $631 : $934;
    $938 = ((($937)) + 8|0);
    $939 = ((($937)) + 24|0);
    $940 = (($tsize$745$i) + -40)|0;
    $941 = ((($tbase$746$i)) + 8|0);
    $942 = $941;
    $943 = $942 & 7;
    $944 = ($943|0)==(0);
    $945 = (0 - ($942))|0;
    $946 = $945 & 7;
    $947 = $944 ? 0 : $946;
    $948 = (($tbase$746$i) + ($947)|0);
    $949 = (($940) - ($947))|0;
    HEAP32[(74964)>>2] = $948;
    HEAP32[(74952)>>2] = $949;
    $950 = $949 | 1;
    $951 = ((($948)) + 4|0);
    HEAP32[$951>>2] = $950;
    $952 = (($948) + ($949)|0);
    $953 = ((($952)) + 4|0);
    HEAP32[$953>>2] = 40;
    $954 = HEAP32[(75428)>>2]|0;
    HEAP32[(74968)>>2] = $954;
    $955 = ((($937)) + 4|0);
    HEAP32[$955>>2] = 27;
    ;HEAP32[$938>>2]=HEAP32[(75388)>>2]|0;HEAP32[$938+4>>2]=HEAP32[(75388)+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[(75388)+8>>2]|0;HEAP32[$938+12>>2]=HEAP32[(75388)+12>>2]|0;
    HEAP32[(75388)>>2] = $tbase$746$i;
    HEAP32[(75392)>>2] = $tsize$745$i;
    HEAP32[(75400)>>2] = 0;
    HEAP32[(75396)>>2] = $938;
    $p$0$i$i = $939;
    while(1) {
     $956 = ((($p$0$i$i)) + 4|0);
     HEAP32[$956>>2] = 7;
     $957 = ((($956)) + 4|0);
     $958 = ($957>>>0)<($$lcssa142>>>0);
     if ($958) {
      $p$0$i$i = $956;
     } else {
      break;
     }
    }
    $959 = ($937|0)==($631|0);
    if (!($959)) {
     $960 = $937;
     $961 = $631;
     $962 = (($960) - ($961))|0;
     $963 = HEAP32[$955>>2]|0;
     $964 = $963 & -2;
     HEAP32[$955>>2] = $964;
     $965 = $962 | 1;
     $966 = ((($631)) + 4|0);
     HEAP32[$966>>2] = $965;
     HEAP32[$937>>2] = $962;
     $967 = $962 >>> 3;
     $968 = ($962>>>0)<(256);
     if ($968) {
      $969 = $967 << 1;
      $970 = (74980 + ($969<<2)|0);
      $971 = HEAP32[18735]|0;
      $972 = 1 << $967;
      $973 = $971 & $972;
      $974 = ($973|0)==(0);
      if ($974) {
       $975 = $971 | $972;
       HEAP32[18735] = $975;
       $$pre$i$i = ((($970)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $970;
      } else {
       $976 = ((($970)) + 8|0);
       $977 = HEAP32[$976>>2]|0;
       $978 = HEAP32[(74956)>>2]|0;
       $979 = ($977>>>0)<($978>>>0);
       if ($979) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $976;$F$0$i$i = $977;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $631;
      $980 = ((($F$0$i$i)) + 12|0);
      HEAP32[$980>>2] = $631;
      $981 = ((($631)) + 8|0);
      HEAP32[$981>>2] = $F$0$i$i;
      $982 = ((($631)) + 12|0);
      HEAP32[$982>>2] = $970;
      break;
     }
     $983 = $962 >>> 8;
     $984 = ($983|0)==(0);
     if ($984) {
      $I1$0$i$i = 0;
     } else {
      $985 = ($962>>>0)>(16777215);
      if ($985) {
       $I1$0$i$i = 31;
      } else {
       $986 = (($983) + 1048320)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 8;
       $989 = $983 << $988;
       $990 = (($989) + 520192)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 4;
       $993 = $992 | $988;
       $994 = $989 << $992;
       $995 = (($994) + 245760)|0;
       $996 = $995 >>> 16;
       $997 = $996 & 2;
       $998 = $993 | $997;
       $999 = (14 - ($998))|0;
       $1000 = $994 << $997;
       $1001 = $1000 >>> 15;
       $1002 = (($999) + ($1001))|0;
       $1003 = $1002 << 1;
       $1004 = (($1002) + 7)|0;
       $1005 = $962 >>> $1004;
       $1006 = $1005 & 1;
       $1007 = $1006 | $1003;
       $I1$0$i$i = $1007;
      }
     }
     $1008 = (75244 + ($I1$0$i$i<<2)|0);
     $1009 = ((($631)) + 28|0);
     HEAP32[$1009>>2] = $I1$0$i$i;
     $1010 = ((($631)) + 20|0);
     HEAP32[$1010>>2] = 0;
     HEAP32[$935>>2] = 0;
     $1011 = HEAP32[(74944)>>2]|0;
     $1012 = 1 << $I1$0$i$i;
     $1013 = $1011 & $1012;
     $1014 = ($1013|0)==(0);
     if ($1014) {
      $1015 = $1011 | $1012;
      HEAP32[(74944)>>2] = $1015;
      HEAP32[$1008>>2] = $631;
      $1016 = ((($631)) + 24|0);
      HEAP32[$1016>>2] = $1008;
      $1017 = ((($631)) + 12|0);
      HEAP32[$1017>>2] = $631;
      $1018 = ((($631)) + 8|0);
      HEAP32[$1018>>2] = $631;
      break;
     }
     $1019 = HEAP32[$1008>>2]|0;
     $1020 = ($I1$0$i$i|0)==(31);
     $1021 = $I1$0$i$i >>> 1;
     $1022 = (25 - ($1021))|0;
     $1023 = $1020 ? 0 : $1022;
     $1024 = $962 << $1023;
     $K2$0$i$i = $1024;$T$0$i$i = $1019;
     while(1) {
      $1025 = ((($T$0$i$i)) + 4|0);
      $1026 = HEAP32[$1025>>2]|0;
      $1027 = $1026 & -8;
      $1028 = ($1027|0)==($962|0);
      if ($1028) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 305;
       break;
      }
      $1029 = $K2$0$i$i >>> 31;
      $1030 = (((($T$0$i$i)) + 16|0) + ($1029<<2)|0);
      $1031 = $K2$0$i$i << 1;
      $1032 = HEAP32[$1030>>2]|0;
      $1033 = ($1032|0)==(0|0);
      if ($1033) {
       $$lcssa141 = $1030;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 302;
       break;
      } else {
       $K2$0$i$i = $1031;$T$0$i$i = $1032;
      }
     }
     if ((label|0) == 302) {
      $1034 = HEAP32[(74956)>>2]|0;
      $1035 = ($$lcssa141>>>0)<($1034>>>0);
      if ($1035) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $631;
       $1036 = ((($631)) + 24|0);
       HEAP32[$1036>>2] = $T$0$i$i$lcssa140;
       $1037 = ((($631)) + 12|0);
       HEAP32[$1037>>2] = $631;
       $1038 = ((($631)) + 8|0);
       HEAP32[$1038>>2] = $631;
       break;
      }
     }
     else if ((label|0) == 305) {
      $1039 = ((($T$0$i$i$lcssa)) + 8|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = HEAP32[(74956)>>2]|0;
      $1042 = ($1040>>>0)>=($1041>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1041>>>0);
      $1043 = $1042 & $not$$i$i;
      if ($1043) {
       $1044 = ((($1040)) + 12|0);
       HEAP32[$1044>>2] = $631;
       HEAP32[$1039>>2] = $631;
       $1045 = ((($631)) + 8|0);
       HEAP32[$1045>>2] = $1040;
       $1046 = ((($631)) + 12|0);
       HEAP32[$1046>>2] = $T$0$i$i$lcssa;
       $1047 = ((($631)) + 24|0);
       HEAP32[$1047>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1049 = HEAP32[(74952)>>2]|0;
  $1050 = ($1049>>>0)>($nb$0>>>0);
  if ($1050) {
   $1051 = (($1049) - ($nb$0))|0;
   HEAP32[(74952)>>2] = $1051;
   $1052 = HEAP32[(74964)>>2]|0;
   $1053 = (($1052) + ($nb$0)|0);
   HEAP32[(74964)>>2] = $1053;
   $1054 = $1051 | 1;
   $1055 = ((($1053)) + 4|0);
   HEAP32[$1055>>2] = $1054;
   $1056 = $nb$0 | 3;
   $1057 = ((($1052)) + 4|0);
   HEAP32[$1057>>2] = $1056;
   $1058 = ((($1052)) + 8|0);
   $$0 = $1058;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1059 = (___errno_location()|0);
 HEAP32[$1059>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(74956)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(74960)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(74948)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (74980 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[18735]|0;
     $37 = $36 & $35;
     HEAP32[18735] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (75244 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(74944)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(74944)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(74956)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(74956)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(74956)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(74964)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(74952)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(74952)>>2] = $122;
   HEAP32[(74964)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(74960)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(74960)>>2] = 0;
   HEAP32[(74948)>>2] = 0;
   return;
  }
  $127 = HEAP32[(74960)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(74948)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(74948)>>2] = $130;
   HEAP32[(74960)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (74980 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(74956)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[18735]|0;
     $154 = $153 & $152;
     HEAP32[18735] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(74956)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(74956)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(74956)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (75244 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(74944)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(74944)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(74956)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(74956)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(74956)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(74960)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(74948)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (74980 + ($235<<2)|0);
  $237 = HEAP32[18735]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[18735] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(74956)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (75244 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(74944)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(74944)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(74956)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(74956)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(74972)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(74972)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (75396);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(74972)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(74956)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(75420)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(74964)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(74952)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(74964)>>2] = $38;
  HEAP32[(74952)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(74960)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(74948)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(74948)>>2] = $storemerge1;
  HEAP32[(74960)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (74980 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[18735]|0;
    $91 = $90 & $89;
    HEAP32[18735] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (75244 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(74944)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(74944)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(74956)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(74956)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(74956)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(74956)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(74960)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(74948)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (74980 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[18735]|0;
     $32 = $31 & $30;
     HEAP32[18735] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (75244 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(74944)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(74944)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(74956)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(74956)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(74956)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(74956)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(74964)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(74952)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(74952)>>2] = $116;
   HEAP32[(74964)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(74960)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(74960)>>2] = 0;
   HEAP32[(74948)>>2] = 0;
   return;
  }
  $121 = HEAP32[(74960)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(74948)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(74948)>>2] = $124;
   HEAP32[(74960)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (74980 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[18735]|0;
     $147 = $146 & $145;
     HEAP32[18735] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (75244 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(74944)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(74944)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(74956)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(74956)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(74956)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(74960)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(74948)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (74980 + ($225<<2)|0);
  $227 = HEAP32[18735]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[18735] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(74956)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (75244 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(74944)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(74944)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(74956)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(74956)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(1);
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mrb_method_search_vm,_mrb_intern_static,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mrb_realloc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,_mrb_int_add_overflow_439,b0,_mrb_int_sub_overflow_440,b0,_mrb_obj_eq,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mrb_vm_define_module,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,_scope_new,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_mrb_funcall_with_block,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_mrb_range_new,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_cipop,b3,_stack_init,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_mrb_nil_value_419,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,_mrb_pool_close,_cleanup_522,_cleanup_517,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_mrb_obj_value_420,b4,b4,_mrb_fixnum_value_421,b4,b4,b4,b4,b4,b4,_mrb_symbol_value_427,b4,b4,_mrb_gc_arena_restore,b4,_mrb_gc_protect
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_mrb_write_barrier,b4,b4,_ecall,b4,b4,b4,b4,b4,b4,b4,b4,_argnum_error,b4,b4,_emscripten_longjmp__wrapper,b4,_localjump_error,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_parser_init_cxt,b4,b4,_parser_update_cxt,b4,_yyerror,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,_mrb_irep_decref,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,___stdio_close,b5,b5,b5,b5,b5,_partial_hook,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_cipush,b5,b5,b5,_mrb_gc_arena_save,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_yyparse,_new_nil,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,_gc_start,_gc_enable,_gc_disable,_gc_interval_ratio_get,_gc_interval_ratio_set,_gc_step_ratio_get,_gc_step_ratio_set,_gc_generational_mode_set,_gc_generational_mode_get,_mrb_hash_aget,_mrb_hash_aset,_mrb_hash_clear,_mrb_hash_default,_mrb_hash_set_default,_mrb_hash_default_proc,_mrb_hash_set_default_proc,_mrb_hash_delete,_mrb_hash_empty_p,_mrb_hash_has_key,_mrb_hash_has_value,_mrb_hash_init
,_mrb_hash_keys,_mrb_hash_size_m,_mrb_hash_shift,_mrb_hash_dup,_mrb_hash_values,_mrb_hash_to_hash,_num_pow,_num_div,_num_cmp,_int_to_i,_fix_plus,_fix_minus,_fix_mul,_fix_mod,_fix_equal,_fix_rev,_fix_and,_fix_or,_fix_xor,_fix_lshift,_fix_rshift,_fix_eql,_flo_hash,_fix_to_f,_fix_to_s,_fix_divmod,_flo_plus,_flo_minus,_flo_mul,_flo_mod
,_flo_eq,_flo_ceil,_flo_finite_p,_flo_floor,_flo_infinite_p,_flo_round,_flo_to_f,_flo_truncate,_flo_divmod,_flo_eql,_flo_to_s,_flo_nan_p,_false_and,_false_xor,_false_or,_mrb_true,_nil_to_s,_nil_inspect,_true_and,_true_xor,_true_to_s,_true_or,_false_to_s,b6,_inspect_main,_mrb_str_bytesize,_mrb_str_cmp_m,_mrb_str_equal_m,_mrb_str_plus_m,_mrb_str_times
,_mrb_str_aref_m,_mrb_str_capitalize,_mrb_str_capitalize_bang,_mrb_str_chomp,_mrb_str_chomp_bang,_mrb_str_chop,_mrb_str_chop_bang,_mrb_str_downcase,_mrb_str_downcase_bang,_mrb_str_empty_p,_mrb_str_eql,_mrb_str_hash_m,_mrb_str_include,_mrb_str_index,_mrb_str_init,_mrb_str_replace,_mrb_str_intern,_mrb_str_size,_mrb_str_reverse,_mrb_str_reverse_bang,_mrb_str_rindex,_mrb_str_split_m,_mrb_str_to_f,_mrb_str_to_i,_mrb_str_to_s,_mrb_str_upcase,_mrb_str_upcase_bang,_mrb_str_inspect,_mrb_str_bytes,_mrb_str_freeze
,_sym_equal,_mrb_sym_to_s,_sym_to_sym,_sym_inspect,_sym_cmp,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_stack_extend,b6,_stack_copy,b6,b6,b6,b6
,_mrb_gv_get,_mrb_gv_set,_mrb_vm_special_get,_mrb_vm_special_set,_mrb_vm_iv_get,_mrb_vm_iv_set,_mrb_vm_cv_get,_mrb_vm_cv_set,_mrb_vm_const_get,_mrb_vm_const_set,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_value_move,b6,b6,_mrb_ary_new_capa,b6,b6,_mrb_cptr_value,b6,b6
,b6,b6,b6,b6,b6,b6,b6,_mrb_ary_splat,_mrb_ary_concat,_mrb_ary_push,b6,b6,_mrb_str_dup,_mrb_str_concat,_mrb_hash_new_capa,b6,b6,b6,b6,b6,_mrb_singleton_class,b6,b6,b6,b6,b6,b6,_mrb_parser_dump,b6,_mrb_ary_s_create
,_mrb_ary_plus,_mrb_ary_times,_mrb_ary_push_m,_mrb_ary_aget,_mrb_ary_aset,_mrb_ary_clear,_mrb_ary_concat_m,_mrb_ary_delete_at,_mrb_ary_empty_p,_mrb_ary_first,_mrb_ary_index_m,_mrb_ary_replace_m,_mrb_ary_join_m,_mrb_ary_last,_mrb_ary_size,_mrb_ary_pop,_mrb_ary_reverse,_mrb_ary_reverse_bang,_mrb_ary_rindex_m,_mrb_ary_shift,_mrb_ary_unshift_m,_mrb_ary_eq,_mrb_ary_cmp,_get_backtrace_i,_mrb_bob_init,_mrb_bob_not,_mrb_bob_missing,_mrb_class_new_class,_mrb_class_superclass,_mrb_instance_new
,_mrb_class_initialize,_mrb_mod_cvar_defined,_mrb_mod_cvar_get,_mrb_mod_cvar_set,_mrb_mod_extend_object,_mrb_mod_prepend,_mrb_mod_prepend_features,_mrb_mod_include,_mrb_mod_include_p,_mrb_mod_append_features,_mrb_mod_module_eval,_mrb_mod_included_modules,_mrb_mod_initialize,_mrb_mod_instance_methods,_mrb_mod_method_defined,_mrb_mod_module_function,_mrb_mod_dummy_visibility,_mrb_mod_remove_cvar,_mrb_mod_remove_method,_mrb_mod_attr_reader,_mrb_mod_attr_writer,_mrb_mod_to_s,_mrb_mod_alias,_mrb_mod_ancestors,_mrb_mod_undef,_mrb_mod_const_defined,_mrb_mod_const_get,_mrb_mod_const_set,_mrb_mod_constants,_mrb_mod_remove_const
,_mrb_mod_const_missing,_mod_define_method,_mrb_mod_class_variables,_mrb_mod_eqq,_mrb_mod_s_constants,_attr_reader,_attr_writer,_exc_exception,_exc_initialize,_exc_to_s,_exc_message,_exc_inspect,_mrb_exc_backtrace,_mrb_any_to_s,_mrb_f_block_given_p_m,_mrb_f_global_variables,_mrb_local_variables,_mrb_f_raise,_mrb_obj_equal_m,_mrb_obj_not_equal_m,_mrb_equal_m,_mrb_obj_id_m,_mrb_f_send,_mrb_obj_class_m,_mrb_obj_clone,_mrb_obj_dup,_mrb_obj_extend_m,_mrb_obj_hash,_mrb_obj_init_copy,_mrb_obj_inspect
,_mrb_obj_instance_eval,_obj_is_instance_of,_mrb_obj_ivar_defined,_mrb_obj_ivar_get,_mrb_obj_ivar_set,_mrb_obj_instance_variables,_mrb_obj_is_kind_of_m,_mrb_obj_methods_m,_mrb_false,_mrb_obj_private_methods,_mrb_obj_protected_methods,_mrb_obj_public_methods,_mrb_obj_remove_instance_variable,_obj_respond_to,_mrb_obj_singleton_methods_m,_mod_define_singleton_method,_mrb_obj_ceqq,_mrb_proc_initialize,_mrb_proc_init_copy,_mrb_proc_arity,_proc_lambda,_mrb_range_beg,_mrb_range_end,_mrb_range_eq,_mrb_range_include,_mrb_range_excl,_mrb_range_initialize,_range_to_s,_range_inspect,_range_eql
,_range_initialize_copy,b6,_codegen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_mrb_default_allocf,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,_iv_mark_i,_inspect_i,_iv_i,_cv_i,_const_i,_gv_i,_csym_i,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_mrb_vm_define_class,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_mrb_convert_type,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_mrb_class_get,b9,b9,_mrb_class_423,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_uvenv,b9,b9,b9,_mrb_closure_new,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,_top_env,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_mrb_proc_new,b9,b9,b9,b9,b9,_printf,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_mrb_raisef,b10,b10,b10,b10,b10,b10,b10,b10,b10,_mrb_run,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_mrb_const_get,_mrb_const_set,b10,b10,b10,b10,b10,b10,_mrb_ary_new_from_values,_mrb_method_missing,_mrb_ary_unshift,b10,_mrb_str_new_static,_mrb_exc_new_str,b10,b10,b10,b10,_mrb_obj_iv_ifnone,b10
,b10,b10,b10,_mrb_str_plus,b10,_mrb_fixnum_mul,b10,b10,b10,b10,_mrb_ary_ref,_mrb_ary_set,b10,b10,b10,_mrb_hash_set,b10,b10,b10,_mrb_define_method_raw,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];

  return { _main: _main, _llvm_cttz_i32: _llvm_cttz_i32, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _memset: _memset, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _realloc: _realloc, _i64Add: _i64Add, _pthread_self: _pthread_self, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _memmove: _memmove, _malloc: _malloc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



};

